// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1Ru6g":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "d55e36b52bce1fe737605e046187e712";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] ✨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"5LP9v":[function(require,module,exports) {
var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _react = require("react");
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _reactDom = require("react-dom");
  var _reactDomDefault = _parcelHelpers.interopDefault(_reactDom);
  var _azureMsalReact = require("@azure/msal-react");
  var _xrmtoolboxwebCore = require("xrmtoolboxweb-core");
  var _app = require("./app");
  var _jsxFileName = "/Users/softphone/WORKSPACES/GITHUB.me/MSFT/XrmToolboxWeb/packages/RetrieveAllEntities/src/index.tsx";
  // Component
  const AppProvider = () => /*#__PURE__*/_reactDefault.default.createElement(_azureMsalReact.MsalProvider, {
    instance: _xrmtoolboxwebCore.PCA,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 5
    }
  }, /*#__PURE__*/_reactDefault.default.createElement(_app.App, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 9
    }
  }));
  _reactDomDefault.default.render(/*#__PURE__*/_reactDefault.default.createElement(AppProvider, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 17
    }
  }), document.getElementById("root"));
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}

},{"react":"4g1R3","react-dom":"3FeWS","@azure/msal-react":"5gJEu","xrmtoolboxweb-core":"3kFhw","./app":"6bpGb","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP","../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"Q8h6l"}],"4g1R3":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}

},{"./cjs/react.development.js":"fBkKR"}],"fBkKR":[function(require,module,exports) {
/** @license React v17.0.2
* react.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    exports.Fragment = 0xeacb;
    exports.StrictMode = 0xeacc;
    exports.Profiler = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    exports.Suspense = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      exports.Fragment = symbolFor('react.fragment');
      exports.StrictMode = symbolFor('react.strict_mode');
      exports.Profiler = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      exports.Suspense = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }
    /**
    * Keeps track of the current dispatcher.
    */
    var ReactCurrentDispatcher = {
      /**
      * @internal
      * @type {ReactComponent}
      */
      current: null
    };
    /**
    * Keeps track of the current batch's configuration such as how long an update
    * should suspend for if it needs to.
    */
    var ReactCurrentBatchConfig = {
      transition: 0
    };
    /**
    * Keeps track of the current owner.
    *
    * The current owner is the component who should own any components that are
    * currently being constructed.
    */
    var ReactCurrentOwner = {
      /**
      * @internal
      * @type {ReactComponent}
      */
      current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
      {
        currentExtraStackFrame = stack;
      }
    }
    {
      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
        {
          currentExtraStackFrame = stack;
        }
      };
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;
      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = '';
        // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) {
          stack += currentExtraStackFrame;
        }
        // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }
        return stack;
      };
          /**
      * Used by act() to track whether you're inside an act() scope.
      */
}
    /**
    * Used by act() to track whether you're inside an act() scope.
    */
    var IsSomeRendererActing = {
      current: false
    };
    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
      ReactCurrentOwner: ReactCurrentOwner,
      IsSomeRendererActing: IsSomeRendererActing,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          // by calls to these methods by a Babel plugin.
      // 
      // In PROD (or in packages without access to React internals),
      // they are left as they are instead.
}
    // by calls to these methods by a Babel plugin.
    // 
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        printWarning('warn', format, args);
      }
    }
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        printWarning('error', format, args);
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function (item) {
          return '' + item;
        });
        // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format);
        // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
    * This is the abstract API for an update queue.
    */
    var ReactNoopUpdateQueue = {
      /**
      * Checks whether or not this composite component is mounted.
      * @param {ReactClass} publicInstance The instance we want to test.
      * @return {boolean} True if mounted, false otherwise.
      * @protected
      * @final
      */
      isMounted: function (publicInstance) {
        return false;
      },
      /**
      * Forces an update. This should only be invoked when it is known with
      * certainty that we are **not** in a DOM transaction.
      *
      * You may want to call this when you know that some deeper aspect of the
      * component's state has changed but `setState` was not called.
      *
      * This will not invoke `shouldComponentUpdate`, but it will invoke
      * `componentWillUpdate` and `componentDidUpdate`.
      *
      * @param {ReactClass} publicInstance The instance that should rerender.
      * @param {?function} callback Called after component is updated.
      * @param {?string} callerName name of the calling function in the public API.
      * @internal
      */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },
      /**
      * Replaces all of the state. Always use this or `setState` to mutate state.
      * You should treat `this.state` as immutable.
      *
      * There is no guarantee that `this.state` will be immediately updated, so
      * accessing `this.state` after calling this method may return the old value.
      *
      * @param {ReactClass} publicInstance The instance that should rerender.
      * @param {object} completeState Next state.
      * @param {?function} callback Called after component is updated.
      * @param {?string} callerName name of the calling function in the public API.
      * @internal
      */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },
      /**
      * Sets a subset of the state. This only exists because _pendingState is
      * internal. This provides a merging strategy that is not available to deep
      * properties which is confusing. TODO: Expose pendingState or don't use it
      * during the merge.
      *
      * @param {ReactClass} publicInstance The instance that should rerender.
      * @param {object} partialState Next partial state to be merged with state.
      * @param {?function} callback Called after component is updated.
      * @param {?string} Name of the calling function in the public API.
      * @internal
      */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
          /**
      * Base class helpers for the updating state of a component.
      */
}
    /**
    * Base class helpers for the updating state of a component.
    */
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
    * Sets a subset of the state. Always use this to mutate
    * state. You should treat `this.state` as immutable.
    *
    * There is no guarantee that `this.state` will be immediately updated, so
    * accessing `this.state` after calling this method may return the old value.
    *
    * There is no guarantee that calls to `setState` will run synchronously,
    * as they may eventually be batched together.  You can provide an optional
    * callback that will be executed when the call to setState is actually
    * completed.
    *
    * When a function is provided to setState, it will be called at some point in
    * the future (not synchronously). It will be called with the up to date
    * component arguments (state, props, context). These values can be different
    * from this.* because your function may be called after receiveProps but before
    * shouldComponentUpdate, and this new state, props, and context will not yet be
    * assigned to this.
    *
    * @param {object|function} partialState Next partial state or function to
    *        produce next partial state to be merged with current state.
    * @param {?function} callback Called after state is updated.
    * @final
    * @protected
    */
    Component.prototype.setState = function (partialState, callback) {
      if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
        {
          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
      }
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
    * Forces an update. This should only be invoked when it is known with
    * certainty that we are **not** in a DOM transaction.
    *
    * You may want to call this when you know that some deeper aspect of the
    * component's state has changed but `setState` was not called.
    *
    * This will not invoke `shouldComponentUpdate`, but it will invoke
    * `componentWillUpdate` and `componentDidUpdate`.
    *
    * @param {?function} callback Called after update is complete.
    * @final
    * @protected
    */
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
    * Deprecated APIs. These APIs used to exist on classic React classes but since
    * we would like to deprecate them, we're not going to move them over to this
    * modern base class. Instead, we define a getter that warns if it's accessed.
    */
    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
    * Convenience component with default shallow equality check for sCU.
    */
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
      return type.displayName || 'Context';
    }
    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case exports.Fragment:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case exports.Profiler:
          return 'Profiler';
        case exports.StrictMode:
          return 'StrictMode';
        case exports.Suspense:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_BLOCK_TYPE:
            return getComponentName(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
        }
      }
      return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentName(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    /**
    * Factory method to create a new React element. This no longer adheres to
    * the class pattern, so do not use new to call it. Also, instanceof check
    * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
    * if something is a React Element.
    *
    * @param {*} type
    * @param {*} props
    * @param {*} key
    * @param {string|object} ref
    * @param {*} owner
    * @param {*} self A *temporary* helper to detect places where `this` is
    * different from the `owner` when React.createElement is called, so that we
    * can warn. We want to get rid of owner and replace string `ref`s with arrow
    * functions, and as long as `this` and owner are the same, there will be no
    * change in behavior.
    * @param {*} source An annotation object (added by a transpiler or otherwise)
    * indicating filename, line number, and/or other information.
    * @internal
    */
    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};
        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
    * Create and return a new ReactElement of the given type.
    * See https://reactjs.org/docs/react-api.html#createelement
    */
    function createElement(type, config, children) {
      var propName;
      // Reserved names are extracted
      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;
      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
          {
            warnIfStringRefCannotBeAutoConverted(config);
          }
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }
        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }
      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      }
      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
    * Clone and return a new ReactElement using element as the starting point.
    * See https://reactjs.org/docs/react-api.html#cloneelement
    */
    function cloneElement(element, config, children) {
      if (!!(element === null || element === undefined)) {
        {
          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
      }
      var propName;
      // Original props are copied
      var props = _assign({}, element.props);
      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;
      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;
      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }
        // Remaining properties override existing props
        var defaultProps;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }
      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }
      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
    * Verifies the object is a ReactElement.
    * See https://reactjs.org/docs/react-api.html#isvalidelement
    * @param {?object} object
    * @return {boolean} True if `object` is a ReactElement.
    * @final
    */
    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
    * Escape and wrap key so it is safe to use as a reactid
    *
    * @param {string} key to be escaped.
    * @return {string} the escaped key.
    */
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = key.replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
    * TODO: Test that a single child and an array with one item have the same key
    * pattern.
    */
    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
    * Generate a key string that identifies a element within a set.
    *
    * @param {*} element A element that could contain a manual key.
    * @param {number} index Index that is used if a manual key is not provided.
    * @return {string}
    */
    function getElementKey(element, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof element === 'object' && element !== null && element.key != null) {
        // Explicit key
        return escape('' + element.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }
      var invokeCallback = false;
      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }
      if (invokeCallback) {
        var _child = children;
        var mappedChild = callback(_child);
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows:
        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
        if (Array.isArray(mappedChild)) {
          var escapedChildKey = '';
          if (childKey != null) {
            escapedChildKey = escapeUserProvidedKey(childKey) + '/';
          }
          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
            return c;
          });
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            escapedPrefix + (// $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
            mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
          }
          array.push(mappedChild);
        }
        return 1;
      }
      var child;
      var nextName;
      var subtreeCount = 0;
      // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getElementKey(child, i);
          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          var iterableChildren = children;
          {
            // Warn about using Maps as children
            if (iteratorFn === iterableChildren.entries) {
              if (!didWarnAboutMaps) {
                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
              }
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(iterableChildren);
          var step;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getElementKey(child, ii++);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else if (type === 'object') {
          var childrenString = '' + children;
          {
            {
              throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
        }
      }
      return subtreeCount;
    }
    /**
    * Maps children that are typically specified as `props.children`.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrenmap
    *
    * The provided mapFunction(child, index) will be called for each
    * leaf child.
    *
    * @param {?*} children Children tree container.
    * @param {function(*, int)} func The map function.
    * @param {*} context Context for mapFunction.
    * @return {object} Object containing the ordered map of results.
    */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      var count = 0;
      mapIntoArray(children, result, '', '', function (child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    /**
    * Count the number of children that are typically specified as
    * `props.children`.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrencount
    *
    * @param {?*} children Children tree container.
    * @return {number} The number of children.
    */
    function countChildren(children) {
      var n = 0;
      mapChildren(children, function () {
        n++;
      });
      return n;
    }
    /**
    * Iterates through children that are typically specified as `props.children`.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
    *
    * The provided forEachFunc(child, index) will be called for each
    * leaf child.
    *
    * @param {?*} children Children tree container.
    * @param {function(*, int)} forEachFunc
    * @param {*} forEachContext Context for forEachContext.
    */
    function forEachChildren(children, forEachFunc, forEachContext) {
      mapChildren(children, function () {
        forEachFunc.apply(this, arguments);
      }, forEachContext);
    }
    /**
    * Flatten a children object (typically specified as `props.children`) and
    * return an array with appropriately re-keyed children.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
    */
    function toArray(children) {
      return mapChildren(children, function (child) {
        return child;
      }) || [];
    }
    /**
    * Returns the first child in a collection of children and verifies that there
    * is only one child in the collection.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrenonly
    *
    * The current implementation of this function assumes that a single child gets
    * passed without a wrapper, but the purpose of this helper function is to
    * abstract away the particular structure of children.
    *
    * @param {?object} children Child collection structure.
    * @return {ReactElement} The first and only `ReactElement` contained in the
    * structure.
    */
    function onlyChild(children) {
      if (!isValidElement(children)) {
        {
          throw Error("React.Children.only expected to receive a single React element child.");
        }
      }
      return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
            error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
          }
        }
      }
      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      var hasWarnedAboutDisplayNameOnConsumer = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        };
        // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          },
          displayName: {
            get: function () {
              return context.displayName;
            },
            set: function (displayName) {
              if (!hasWarnedAboutDisplayNameOnConsumer) {
                warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                hasWarnedAboutDisplayNameOnConsumer = true;
              }
            }
          }
        });
        // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
      if (payload._status === Uninitialized) {
        var ctor = payload._result;
        var thenable = ctor();
        // Transition to the next state.
        var pending = payload;
        pending._status = Pending;
        pending._result = thenable;
        thenable.then(function (moduleObject) {
          if (payload._status === Pending) {
            var defaultExport = moduleObject.default;
            {
              if (defaultExport === undefined) {
                error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
                'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
              }
                          // Transition to the next state.
}
            // Transition to the next state.
            var resolved = payload;
            resolved._status = Resolved;
            resolved._result = defaultExport;
          }
        }, function (error) {
          if (payload._status === Pending) {
            // Transition to the next state.
            var rejected = payload;
            rejected._status = Rejected;
            rejected._result = error;
          }
        });
      }
      if (payload._status === Resolved) {
        return payload._result;
      } else {
        throw payload._result;
      }
    }
    function lazy(ctor) {
      var payload = {
        // We use these fields to store the result.
        _status: -1,
        _result: ctor
      };
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _payload: payload,
        _init: lazyInitializer
      };
      {
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes;
        // $FlowFixMe
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps;
              // Match production behavior more closely:
              // $FlowFixMe
              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes;
              // Match production behavior more closely:
              // $FlowFixMe
              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }
    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          if (render.length !== 0 && render.length !== 2) {
            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
          }
        }
        if (render != null) {
          if (render.defaultProps != null || render.propTypes != null) {
            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
          }
        }
      }
      var elementType = {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function () {
            return ownName;
          },
          set: function (name) {
            ownName = name;
            if (render.displayName == null) {
              render.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false;
    // Experimental Create Event Handle API.
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      }
      // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
      if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
        return true;
      }
      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
          return true;
        }
      }
      return false;
    }
    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      var elementType = {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function () {
            return ownName;
          },
          set: function (name) {
            ownName = name;
            if (type.displayName == null) {
              type.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      if (!(dispatcher !== null)) {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }
      return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();
      {
        if (unstable_observedBits !== undefined) {
          error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
        }
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
          var realContext = Context._context;
          // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.
          if (realContext.Consumer === Context) {
            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          // https://github.com/facebook/react/issues/19099
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            log: _assign({}, props, {
              value: prevLog
            }),
            info: _assign({}, props, {
              value: prevInfo
            }),
            warn: _assign({}, props, {
              value: prevWarn
            }),
            error: _assign({}, props, {
              value: prevError
            }),
            group: _assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: _assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: _assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }
        // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      // $FlowFixMe It does accept undefined.
      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher$1.current;
        // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function () {
            throw Error();
          };
          // $FlowFixMe
          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if (typeof Reflect === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; (s--, c--)) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                                          // Return the line we found.
}
                    // Return the line we found.
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher$1.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      // Fallback to just using the name if we couldn't make it throw.
      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case exports.Suspense:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_BLOCK_TYPE:
            return describeFunctionComponentFrame(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !((error$1.message in loggedTypeFailures))) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else {
          setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }
    function getSourceInfoErrorAddendum(source) {
      if (source !== undefined) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
      if (elementProps !== null && elementProps !== undefined) {
        return getSourceInfoErrorAddendum(elementProps.__source);
      }
      return '';
    }
    /**
    * Warn if there's no key explicitly set on dynamic arrays of children or
    * object keys are not valid. This allows us to keep track of children between
    * updates.
    */
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();
      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
      }
      return info;
    }
    /**
    * Warn if the element doesn't have an explicit key assigned to it.
    * This element is in an array. The array could grow and shrink or be
    * reordered. All children that haven't already been validated are required to
    * have a "key" property assigned to it. Error statuses are cached so a warning
    * will only be shown once.
    *
    * @internal
    * @param {ReactElement} element Element that requires a key.
    * @param {*} parentType element's parent's type.
    */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
      }
      {
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    /**
    * Ensure that every element either is passed in a static location, in an
    * array with an explicit keys property defined, or in an object literal
    * with valid key property.
    *
    * @internal
    * @param {ReactNode} node Statically passed child of any type.
    * @param {*} parentType node's parent's type.
    */
    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
    * Given an element, validate that its props follow the propTypes definition,
    * provided by the type.
    *
    * @param {ReactElement} element
    */
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }
        var propTypes;
        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          // Intentionally inside to avoid triggering lazy initializers:
          var name = getComponentName(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          // Intentionally inside to avoid triggering lazy initializers:
          var _name = getComponentName(type);
          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
    * Given a fragment, validate that it can only be provided with fragment props
    * @param {ReactElement} fragment
    */
    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);
      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      if (!validType) {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }
        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }
        var typeString;
        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }
        {
          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
      }
      var element = createElement.apply(this, arguments);
      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }
      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
      if (type === exports.Fragment) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }
      return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      {
        if (!didWarnAboutDeprecatedCreateFactory) {
          didWarnAboutDeprecatedCreateFactory = true;
          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
        }
        // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
    {
      try {
        var frozenObject = Object.freeze({});
        /*eslint-disable no-new*/
        new Map([[frozenObject, null]]);
        new Set([frozenObject]);
      } catch (e) {}
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray: toArray,
      only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
  })();
}

},{"object-assign":"6aGxX"}],"6aGxX":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],"3FeWS":[function(require,module,exports) {
"use strict";
function checkDCE() {
  /*global __REACT_DEVTOOLS_GLOBAL_HOOK__*/
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if ("development" !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}
if ("development" === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}

},{"./cjs/react-dom.development.js":"a0ZFj"}],"a0ZFj":[function(require,module,exports) {
/** @license React v17.0.2
* react-dom.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    // 
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        printWarning('warn', format, args);
      }
    }
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        printWarning('error', format, args);
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function (item) {
          return '' + item;
        });
        // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format);
        // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    if (!React) {
      {
        throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
      }
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    // Before we know whether it is function or class
    var HostRoot = 3;
    // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4;
    // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true;
    // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false;
    // Experimental Scope support.
    var enableNewReconciler = false;
    // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
    * Mapping from registration name to event name
    */
    var registrationNameDependencies = {};
    /**
    * Mapping from lowercase registration names to the properly cased version,
    * used to warn in the case of missing event handlers. Available
    * only in true.
    * @type {Object}
    */
    var possibleRegistrationNames = {};
    // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      {
        if (registrationNameDependencies[registrationName]) {
          error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
        }
      }
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
      for (var i = 0; i < dependencies.length; i++) {
        allNativeEvents.add(dependencies[i]);
      }
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0;
    // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1;
    // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2;
    // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3;
    // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4;
    // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5;
    // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /*eslint-disable max-len*/
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /*eslint-enable max-len*/
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        error('Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }
      return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }
      switch (typeof value) {
        case 'function':
        case 'symbol':
          // eslint-disable-line
          return true;
        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }
        default:
          return false;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === false;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }
      return false;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL;
      this.removeEmptyString = removeEmptyString;
    }
    // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {};
    // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
    reservedProps.forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML boolean attributes.
    ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    ['checked', // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML attributes that must be positive numbers.
    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML attributes that must be numbers.
    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function (token) {
      return token[1].toUpperCase();
    };
    // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // String SVG attributes with the xlink namespace.
    ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
      false);
    });
    // String SVG attributes with the xml namespace.
    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
      false);
    });
    // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
    'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
    false);
    ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null, // attributeNamespace
      true, // sanitizeURL
      true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /*eslint-disable max-len*/
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
        }
      }
    }
    /**
    * Get the value for a property on a node. Only used in DEV for SSR validation.
    * The "expected" argument is used as a hint of what the expected value is.
    * Some properties have multiple equivalent values.
    */
    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          if (propertyInfo.sanitizeURL) {
            // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
          }
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              if (value === '') {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }
              if (value === '' + expected) {
                return expected;
              }
              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            }
            // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.
            stringValue = node.getAttribute(attributeName);
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    /**
    * Get the value for a attribute on a node. Only used in DEV for SSR validation.
    * The third argument is used as a hint of what the expected value is. Some
    * attributes have multiple equivalent values.
    */
    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) {
          return expected;
        }
        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }
        var value = node.getAttribute(name);
        if (value === '' + expected) {
          return expected;
        }
        return value;
      }
    }
    /**
    * Sets the value for a property on a node.
    *
    * @param {DOMElement} node
    * @param {string} name
    * @param {*} value
    */
    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      }
      // If the prop isn't in the special list, treat it as a simple attribute.
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }
        return;
      }
      // The rest are treated as attributes with special cases.
      var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          // If attribute type is boolean, we know for sure it won't be an execution sink
          // and we won't require Trusted Type here.
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          {
            attributeValue = '' + value;
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL(attributeValue.toString());
          }
        }
        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          // https://github.com/facebook/react/issues/19099
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            log: _assign({}, props, {
              value: prevLog
            }),
            info: _assign({}, props, {
              value: prevInfo
            }),
            warn: _assign({}, props, {
              value: prevWarn
            }),
            error: _assign({}, props, {
              value: prevError
            }),
            group: _assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: _assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: _assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }
        // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      // $FlowFixMe It does accept undefined.
      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function () {
            throw Error();
          };
          // $FlowFixMe
          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if (typeof Reflect === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; (s--, c--)) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                                          // Return the line we found.
}
                    // Return the line we found.
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      // Fallback to just using the name if we couldn't make it throw.
      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      {
        return describeNativeComponentFrame(ctor, true);
      }
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_BLOCK_TYPE:
            return describeFunctionComponentFrame(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    function describeFiber(fiber) {
      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
      var source = fiber._debugSource;
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame('Lazy');
        case SuspenseComponent:
          return describeBuiltInComponentFrame('Suspense');
        case SuspenseListComponent:
          return describeBuiltInComponentFrame('SuspenseList');
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case Block:
          return describeFunctionComponentFrame(fiber.type._render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return '';
      }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
      try {
        var info = '';
        var node = workInProgress;
        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);
        return info;
      } catch (x) {
        return '\nError generating stack: ' + x.message + '\n' + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
      return type.displayName || 'Context';
    }
    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_BLOCK_TYPE:
            return getComponentName(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
        }
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        }
        // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
      }
    }
    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
      }
    }
    function setIsRendering(rendering) {
      {
        isRendering = rendering;
      }
    }
    function getIsRendering() {
      {
        return isRendering;
      }
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
      return '' + value;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;
        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
      return node._valueTracker;
    }
    function detachTracker(node) {
      node._valueTracker = null;
    }
    function getValueFromNode(node) {
      var value = '';
      if (!node) {
        return value;
      }
      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }
      return value;
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      var currentValue = '' + node[valueField];
      // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)
      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }
      var get = descriptor.get, set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      });
      // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }
    function track(node) {
      if (getTracker(node)) {
        return;
      }
      // TODO: Once it's just Fiber we can move this to node._wrapperState
      node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }
      var tracker = getTracker(node);
      // if there is no tracker at this point it's unlikely
      // that trying again will succeed
      if (!tracker) {
        return true;
      }
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);
      if (typeof doc === 'undefined') {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }
    /**
    * Implements an <input> host component that allows setting these optional
    * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
    *
    * If `checked` or `value` are not supplied (or null/undefined), user actions
    * that affect the checked state or value will trigger updates to the element.
    *
    * If they are supplied (and not null/undefined), the rendered element will not
    * trigger updates to the element. Instead, the props must change in order for
    * the rendered element to be updated.
    *
    * The rendered element will be initialized as unchecked (or `defaultChecked`)
    * with an empty value (or `defaultValue`).
    *
    * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
    */
    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;
      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }
    function updateWrapper(element, props) {
      var node = element;
      {
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
          didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;
      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }
      {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        // 1. The value React property
        // 2. The defaultValue React property
        // 3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }
      {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }
    function postMountWrapper(element, props, isHydrating) {
      var node = element;
      // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.
      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset';
        // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872
        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }
        var initialValue = toString(node._wrapperState.initialValue);
        // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (!isHydrating) {
          {
            // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            // 
            // 1. The value React property when present
            // 2. The defaultValue React property when present
            // 3. An empty string
            if (initialValue !== node.value) {
              node.value = initialValue;
            }
          }
        }
        {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = initialValue;
        }
      }
      // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.
      var name = node.name;
      if (name !== '') {
        node.name = '';
      }
      {
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        // 
        // 1. The checked React property when present
        // 2. The defaultChecked React property when present
        // 3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }
      if (name !== '') {
        node.name = name;
      }
    }
    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }
        // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.
        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps) {
            {
              throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
          }
          // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set
          updateValueIfChanged(otherNode);
          // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.
          updateWrapper(otherNode, otherProps);
        }
      }
    }
    // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    // 
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    // 
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
      if (// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
      var content = '';
      // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).
      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }
        content += child;
      });
      return content;
    }
    /**
    * Implements an <option> host component that warns when `selected` is set.
    */
    function validateProps(element, props) {
      {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }
            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }
            if (typeof child.type !== 'string') {
              return;
            }
            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              error('Only strings and numbers are supported as <option> children.');
            }
          });
        }
        // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }
    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }
    function getHostProps$1(element, props) {
      var hostProps = _assign({
        children: undefined
      }, props);
      var content = flattenChildren(props.children);
      if (content) {
        hostProps.children = content;
      }
      return hostProps;
    }
    var didWarnValueDefaultValue$1;
    {
      didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }
      return '';
    }
    var valuePropNames = ['value', 'defaultValue'];
    /**
    * Validation function for `value` and `defaultValue`.
    */
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps('select', props);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          var isArray = Array.isArray(props[propName]);
          if (props.multiple && !isArray) {
            error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
          } else if (!props.multiple && isArray) {
            error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
          }
        }
      }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;
      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }
        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;
            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    /**
    * Implements a <select> host component that allows optionally setting the
    * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
    * stringable. If `multiple` is true, the prop must be an array of stringables.
    *
    * If `value` is not supplied (or null/undefined), user actions that change the
    * selected option will trigger updates to the rendered options.
    *
    * If it is supplied (and not null/undefined), the rendered options will not
    * update in response to user actions. Instead, the `value` prop must change in
    * order for the rendered options to update.
    *
    * If `defaultValue` is provided, any options with the supplied values will be
    * selected.
    */
    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }
    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }
    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }
    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }
    function restoreControlledState$1(element, props) {
      var node = element;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }
    var didWarnValDefaultVal = false;
    /**
    * Implements a <textarea> host component that allows setting `value`, and
    * `defaultValue`. This differs from the traditional DOM API because value is
    * usually set as PCDATA children.
    *
    * If `value` is not supplied (or null/undefined), user actions that affect the
    * value will trigger updates to the element.
    *
    * If `value` is supplied (and not null/undefined), the rendered element will
    * not trigger updates to the element. Instead, the `value` prop must change in
    * order for the rendered element to be updated.
    *
    * The rendered element will be initialized with an empty value, the prop
    * `defaultValue` if specified, or the children content (deprecated).
    */
    function getHostProps$3(element, props) {
      var node = element;
      if (!(props.dangerouslySetInnerHTML == null)) {
        {
          throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
      }
      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.
      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node = element;
      {
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value;
      // Only bother fetching default value if we're going to use it
      if (initialValue == null) {
        var children = props.children, defaultValue = props.defaultValue;
        if (children != null) {
          {
            error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          {
            if (!(defaultValue == null)) {
              {
                throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
            }
            if (Array.isArray(children)) {
              if (!(children.length <= 1)) {
                {
                  throw Error("<textarea> can only have at most one child.");
                }
              }
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null) {
          defaultValue = '';
        }
        initialValue = defaultValue;
      }
      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value);
        // To avoid side effects (such as losing text selection), only set value if changed
        if (newValue !== node.value) {
          node.value = newValue;
        }
        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }
    function postMountWrapper$3(element, props) {
      var node = element;
      // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.
      var textContent = node.textContent;
      // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
      if (textContent === node._wrapperState.initialValue) {
        if (textContent !== '' && textContent !== null) {
          node.value = textContent;
        }
      }
    }
    function restoreControlledState$2(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    };
    // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;
        case 'math':
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE;
      }
      // By default, pass namespace below.
      return parentNamespace;
    }
    /*globals MSApp*/
    /**
    * Create a function which has 'unsafe' privileges (required by windows8 apps)
    */
    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };
    var reusableSVGContainer;
    /**
    * Set the innerHTML property of a node
    *
    * @param {DOMElement} node
    * @param {string} html
    * @internal
    */
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      if (node.namespaceURI === Namespaces.svg) {
        if (!(('innerHTML' in node))) {
          // IE does not have innerHTML for SVG nodes, so instead we inject the
          // new markup in a temp node and then move the child nodes across into
          // the target node
          reusableSVGContainer = reusableSVGContainer || document.createElement('div');
          reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
          var svgNode = reusableSVGContainer.firstChild;
          while (node.firstChild) {
            node.removeChild(node.firstChild);
          }
          while (svgNode.firstChild) {
            node.appendChild(svgNode.firstChild);
          }
          return;
        }
      }
      node.innerHTML = html;
    });
    /**
    * HTML nodeType values that represent the type of the node
    */
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
    * Set the textContent property of a node. For text updates, it's faster
    * to set the `nodeValue` of the Text node directly instead of using
    * `.textContent` which will remove the existing node and create a new one.
    *
    * @param {DOMElement} node
    * @param {string} text
    * @internal
    */
    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
      animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
      background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
      backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
      border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
      borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
      borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
      borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
      borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
      borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
      borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
      borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
      borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
      borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
      borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
      borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
      columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
      columns: ['columnCount', 'columnWidth'],
      flex: ['flexBasis', 'flexGrow', 'flexShrink'],
      flexFlow: ['flexDirection', 'flexWrap'],
      font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
      fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
      gap: ['columnGap', 'rowGap'],
      grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
      gridColumn: ['gridColumnEnd', 'gridColumnStart'],
      gridColumnGap: ['columnGap'],
      gridGap: ['columnGap', 'rowGap'],
      gridRow: ['gridRowEnd', 'gridRowStart'],
      gridRowGap: ['rowGap'],
      gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
      margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
      marker: ['markerEnd', 'markerMid', 'markerStart'],
      mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
      maskPosition: ['maskPositionX', 'maskPositionY'],
      outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
      overflow: ['overflowX', 'overflowY'],
      padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
      placeContent: ['alignContent', 'justifyContent'],
      placeItems: ['alignItems', 'justifyItems'],
      placeSelf: ['alignSelf', 'justifySelf'],
      textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
      textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
      transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
      wordWrap: ['overflowWrap']
    };
    /**
    * CSS properties which accept numbers but are not in units of "px".
    */
    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    /**
    * @param {string} prefix vendor-specific prefix, eg: Webkit
    * @param {string} key style name, eg: transitionDuration
    * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
    * WebkitTransitionDuration
    */
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
    * Support style names that may come passed in prefixed by adding permutations
    * of vendor prefixes.
    */
    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
    * Convert a value into the proper css writable value. The style name `name`
    * should be logical (no hyphens), as specified
    * in `CSSProperty.isUnitlessNumber`.
    *
    * @param {string} name CSS property name such as `topMargin`.
    * @param {*} value CSS property value such as `10px`.
    * @return {string} Normalized style value with dimensions applied.
    */
    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';
      if (isEmpty) {
        return '';
      }
      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px';
      }
      return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
    * Hyphenates a camelcased CSS property name, for example:
    *
    *   > hyphenateStyleName('backgroundColor')
    *   < "background-color"
    *   > hyphenateStyleName('MozTransition')
    *   < "-moz-transition"
    *   > hyphenateStyleName('msTransition')
    *   < "-ms-transition"
    *
    * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
    * is converted to `-ms-`.
    */
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function () {};
    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      // style values shouldn't contain a semicolon
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };
      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };
      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };
      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };
      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
      };
      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
      };
      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }
        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
    * Operations for dealing with CSS properties.
    */
    /**
    * This creates a string that is expected to be equivalent to the style
    * attribute generated by server-side rendering. It by-passes warnings and
    * security checks so it's not safe to use this value for anything other than
    * comparison. It is only used in DEV for SSR validation.
    */
    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ';';
          }
        }
        return serialized || null;
      }
    }
    /**
    * Sets the value for multiple styles on a node.  If a value is specified as
    * '' (empty string), the corresponding style property will be unset.
    *
    * @param {DOMElement} node
    * @param {object} styles
    */
    function setValueForStyles(node, styles) {
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
        if (styleName === 'float') {
          styleName = 'cssFloat';
        }
        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    }
    function isValueEmpty(value) {
      return value == null || typeof value === 'boolean' || value === '';
    }
    /**
    * Given {color: 'red', overflow: 'hidden'} returns {
    *   color: 'color',
    *   overflowX: 'overflow',
    *   overflowY: 'overflow',
    * }. This can be read as "the overflowY property was set by the overflow
    * shorthand". That is, the values are the property that each was derived from.
    */
    function expandShorthandMap(styles) {
      var expanded = {};
      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }
      return expanded;
    }
    /**
    * When mixing shorthand and longhand property names, we warn during updates if
    * we expect an incorrect result to occur. In particular, we warn for:
    *
    * Updating a shorthand property (longhand gets overwritten):
    *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
    *   becomes .style.font = 'baz'
    * Removing a shorthand property (longhand gets lost too):
    *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
    *   becomes .style.font = ''
    * Removing a longhand property (should revert to shorthand; doesn't):
    *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
    *   becomes .style.fontVariant = ''
    */
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles) {
          return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key];
          var correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + ',' + correctOriginalKey;
            if (warnedAbout[warningKey]) {
              continue;
            }
            warnedAbout[warningKey] = true;
            error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
          }
        }
      }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      // Note the use of `==` which checks for null or undefined.
      if (voidElementTags[tag]) {
        if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
          {
            throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (!(props.children == null)) {
          {
            throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
        }
        if (!(typeof props.dangerouslySetInnerHTML === 'object' && (HTML in props.dangerouslySetInnerHTML))) {
          {
            throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
      }
      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
        }
      }
      if (!(props.style == null || typeof props.style === 'object')) {
        {
          throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }
      switch (tagName) {
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;
        default:
          return true;
      }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      disablepictureinpicture: 'disablePictureInPicture',
      disableremoteplayback: 'disableRemotePlayback',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      enterkeyhint: 'enterKeyHint',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
      'aria-current': 0,
      // state
      'aria-details': 0,
      'aria-disabled': 0,
      // state
      'aria-hidden': 0,
      // state
      'aria-invalid': 0,
      // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = 'aria-' + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          // If this is an aria-* attribute, but is not listed in the known DOM
          // DOM properties, then it is an invalid aria-* attribute.
          if (correctName == null) {
            error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
            warnedProperties[name] = true;
            return true;
          }
          // aria-* attributes should be lowercase; suggest the lowercase version.
          if (name !== correctName) {
            error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          // If this is an aria-* attribute, but is not listed in the known DOM
          // DOM properties, then it is an invalid aria-* attribute.
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          // aria-* attributes should be lowercase; suggest the lowercase version.
          if (name !== standardName) {
            error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps.map(function (prop) {
          return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) {
          error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
        }
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
      {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === 'select' && props.multiple) {
            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
          } else {
            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
          }
        }
      }
    }
    var validateProperty$1 = function () {};
    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
      validateProperty$1 = function (tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        }
        // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
          var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
          if (registrationNameDependencies.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
          if (registrationName != null) {
            error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            error('Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }
        if (lowerCasedName === 'innerhtml') {
          error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === 'aria') {
          error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
          error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) {
          return true;
        }
        // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }
        // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }
        return true;
      };
    }
    var warnUnknownProperties = function (type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps.map(function (prop) {
          return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) {
          error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
        }
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 1 << 1;
    var IS_CAPTURE_PHASE = 1 << 2;
    var IS_REPLAYED = 1 << 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
    * Gets the target node from a native browser event by accounting for
    * inconsistencies in browser DOM APIs.
    *
    * @param {object} nativeEvent Native browser event.
    * @return {DOMEventTarget} Target node.
    */
    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      // Normalize SVG <use> element events #4963
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }
      // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        // Unmounted
        return;
      }
      if (!(typeof restoreImpl === 'function')) {
        {
          throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var stateNode = internalInstance.stateNode;
      // Guard against Fiber being unmounted.
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function (fn, a, b, c, d) {
      return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function () {};
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
      // Here we wait until all updates have propagated, which is important
      // when using controlled components within layers:
      // https://github.com/facebook/react/issues/1698
      // Then we restore state of any controlled component.
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        // If a controlled event was fired, we may need to restore the state of
        // the DOM node back to the controlled value. This is necessary when React
        // bails out of the update without touching the DOM.
        flushDiscreteUpdatesImpl();
        restoreStateIfNeeded();
      }
    }
    function batchedUpdates(fn, bookkeeping) {
      if (isInsideEventHandler) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }
      isInsideEventHandler = true;
      try {
        return batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }
    function batchedEventUpdates(fn, a, b) {
      if (isBatchingEventUpdates) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
      }
      isBatchingEventUpdates = true;
      try {
        return batchedEventUpdatesImpl(fn, a, b);
      } finally {
        isBatchingEventUpdates = false;
        finishEventHandler();
      }
    }
    function discreteUpdates(fn, a, b, c, d) {
      var prevIsInsideEventHandler = isInsideEventHandler;
      isInsideEventHandler = true;
      try {
        return discreteUpdatesImpl(fn, a, b, c, d);
      } finally {
        isInsideEventHandler = prevIsInsideEventHandler;
        if (!isInsideEventHandler) {
          finishEventHandler();
        }
      }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
      {
        if (!isInsideEventHandler) {
          flushDiscreteUpdatesImpl();
        }
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      discreteUpdatesImpl = _discreteUpdatesImpl;
      flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
      batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
        case 'onMouseEnter':
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }
    /**
    * @param {object} inst The instance, which is the source of events.
    * @param {string} registrationName Name of listener (e.g. `onClick`).
    * @return {?function} The stored callback.
    */
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null) {
        // Work in progress.
        return null;
      }
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      if (!(!listener || typeof listener === 'function')) {
        {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
      }
      return listener;
    }
    var passiveBrowserEventsSupported = false;
    // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) {
      try {
        var options = {};
        // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
          get: function () {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // unintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      // 
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          if (!(typeof document !== 'undefined')) {
            {
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
          }
          var evt = document.createEvent('Event');
          var didCall = false;
          // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.
          var didError = true;
          // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.
          var windowEvent = window.event;
          // Keeps track of the descriptor of window.event to restore it after event
          // dispatching: https://github.com/facebook/react/issues/13688
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
          function restoreAfterDispatch() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false);
            // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.
            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }
          }
          // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback() {
            didCall = true;
            restoreAfterDispatch();
            func.apply(context, funcArgs);
            didError = false;
          }
          // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.
          var error;
          // Use this to track whether the error event is ever called.
          var didSetError = false;
          var isCrossOriginError = false;
          function handleWindowError(event) {
            error = event.error;
            didSetError = true;
            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {}
              }
            }
          }
          // Create a fake event type.
          var evtType = "react-" + (name ? name : 'invokeguardedcallback');
          // Attach our event handlers
          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false);
          // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);
          if (windowEventDescriptor) {
            Object.defineProperty(window, 'event', windowEventDescriptor);
          }
          if (didCall && didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
            }
            this.onError(error);
          }
          // Remove our event listeners
          window.removeEventListener('error', handleWindowError);
          if (!didCall) {
            // Something went really wrong, and our event was not dispatched.
            // https://github.com/facebook/react/issues/16734
            // https://github.com/facebook/react/issues/16585
            // Fall back to the production implementation.
            restoreAfterDispatch();
            return invokeGuardedCallbackProd.apply(this, arguments);
          }
        };
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
    /**
    * Call a function while guarding against errors that happens within it.
    * Returns an error if it throws, otherwise null.
    *
    * In production, this is implemented using a try-catch. The reason we don't
    * use a try-catch directly is so that we can swap out a different
    * implementation in DEV mode.
    *
    * @param {String} name of the guard to use for logging or debugging
    * @param {Function} func The function to invoke
    * @param {*} context The context to use when calling the function
    * @param {...*} args Arguments for function
    */
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
    * Same as invokeGuardedCallback, but instead of returning an error, it stores
    * it in a global so it can be rethrown by `rethrowCaughtError` later.
    * TODO: See if caughtError and rethrowError can be unified.
    *
    * @param {String} name of the guard to use for logging or debugging
    * @param {Function} func The function to invoke
    * @param {*} context The context to use when calling the function
    * @param {...*} args Arguments for function
    */
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }
    /**
    * During execution of guarded functions we will capture the first error which
    * we will rethrow to be handled by the top level error handler.
    */
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        {
          {
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
    }
    /**
    * `ReactInstanceMap` maintains a mapping from a public facing stateful
    * instance (key) and the internal representation (value). This allows public
    * methods to accept the user facing instance as an argument and map them back
    * to internal methods.
    *
    * Note that this module is currently shared and assumed to be stateless.
    * If this becomes an actual Map, that will break.
    */
    function get(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== undefined;
    }
    function set(key, value) {
      key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /**/
    0;
    var PerformedWork = /**/
    1;
    // You can change the rest (and add more).
    var Placement = /**/
    2;
    var Update = /**/
    4;
    var PlacementAndUpdate = /**/
    6;
    var Deletion = /**/
    8;
    var ContentReset = /**/
    16;
    var Callback = /**/
    32;
    var DidCapture = /**/
    64;
    var Ref = /**/
    128;
    var Snapshot = /**/
    256;
    var Passive = /**/
    512;
    // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /**/
    8192;
    var Hydrating = /**/
    1024;
    var HydratingAndUpdate = /**/
    1028;
    // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /**/
    932;
    // Union of all host effects
    var HostEffectMask = /**/
    2047;
    // These are not really side effects, but we still reuse this field.
    var Incomplete = /**/
    2048;
    var ShouldCapture = /**/
    4096;
    var ForceUpdateForLegacySuspense = /**/
    16384;
    // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node = fiber;
      var nearestMounted = fiber;
      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        var nextNode = node;
        do {
          node = nextNode;
          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
            // This is an insertion or in-progress hydration. The nearest possible
            // mounted fiber is the parent but we need to continue to figure out
            // if that one is still mounted.
            nearestMounted = node.return;
          }
          nextNode = node.return;
        } while (nextNode);
      } else {
        while (node.return) {
          node = node.return;
        }
      }
      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
      }
      // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current = fiber.alternate;
          if (current !== null) {
            suspenseState = current.memoizedState;
          }
        }
        if (suspenseState !== null) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          if (!instance._warnedAboutRefsInRender) {
            error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
          }
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);
      if (!fiber) {
        return false;
      }
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (!(getNearestMountedFiber(fiber) === fiber)) {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var nearestMounted = getNearestMountedFiber(fiber);
        if (!(nearestMounted !== null)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
        if (nearestMounted !== fiber) {
          return null;
        }
        return fiber;
      }
      // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a.return;
        if (parentA === null) {
          // We're at the root.
          break;
        }
        var parentB = parentA.alternate;
        if (parentB === null) {
          // There is no alternate. This is an unusual case. Currently, it only
          // happens when a Suspense component is hidden. An extra fragment fiber
          // is inserted in between the Suspense fiber and its children. Skip
          // over this extra fragment fiber and proceed to the next parent.
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }
          // If there's no parent, we're at the root.
          break;
        }
        // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.
          {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          // 
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              {
                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
        }
        if (!(a.alternate === b)) {
          {
            throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.
      if (!(a.tag === HostRoot)) {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      }
      // Otherwise B has to be current branch.
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }
      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }
      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
      var node = childFiber;
      var parentFiberAlternate = parentFiber.alternate;
      while (node !== null) {
        if (node === parentFiber || node === parentFiberAlternate) {
          return true;
        }
        node = node.return;
      }
      return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
      attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false;
    // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = [];
    // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map();
    // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
      return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
    'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
    function isReplayableDiscreteEvent(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn: blockedOn,
        domEventName: domEventName,
        eventSystemFlags: eventSystemFlags | IS_REPLAYED,
        nativeEvent: nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
      queuedDiscreteEvents.push(queuedEvent);
    }
    // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case 'focusin':
        case 'focusout':
          queuedFocus = null;
          break;
        case 'dragenter':
        case 'dragleave':
          queuedDrag = null;
          break;
        case 'mouseover':
        case 'mouseout':
          queuedMouse = null;
          break;
        case 'pointerover':
        case 'pointerout':
          {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
        case 'gotpointercapture':
        case 'lostpointercapture':
          {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null) {
            // Attempt to increase the priority of this target.
            attemptContinuousHydration(_fiber2);
          }
        }
        return queuedEvent;
      }
      // If we have already queued this exact event, then it's because
      // the different event systems have different DOM event listeners.
      // We can accumulate the flags, and the targetContainers, and
      // store a single event to be replayed.
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
        targetContainers.push(targetContainer);
      }
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      // These set relatedTarget to null because the replayed event will be treated as if we
      // moved from outside the window (no target) onto the target once it hydrates.
      // Instead of mutating we could clone the event.
      switch (domEventName) {
        case 'focusin':
          {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
        case 'dragenter':
          {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
        case 'mouseover':
          {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
        case 'pointerover':
          {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
        case 'gotpointercapture':
          {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
      }
      return false;
    }
    // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
      // TODO: This function shares a lot of logic with attemptToDispatchEvent.
      // Try to unify them. It's a bit tricky since it would require two return
      // values.
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              // We're blocked on hydrating this boundary.
              // Increase its priority.
              queuedTarget.blockedOn = instance;
              attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root = nearestMounted.stateNode;
            if (root.hydrate) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              // We don't currently have a way to increase the priority of
              // a root other than sync.
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null) {
        return false;
      }
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn !== null) {
          // We're still blocked. Try again later.
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null) {
            attemptContinuousHydration(_fiber3);
          }
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        // This target container was successfully dispatched. Try the next.
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
        map.delete(key);
      }
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      // First replay discrete events.
      while (queuedDiscreteEvents.length > 0) {
        var nextDiscreteEvent = queuedDiscreteEvents[0];
        if (nextDiscreteEvent.blockedOn !== null) {
          // We're still blocked.
          // Increase the priority of this boundary to unblock
          // the next discrete event.
          var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
          if (_fiber4 !== null) {
            attemptUserBlockingHydration(_fiber4);
          }
          break;
        }
        var targetContainers = nextDiscreteEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            // We're still blocked. Try again later.
            nextDiscreteEvent.blockedOn = nextBlockedOn;
            break;
          }
          // This target container was successfully dispatched. Try the next.
          targetContainers.shift();
        }
        if (nextDiscreteEvent.blockedOn === null) {
          // We've successfully replayed the first event. Let's try the next one.
          queuedDiscreteEvents.shift();
        }
      }
      // Next replay any continuous events.
      if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
        queuedFocus = null;
      }
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
        queuedDrag = null;
      }
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
        queuedMouse = null;
      }
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
        if (!hasScheduledReplayAttempt) {
          hasScheduledReplayAttempt = true;
          // Schedule a callback to attempt replaying as many events as are
          // now unblocked. This first might not actually be unblocked yet.
          // We could check it early to avoid scheduling an unnecessary callback.
          Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
        }
      }
    }
    function retryIfBlockedOn(unblocked) {
      // Mark anything that was blocked on this as no longer blocked
      // and eligible for a replay.
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        // This is a exponential search for each boundary that commits. I think it's
        // worth it because we expect very few discrete events to queue up and once
        // we are actually fully unblocked it will be fast to replay them.
        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
          }
        }
      }
      if (queuedFocus !== null) {
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      }
      if (queuedDrag !== null) {
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      }
      if (queuedMouse !== null) {
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      }
      var unblock = function (queuedEvent) {
        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
      };
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i];
        if (queuedTarget.blockedOn === unblocked) {
          queuedTarget.blockedOn = null;
        }
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null) {
          // We're still blocked.
          break;
        } else {
          attemptExplicitHydrationTarget(nextExplicitTarget);
          if (nextExplicitTarget.blockedOn === null) {
            // We're unblocked.
            queuedExplicitHydrationTargets.shift();
          }
        }
      }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
    * Generate a mapping of standard vendor prefixes using the defined style property and event name.
    *
    * @param {string} styleProp
    * @param {string} eventName
    * @returns {object}
    */
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      return prefixes;
    }
    /**
    * A list of event names to a configurable list of vendor prefixes.
    */
    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
    * Event names that have already been detected and prefixed (if applicable).
    */
    var prefixedEventNames = {};
    /**
    * Element to check for prefixes on.
    */
    var style = {};
    /**
    * Bootstrap if a DOM exists.
    */
    if (canUseDOM) {
      style = document.createElement('div').style;
      // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.
      if (!(('AnimationEvent' in window))) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }
      // Same as above
      if (!(('TransitionEvent' in window))) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    /**
    * Attempts to determine the correct vendor prefixed event name.
    *
    * @param {string} eventName
    * @returns {string}
    */
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && (styleProp in style)) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map();
    // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
    'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
    'focusout', 'blur', // Careful!
    'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
    var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];
    var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel'];
    // prettier-ignore
    var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
    /**
    * Turns
    * ['abort', ...]
    *
    * into
    *
    * topLevelEventsToReactNames = new Map([
    *   ['abort', 'onAbort'],
    * ]);
    *
    * and registers them.
    */
    function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
      // As the event types are in pairs of two, we need to iterate
      // through in twos. The events are in pairs of two to save code
      // and improve init perf of processing this array, as it will
      // result in far fewer object allocations and property accesses
      // if we only use three arrays to process all the categories of
      // instead of tuples.
      for (var i = 0; i < eventTypes.length; i += 2) {
        var topEvent = eventTypes[i];
        var event = eventTypes[i + 1];
        var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
        var reactName = 'on' + capitalizedEvent;
        eventPriorities.set(topEvent, priority);
        topLevelEventsToReactNames.set(topEvent, reactName);
        registerTwoPhaseEvent(reactName, [topEvent]);
      }
    }
    function setEventPriorities(eventTypes, priority) {
      for (var i = 0; i < eventTypes.length; i++) {
        eventPriorities.set(eventTypes[i], priority);
      }
    }
    function getEventPriorityForPluginSystem(domEventName) {
      var priority = eventPriorities.get(domEventName);
      // Default to a ContinuousEvent. Note: we might
      // want to warn if we can't detect the priority
      // for the event.
      return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
      registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
      registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
      registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
      setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    {
      // Provide explicit error message when production+profiling bundle of e.g.
      // react-dom is used with production (non-profiling) bundle of
      // scheduler/tracing
      if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
        {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
          // ascending numbers so we can compare them like numbers. They start at 90 to
      // avoid clashing with Scheduler's priorities.
}
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95;
    // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now();
    // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /**/
    0;
    var NoLane = /**/
    0;
    var SyncLane = /**/
    1;
    var SyncBatchedLane = /**/
    2;
    var InputDiscreteHydrationLane = /**/
    4;
    var InputDiscreteLanes = /**/
    24;
    var InputContinuousHydrationLane = /**/
    32;
    var InputContinuousLanes = /**/
    192;
    var DefaultHydrationLane = /**/
    256;
    var DefaultLanes = /**/
    3584;
    var TransitionHydrationLane = /**/
    4096;
    var TransitionLanes = /**/
    4186112;
    var RetryLanes = /**/
    62914560;
    var SomeRetryLane = /**/
    33554432;
    var SelectiveHydrationLane = /**/
    67108864;
    var NonIdleLanes = /**/
    134217727;
    var IdleHydrationLane = /**/
    134217728;
    var IdleLanes = /**/
    805306368;
    var OffscreenLane = /**/
    1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {}
    // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
      if ((SyncLane & lanes) !== NoLanes) {
        return_highestLanePriority = SyncLanePriority;
        return SyncLane;
      }
      if ((SyncBatchedLane & lanes) !== NoLanes) {
        return_highestLanePriority = SyncBatchedLanePriority;
        return SyncBatchedLane;
      }
      if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
        return_highestLanePriority = InputDiscreteHydrationLanePriority;
        return InputDiscreteHydrationLane;
      }
      var inputDiscreteLanes = InputDiscreteLanes & lanes;
      if (inputDiscreteLanes !== NoLanes) {
        return_highestLanePriority = InputDiscreteLanePriority;
        return inputDiscreteLanes;
      }
      if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
        return_highestLanePriority = InputContinuousHydrationLanePriority;
        return InputContinuousHydrationLane;
      }
      var inputContinuousLanes = InputContinuousLanes & lanes;
      if (inputContinuousLanes !== NoLanes) {
        return_highestLanePriority = InputContinuousLanePriority;
        return inputContinuousLanes;
      }
      if ((lanes & DefaultHydrationLane) !== NoLanes) {
        return_highestLanePriority = DefaultHydrationLanePriority;
        return DefaultHydrationLane;
      }
      var defaultLanes = DefaultLanes & lanes;
      if (defaultLanes !== NoLanes) {
        return_highestLanePriority = DefaultLanePriority;
        return defaultLanes;
      }
      if ((lanes & TransitionHydrationLane) !== NoLanes) {
        return_highestLanePriority = TransitionHydrationPriority;
        return TransitionHydrationLane;
      }
      var transitionLanes = TransitionLanes & lanes;
      if (transitionLanes !== NoLanes) {
        return_highestLanePriority = TransitionPriority;
        return transitionLanes;
      }
      var retryLanes = RetryLanes & lanes;
      if (retryLanes !== NoLanes) {
        return_highestLanePriority = RetryLanePriority;
        return retryLanes;
      }
      if (lanes & SelectiveHydrationLane) {
        return_highestLanePriority = SelectiveHydrationLanePriority;
        return SelectiveHydrationLane;
      }
      if ((lanes & IdleHydrationLane) !== NoLanes) {
        return_highestLanePriority = IdleHydrationLanePriority;
        return IdleHydrationLane;
      }
      var idleLanes = IdleLanes & lanes;
      if (idleLanes !== NoLanes) {
        return_highestLanePriority = IdleLanePriority;
        return idleLanes;
      }
      if ((OffscreenLane & lanes) !== NoLanes) {
        return_highestLanePriority = OffscreenLanePriority;
        return OffscreenLane;
      }
      {
        error('Should have found matching lanes. This is a bug in React.');
              // This shouldn't be reachable, but as a fallback, return the entire bitmask.
}
      // This shouldn't be reachable, but as a fallback, return the entire bitmask.
      return_highestLanePriority = DefaultLanePriority;
      return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
      switch (schedulerPriorityLevel) {
        case ImmediatePriority:
          return SyncLanePriority;
        case UserBlockingPriority:
          return InputContinuousLanePriority;
        case NormalPriority:
        case LowPriority:
          // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
          return DefaultLanePriority;
        case IdlePriority:
          return IdleLanePriority;
        default:
          return NoLanePriority;
      }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
      switch (lanePriority) {
        case SyncLanePriority:
        case SyncBatchedLanePriority:
          return ImmediatePriority;
        case InputDiscreteHydrationLanePriority:
        case InputDiscreteLanePriority:
        case InputContinuousHydrationLanePriority:
        case InputContinuousLanePriority:
          return UserBlockingPriority;
        case DefaultHydrationLanePriority:
        case DefaultLanePriority:
        case TransitionHydrationPriority:
        case TransitionPriority:
        case SelectiveHydrationLanePriority:
        case RetryLanePriority:
          return NormalPriority;
        case IdleHydrationLanePriority:
        case IdleLanePriority:
        case OffscreenLanePriority:
          return IdlePriority;
        case NoLanePriority:
          return NoPriority;
        default:
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
      }
    }
    function getNextLanes(root, wipLanes) {
      // Early bailout if there's no pending work left.
      var pendingLanes = root.pendingLanes;
      if (pendingLanes === NoLanes) {
        return_highestLanePriority = NoLanePriority;
        return NoLanes;
      }
      var nextLanes = NoLanes;
      var nextLanePriority = NoLanePriority;
      var expiredLanes = root.expiredLanes;
      var suspendedLanes = root.suspendedLanes;
      var pingedLanes = root.pingedLanes;
      // Check if any work has expired.
      if (expiredLanes !== NoLanes) {
        nextLanes = expiredLanes;
        nextLanePriority = return_highestLanePriority = SyncLanePriority;
      } else {
        // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            nextLanePriority = return_highestLanePriority;
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              nextLanePriority = return_highestLanePriority;
            }
          }
        } else {
          // The only remaining work is Idle.
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
            nextLanePriority = return_highestLanePriority;
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
              nextLanePriority = return_highestLanePriority;
            }
          }
        }
      }
      if (nextLanes === NoLanes) {
        // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
      }
      // If there are higher priority lanes, we'll include them even if they
      // are suspended.
      nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
      // If we're already in the middle of a render, switching lanes will interrupt
      // it and we'll lose our progress. We should only do this if the new lanes are
      // higher priority.
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (wipLanes & suspendedLanes) === NoLanes) {
        getHighestPriorityLanes(wipLanes);
        var wipLanePriority = return_highestLanePriority;
        if (nextLanePriority <= wipLanePriority) {
          return wipLanes;
        } else {
          return_highestLanePriority = nextLanePriority;
        }
      }
      // Check for entangled lanes and add them to the batch.
      // 
      // A lane is said to be entangled with another when it's not allowed to render
      // in a batch that does not also include the other lane. Typically we do this
      // when multiple updates have the same source, and we only want to respond to
      // the most recent event from that source.
      // 
      // Note that we apply entanglements *after* checking for partial work above.
      // This means that if a lane is entangled during an interleaved event while
      // it's already rendering, we won't interrupt it. This is intentional, since
      // entanglement is usually "best effort": we'll try our best to render the
      // lanes in the same batch, but it's not worth throwing out partially
      // completed work in order to do it.
      // 
      // For those exceptions where entanglement is semantically important, like
      // useMutableSource, we should ensure that there is no partial work at the
      // time we apply the entanglement.
      var entangledLanes = root.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root.entanglements;
        var lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          nextLanes |= entanglements[index];
          lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
      var eventTimes = root.eventTimes;
      var mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        var eventTime = eventTimes[index];
        if (eventTime > mostRecentEventTime) {
          mostRecentEventTime = eventTime;
        }
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      // TODO: Expiration heuristic is constant per lane, so could use a map.
      getHighestPriorityLanes(lane);
      var priority = return_highestLanePriority;
      if (priority >= InputContinuousLanePriority) {
        // User interactions should expire slightly more quickly.
        // 
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        // 
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        // 
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
      } else if (priority >= TransitionPriority) {
        return currentTime + 5000;
      } else {
        // Anything idle priority or lower should never expire.
        return NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
      // TODO: This gets called every time we yield. We can optimize by storing
      // the earliest expiration time on the root. Then use that to quickly bail out
      // of this function.
      var pendingLanes = root.pendingLanes;
      var suspendedLanes = root.suspendedLanes;
      var pingedLanes = root.pingedLanes;
      var expirationTimes = root.expirationTimes;
      // Iterate through the pending lanes and check if we've reached their
      // expiration time. If so, we'll assume the update is being starved and mark
      // it as expired to force it to finish.
      var lanes = pendingLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        var expirationTime = expirationTimes[index];
        if (expirationTime === NoTimestamp) {
          // Found a pending lane with no expiration time. If it's not suspended, or
          // if it's pinged, assume it's CPU-bound. Compute a new expiration time
          // using the current time.
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
            // Assumes timestamps are monotonically increasing.
            expirationTimes[index] = computeExpirationTime(lane, currentTime);
          }
        } else if (expirationTime <= currentTime) {
          // This lane expired
          root.expiredLanes |= lane;
        }
        lanes &= ~lane;
      }
    }
    // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes) {
        return everythingButOffscreen;
      }
      if (everythingButOffscreen & OffscreenLane) {
        return OffscreenLane;
      }
      return NoLanes;
    }
    function returnNextLanesPriority() {
      return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
      switch (lanePriority) {
        case NoLanePriority:
          break;
        case SyncLanePriority:
          return SyncLane;
        case SyncBatchedLanePriority:
          return SyncBatchedLane;
        case InputDiscreteLanePriority:
          {
            var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
            if (_lane === NoLane) {
              // Shift to the next priority level
              return findUpdateLane(InputContinuousLanePriority, wipLanes);
            }
            return _lane;
          }
        case InputContinuousLanePriority:
          {
            var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
            if (_lane2 === NoLane) {
              // Shift to the next priority level
              return findUpdateLane(DefaultLanePriority, wipLanes);
            }
            return _lane2;
          }
        case DefaultLanePriority:
          {
            var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
            if (_lane3 === NoLane) {
              // If all the default lanes are already being worked on, look for a
              // lane in the transition range.
              _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                // All the transition lanes are taken, too. This should be very
                // rare, but as a last resort, pick a default lane. This will have
                // the effect of interrupting the current work-in-progress render.
                _lane3 = pickArbitraryLane(DefaultLanes);
              }
            }
            return _lane3;
          }
        case TransitionPriority:
        case RetryLanePriority:
          // Should be handled by findRetryLane instead
          break;
        case IdleLanePriority:
          var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(IdleLanes);
          }
          return lane;
      }
      {
        {
          throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
      }
    }
    // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
      // First look for lanes that are completely unclaimed, i.e. have no
      // pending work.
      var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
      if (lane === NoLane) {
        // If all lanes have pending work, look for a lane that isn't currently
        // being worked on.
        lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
        if (lane === NoLane) {
          // If everything is being worked on, pick any lane. This has the
          // effect of interrupting the current work-in-progress.
          lane = pickArbitraryLane(TransitionLanes);
        }
      }
      return lane;
    }
    // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
      // This is a fork of `findUpdateLane` designed specifically for Suspense
      // "retries" — a special update that attempts to flip a Suspense boundary
      // from its placeholder state to its primary/resolved state.
      var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
      if (lane === NoLane) {
        lane = pickArbitraryLane(RetryLanes);
      }
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
      // This finds the most significant non-zero bit.
      var index = 31 - clz32(lanes);
      return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
      return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
      // This wrapper function gets inlined. Only exists so to communicate that it
      // doesn't matter which bit is selected; you can pick any bit without
      // affecting the algorithms where its used. Here I'm using
      // getHighestPriorityLane because it requires the fewest operations.
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
      return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
      return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
      return a | b;
    }
    function removeLanes(set, subset) {
      return set & ~subset;
    }
    // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b) {
      // This works because the bit ranges decrease in priority as you go left.
      return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
      // Intentionally pushing one by one.
      // https://v8.dev/blog/elements-kinds#avoid-creating-holes
      var laneMap = [];
      for (var i = 0; i < TotalLanes; i++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
      root.pendingLanes |= updateLane;
      // TODO: Theoretically, any update to any lane can unblock any other lane. But
      // it's not practical to try every single possible combination. We need a
      // heuristic to decide which lanes to attempt to render, and in which batches.
      // For now, we use the same heuristic as in the old ExpirationTimes model:
      // retry any lane at equal or lower priority, but don't try updates at higher
      // priority without also including the lower priority updates. This works well
      // when considering updates across different priority levels, but isn't
      // sufficient for updates within the same priority, since we want to treat
      // those updates as parallel.
      // Unsuspend any update at equal or lower priority.
      var higherPriorityLanes = updateLane - 1;
      // Turns 0b1000 into 0b0111
      root.suspendedLanes &= higherPriorityLanes;
      root.pingedLanes &= higherPriorityLanes;
      var eventTimes = root.eventTimes;
      var index = laneToIndex(updateLane);
      // We can always overwrite an existing timestamp because we prefer the most
      // recent event, and we assume time is monotonically increasing.
      eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
      root.suspendedLanes |= suspendedLanes;
      root.pingedLanes &= ~suspendedLanes;
      // The suspended lanes are no longer CPU-bound. Clear their expiration times.
      var expirationTimes = root.expirationTimes;
      var lanes = suspendedLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        expirationTimes[index] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
      root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
      root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
      return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
      root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
      root.pendingLanes = remainingLanes;
      // Let's try everything again
      root.suspendedLanes = 0;
      root.pingedLanes = 0;
      root.expiredLanes &= remainingLanes;
      root.mutableReadLanes &= remainingLanes;
      root.entangledLanes &= remainingLanes;
      var entanglements = root.entanglements;
      var eventTimes = root.eventTimes;
      var expirationTimes = root.expirationTimes;
      // Clear the lanes that no longer have pending work
      var lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        entanglements[index] = NoLanes;
        eventTimes[index] = NoTimestamp;
        expirationTimes[index] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootEntangled(root, entangledLanes) {
      root.entangledLanes |= entangledLanes;
      var entanglements = root.entanglements;
      var lanes = entangledLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        entanglements[index] |= entangledLanes;
        lanes &= ~lane;
      }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
      if (lanes === 0) {
        return 32;
      }
      return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
    // TODO: can we stop exporting these?
    var _enabled = true;
    // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriorityForPluginSystem(domEventName);
      var listenerWrapper;
      switch (eventPriority) {
        case DiscreteEvent:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case UserBlockingEvent:
          listenerWrapper = dispatchUserBlockingUpdate;
          break;
        case ContinuousEvent:
        default:
          listenerWrapper = dispatchEvent;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
      }
      discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
      {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled) {
        return;
      }
      var allowReplay = true;
      {
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
      }
      if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
        // If we already have a queue of discrete events, and this is another discrete
        // event, then we can't dispatch it regardless of its target, since they
        // need to dispatch in order.
        queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
        domEventName, eventSystemFlags, targetContainer, nativeEvent);
        return;
      }
      var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        // We successfully dispatched this event.
        if (allowReplay) {
          clearIfContinuousEvent(domEventName, nativeEvent);
        }
        return;
      }
      if (allowReplay) {
        if (isReplayableDiscreteEvent(domEventName)) {
          // This this to be replayed later once the target is available.
          queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          return;
        }
        // We need to clear only if we didn't queue because
        // queueing is accummulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
      }
      // This is not replayable so we'll invoke it but without a target,
      // in case the event system needs to trace it.
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      // TODO: Warn if _enabled is false.
      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null) {
          // This tree has been unmounted already. Dispatch without a target.
          targetInst = null;
        } else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              // Queue the event to be replayed later. Abort dispatching since we
              // don't want this event dispatched twice through the event system.
              // TODO: If this is the first discrete event in the queue. Schedule an increased
              // priority for this boundary.
              return instance;
            }
            // This shouldn't happen, something went wrong but to avoid blocking
            // the whole system, dispatch the event without a target.
            // TODO: Warn.
            targetInst = null;
          } else if (tag === HostRoot) {
            var root = nearestMounted.stateNode;
            if (root.hydrate) {
              // If this happens during a replay something went wrong and it might block
              // the whole system.
              return getContainerFromFiber(nearestMounted);
            }
            targetInst = null;
          } else if (nearestMounted !== targetInst) {
            // If we get an event (ex: img onload) before committing that
            // component's mount, ignore it for now (that is, treat it as if it was an
            // event on a non-React tree). We might also consider queueing events and
            // dispatching them after the mount.
            targetInst = null;
          }
        }
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
      // We're not blocked on anything.
      return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, false);
      return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, true);
      return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        capture: true,
        passive: passive
      });
      return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        passive: passive
      });
      return listener;
    }
    /**
    * These variables store information about text content of a target node,
    * allowing comparison of content before and after a given event.
    *
    * Identify the node where selection currently begins, then observe
    * both its text content and its current position in the DOM. Since the
    * browser may natively replace the target node during composition, we can
    * use its position to find its replacement.
    *
    *
    */
    var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }
    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start;
      var startValue = startText;
      var startLength = startValue.length;
      var end;
      var endValue = getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }
    function getText() {
      if (('value' in root)) {
        return root.value;
      }
      return root.textContent;
    }
    /**
    * `charCode` represents the actual "character code" and is safe to use with
    * `String.fromCharCode`. As such, only keys that correspond to printable
    * characters produce a valid `charCode`, the only exception to this is Enter.
    * The Tab-key is considered non-printable and does not have a `charCode`,
    * presumably because it does not produce a tab-character in browsers.
    *
    * @param {object} nativeEvent Native browser event.
    * @return {number} Normalized `charCode` property.
    */
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if (('charCode' in nativeEvent)) {
        charCode = nativeEvent.charCode;
        // FF does not set `charCode` for the Enter-key, check against `keyCode`.
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      }
      // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.
      if (charCode === 10) {
        charCode = 13;
      }
      // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
      /**
      * Synthetic events are dispatched by event plugins, typically in response to a
      * top-level event delegation handler.
      *
      * These systems should generally use pooling to reduce the frequency of garbage
      * collection. The system should check `isPersistent` to determine whether the
      * event should be released into the pool after being dispatched. Users that
      * need a persisted event should invoke `persist`.
      *
      * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
      * normalizing browser quirks. Subclasses do not necessarily have to implement a
      * DOM interface; custom application-specific events can also subclass this.
      */
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName)) {
            continue;
          }
          var normalize = Interface[_propName];
          if (normalize) {
            this[_propName] = normalize(nativeEvent);
          } else {
            this[_propName] = nativeEvent[_propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      _assign(SyntheticBaseEvent.prototype, {
        preventDefault: function () {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== 'unknown') {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function () {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== 'unknown') {
            // The ChangeEventPlugin registers a "propertychange" event for
            // IE. This event does not support bubbling or cancelling, and
            // any references to cancelBubble throw "Member not found".  A
            // typeof check of "unknown" circumvents this issue (and is also
            // IE specific).
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
        * We release all dispatched `SyntheticEvent`s after each event loop, adding
        * them back into the pool. This allows a way to hold onto a reference that
        * won't be added back into the pool.
        */
        persist: function () {},
        /**
        * Checks if this event should be released back into the pool.
        *
        * @return {boolean} True if this should not be released, false otherwise.
        */
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    /**
    * @interface Event
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({}, EventInterface, {
      view: 0,
      detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === 'mousemove') {
          lastMovementX = event.screenX - lastMouseEvent.screenX;
          lastMovementY = event.screenY - lastMouseEvent.screenY;
        } else {
          lastMovementX = 0;
          lastMovementY = 0;
        }
        lastMouseEvent = event;
      }
    }
    /**
    * @interface MouseEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var MouseEventInterface = _assign({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function (event) {
        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function (event) {
        if (('movementX' in event)) {
          return event.movementX;
        }
        updateMouseMovementPolyfillState(event);
        return lastMovementX;
      },
      movementY: function (event) {
        if (('movementY' in event)) {
          return event.movementY;
        }
        // Don't need to call updateMouseMovementPolyfillState() here
        // because it's guaranteed to have already run when movementX
        // was copied.
        return lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
    * @interface DragEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var DragEventInterface = _assign({}, MouseEventInterface, {
      dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
    * @interface FocusEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var FocusEventInterface = _assign({}, UIEventInterface, {
      relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
    * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
    */
    var AnimationEventInterface = _assign({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/clipboard-apis/
    */
    var ClipboardEventInterface = _assign({}, EventInterface, {
      clipboardData: function (event) {
        return ('clipboardData' in event) ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
    */
    var CompositionEventInterface = _assign({}, EventInterface, {
      data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
    *      /#events-inputevents
    */
    // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
    * Normalization of deprecated HTML5 `key` values
    * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
    */
    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };
    /**
    * Translation from legacy `keyCode` to HTML5 `key`
    * Only special keys supported, all others depend on keyboard layout or browser
    * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
    */
    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };
    /**
    * @param {object} nativeEvent Native browser event.
    * @return {string} Normalized `key` property.
    */
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== 'Unidentified') {
          return key;
        }
      }
      // Browser does not implement `key`, polyfill as much of it as we can.
      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent);
        // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.
        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }
      return '';
    }
    /**
    * Translation from modifier key to the associated property in the event.
    * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
    */
    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    };
    // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    /**
    * @interface KeyboardEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var KeyboardEventInterface = _assign({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.
        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.
        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
    * @interface PointerEvent
    * @see http://www.w3.org/TR/pointerevents/
    */
    var PointerEventInterface = _assign({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
    * @interface TouchEvent
    * @see http://www.w3.org/TR/touch-events/
    */
    var TouchEventInterface = _assign({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
    * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
    */
    var TransitionEventInterface = _assign({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
    * @interface WheelEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var WheelEventInterface = _assign({}, MouseEventInterface, {
      deltaX: function (event) {
        return ('deltaX' in event) ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        ('wheelDeltaX' in event) ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return ('deltaY' in event) ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        ('wheelDeltaY' in event) ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        ('wheelDelta' in event) ? -event.wheelDelta : 0;
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && ('CompositionEvent' in window);
    var documentMode = null;
    if (canUseDOM && ('documentMode' in document)) {
      documentMode = document.documentMode;
    }
    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && ('TextEvent' in window) && !documentMode;
    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
      registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
      registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
      registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
    }
    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
    * Return whether a native keypress event is assumed to be a command.
    * This is required because Firefox fires `keypress` events for key commands
    * (cut, copy, select-all, etc.) even though no character is inserted.
    */
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
    * Translate native top level events into event types.
    */
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case 'compositionstart':
          return 'onCompositionStart';
        case 'compositionend':
          return 'onCompositionEnd';
        case 'compositionupdate':
          return 'onCompositionUpdate';
      }
    }
    /**
    * Does our fallback best-guess model think this event signifies that
    * composition has begun?
    */
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
    * Does our fallback mode think that this event is the end of composition?
    */
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case 'keyup':
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case 'keydown':
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;
        case 'keypress':
        case 'mousedown':
        case 'focusout':
          // Events are not possible without cancelling IME.
          return true;
        default:
          return false;
      }
    }
    /**
    * Google Input Tools provides composition data via a CustomEvent,
    * with the `data` property populated in the `detail` object. If this
    * is available on the event object, use it. If not, this is a plain
    * composition event and we have nothing special to extract.
    *
    * @param {object} nativeEvent
    * @return {?string}
    */
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === 'object' && ('data' in detail)) {
        return detail.data;
      }
      return null;
    }
    /**
    * Check if a composition event was triggered by Korean IME.
    * Our fallback mode does not work well with IE's Korean IME,
    * so just use native composition events when Korean IME is used.
    * Although CompositionEvent.locale property is deprecated,
    * it is available in IE, where our fallback mode is enabled.
    *
    * @param {object} nativeEvent
    * @return {boolean}
    */
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    }
    // Track the current IME composition status, if any.
    var isComposing = false;
    /**
    * @return {?object} A SyntheticCompositionEvent.
    */
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(domEventName);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
          eventType = 'onCompositionStart';
        }
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
        eventType = 'onCompositionEnd';
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === 'onCompositionStart') {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === 'onCompositionEnd') {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
        if (fallbackData) {
          // Inject data generated from fallback path into the synthetic event.
          // This matches the property of native CompositionEventInterface.
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case 'compositionend':
          return getDataFromCustomEvent(nativeEvent);
        case 'keypress':
          /**
          * If native `textInput` events are available, our goal is to make
          * use of them. However, there is a special case: the spacebar key.
          * In Webkit, preventing default on a spacebar `textInput` event
          * cancels character insertion, but it *also* causes the browser
          * to fall back to its default spacebar behavior of scrolling the
          * page.
          *
          * Tracking at:
          * https://code.google.com/p/chromium/issues/detail?id=355103
          *
          * To avoid this issue, use the keypress event as if no `textInput`
          * event is available.
          */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case 'textInput':
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data;
          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }
          return chars;
        default:
          // For other native event types, do nothing.
          return null;
      }
    }
    /**
    * For browsers that do not provide the `textInput` event, extract the
    * appropriate string to use for SyntheticInputEvent.
    */
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }
        return null;
      }
      switch (domEventName) {
        case 'paste':
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;
        case 'keypress':
          /**
          * As of v27, Firefox may fire keypress events even when no character
          * will be inserted. A few possibilities:
          *
          * - `which` is `0`. Arrow keys, Esc key, etc.
          *
          * - `which` is the pressed key code, but no char is available.
          *   Ex: 'AltGr + d` in Polish. There is no modified character for
          *   this key combination and no character is inserted into the
          *   document, but FF fires the keypress for char code `100` anyway.
          *   No `input` event will occur.
          *
          * - `which` is the pressed key code, but a command combination is
          *   being used. Ex: `Cmd+C`. No character is inserted, and no
          *   `input` event will occur.
          */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case 'compositionend':
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    /**
    * Extract a SyntheticInputEvent for `beforeInput`, based on either native
    * `textInput` or fallback behavior.
    *
    * @return {?object} A SyntheticInputEvent.
    */
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
      }
      // If no characters are being inserted, no BeforeInput event should
      // be fired.
      if (!chars) {
        return null;
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
        event.data = chars;
      }
    }
    /**
    * Create an `onBeforeInput` event to match
    * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
    *
    * This event plugin is based on the native `textInput` event
    * available in Chrome, Safari, Opera, and IE. This event fires after
    * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
    *
    * `beforeInput` is spec'd but not implemented in any browsers, and
    * the `input` event does not provide any useful information about what has
    * actually been added, contrary to the spec. Thus, `textInput` is the best
    * available event to identify the characters that have actually been inserted
    * into the target node.
    *
    * This plugin is also responsible for emitting `composition` events, thus
    * allowing us to share composition fallback code for both `beforeInput` and
    * `composition` event types.
    */
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
    * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
    */
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }
      if (nodeName === 'textarea') {
        return true;
      }
      return false;
    }
    /**
    * Checks if an event is supported in the current execution environment.
    *
    * NOTE: This will not work correctly for non-generic events such as `change`,
    * `reset`, `load`, `error`, and `select`.
    *
    * Borrows from Modernizr.
    *
    * @param {string} eventNameSuffix Event name, e.g. "click".
    * @return {boolean} True if the event is supported.
    * @internal
    * @license Modernizr 3.0.0pre (Custom Build) | MIT
    */
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }
      var eventName = 'on' + eventNameSuffix;
      var isSupported = (eventName in document);
      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }
      return isSupported;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      // Flag this event loop as needing state restore.
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
      if (listeners.length > 0) {
        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
      }
    }
    /**
    * For IE shims
    */
    var activeElement = null;
    var activeElementInst = null;
    /**
    * SECTION: handle `change` event
    */
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
      // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      // 
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.
      batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === 'change') {
        return targetInst;
      }
    }
    /**
    * SECTION: handle `input` event
    */
    var isInputEventSupported = false;
    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
    * (For IE <=9) Starts tracking propertychange events on the passed-in element
    * and override the value property so that we can distinguish user events from
    * value changes in JS.
    */
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
    * (For IE <=9) Removes the event listeners from the currently-tracked element,
    * if any exists.
    */
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    /**
    * (For IE <=9) Handles a propertychange event, sending a `change` event if
    * the value of the active element has changed.
    */
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === 'focusin') {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        // 
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (domEventName === 'focusout') {
        stopWatchingForValueChange();
      }
    }
    // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        // 
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }
    /**
    * SECTION: handle `click` event
    */
    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === 'click') {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === 'input' || domEventName === 'change') {
        return getInstIfValueChanged(targetInst);
      }
    }
    function handleControlledInputBlur(node) {
      var state = node._wrapperState;
      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }
      {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }
    /**
    * This plugin creates an `onChange` event that normalizes change events
    * across form elements. This event fires at a time when it's possible to
    * change the element's value without seeing a flicker.
    *
    * Supported elements are:
    * - input (see `isTextInputElement`)
    * - textarea
    * - select
    */
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(domEventName, targetNode, targetInst);
      }
      // When blurring, set the value attribute for number inputs
      if (domEventName === 'focusout') {
        handleControlledInputBlur(targetNode);
      }
    }
    function registerEvents$2() {
      registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
      registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
      registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
      registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
    }
    /**
    * For almost every interaction we care about, there will be both a top-level
    * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
    * we do not extract duplicate events. However, moving the mouse into the
    * browser from outside will not fire a `mouseout` event. In this case, we use
    * the `mouseover` top-level event.
    */
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
      if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
        // If this is an over event with a target, we might have already dispatched
        // the event in the out event of the other target. If this is replayed,
        // then it's because we couldn't dispatch against this target previously
        // so we have to do it now instead.
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          // If the related node is managed by React, we can assume that we have
          // already dispatched the corresponding events during its mouseout.
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
            return;
          }
        }
      }
      if (!isOutEvent && !isOverEvent) {
        // Must not be a mouse or pointer in or out - ignoring.
        return;
      }
      var win;
      // TODO: why is this nullable in the types but we read from it?
      if (nativeEventTarget.window === nativeEventTarget) {
        // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from;
      var to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        from = targetInst;
        to = _related ? getClosestInstanceFromNode(_related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        // Moving to a node from outside the window.
        from = null;
        to = targetInst;
      }
      if (from === to) {
        // Nothing pertains to our managed components.
        return;
      }
      var SyntheticEventCtor = SyntheticMouseEvent;
      var leaveEventType = 'onMouseLeave';
      var enterEventType = 'onMouseEnter';
      var eventTypePrefix = 'mouse';
      if (domEventName === 'pointerout' || domEventName === 'pointerover') {
        SyntheticEventCtor = SyntheticPointerEvent;
        leaveEventType = 'onPointerLeave';
        enterEventType = 'onPointerEnter';
        eventTypePrefix = 'pointer';
      }
      var fromNode = from == null ? win : getNodeFromInstance(from);
      var toNode = to == null ? win : getNodeFromInstance(to);
      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = null;
      // We should only process this nativeEvent if we are processing
      // the first ancestor. Next time, we will ignore the event.
      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode;
        enterEvent.relatedTarget = fromNode;
        enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
    * inlined Object.is polyfill to avoid requiring consumers ship their own
    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    */
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
    * Performs equality by iterating through keys on an object and returning false
    * when any key has values which are not strictly equal between the arguments.
    * Returns true when the values of all keys are strictly equal.
    */
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) {
        return true;
      }
      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      // Test for A's keys different from B.
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    /**
    * Given any node return the first leaf node without children.
    *
    * @param {DOMElement|DOMTextNode} node
    * @return {DOMElement|DOMTextNode}
    */
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }
    /**
    * Get the next sibling within a container. This will walk up the
    * DOM if a node's siblings have been exhausted.
    *
    * @param {DOMElement|DOMTextNode} node
    * @return {?DOMElement|DOMTextNode}
    */
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }
    /**
    * Get object describing the nodes which contain characters at offset.
    *
    * @param {DOMElement|DOMTextNode} root
    * @param {number} offset
    * @return {?object}
    */
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;
          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node = getLeafNode(getSiblingNode(node));
      }
    }
    /**
    * @param {DOMElement} outerNode
    * @return {?object}
    */
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
      // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
      try {
        /*eslint-disable no-unused-expressions*/
        anchorNode.nodeType;
        focusNode.nodeType;
      } catch (e) {
        return null;
      }
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
    * Returns {start, end} where `start` is the character/codepoint index of
    * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
    * `end` is the index of (focusNode, focusOffset).
    *
    * Returns null if you pass in garbage input but we should probably just crash.
    *
    * Exported only for testing.
    */
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;
      outer: while (true) {
        var next = null;
        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }
          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }
          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }
          if ((next = node.firstChild) === null) {
            break;
          }
          // Moving from `node` to its first child `next`.
          parentNode = node;
          node = next;
        }
        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }
          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }
          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }
          if ((next = node.nextSibling) !== null) {
            break;
          }
          node = parentNode;
          parentNode = node.parentNode;
        }
        // Moving from `node` to its next sibling `next`.
        node = next;
      }
      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }
      return {
        start: start,
        end: end
      };
    }
    /**
    * In modern non-IE browsers, we can support both forward and backward
    * selections.
    *
    * Note: IE10+ supports the Selection object, but it does not support
    * the `extend` method, which means that even in modern IE, it's not possible
    * to programmatically create a backward selection. Thus, for all IE
    * versions, we use the old IE API to create our selections.
    *
    * @param {DOMElement|DOMTextNode} node
    * @param {object} offsets
    */
    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window;
      // Edge fails with "Object expected" in some scenarios.
      // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
      // fails when pasting 100+ items)
      if (!win.getSelection) {
        return;
      }
      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
      // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }
    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if (('contains' in outerNode)) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
      try {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute.
        // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
        // iframe.contentDocument.defaultView;
        // A safety way is to access one of the cross origin properties: Window or Location
        // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
        // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
        return typeof iframe.contentWindow.location.href === 'string';
      } catch (err) {
        return false;
      }
    }
    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }
    /**
    * @ReactInputSelection: React input selection module. Based on Selection.js,
    * but modified to be suitable for react and has a couple of bug fixes (doesn't
    * assume buttons have range selections allowed).
    * Input selection module for React.
    */
    /**
    * @hasSelectionCapabilities: we get the element types that support selection
    * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
    * and `selectionEnd` rows.
    */
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    /**
    * @restoreSelection: If any selection information was potentially lost,
    * restore it. This is useful when performing operations that could remove dom
    * nodes and place them back in, resulting in focus being lost.
    */
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }
        // Focusing a node can change the scroll position, which is undesirable
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }
        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }
        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    /**
    * @getSelection: Gets the selection bounds of a focused textarea, input or
    * contentEditable node.
    * -@input: Look up selection bounds of this input
    * -@return {start: selectionStart, end: selectionEnd}
    */
    function getSelection(input) {
      var selection;
      if (('selectionStart' in input)) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }
      return selection || ({
        start: 0,
        end: 0
      });
    }
    /**
    * @setSelection: Sets the selection bounds of a textarea or input and focuses
    * the input.
    * -@input     Set selection bounds of this input or textarea
    * -@offsets   Object of same form that is returned from get*
    */
    function setSelection(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === undefined) {
        end = start;
      }
      if (('selectionStart' in input)) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }
    var skipSelectionChangeEvent = canUseDOM && ('documentMode' in document) && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
    * Get an object which is a unique representation of the current selection.
    *
    * The return value will not be consistent across nodes or browsers, but
    * two identical selections on the same node will return identical objects.
    */
    function getSelection$1(node) {
      if (('selectionStart' in node) && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    /**
    * Get document associated with the event target.
    */
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
    * Poll selection to see whether it's changed.
    *
    * @param {object} nativeEvent
    * @param {object} nativeEventTarget
    * @return {?SyntheticEvent}
    */
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return;
      }
      // Only fire when selection has actually changed.
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
        if (listeners.length > 0) {
          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: event,
            listeners: listeners
          });
          event.target = activeElement$1;
        }
      }
    }
    /**
    * This plugin creates an `onSelect` event that normalizes select events
    * across form elements.
    *
    * Supported elements are:
    * - input (see `isTextInputElement`)
    * - textarea
    * - contentEditable
    *
    * This differs from native browser implementations in the following ways:
    * - Fires on contentEditable fields as well as inputs.
    * - Fires for collapsed selection.
    * - Fires after user input.
    */
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case 'focusin':
          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case 'focusout':
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case 'mousedown':
          mouseDown = true;
          break;
        case 'contextmenu':
        case 'mouseup':
        case 'dragend':
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case 'selectionchange':
          if (skipSelectionChangeEvent) {
            break;
          }
        case 'keydown':
        case 'keyup':
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === undefined) {
        return;
      }
      var SyntheticEventCtor = SyntheticEvent;
      var reactEventType = domEventName;
      switch (domEventName) {
        case 'keypress':
          // Firefox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode(nativeEvent) === 0) {
            return;
          }
        case 'keydown':
        case 'keyup':
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case 'focusin':
          reactEventType = 'focus';
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case 'focusout':
          reactEventType = 'blur';
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case 'beforeblur':
        case 'afterblur':
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case 'click':
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return;
          }
        case 'auxclick':
        case 'dblclick':
        case 'mousedown':
        case 'mousemove':
        case 'mouseup':
        case 'mouseout':
        case 'mouseover':
        case 'contextmenu':
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case 'drag':
        case 'dragend':
        case 'dragenter':
        case 'dragexit':
        case 'dragleave':
        case 'dragover':
        case 'dragstart':
        case 'drop':
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case 'touchcancel':
        case 'touchend':
        case 'touchmove':
        case 'touchstart':
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case 'scroll':
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case 'wheel':
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case 'copy':
        case 'cut':
        case 'paste':
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case 'gotpointercapture':
        case 'lostpointercapture':
        case 'pointercancel':
        case 'pointerdown':
        case 'pointermove':
        case 'pointerout':
        case 'pointerover':
        case 'pointerup':
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          // Intentionally create event lazily.
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      // TODO: we should remove the concept of a "SimpleEventPlugin".
      // This is the basic functionality of the event system. All
      // the other plugins are essentially polyfills. So the plugin
      // should probably be inlined somewhere and have its logic
      // be core the to event system. This would potentially allow
      // us to ship builds of React without the polyfilled plugins below.
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      // We don't process these events unless we are in the
      // event's native "bubble" phase, which means that we're
      // not in the capture phase. That's because we emulate
      // the capture phase here still. This is a trade-off,
      // because in an ideal world we would not emulate and use
      // the phases properly, like we do with the SimpleEvent
      // plugin. However, the plugins below either expect
      // emulation (EnterLeave) or use state localized to that
      // plugin (BeforeInput, Change, Select). The state in
      // these modules complicates things, as you'll essentially
      // get the case where the capture phase event might change
      // state, only for the following bubble event to come in
      // later and not trigger anything as the state now
      // invalidates the heuristics of the event plugin. We
      // could alter all these plugins to work in such ways, but
      // that might cause other unknown side-effects that we
      // can't forsee right now.
      if (shouldProcessPolyfillPlugins) {
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
    }
    // List of events that need to be individually attached to media elements.
    var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting'];
    // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || 'unknown-event';
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase) {
        for (var i = dispatchListeners.length - 1; i >= 0; i--) {
          var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, listener, currentTarget);
          previousInstance = instance;
        }
      } else {
        for (var _i = 0; _i < dispatchListeners.length; _i++) {
          var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, _listener, _currentTarget);
          previousInstance = _instance;
        }
      }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      // This would be a good time to rethrow if any of the event handlers threw.
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent);
      var dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      var isCapturePhaseListener = false;
      var listenerSet = getEventListenerSet(targetElement);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey)) {
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      {
        if (rootContainerElement[listeningMarker]) {
          // Performance optimization: don't iterate through events
          // for the same portal container or root node more than once.
          // TODO: once we remove the flag, we may be able to also
          // remove some of the bookkeeping maps used for laziness.
          return;
        }
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function (domEventName) {
          if (!nonDelegatedEvents.has(domEventName)) {
            listenToNativeEvent(domEventName, false, rootContainerElement, null);
          }
          listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
      }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
      var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var target = rootContainerElement;
      // selectionchange needs to be attached to the document
      // otherwise it won't capture incoming events that are only
      // triggered on the document directly.
      if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
        target = rootContainerElement.ownerDocument;
      }
      // If the event can be delegated (or is capture phase), we can
      // register it to the root container. Otherwise, we should
      // register the event to the target element and mark it as
      // a non-delegated event.
      if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
        // For all non-delegated events, apart from scroll, we attach
        // their event listeners to the respective elements that their
        // events fire on. That means we can skip this step, as event
        // listener has already been added previously. However, we
        // special case the scroll event because the reality is that any
        // element can scroll.
        // TODO: ideally, we'd eventually apply the same logic to all
        // events from the nonDelegatedEvents list. Then we can remove
        // this special case and use the same logic for all events.
        if (domEventName !== 'scroll') {
          return;
        }
        eventSystemFlags |= IS_NON_DELEGATED;
        target = targetElement;
      }
      var listenerSet = getEventListenerSet(target);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      // If the listener entry is empty or we should upgrade, then
      // we need to trap an event listener onto the target.
      if (!listenerSet.has(listenerSetKey)) {
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
      // If passive option is not supported, then the event will be
      // active and not passive.
      var isPassiveListener = undefined;
      if (passiveBrowserEventsSupported) {
        // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
          isPassiveListener = true;
        }
      }
      targetContainer = targetContainer;
      var unsubscribeListener;
      // When legacyFBSupport is enabled, it's for when we
      if (isCapturePhaseListener) {
        if (isPassiveListener !== undefined) {
          unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        }
      } else {
        if (isPassiveListener !== undefined) {
          unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
        }
      }
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        // If we are using the legacy FB support flag, we
        if (targetInst !== null) {
          // The below logic attempts to work out if we need to change
          // the target fiber to a different ancestor. We had similar logic
          // in the legacy event system, except the big difference between
          // systems is that the modern event system now has an event listener
          // attached to each React Root and React Portal Root. Together,
          // the DOM nodes representing these roots are the "rootContainer".
          // To figure out which ancestor instance we should use, we traverse
          // up the fiber tree from the target instance and attempt to find
          // root boundaries that match that of our current "rootContainer".
          // If we find that "rootContainer", we find the parent fiber
          // sub-tree for that root and make that our ancestor instance.
          var node = targetInst;
          mainLoop: while (true) {
            if (node === null) {
              return;
            }
            var nodeTag = node.tag;
            if (nodeTag === HostRoot || nodeTag === HostPortal) {
              var container = node.stateNode.containerInfo;
              if (isMatchingRootContainer(container, targetContainerNode)) {
                break;
              }
              if (nodeTag === HostPortal) {
                // The target is a portal, but it's not the rootContainer we're looking for.
                // Normally portals handle their own events all the way down to the root.
                // So we should be able to stop now. However, we don't know if this portal
                // was part of *our* root.
                var grandNode = node.return;
                while (grandNode !== null) {
                  var grandTag = grandNode.tag;
                  if (grandTag === HostRoot || grandTag === HostPortal) {
                    var grandContainer = grandNode.stateNode.containerInfo;
                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                      // This is the rootContainer we're looking for and we found it as
                      // a parent of the Portal. That means we can ignore it because the
                      // Portal will bubble through to us.
                      return;
                    }
                  }
                  grandNode = grandNode.return;
                }
              }
              // Now we need to find it's corresponding host fiber in the other
              // tree. To do this we can use getClosestInstanceFromNode, but we
              // need to validate that the fiber is a host instance, otherwise
              // we need to traverse up through the DOM till we find the correct
              // node that is from the other tree.
              while (container !== null) {
                var parentNode = getClosestInstanceFromNode(container);
                if (parentNode === null) {
                  return;
                }
                var parentTag = parentNode.tag;
                if (parentTag === HostComponent || parentTag === HostText) {
                  node = ancestorInst = parentNode;
                  continue mainLoop;
                }
                container = container.parentNode;
              }
            }
            node = node.return;
          }
        }
      }
      batchedEventUpdates(function () {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance: instance,
        listener: listener,
        currentTarget: currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
      var captureName = reactName !== null ? reactName + 'Capture' : null;
      var reactEventName = inCapturePhase ? captureName : reactName;
      var listeners = [];
      var instance = targetFiber;
      var lastHostComponent = null;
      // Accumulate all instances and listeners via the target -> root path.
      while (instance !== null) {
        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
        // Handle listeners that are on HostComponents (i.e. <div>)
        if (tag === HostComponent && stateNode !== null) {
          lastHostComponent = stateNode;
          // createEventHandle listeners
          if (reactEventName !== null) {
            var listener = getListener(instance, reactEventName);
            if (listener != null) {
              listeners.push(createDispatchListener(instance, listener, lastHostComponent));
            }
          }
        }
        // If we are only accumulating events for the target, then we don't
        // continue to propagate through the React fiber tree to find other
        // listeners.
        if (accumulateTargetOnly) {
          break;
        }
        instance = instance.return;
      }
      return listeners;
    }
    // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + 'Capture';
      var listeners = [];
      var instance = targetFiber;
      // Accumulate all instances and listeners via the target -> root path.
      while (instance !== null) {
        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
        // Handle listeners that are on HostComponents (i.e. <div>)
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          var captureListener = getListener(instance, captureName);
          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          }
          var bubbleListener = getListener(instance, reactName);
          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
        }
        instance = instance.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (inst === null) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }
    /**
    * Return the lowest common ancestor of A and B, or null if they are in
    * different trees.
    */
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA;
      var nodeB = instB;
      var depthA = 0;
      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }
      // If A is deeper, crawl up.
      while (depthA - depthB > 0) {
        nodeA = getParent(nodeA);
        depthA--;
      }
      // If B is deeper, crawl up.
      while (depthB - depthA > 0) {
        nodeB = getParent(nodeB);
        depthB--;
      }
      // Walk in lockstep until we find a match.
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
          return nodeA;
        }
        nodeA = getParent(nodeA);
        nodeB = getParent(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName;
      var listeners = [];
      var instance = target;
      while (instance !== null) {
        if (instance === common) {
          break;
        }
        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common) {
          break;
        }
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance, registrationName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance, registrationName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
        }
        instance = instance.return;
      }
      if (listeners.length !== 0) {
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
      }
    }
    // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      if (from !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
      }
      if (to !== null && enterEvent !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    {
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };
      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
          registrationNameDependencies: registrationNameDependencies,
          possibleRegistrationNames: possibleRegistrationNames
        });
      };
      // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
      // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };
      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };
      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };
      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        error('Extra attributes from the server: %s', names);
      };
      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      };
      // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.
      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
                      // Relies on `updateStylesByID` not mutating `styleUpdates`.
}
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === 'onScroll') {
              listenToNonDelegatedEvent('scroll', domElement);
            }
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag;
      // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE$1) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE$1) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.
          if (!isCustomComponentTag && type !== type.toLowerCase()) {
            error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
          }
        }
        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>';
          // eslint-disable-line
          // This is guaranteed to yield a script element.
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type);
          // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
          // attributes on `select`s needs to be added before `option`s are inserted.
          // This prevents:
          // - a bug where the `select` does not scroll to the correct option because singular
          // `select` elements automatically pick the first item #13222
          // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
          // See https://github.com/facebook/react/issues/13222
          // and https://github.com/facebook/react/issues/14239
          if (type === 'select') {
            var node = domElement;
            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
              // it is possible that no option is selected.
              // 
              // This is only necessary when a select in "single selection mode".
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }
      {
        if (namespaceURI === HTML_NAMESPACE$1) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
              // TODO: Make sure that we check isMounted before firing any of these events.
}
      // TODO: Make sure that we check isMounted before firing any of these events.
      var props;
      switch (tag) {
        case 'dialog':
          listenToNonDelegatedEvent('cancel', domElement);
          listenToNonDelegatedEvent('close', domElement);
          props = rawProps;
          break;
        case 'iframe':
        case 'object':
        case 'embed':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the load event.
          listenToNonDelegatedEvent('load', domElement);
          props = rawProps;
          break;
        case 'video':
        case 'audio':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for all the media events.
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          props = rawProps;
          break;
        case 'source':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the error event.
          listenToNonDelegatedEvent('error', domElement);
          props = rawProps;
          break;
        case 'img':
        case 'image':
        case 'link':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for error and load events.
          listenToNonDelegatedEvent('error', domElement);
          listenToNonDelegatedEvent('load', domElement);
          props = rawProps;
          break;
        case 'details':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the toggle event.
          listenToNonDelegatedEvent('toggle', domElement);
          props = rawProps;
          break;
        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;
        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        default:
          props = rawProps;
      }
      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;
        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }
    // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps;
      var nextProps;
      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey;
      var styleName;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the allowed property list in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
          var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string' || typeof nextProp === 'number') {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === 'onScroll') {
              listenToNonDelegatedEvent('scroll', domElement);
            }
          }
          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
          // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
          // In this case, call the opaque object's toString function which generates a new client
          // ID so client and server IDs match and throws to rerender.
          nextProp.toString();
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the allowed property list during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
        }
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }
      return updatePayload;
    }
    // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      // Apply the diff.
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
      // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.
      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;
        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;
        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag;
      var extraAttributeNames;
      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
              // TODO: Make sure that we check isMounted before firing any of these events.
}
      // TODO: Make sure that we check isMounted before firing any of these events.
      switch (tag) {
        case 'dialog':
          listenToNonDelegatedEvent('cancel', domElement);
          listenToNonDelegatedEvent('close', domElement);
          break;
        case 'iframe':
        case 'object':
        case 'embed':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the load event.
          listenToNonDelegatedEvent('load', domElement);
          break;
        case 'video':
        case 'audio':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for all the media events.
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          break;
        case 'source':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the error event.
          listenToNonDelegatedEvent('error', domElement);
          break;
        case 'img':
        case 'image':
        case 'link':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for error and load events.
          listenToNonDelegatedEvent('error', domElement);
          listenToNonDelegatedEvent('load', domElement);
          break;
        case 'details':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the toggle event.
          listenToNonDelegatedEvent('toggle', domElement);
          break;
        case 'input':
          initWrapperState(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'option':
          validateProps(domElement, rawProps);
          break;
        case 'select':
          initWrapperState$1(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            case 'data-reactroot':
              break;
            case 'value':
              break;
            case 'checked':
              break;
            case 'selected':
              break;
            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if (!suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if (!suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }
              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === 'onScroll') {
              listenToNonDelegatedEvent('scroll', domElement);
            }
          }
        } else if (// Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);
          if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            }
          } else if (propKey === STYLE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);
            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE$1) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE$1) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true;
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(standardName);
                }
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }
      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }
      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;
        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;
        case 'textarea':
          restoreControlledState$2(domElement, props);
          return;
        case 'select':
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function () {};
    var updatedAncestorInfo = function () {};
    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      // 
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.
      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title'];
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
      var buttonScopeTags = inScopeTags.concat(['button']);
      // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
        var info = {
          tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }
        // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }
        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }
        return ancestorInfo;
      };
      /**
      * Returns whether
      */
      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';
          case 'optgroup':
            return tag === 'option' || tag === '#text';
          case 'option':
            return tag === '#text';
          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'colgroup':
            return tag === 'col' || tag === 'template';
          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'html':
            return tag === 'head' || tag === 'body' || tag === 'frameset';
          case 'frameset':
            return tag === 'frame';
          case '#document':
            return tag === 'html';
        }
        // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;
          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frameset':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }
        return true;
      };
      /**
      * Returns whether
      */
      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;
          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case 'li':
            return ancestorInfo.listItemTagAutoclosing;
          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;
          case 'button':
            return ancestorInfo.buttonTagInScope;
          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;
          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      };
      var didWarn$1 = {};
      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null) {
            error('validateDOMNesting: when childText is passed, childTag should be null');
          }
          childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) {
          return;
        }
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
          if ((/\S/).test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }
        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else {
          error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
        }
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1;
    {
      SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    }
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }
      return false;
    }
    function getRootHostContext(rootContainerInstance) {
      var type;
      var namespace;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }
        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }
      {
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace: namespace,
          ancestorInfo: ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace: namespace,
          ancestorInfo: ancestorInfo
        };
      }
    }
    function getPublicInstance(instance) {
      return instance;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      var activeInstance = null;
      setEnabled(false);
      return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      setEnabled(eventsEnabled);
      eventsEnabled = null;
      selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps);
      // Apply the diff to the DOM node.
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that non React root containers have inline onclick
      // defined.
      // https://github.com/facebook/react/issues/11918
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
    function hideInstance(instance) {
      // TODO: Does this work for all element types? What about MathML? Should we
      // pass host context to this method?
      instance = instance;
      var style = instance.style;
      if (typeof style.setProperty === 'function') {
        style.setProperty('display', 'none', 'important');
      } else {
        style.display = 'none';
      }
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE$1];
      var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
      instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE) {
        container.textContent = '';
      } else if (container.nodeType === DOCUMENT_NODE) {
        var body = container.body;
        if (body != null) {
          body.textContent = '';
        }
      }
    }
    // -------------------
    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      // This has now been refined to an element node.
      return instance;
    }
    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      }
      // This has now been refined to a text node.
      return instance;
    }
    function isSuspenseInstancePending(instance) {
      return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
      return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
      // Skip non-hydratable nodes.
      for (; node != null; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
          break;
        }
      }
      return node;
    }
    function getNextHydratableSibling(instance) {
      return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance);
      // TODO: Possibly defer this until the commit phase where all the events
      // get attached.
      updateFiberProps(instance, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling;
      // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            depth++;
          }
        }
        node = node.nextSibling;
      }
      // TODO: Warn, we didn't find the end comment boundary.
      return null;
    }
    // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
      var node = targetInstance.previousSibling;
      // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            if (depth === 0) {
              return node;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_END_DATA) {
            depth++;
          }
        }
        node = node.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      // Retry if any event replaying was blocked on this.
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      // Retry if any event replaying was blocked on this.
      retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE) ; else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else if (instance.nodeType === COMMENT_NODE) ; else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type);
      }
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        warnForInsertedHydratedElement(parentInstance, type);
      }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
      var id = 'r:' + (clientId++).toString(36);
      return {
        toString: function () {
          warnOnAccessInDEV();
          return id;
        },
        valueOf: function () {
          warnOnAccessInDEV();
          return id;
        }
      };
    }
    function isOpaqueHydratingObject(value) {
      return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
      return {
        $$typeof: REACT_OPAQUE_ID_TYPE,
        toString: attemptToReadValue,
        valueOf: attemptToReadValue
      };
    }
    function preparePortalMount(portalInstance) {
      {
        listenToAllSupportedEvents(portalInstance);
      }
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
      node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
      node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
      return !!node[internalContainerInstanceKey];
    }
    // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
      }
      // If the direct event target isn't a React owned DOM node, we need to look
      // to see if one of its parents is a React owned DOM node.
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        // We'll check if this is a container root that could include
        // React nodes in the future. We need to check this first because
        // if we're a child of a dehydrated container, we need to first
        // find that inner container before moving on to finding the parent
        // instance. Note that we don't check this field on  the targetNode
        // itself because the fibers are conceptually between the container
        // node and the first child. It isn't surrounding the container node.
        // If it's not a container, we check if it's an instance.
        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
        if (targetInst) {
          // Since this wasn't the direct target of the event, we might have
          // stepped past dehydrated DOM nodes to get here. However they could
          // also have been non-React nodes. We need to answer which one.
          // If we the instance doesn't have any children, then there can't be
          // a nested suspense boundary within it. So we can use this as a fast
          // bailout. Most of the time, when people add non-React children to
          // the tree, it is using a ref to a child-less DOM node.
          // Normally we'd only need to check one of the fibers because if it
          // has ever gone from having children to deleting them or vice versa
          // it would have deleted the dehydrated boundary nested inside already.
          // However, since the HostRoot starts out with an alternate it might
          // have one on the alternate so we need to check in case this was a
          // root.
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            // Next we need to figure out if the node that skipped past is
            // nested within a dehydrated boundary and if so, which one.
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              // We found a suspense instance. That means that we haven't
              // hydrated it yet. Even though we leave the comments in the
              // DOM after hydrating, and there are boundaries in the DOM
              // that could already be hydrated, we wouldn't have found them
              // through this pass since if the target is hydrated it would
              // have had an internalInstanceKey on it.
              // Let's get the fiber associated with the SuspenseComponent
              // as the deepest instance.
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst) {
                return targetSuspenseInst;
              }
              // If we don't find a Fiber on the comment, it might be because
              // we haven't gotten to hydrate it yet. There might still be a
              // parent boundary that hasn't above this one so we need to find
              // the outer most that is known.
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    /**
    * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
    * instance, or null if the node was not rendered by this React.
    */
    function getInstanceFromNode(node) {
      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }
    /**
    * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
    * DOM node.
    */
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      }
      // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.
      {
        {
          throw Error("getNodeFromInstance: Invalid argument.");
        }
      }
    }
    function getFiberCurrentPropsFromNode(node) {
      return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
      node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
      var elementListenerSet = node[internalEventHandlersKey];
      if (elementListenerSet === undefined) {
        elementListenerSet = node[internalEventHandlersKey] = new Set();
      }
      return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !((error$1.message in loggedTypeFailures))) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var valueStack = [];
    var fiberStack;
    {
      fiberStack = [];
    }
    var index = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor, fiber) {
      if (index < 0) {
        {
          error('Unexpected pop.');
        }
        return;
      }
      {
        if (fiber !== fiberStack[index]) {
          error('Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }
    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
          // A cursor to the current merged context object on the stack.
}
    // A cursor to the current merged context object on the stack.
    var contextStackCursor = createCursor(emptyContextObject);
    // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false);
    // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          // If the fiber is a context provider itself, when we read its context
          // we may have already pushed its own child context on the stack. A context
          // provider should not "see" its own child context. Therefore we read the
          // previous (parent) context instead for a context provider.
          return previousContext;
        }
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
      {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyContextObject;
        }
        // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }
        {
          var name = getComponentName(type) || 'Unknown';
          checkPropTypes(contextTypes, context, 'context', name);
                  // Cache unmasked context so we can avoid recreating masked context unless necessary.
          // Context is created before the class component is instantiated so check for instance.
}
        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // Context is created before the class component is instantiated so check for instance.
        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }
        return context;
      }
    }
    function hasContextChanged() {
      {
        return didPerformWorkStackCursor.current;
      }
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
      }
    }
    function popContext(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function popTopLevelContextObject(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (!(contextStackCursor.current === emptyContextObject)) {
          {
            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
          {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
            }
          }
          return parentContext;
        }
        var childContext = instance.getChildContext();
        for (var contextKey in childContext) {
          if (!((contextKey in childContextTypes))) {
            {
              throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
            }
          }
        }
        {
          var name = getComponentName(type) || 'Unknown';
          checkPropTypes(childContextTypes, childContext, 'child context', name);
        }
        return _assign({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress) {
      {
        var instance = workInProgress.stateNode;
        // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
      {
        var instance = workInProgress.stateNode;
        if (!instance) {
          {
            throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (didChange) {
          // Merge parent and own context.
          // Skip this if we're not updating due to sCU.
          // This avoids unnecessarily recomputing memoized values.
          var mergedContext = processChildContext(workInProgress, type, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          // Replace the old (or empty) context with the new one.
          // It is important to unwind the context in the reverse order.
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          // Now push the new context and mark that it has changed.
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
          {
            throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var node = fiber;
        do {
          switch (node.tag) {
            case HostRoot:
              return node.stateNode.context;
            case ClassComponent:
              {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
          }
          node = node.return;
        } while (node !== null);
        {
          {
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }
      if (!hook.supportsFiber) {
        {
          error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
                  // DevTools exists, even though it doesn't support Fiber.
}
        // DevTools exists, even though it doesn't support Fiber.
        return true;
      }
      try {
        rendererID = hook.inject(internals);
        // We have successfully injected, so now it is safe to set up hooks.
        injectedHook = hook;
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          error('React instrumentation encountered an error: %s.', err);
        }
      }
      // DevTools exists
      return true;
    }
    function onScheduleRoot(root, children) {
      {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      }
    }
    function onCommitRoot(root, priorityLevel) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
        try {
          var didError = (root.current.flags & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
          } else {
            injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
          }
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    {
      // Provide explicit error message when production+profiling bundle of e.g.
      // react-dom is used with production (non-profiling) bundle of
      // scheduler/tracing
      if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
        {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
    }
    var fakeCallbackNode = {};
    // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95;
    // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
    Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1();
    // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
      return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
      switch (Scheduler_getCurrentPriorityLevel()) {
        case Scheduler_ImmediatePriority:
          return ImmediatePriority$1;
        case Scheduler_UserBlockingPriority:
          return UserBlockingPriority$2;
        case Scheduler_NormalPriority:
          return NormalPriority$1;
        case Scheduler_LowPriority:
          return LowPriority$1;
        case Scheduler_IdlePriority:
          return IdlePriority$1;
        default:
          {
            {
              throw Error("Unknown priority level.");
            }
          }
      }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
      switch (reactPriorityLevel) {
        case ImmediatePriority$1:
          return Scheduler_ImmediatePriority;
        case UserBlockingPriority$2:
          return Scheduler_UserBlockingPriority;
        case NormalPriority$1:
          return Scheduler_NormalPriority;
        case LowPriority$1:
          return Scheduler_LowPriority;
        case IdlePriority$1:
          return Scheduler_IdlePriority;
        default:
          {
            {
              throw Error("Unknown priority level.");
            }
          }
      }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
      var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
      return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options) {
      var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
      return Scheduler_scheduleCallback(priorityLevel, callback, options);
    }
    function scheduleSyncCallback(callback) {
      // Push this callback into an internal queue. We'll flush these either in
      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
      if (syncQueue === null) {
        syncQueue = [callback];
        // Flush the queue in the next tick, at the earliest.
        immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
      } else {
        // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
      }
      return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
      if (callbackNode !== fakeCallbackNode) {
        Scheduler_cancelCallback(callbackNode);
      }
    }
    function flushSyncCallbackQueue() {
      if (immediateQueueCallbackNode !== null) {
        var node = immediateQueueCallbackNode;
        immediateQueueCallbackNode = null;
        Scheduler_cancelCallback(node);
      }
      flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        // Prevent re-entrancy.
        isFlushingSyncQueue = true;
        var i = 0;
        {
          try {
            var _isSync2 = true;
            var _queue = syncQueue;
            runWithPriority$1(ImmediatePriority$1, function () {
              for (; i < _queue.length; i++) {
                var callback = _queue[i];
                do {
                  callback = callback(_isSync2);
                } while (callback !== null);
              }
            });
            syncQueue = null;
          } catch (error) {
            // If something throws, leave the remaining callbacks on the queue.
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            // Resume flushing in the next tick
            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
            throw error;
          } finally {
            isFlushingSyncQueue = false;
          }
        }
      }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1;
    // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {},
      discardPendingWarnings: function () {}
    };
    {
      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }
          node = node.return;
        }
        return maybeStrictRoot;
      };
      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };
      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      // Tracks components we have already warned about.
      var didWarnAboutUnsafeLifecycles = new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }
        if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
        instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = new Map();
      // Tracks components we have already warned about.
      var didWarnAboutLegacyContext = new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        }
        // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          if (fiberArray.length === 0) {
            return;
          }
          var firstFiber = fiberArray[0];
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber);
            error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
      };
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);
        var defaultProps = Component.defaultProps;
        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
      return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }
    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;
      {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
          }
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;
      {
        context._currentValue = currentValue;
      }
    }
    function calculateChangedBits(context, newValue, oldValue) {
      if (objectIs(oldValue, newValue)) {
        // No change
        return 0;
      } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
        {
          if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
            error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
          }
        }
        return changedBits | 0;
      }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
      // Update the child lanes of all the ancestors, including the alternates.
      var node = parent;
      while (node !== null) {
        var alternate = node.alternate;
        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
          node.childLanes = mergeLanes(node.childLanes, renderLanes);
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
          }
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
        } else {
          // Neither alternate was updated, which means the rest of the
          // ancestor path already has sufficient priority.
          break;
        }
        node = node.return;
      }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
      var fiber = workInProgress.child;
      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }
      while (fiber !== null) {
        var nextFiber = void 0;
        // Visit this fiber.
        var list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.
              if (fiber.tag === ClassComponent) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                update.tag = ForceUpdate;
                // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.
                enqueueUpdate(fiber, update);
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
              }
              scheduleWorkOnParentPath(fiber.return, renderLanes);
              // Mark the updated lanes on the list, too.
              list.lanes = mergeLanes(list.lanes, renderLanes);
              // Since we already found a match, we can stop traversing the
              // dependency list.
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }
        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            // No more siblings. Traverse up.
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      var dependencies = workInProgress.dependencies;
      if (dependencies !== null) {
        var firstContext = dependencies.firstContext;
        if (firstContext !== null) {
          if (includesSomeLane(dependencies.lanes, renderLanes)) {
            // Context list has a pending update. Mark that this fiber performed work.
            markWorkInProgressReceivedUpdate();
          }
          // Reset the work-in-progress list
          dependencies.firstContext = null;
        }
      }
    }
    function readContext(context, observedBits) {
      {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) {
          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
        }
      }
      if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
        var resolvedObservedBits;
        // Avoid deopting on observable arguments or heterogeneous types.
        if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
        } else {
          resolvedObservedBits = observedBits;
        }
        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };
        if (lastContextDependency === null) {
          if (!(currentlyRenderingFiber !== null)) {
            {
              throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          // This is the first dependency for this component. Create a new list.
          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem,
            responders: null
          };
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }
    function initializeUpdateQueue(fiber) {
      var queue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null
        },
        effects: null
      };
      fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
      // Clone the update queue from current. Unless it's already a clone.
      var queue = workInProgress.updateQueue;
      var currentQueue = current.updateQueue;
      if (queue === currentQueue) {
        var clone = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress.updateQueue = clone;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime: eventTime,
        lane: lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        // Only occurs if the fiber has been unmounted.
        return;
      }
      var sharedQueue = updateQueue.shared;
      var pending = sharedQueue.pending;
      if (pending === null) {
        // This is the first update. Create a circular list.
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      sharedQueue.pending = update;
      {
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
          error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
      // Captured updates are updates that are thrown by a child during the render
      // phase. They should be discarded if the render is aborted. Therefore,
      // we should only put them on the work-in-progress queue, not the current one.
      var queue = workInProgress.updateQueue;
      // Check if the work-in-progress queue is a clone.
      var current = workInProgress.alternate;
      if (current !== null) {
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
          // The work-in-progress queue is the same as current. This happens when
          // we bail out on a parent fiber that then captures an error thrown by
          // a child. Since we want to append the update only to the work-in
          // -progress queue, we need to clone the updates. We usually clone during
          // processUpdateQueue, but that didn't happen in this case because we
          // skipped over the parent when we bailed out.
          var newFirst = null;
          var newLast = null;
          var firstBaseUpdate = queue.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            // Loop through the updates and clone them.
            var update = firstBaseUpdate;
            do {
              var clone = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null) {
                newFirst = newLast = clone;
              } else {
                newLast.next = clone;
                newLast = clone;
              }
              update = update.next;
            } while (update !== null);
            // Append the captured update the end of the cloned list.
            if (newLast === null) {
              newFirst = newLast = capturedUpdate;
            } else {
              newLast.next = capturedUpdate;
              newLast = capturedUpdate;
            }
          } else {
            // There are no base updates.
            newFirst = newLast = capturedUpdate;
          }
          queue = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress.updateQueue = queue;
          return;
        }
      }
      // Append the update to the end of the list.
      var lastBaseUpdate = queue.lastBaseUpdate;
      if (lastBaseUpdate === null) {
        queue.firstBaseUpdate = capturedUpdate;
      } else {
        lastBaseUpdate.next = capturedUpdate;
      }
      queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var payload = update.payload;
            if (typeof payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress.mode & StrictMode) {
                  disableLogs();
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            // State object
            return payload;
          }
        case CaptureUpdate:
          {
            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
          }
        case UpdateState:
          {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress.mode & StrictMode) {
                  disableLogs();
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              // Partial state object
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            }
            // Merge the partial state and the previous state.
            return _assign({}, prevState, partialState);
          }
        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
      // This is always non-null on a ClassComponent or HostRoot
      var queue = workInProgress.updateQueue;
      hasForceUpdate = false;
      {
        currentlyProcessingQueue = queue.shared;
      }
      var firstBaseUpdate = queue.firstBaseUpdate;
      var lastBaseUpdate = queue.lastBaseUpdate;
      // Check if there are pending updates. If so, transfer them to the base queue.
      var pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        // The pending queue is circular. Disconnect the pointer between first
        // and last so that it's non-circular.
        var lastPendingUpdate = pendingQueue;
        var firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        // Append pending updates to base queue
        if (lastBaseUpdate === null) {
          firstBaseUpdate = firstPendingUpdate;
        } else {
          lastBaseUpdate.next = firstPendingUpdate;
        }
        lastBaseUpdate = lastPendingUpdate;
        // If there's a current queue, and it's different from the base queue, then
        // we need to transfer the updates to that queue, too. Because the base
        // queue is a singly-linked list with no cycles, we can append to both
        // lists and take advantage of structural sharing.
        // TODO: Pass `current` as argument
        var current = workInProgress.alternate;
        if (current !== null) {
          // This is always non-null on a ClassComponent or HostRoot
          var currentQueue = current.updateQueue;
          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null) {
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            } else {
              currentLastBaseUpdate.next = firstPendingUpdate;
            }
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      // These values may change as we process the queue.
      if (firstBaseUpdate !== null) {
        // Iterate through the list of updates to compute the result.
        var newState = queue.baseState;
        // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
        // from the original lanes.
        var newLanes = NoLanes;
        var newBaseState = null;
        var newFirstBaseUpdate = null;
        var newLastBaseUpdate = null;
        var update = firstBaseUpdate;
        do {
          var updateLane = update.lane;
          var updateEventTime = update.eventTime;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            var clone = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null) {
              newFirstBaseUpdate = newLastBaseUpdate = clone;
              newBaseState = newState;
            } else {
              newLastBaseUpdate = newLastBaseUpdate.next = clone;
            }
            // Update the remaining priority in the queue.
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            // This update does have sufficient priority.
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            // Process this update.
            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
            var callback = update.callback;
            if (callback !== null) {
              workInProgress.flags |= Callback;
              var effects = queue.effects;
              if (effects === null) {
                queue.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null) {
            pendingQueue = queue.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              // An update was scheduled from inside a reducer. Add the new
              // pending updates to the end of the list and keep processing.
              var _lastPendingUpdate = pendingQueue;
              // Intentionally unsound. Pending updates form a circular list, but we
              // unravel them when transferring them to the base queue.
              var _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null;
              update = _firstPendingUpdate;
              queue.lastBaseUpdate = _lastPendingUpdate;
              queue.shared.pending = null;
            }
          }
        } while (true);
        if (newLastBaseUpdate === null) {
          newBaseState = newState;
        }
        queue.baseState = newBaseState;
        queue.firstBaseUpdate = newFirstBaseUpdate;
        queue.lastBaseUpdate = newLastBaseUpdate;
        // Set the remaining expiration time to be whatever is remaining in the queue.
        // This should be fine because the only two other things that contribute to
        // expiration time are props and context. We're already in the middle of the
        // begin phase by the time we start processing the queue, so we've already
        // dealt with the props. Context in components that specify
        // shouldComponentUpdate is tricky; but we'll have to account for
        // that regardless.
        markSkippedUpdateLanes(newLanes);
        workInProgress.lanes = newLanes;
        workInProgress.memoizedState = newState;
      }
      {
        currentlyProcessingQueue = null;
      }
    }
    function callCallback(callback, context) {
      if (!(typeof callback === 'function')) {
        {
          throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        }
      }
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      // Commit the effects
      var effects = finishedQueue.effects;
      finishedQueue.effects = null;
      if (effects !== null) {
        for (var i = 0; i < effects.length; i++) {
          var effect = effects[i];
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance);
          }
        }
      }
    }
    var fakeInternalInstance = {};
    var isArray = Array.isArray;
    // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();
      var didWarnOnInvalidCallback = new Set();
      warnOnInvalidCallback = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };
      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';
          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      };
      // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.
      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          {
            {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }
        }
      });
      Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            // Invoke the function an extra time to help detect side-effects.
            getDerivedStateFromProps(nextProps, prevState);
          } finally {
            reenableLogs();
          }
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
              // Merge the partial state and the previous state.
}
      // Merge the partial state and the previous state.
      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState;
      // Once the update queue is empty, persist the derived state onto the
      // base state.
      if (workInProgress.lanes === NoLanes) {
        // Queue is always non-null for classes
        var updateQueue = workInProgress.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.payload = payload;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, 'setState');
          }
          update.callback = callback;
        }
        enqueueUpdate(fiber, update);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ReplaceState;
        update.payload = payload;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, 'replaceState');
          }
          update.callback = callback;
        }
        enqueueUpdate(fiber, update);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ForceUpdate;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, 'forceUpdate');
          }
          update.callback = callback;
        }
        enqueueUpdate(fiber, update);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;
      if (typeof instance.shouldComponentUpdate === 'function') {
        {
          if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
              // Invoke the function an extra time to help detect side-effects.
              instance.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              reenableLogs();
            }
          }
        }
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (shouldUpdate === undefined) {
            error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
          }
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }
      return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
          error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
        }
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
        }
        if (instance.propTypes) {
          error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
        }
        if (instance.contextType) {
          error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
        }
        {
          if (instance.contextTypes) {
            error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
          }
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
          }
        }
        if (typeof instance.componentShouldUpdate === 'function') {
          error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }
        if (typeof instance.componentDidUnmount === 'function') {
          error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
        }
        if (typeof instance.componentDidReceiveProps === 'function') {
          error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
        }
        if (typeof instance.componentWillRecieveProps === 'function') {
          error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
        }
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
          error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
        }
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) {
          error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
        }
        if (instance.defaultProps) {
          error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') {
          error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
        }
        if (typeof instance.getDerivedStateFromError === 'function') {
          error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
        }
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
          error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
        }
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) {
          error('%s.state: must be set to an object or null', name);
        }
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
          error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
        }
      }
    }
    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance;
      // The instance needs access to the fiber so that it can schedule updates
      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }
    function constructClassInstance(workInProgress, ctor, props) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if (('contextType' in ctor)) {
          var isValid = // Allow null for conditional declaration
          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
          // Not a <Context.Consumer>
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = '';
            if (contextType === undefined) {
              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
            } else if (typeof contextType !== 'object') {
              addendum = ' However, it is set to a ' + typeof contextType + '.';
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = ' Did you accidentally pass the Context.Provider instead?';
            } else if (contextType._context !== undefined) {
              // <Context.Consumer>
              addendum = ' Did you accidentally pass the Context.Consumer instead?';
            } else {
              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
            }
            error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
          }
        }
      }
      if (typeof contextType === 'object' && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      }
      // Instantiate twice to help detect side-effects.
      {
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            new ctor(props, context);
          } finally {
            reenableLogs();
          }
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';
          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        }
        // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }
          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }
          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';
            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
            }
          }
        }
              // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
}
      // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }
      return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
      var oldState = instance.state;
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
      if (oldState !== instance.state) {
        {
          error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';
          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress);
      var contextType = ctor.contextType;
      if (typeof contextType === 'object' && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }
      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }
        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }
        {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        }
      }
      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      instance.state = workInProgress.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      }
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance);
        // If we had additional state updates during this life-cycle, let's
        // process them now.
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
      }
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.flags |= Update;
      }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
      // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      newState = workInProgress.memoizedState;
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update;
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }
        }
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update;
        }
        // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.
        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }
      // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      var unresolvedOldProps = workInProgress.memoizedProps;
      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
      instance.props = oldProps;
      var unresolvedNewProps = workInProgress.pendingProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
      // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      newState = workInProgress.memoizedState;
      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Snapshot;
          }
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
        }
        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.flags |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.flags |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Snapshot;
          }
        }
        // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.
        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }
      // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function (child, returnFiber) {};
    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      /**
      * Warn if there's no key explicitly set on dynamic arrays of children or
      * object keys are not valid. This allows us to keep track of children between
      * updates.
      */
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};
      warnForMissingKey = function (child, returnFiber) {
        if (child === null || typeof child !== 'object') {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        if (!(typeof child._store === 'object')) {
          {
            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) {
          return;
        }
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
      };
    }
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          // TODO: Clean this up once we turn on the string ref warning for
          // everyone, because the strict mode case will no longer be relevant
          if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentName(returnFiber.type) || 'Component';
            if (!didWarnAboutStringRefs[componentName]) {
              {
                error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
              }
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
        if (element._owner) {
          var owner = element._owner;
          var inst;
          if (owner) {
            var ownerFiber = owner;
            if (!(ownerFiber.tag === ClassComponent)) {
              {
                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
            }
            inst = ownerFiber.stateNode;
          }
          if (!inst) {
            {
              throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stringRef = '' + mixedRef;
          // Check if previous string ref matches new string ref
          if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
            return current.ref;
          }
          var ref = function (value) {
            var refs = inst.refs;
            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          if (!(typeof mixedRef === 'string')) {
            {
              throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
          }
          if (!element._owner) {
            {
              throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        {
          {
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
      }
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) {
          return;
        }
        ownerHasFunctionTypeWarning[componentName] = true;
        error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
      }
    }
    // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        }
        // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.
        var last = returnFiber.lastEffect;
        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
        childToDelete.nextEffect = null;
        childToDelete.flags = Deletion;
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        }
        // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        // instead.
        var existingChildren = new Map();
        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }
        var current = newFiber.alternate;
        if (current !== null) {
          var oldIndex = current.index;
          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.flags = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.flags = Placement;
          return lastPlacedIndex;
        }
      }
      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.flags = Placement;
        }
        return newFiber;
      }
      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (current === null || current.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, textContent);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateElement(returnFiber, current, element, lanes) {
        if (current !== null) {
          if (current.elementType === element.type || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current, element)) {
            // Move based on index
            var existing = useFiber(current, element.props);
            existing.ref = coerceRef(returnFiber, current, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          }
        }
        // Insert
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        created.ref = coerceRef(returnFiber, current, element);
        created.return = returnFiber;
        return created;
      }
      function updatePortal(returnFiber, current, portal, lanes) {
        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, portal.children || []);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (current === null || current.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, fragment);
          existing.return = returnFiber;
          return existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
          }
          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            _created3.return = returnFiber;
            return _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
        }
        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
          }
          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }
            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
        }
        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                }
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
          }
          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      /**
      * Warns if there is a duplicate or missing key
      */
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== 'string') {
                break;
              }
              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        // This algorithm can't optimize by searching from both ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          return resultingFirstChild;
        }
        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        // Keep scanning and use the map to restore deleted items as moves.
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (!(typeof iteratorFn === 'function')) {
          {
            throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            if (!didWarnAboutGenerators) {
              error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
            }
            didWarnAboutGenerators = true;
          }
          // Warn about using Maps as children
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps) {
              error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
            }
            didWarnAboutMaps = true;
          }
          // First, validate keys.
          // We'll get a different iterator later for the main pass.
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (!(newChildren != null)) {
          {
            throw Error("An iterable object provided no iterator.");
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; (newIdx++, step = newChildren.next())) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; (newIdx++, step = newChildren.next())) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          return resultingFirstChild;
        }
        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        // Keep scanning and use the map to restore deleted items as moves.
        for (; !step.done; (newIdx++, step = newChildren.next())) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          existing.return = returnFiber;
          return existing;
        }
        // The existing first child is not a text node so we need to create one
        // and delete the existing ones.
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            switch (child.tag) {
              case Fragment:
                {
                  if (element.type === REACT_FRAGMENT_TYPE) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                  break;
                }
              case Block:
              default:
                {
                  if (child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element)) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing3 = useFiber(child, element.props);
                    _existing3.ref = coerceRef(returnFiber, child, element);
                    _existing3.return = returnFiber;
                    {
                      _existing3._debugSource = element._source;
                      _existing3._debugOwner = element._owner;
                    }
                    return _existing3;
                  }
                  break;
                }
            }
            // Didn't match.
            deleteRemainingChildren(returnFiber, child);
            break;
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.
      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }
        // Handle object types
        var isObject = typeof newChild === 'object' && newChild !== null;
        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
          }
        }
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
        }
        if (isArray$1(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        }
        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        }
        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            case Block:
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              {
                {
                  {
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
              }
          }
        }
        // Remaining cases are all treated as empty.
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
      if (!(current === null || workInProgress.child === current.child)) {
        {
          throw Error("Resuming work not yet implemented.");
        }
      }
      if (workInProgress.child === null) {
        return;
      }
      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress.child = newChild;
      newChild.return = workInProgress;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
        newChild.return = workInProgress;
      }
      newChild.sibling = null;
    }
    // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
      var child = workInProgress.child;
      while (child !== null) {
        resetWorkInProgress(child, lanes);
        child = child.sibling;
      }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
      if (!(c !== NO_CONTEXT)) {
        {
          throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      return c;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.
      push(contextFiberStackCursor, fiber, fiber);
      // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      // Now that we know this function doesn't throw, replace it.
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type);
      // Don't push this Fiber's context unless it's unique.
      if (context === nextContext) {
        return;
      }
      // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1;
    // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1;
    // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
      // If it was the primary children that just suspended, capture and render the
      // fallback. Otherwise, don't capture and bubble to the next boundary.
      var nextState = workInProgress.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null) {
          // A dehydrated boundary always captures.
          return true;
        }
        return false;
      }
      var props = workInProgress.memoizedProps;
      // In order to capture, the Suspense component must have a fallback prop.
      if (props.fallback === undefined) {
        return false;
      }
      // Regular boundaries always capture.
      if (props.unstable_avoidThisFallback !== true) {
        return true;
      }
      // If it's a boundary we should avoid, then we prefer to bubble up to the
      // parent boundary if it is currently invisible.
      if (hasInvisibleParent) {
        return false;
      }
      // If the parent is not able to handle it, we must handle it.
      return true;
    }
    function findFirstSuspended(row) {
      var node = row;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
              return node;
            }
          }
        } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        node.memoizedProps.revealOrder !== undefined) {
          var didSuspend = (node.flags & DidCapture) !== NoFlags;
          if (didSuspend) {
            return node;
          }
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row) {
          return null;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === row) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    var NoFlags$1 = /**/
    0;
    // Represents whether effect should fire.
    var HasEffect = /**/
    1;
    // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /**/
    2;
    var Passive$1 = /**/
    4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;
          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.flags = Deletion;
      // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.
      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps);
                  break;
              }
              break;
            }
          default:
            return;
        }
      }
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }
            return false;
          }
        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
        case SuspenseComponent:
          {
            return false;
          }
        default:
          return false;
      }
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.
        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }
      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
      // TODO: Type this specific to this type of component.
      fiber.updateQueue = updatePayload;
      // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        {
          throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }
      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }
      var type = fiber.type;
      // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.
      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      popToNextHostParent(fiber);
      if (fiber.tag === SuspenseComponent) {
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      }
      return true;
    }
    function resetHydrationState() {
      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }
    function getIsHydrating() {
      return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    {
      // Used to detect multiple renderers using the same mutable source.
      rendererSigil$1 = {};
    }
    function markSourceAsDirty(mutableSource) {
      workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        var mutableSource = workInProgressSources[i];
        {
          mutableSource._workInProgressVersionPrimary = null;
        }
      }
      workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
      {
        return mutableSource._workInProgressVersionPrimary;
      }
    }
    function setWorkInProgressVersion(mutableSource, version) {
      {
        mutableSource._workInProgressVersionPrimary = version;
      }
      workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
      {
        {
          if (mutableSource._currentPrimaryRenderer == null) {
            mutableSource._currentPrimaryRenderer = rendererSigil$1;
          } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
            error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
          }
        }
      }
    }
    // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    {
      didWarnAboutUseOpaqueIdentifier = {};
      didWarnAboutMismatchedHooksForComponent = new Set();
          // These are set right before calling the component.
}
    // These are set right before calling the component.
    var renderLanes = NoLanes;
    // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null;
    // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null;
    // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false;
    // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25;
    // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null;
    // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;
          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
          // Verify deps, but only on mount to avoid extra checks.
          // It's unlikely their type would change as usually you define them inline.
          error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
        }
      }
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);
          if (hookTypesDev !== null) {
            var table = '';
            var secondColumnStart = 30;
            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + ". " + oldHookName;
              // Extra space so second column lines up
              // lol @ IE not supporting String#repeat
              while (row.length < secondColumnStart) {
                row += ' ';
              }
              row += newHookName + '\n';
              table += row;
            }
            error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
          }
        }
      }
    }
    function throwInvalidHookError() {
      {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          // Only true when this component is being hot reloaded.
          return false;
        }
      }
      if (prevDeps === null) {
        {
          error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        }
        return false;
      }
      {
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) {
          error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        }
      }
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i])) {
          continue;
        }
        return false;
      }
      return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress;
      {
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
      }
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.lanes = NoLanes;
      // The following should have already been reset
      // currentHook = null;
      // workInProgressHook = null;
      // didScheduleRenderPhaseUpdate = false;
      // TODO Warn if no hooks are used at all during mount, then some are used during update.
      // Currently we will identify the update render as a mount because memoizedState === null.
      // This is tricky because it's valid for certain types of components (e.g. React.lazy)
      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
      // Non-stateful hooks (e.g. context) don't get added to memoizedState,
      // so memoizedState would be null during updates and mounts.
      {
        if (current !== null && current.memoizedState !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          // This dispatcher handles an edge case where a component is updating,
          // but no stateful hooks have been used.
          // We want to match the production code behavior (which will use HooksDispatcherOnMount),
          // but with the extra DEV validation to ensure hooks ordering hasn't changed.
          // This dispatcher does that.
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, secondArg);
      // Check if there was a render phase update
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        // Keep rendering in a loop for as long as render phase updates continue to
        // be scheduled. Use a counter to prevent infinite loops.
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
            {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
          }
          numberOfReRenders += 1;
          {
            // Even when hot reloading, allow dependencies to stabilize
            // after first render to prevent infinite render phase updates.
            ignorePreviousDependencies = false;
                      // Start over from the beginning of the list
}
          // Start over from the beginning of the list
          currentHook = null;
          workInProgressHook = null;
          workInProgress.updateQueue = null;
          {
            // Also validate hook order for cascading updates.
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      {
        workInProgress._debugHookTypes = hookTypesDev;
              // This check uses currentHook so that it works the same in DEV and prod bundles.
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
}
      // This check uses currentHook so that it works the same in DEV and prod bundles.
      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
      }
      didScheduleRenderPhaseUpdate = false;
      if (!!didRenderTooFewHooks) {
        {
          throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
      }
      return children;
    }
    function bailoutHooks(current, workInProgress, lanes) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.flags &= ~(Passive | Update);
      current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        // There were render phase updates. These are only valid for this render
        // phase, which we are now aborting. Remove the updates from the queues so
        // they do not persist to the next render. Do not remove updates from hooks
        // that weren't processed.
        // 
        // Only reset the updates from the queue if it has a clone. If it does
        // not have a clone, that means it wasn't processed, and the updates were
        // scheduled before we entered the render phase.
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue = hook.queue;
          if (queue !== null) {
            queue.pending = null;
          }
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
      }
      didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null) {
        // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      } else {
        // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      // This function is used both for updates and for re-renders triggered by a
      // render phase update. It assumes there is either a current hook we can
      // clone, or a work-in-progress hook from a previous render pass that we can
      // use as a base. When we reach the end of the base list, we must switch to
      // the dispatcher used for mounts.
      var nextCurrentHook;
      if (currentHook === null) {
        var current = currentlyRenderingFiber$1.alternate;
        if (current !== null) {
          nextCurrentHook = current.memoizedState;
        } else {
          nextCurrentHook = null;
        }
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook;
      if (workInProgressHook === null) {
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      } else {
        nextWorkInProgressHook = workInProgressHook.next;
      }
      if (nextWorkInProgressHook !== null) {
        // There's already a work-in-progress. Reuse it.
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
      } else {
        // Clone from the current hook.
        if (!(nextCurrentHook !== null)) {
          {
            throw Error("Rendered more hooks than during the previous render.");
          }
        }
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null) {
          // This is the first hook in the list.
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        } else {
          // Append to the end of the list.
          workInProgressHook = workInProgressHook.next = newHook;
        }
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null
      };
    }
    function basicStateReducer(state, action) {
      // $FlowFixMe: Flow doesn't like mixed types
      return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState;
      if (init !== undefined) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (!(queue !== null)) {
        {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
      }
      queue.lastRenderedReducer = reducer;
      var current = currentHook;
      // The last rebase update that is NOT part of the base state.
      var baseQueue = current.baseQueue;
      // The last pending update that hasn't been processed yet.
      var pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        // We have new updates that haven't been processed yet.
        // We'll add them to the base queue.
        if (baseQueue !== null) {
          // Merge the pending queue and the base queue.
          var baseFirst = baseQueue.next;
          var pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst;
          pendingQueue.next = baseFirst;
        }
        {
          if (current.baseQueue !== baseQueue) {
            // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
          }
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      if (baseQueue !== null) {
        // We have a queue to process.
        var first = baseQueue.next;
        var newState = current.baseState;
        var newBaseState = null;
        var newBaseQueueFirst = null;
        var newBaseQueueLast = null;
        var update = first;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            var clone = {
              lane: updateLane,
              action: update.action,
              eagerReducer: update.eagerReducer,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone;
            }
            // Update the remaining priority in the queue.
            // TODO: Don't need to accumulate this. Instead, we can remove
            // renderLanes from the original lanes.
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
            markSkippedUpdateLanes(updateLane);
          } else {
            // This update does have sufficient priority.
            if (newBaseQueueLast !== null) {
              var _clone = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            // Process this update.
            if (update.eagerReducer === reducer) {
              // If this update was processed eagerly, and its reducer matches the
              // current reducer, we can use the eagerly computed state.
              newState = update.eagerState;
            } else {
              var action = update.action;
              newState = reducer(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first);
        if (newBaseQueueLast === null) {
          newBaseState = newState;
        } else {
          newBaseQueueLast.next = newBaseQueueFirst;
        }
        // Mark that the fiber performed work, but only if the new state is
        // different from the current state.
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        hook.baseState = newBaseState;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = newState;
      }
      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }
    function rerenderReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (!(queue !== null)) {
        {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
      }
      queue.lastRenderedReducer = reducer;
      // This is a re-render. Apply the new render phase updates to the previous
      // work-in-progress hook.
      var dispatch = queue.dispatch;
      var lastRenderPhaseUpdate = queue.pending;
      var newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        // The queue doesn't persist past this render pass.
        queue.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        var update = firstRenderPhaseUpdate;
        do {
          // Process this render phase update. We don't have to check the
          // priority because it will always be the same as the current
          // render's.
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        // Mark that the fiber performed work, but only if the new state is
        // different from the current state.
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        // Don't persist the state accumulated from the render phase updates to
        // the base state unless the queue is empty.
        // TODO: Not sure if this is the desired semantics, but it's what we
        // do for gDSFP. I can't remember why.
        if (hook.baseQueue === null) {
          hook.baseState = newState;
        }
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
      {
        warnAboutMultipleRenderersDEV(source);
      }
      var getVersion = source._getVersion;
      var version = getVersion(source._source);
      // Is it safe for this component to read from this source during the current render?
      var isSafeToReadFromSource = false;
      // Check the version first.
      // If this render has already been started with a specific version,
      // we can use it alone to determine if we can safely read from the source.
      var currentRenderVersion = getWorkInProgressVersion(source);
      if (currentRenderVersion !== null) {
        // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
      } else {
        // If there's no version, then this is the first time we've read from the
        // source during the current render pass, so we need to do a bit more work.
        // What we need to determine is if there are any hooks that already
        // subscribed to the source, and if so, whether there are any pending
        // mutations that haven't been synchronized yet.
        // 
        // If there are no pending mutations, then `root.mutableReadLanes` will be
        // empty, and we know we can safely read.
        // 
        // If there *are* pending mutations, we may still be able to safely read
        // if the currently rendering lanes are inclusive of the pending mutation
        // lanes, since that guarantees that the value we're about to read from
        // the source is consistent with the values that we read during the most
        // recent mutation.
        isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);
        if (isSafeToReadFromSource) {
          // If it's safe to read from this source during the current render,
          // store the version in case other components read from it.
          // A changed version number will let those components know to throw and restart the render.
          setWorkInProgressVersion(source, version);
        }
      }
      if (isSafeToReadFromSource) {
        var snapshot = getSnapshot(source._source);
        {
          if (typeof snapshot === 'function') {
            error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
          }
        }
        return snapshot;
      } else {
        // This handles the special case of a mutable source being shared between renderers.
        // In that case, if the source is mutated between the first and second renderer,
        // The second renderer don't know that it needs to reset the WIP version during unwind,
        // (because the hook only marks sources as dirty if it's written to their WIP version).
        // That would cause this tear check to throw again and eventually be visible to the user.
        // We can avoid this infinite loop by explicitly marking the source as dirty.
        // 
        // This can lead to tearing in the first renderer when it resumes,
        // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
        markSourceAsDirty(source);
        {
          {
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
          }
        }
      }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
      var root = getWorkInProgressRoot();
      if (!(root !== null)) {
        {
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
      }
      var getVersion = source._getVersion;
      var version = getVersion(source._source);
      var dispatcher = ReactCurrentDispatcher$1.current;
      // eslint-disable-next-line prefer-const
      var _dispatcher$useState = dispatcher.useState(function () {
        return readFromUnsubcribedMutableSource(root, source, getSnapshot);
      }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
      var snapshot = currentSnapshot;
      // Grab a handle to the state hook as well.
      // We use it to clear the pending update queue if we have a new source.
      var stateHook = workInProgressHook;
      var memoizedState = hook.memoizedState;
      var refs = memoizedState.refs;
      var prevGetSnapshot = refs.getSnapshot;
      var prevSource = memoizedState.source;
      var prevSubscribe = memoizedState.subscribe;
      var fiber = currentlyRenderingFiber$1;
      hook.memoizedState = {
        refs: refs,
        source: source,
        subscribe: subscribe
      };
      // Sync the values needed by our subscription handler after each commit.
      dispatcher.useEffect(function () {
        refs.getSnapshot = getSnapshot;
        // Normally the dispatch function for a state hook never changes,
        // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
        // handleChange() below needs to reference the dispatch function without re-subscribing,
        // so we use a ref to ensure that it always has the latest version.
        refs.setSnapshot = setSnapshot;
        // Check for a possible change between when we last rendered now.
        var maybeNewVersion = getVersion(source._source);
        if (!objectIs(version, maybeNewVersion)) {
          var maybeNewSnapshot = getSnapshot(source._source);
          {
            if (typeof maybeNewSnapshot === 'function') {
              error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
            }
          }
          if (!objectIs(snapshot, maybeNewSnapshot)) {
            setSnapshot(maybeNewSnapshot);
            var lane = requestUpdateLane(fiber);
            markRootMutableRead(root, lane);
          }
          // If the source mutated between render and now,
          // there may be state updates already scheduled from the old source.
          // Entangle the updates so that they render in the same batch.
          markRootEntangled(root, root.mutableReadLanes);
        }
      }, [getSnapshot, source, subscribe]);
      // If we got a new source or subscribe function, re-subscribe in a passive effect.
      dispatcher.useEffect(function () {
        var handleChange = function () {
          var latestGetSnapshot = refs.getSnapshot;
          var latestSetSnapshot = refs.setSnapshot;
          try {
            latestSetSnapshot(latestGetSnapshot(source._source));
            // Record a pending mutable source update with the same expiration time.
            var lane = requestUpdateLane(fiber);
            markRootMutableRead(root, lane);
          } catch (error) {
            // A selector might throw after a source mutation.
            // e.g. it might try to read from a part of the store that no longer exists.
            // In this case we should still schedule an update with React.
            // Worst case the selector will throw again and then an error boundary will handle it.
            latestSetSnapshot(function () {
              throw error;
            });
          }
        };
        var unsubscribe = subscribe(source._source, handleChange);
        {
          if (typeof unsubscribe !== 'function') {
            error('Mutable source subscribe function must return an unsubscribe function.');
          }
        }
        return unsubscribe;
      }, [source, subscribe]);
      // If any of the inputs to useMutableSource change, reading is potentially unsafe.
      // 
      // If either the source or the subscription have changed we can't can't trust the update queue.
      // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
      // 
      // If the getSnapshot function changed, we also shouldn't rely on the update queue.
      // It's possible that the underlying source was mutated between the when the last "change" event fired,
      // and when the current render (with the new getSnapshot function) is processed.
      // 
      // In both cases, we need to throw away pending updates (since they are no longer relevant)
      // and treat reading from the source as we do in the mount case.
      if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
        // Create a new queue and setState method,
        // So if there are interleaved updates, they get pushed to the older queue.
        // When this becomes current, the previous queue and dispatch method will be discarded,
        // including any interleaving updates that occur.
        var newQueue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: snapshot
        };
        newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
        stateHook.queue = newQueue;
        stateHook.baseQueue = null;
        snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
        stateHook.memoizedState = stateHook.baseState = snapshot;
      }
      return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = {
        refs: {
          getSnapshot: getSnapshot,
          setSnapshot: null
        },
        source: source,
        subscribe: subscribe
      };
      return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      var hook = updateWorkInProgressHook();
      return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === 'function') {
        // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateState(initialState) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        // Circular
        next: null
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      var ref = {
        current: initialValue
      };
      {
        Object.seal(ref);
      }
      hook.memoizedState = ref;
      return ref;
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var destroy = undefined;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            pushEffect(hookFlags, create, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        }
      }
      return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        }
      }
      return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
      return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if (typeof ref === 'function') {
        var refCallback = ref;
        var _inst = create();
        refCallback(_inst);
        return function () {
          refCallback(null);
        };
      } else if (ref !== null && ref !== undefined) {
        var refObject = ref;
        {
          if (!refObject.hasOwnProperty('current')) {
            error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
          }
        }
        var _inst2 = create();
        refObject.current = _inst2;
        return function () {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== 'function') {
          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
        }
              // TODO: If deps are provided, should we skip comparing the ref itself?
}
      // TODO: If deps are provided, should we skip comparing the ref itself?
      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== 'function') {
          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
        }
              // TODO: If deps are provided, should we skip comparing the ref itself?
}
      // TODO: If deps are provided, should we skip comparing the ref itself?
      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {}
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        // Assume these are defined. If they're not, areHookInputsEqual will warn.
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function mountDeferredValue(value) {
      var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
      mountEffect(function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;
        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      }, [value]);
      return prevValue;
    }
    function updateDeferredValue(value) {
      var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
      updateEffect(function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;
        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      }, [value]);
      return prevValue;
    }
    function rerenderDeferredValue(value) {
      var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
      updateEffect(function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;
        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      }, [value]);
      return prevValue;
    }
    function startTransition(setPending, callback) {
      var priorityLevel = getCurrentPriorityLevel();
      {
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
          setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setPending(false);
            callback();
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        });
      }
    }
    function mountTransition() {
      var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
      // The `start` method can be stored on a ref, since `setPending`
      // never changes.
      var start = startTransition.bind(null, setPending);
      mountRef(start);
      return [start, isPending];
    }
    function updateTransition() {
      var _updateState2 = updateState(), isPending = _updateState2[0];
      var startRef = updateRef();
      var start = startRef.current;
      return [start, isPending];
    }
    function rerenderTransition() {
      var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
      var startRef = updateRef();
      var start = startRef.current;
      return [start, isPending];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      {
        return isUpdatingOpaqueValueInRenderPhase;
      }
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
      {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
          error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');
          didWarnAboutUseOpaqueIdentifier[name] = true;
        }
      }
    }
    function mountOpaqueIdentifier() {
      var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
      if (getIsHydrating()) {
        var didUpgrade = false;
        var fiber = currentlyRenderingFiber$1;
        var readValue = function () {
          if (!didUpgrade) {
            // Only upgrade once. This works even inside the render phase because
            // the update is added to a shared queue, which outlasts the
            // in-progress render.
            didUpgrade = true;
            {
              isUpdatingOpaqueValueInRenderPhase = true;
              setId(makeId());
              isUpdatingOpaqueValueInRenderPhase = false;
              warnOnOpaqueIdentifierAccessInDEV(fiber);
            }
          }
          {
            {
              throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            }
          }
        };
        var id = makeOpaqueHydratingObject(readValue);
        var setId = mountState(id)[1];
        if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
          currentlyRenderingFiber$1.flags |= Update | Passive;
          pushEffect(HasEffect | Passive$1, function () {
            setId(makeId());
          }, undefined, null);
        }
        return id;
      } else {
        var _id = makeId();
        mountState(_id);
        return _id;
      }
    }
    function updateOpaqueIdentifier() {
      var id = updateState()[0];
      return id;
    }
    function rerenderOpaqueIdentifier() {
      var id = rerenderState()[0];
      return id;
    }
    function dispatchAction(fiber, queue, action) {
      {
        if (typeof arguments[3] === 'function') {
          error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
        }
      }
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      var update = {
        lane: lane,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      // Append the update to the end of the list.
      var pending = queue.pending;
      if (pending === null) {
        // This is the first update. Create a circular list.
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      queue.pending = update;
      var alternate = fiber.alternate;
      if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      } else {
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          // The queue is currently empty, which means we can eagerly compute the
          // next state before entering the render phase. If the new state is the
          // same as the current state, we may be able to bail out entirely.
          var lastRenderedReducer = queue.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }
            try {
              var currentState = queue.lastRenderedState;
              var eagerState = lastRenderedReducer(currentState, action);
              // Stash the eagerly computed state, and the reducer used to compute
              // it, on the update object. If the reducer hasn't changed by the
              // time we enter the render phase, then the eager state can be used
              // without calling the reducer again.
              update.eagerReducer = lastRenderedReducer;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                // Fast path. We can bail out without scheduling React to re-render.
                // It's still possible that we'll need to rebase this update later,
                // if the component re-renders for a different reason and by that
                // time the reducer has changed.
                return;
              }
            } catch (error) {} finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }
        {
          // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
          if ('undefined' !== typeof jest) {
            warnIfNotScopedWithMatchingAct(fiber);
            warnIfNotCurrentlyActingUpdatesInDev(fiber);
          }
        }
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      }
    }
    var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useOpaqueIdentifier: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function () {
        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      };
      var warnInvalidHookAccess = function () {
        error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          mountHookTypesDev();
          return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          mountHookTypesDev();
          return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          updateHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          updateHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          updateHookTypesDev();
          return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          updateHookTypesDev();
          return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          updateHookTypesDev();
          return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          updateHookTypesDev();
          return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }
    function transferActualDuration(fiber) {
      // Transfer time spent rendering these children so we don't lose it
      // after we rerender. This is used as a helper in special cases
      // where we should count the work of multiple passes.
      var child = fiber.child;
      while (child) {
        fiber.actualDuration += child.actualDuration;
        child = child.sibling;
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
    }
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
      if (current === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
      }
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
      // This function is fork of reconcileChildren. It's used in cases where we
      // want to reconcile without matching against the existing set. This has the
      // effect of all current children being unmounted; even if the type and key
      // are the same, the old child is unmounted and a new child is created.
      // 
      // To do this, we're going to go through the reconcile algorithm twice. In
      // the first pass, we schedule a deletion for all the current children by
      // passing null.
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      // In the second pass, we mount the new children. The trick here is that we
      // pass null in place of where we usually pass the current child set. This has
      // the effect of remounting all children regardless of whether their
      // identities match.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens after the first render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component));
          }
        }
      }
      var render = Component.render;
      var ref = workInProgress.ref;
      // The rest is a fork of updateFunctionComponent
      var nextChildren;
      prepareToReadContext(workInProgress, renderLanes);
      {
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
          } finally {
            reenableLogs();
          }
        }
        setIsRendering(false);
      }
      if (current !== null && !didReceiveUpdate) {
        bailoutHooks(current, workInProgress, renderLanes);
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
      if (current === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === undefined) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
                      // If this is a plain function component without default props,
            // and with only the default shallow comparison, we upgrade it
            // to a SimpleMemoComponent to allow fast path updates.
}
          // If this is a plain function component without default props,
          // and with only the default shallow comparison, we upgrade it
          // to a SimpleMemoComponent to allow fast path updates.
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress, type);
          }
          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes) {
            // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(type));
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        child.ref = workInProgress.ref;
        child.return = workInProgress;
        workInProgress.child = child;
        return child;
      }
      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) {
          // Inner memo component props aren't currently validated in createElement.
          // We could move it there, but we'd still need this for lazy code path.
          checkPropTypes(_innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(_type));
        }
      }
      var currentChild = current.child;
      // This is always exactly one child
      if (!includesSomeLane(updateLanes, renderLanes)) {
        // This will be the props with resolved defaultProps,
        // unlike current.memoizedProps which will be the unresolved ones.
        var prevProps = currentChild.memoizedProps;
        // Default to shallow comparison
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;
        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      newChild.ref = workInProgress.ref;
      newChild.return = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens when the inner render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var outerMemoType = workInProgress.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            var lazyComponent = outerMemoType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch (x) {
              outerMemoType = null;
            }
            // Inner propTypes will be validated in the function component path.
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
              'prop', getComponentName(outerMemoType));
            }
          }
        }
      }
      if (current !== null) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.
        workInProgress.type === current.type) {
          didReceiveUpdate = false;
          if (!includesSomeLane(renderLanes, updateLanes)) {
            // The pending lanes were cleared at the beginning of beginWork. We're
            // about to bail out, but there might be other lanes that weren't
            // included in the current render. Usually, the priority level of the
            // remaining updates is accumlated during the evaluation of the
            // component (i.e. when processing the update queue). But since since
            // we're bailing out early *without* evaluating the component, we need
            // to account for it here, too. Reset to the value of the current fiber.
            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
            // because a MemoComponent fiber does not have hooks or an update queue;
            // rather, it wraps around an inner component, which may or may not
            // contains hooks.
            // TODO: Move the reset at in beginWork out of the common path so that
            // this is no longer necessary.
            workInProgress.lanes = current.lanes;
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
          }
        }
      }
      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      var prevState = current !== null ? current.memoizedState : null;
      if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
          // In legacy sync mode, don't defer the subtree. Render it now.
          // TODO: Figure out what we should do in Blocking mode.
          var nextState = {
            baseLanes: NoLanes
          };
          workInProgress.memoizedState = nextState;
          pushRenderLanes(workInProgress, renderLanes);
        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
          var nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
          } else {
            nextBaseLanes = renderLanes;
          }
          // Schedule this fiber to re-render at offscreen priority. Then bailout.
          {
            markSpawnedWork(OffscreenLane);
          }
          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes
          };
          workInProgress.memoizedState = _nextState;
          // We're about to bail out, but we need to push this to the stack anyway
          // to avoid a push/pop misalignment.
          pushRenderLanes(workInProgress, nextBaseLanes);
          return null;
        } else {
          // Rendering at offscreen, so we can clear the base lanes.
          var _nextState2 = {
            baseLanes: NoLanes
          };
          workInProgress.memoizedState = _nextState2;
          // Push the lanes that were skipped when we bailed out.
          var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
          pushRenderLanes(workInProgress, subtreeRenderLanes);
        }
      } else {
        var _subtreeRenderLanes;
        if (prevState !== null) {
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
          // Since we're not hidden anymore, reset the state
          workInProgress.memoizedState = null;
        } else {
          // We weren't previously hidden, and we still aren't, so there's nothing
          // special to do. Need to push to the stack regardless, though, to avoid
          // a push/pop misalignment.
          _subtreeRenderLanes = renderLanes;
        }
        pushRenderLanes(workInProgress, _subtreeRenderLanes);
      }
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current, workInProgress, renderLanes) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
      {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
      }
      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (current === null && ref !== null || current !== null && current.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.flags |= Ref;
      }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component));
          }
        }
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
      }
      var nextChildren;
      prepareToReadContext(workInProgress, renderLanes);
      {
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
          } finally {
            reenableLogs();
          }
        }
        setIsRendering(false);
      }
      if (current !== null && !didReceiveUpdate) {
        bailoutHooks(current, workInProgress, renderLanes);
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component));
          }
        }
              // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
}
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress, renderLanes);
      var instance = workInProgress.stateNode;
      var shouldUpdate;
      if (instance === null) {
        if (current !== null) {
          // A class component without an instance only mounts if it suspended
          // inside a non-concurrent tree, in an inconsistent state. We want to
          // treat it like a new mount, even though an empty version of it already
          // committed. Disconnect the alternate pointers.
          current.alternate = null;
          workInProgress.alternate = null;
          // Since this is conceptually a new fiber, schedule a Placement effect
          workInProgress.flags |= Placement;
        }
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        shouldUpdate = true;
      } else if (current === null) {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
      } else {
        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
      }
      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
      {
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps) {
            error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
          }
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current, workInProgress);
      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      var instance = workInProgress.stateNode;
      // Rerender
      ReactCurrentOwner$1.current = workInProgress;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
        // If we captured an error, but getDerivedStateFromError is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;
        {
          stopProfilerTimerIfRunning();
        }
      } else {
        {
          setIsRendering(true);
          nextChildren = instance.render();
          if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
              instance.render();
            } finally {
              reenableLogs();
            }
          }
          setIsRendering(false);
        }
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      if (current !== null && didCaptureError) {
        // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
      } else {
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      }
      // Memoize state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.
      workInProgress.memoizedState = instance.state;
      // The context might have changed so we need to recalculate it.
      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }
      return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }
      pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      if (!(current !== null && updateQueue !== null)) {
        {
          throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      cloneUpdateQueue(current, workInProgress);
      processUpdateQueue(workInProgress, nextProps, null, renderLanes);
      var nextState = workInProgress.memoizedState;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      var nextChildren = nextState.element;
      if (nextChildren === prevChildren) {
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      var root = workInProgress.stateNode;
      if (root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
        {
          var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;
          if (mutableSourceEagerHydrationData != null) {
            for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
              var mutableSource = mutableSourceEagerHydrationData[i];
              var version = mutableSourceEagerHydrationData[i + 1];
              setWorkInProgressVersion(mutableSource, version);
            }
          }
        }
        var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        workInProgress.child = child;
        var node = child;
        while (node) {
          // Mark each child as hydrating. This is a fast path to know whether this
          // tree is part of a hydrating tree. This is used to determine if a child
          // node has fully mounted yet, and for scheduling event replaying.
          // Conceptually this is similar to Placement in that a new subtree is
          // inserted into the React tree here. It just happens to not need DOM
          // mutations because it already exists.
          node.flags = node.flags & ~Placement | Hydrating;
          node = node.sibling;
        }
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        resetHydrationState();
      }
      return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
      pushHostContext(workInProgress);
      if (current === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }
      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current !== null ? current.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
      }
      markRef(current, workInProgress);
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
      if (current === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }
      // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.
      return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
      if (_current !== null) {
        // A lazy component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.flags |= Placement;
      }
      var props = workInProgress.pendingProps;
      var lazyComponent = elementType;
      var payload = lazyComponent._payload;
      var init = lazyComponent._init;
      var Component = init(payload);
      // Store the unwrapped component in the type.
      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child;
      switch (resolvedTag) {
        case FunctionComponent:
          {
            {
              validateFunctionComponentInDev(workInProgress, Component);
              workInProgress.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
            return child;
          }
        case ClassComponent:
          {
            {
              workInProgress.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
            return child;
          }
        case ForwardRef:
          {
            {
              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
            return child;
          }
        case MemoComponent:
          {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                  'prop', getComponentName(Component));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
            updateLanes, renderLanes);
            return child;
          }
      }
      var hint = '';
      {
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
          hint = ' Did you wrap a component in React.lazy() more than once?';
        }
              // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.
}
      // This message intentionally doesn't mention ForwardRef or MemoComponent
      // because the fact that it's a separate type of work is an
      // implementation detail.
      {
        {
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
      }
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
      if (_current !== null) {
        // An incomplete component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.flags |= Placement;
      }
      // Promote the fiber to a class and try rendering again.
      workInProgress.tag = ClassComponent;
      // The rest of this function is a fork of `updateClassComponent`
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress, renderLanes);
      constructClassInstance(workInProgress, Component, nextProps);
      mountClassInstance(workInProgress, Component, nextProps, renderLanes);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
      if (_current !== null) {
        // An indeterminate component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.flags |= Placement;
      }
      var props = workInProgress.pendingProps;
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
      }
      prepareToReadContext(workInProgress, renderLanes);
      var value;
      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutBadClass[componentName]) {
            error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }
        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        setIsRendering(false);
              // React DevTools reads this flag.
}
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      {
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
          var _componentName = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutModulePatternComponent[_componentName]) {
            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
      }
      if (// Run these checks in production only if the flag is off.
      // Eventually we'll delete this branch altogether.
      typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        {
          var _componentName2 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutModulePatternComponent[_componentName2]) {
            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);
            didWarnAboutModulePatternComponent[_componentName2] = true;
          }
                  // Proceed under the assumption that this is a class instance
}
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent;
        // Throw out any hooks that were used.
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }
        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        initializeUpdateQueue(workInProgress);
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }
        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
      } else {
        // Proceed under the assumption that this is a function component
        workInProgress.tag = FunctionComponent;
        {
          if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
              value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
            } finally {
              reenableLogs();
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderLanes);
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        return workInProgress.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
      {
        if (Component) {
          if (Component.childContextTypes) {
            error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
          }
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
          }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
          var _componentName3 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
            error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
          }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
          var _componentName4 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
            error('%s: Function components do not support contextType.', _componentName4);
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
          }
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
      return {
        baseLanes: renderLanes
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
      };
    }
    // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
      // If we're already showing a fallback, there are cases where we need to
      // remain on that fallback regardless of whether the content has resolved.
      // For example, SuspenseList coordinates when nested content appears.
      if (current !== null) {
        var suspenseState = current.memoizedState;
        if (suspenseState === null) {
          // Currently showing content. Don't hide it, even if ForceSuspenseFallack
          // is true. More precise name might be "ForceRemainSuspenseFallback".
          // Note: This is a factoring smell. Can't remain on a fallback if there's
          // no fallback to remain on.
          return false;
        }
      }
      // Not currently showing content. Consult the Suspense context.
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
      // TODO: Should not remove render lanes that were pinged during this render
      return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      // This is used by DevTools to force a boundary to suspend.
      {
        if (shouldSuspend(workInProgress)) {
          workInProgress.flags |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var showFallback = false;
      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
        // Something in this boundary's subtree already suspended. Switch to
        // rendering the fallback children.
        showFallback = true;
        workInProgress.flags &= ~DidCapture;
      } else {
        // Attempting the main content
        if (current === null || current.memoizedState !== null) {
          // This is a new mount or this boundary is already showing a fallback state.
          // Mark this subtree context as having at least one invisible parent that could
          // handle the fallback state.
          // Boundaries without fallbacks or should be avoided are not considered since
          // they cannot handle preferred fallback states.
          if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress, suspenseContext);
      // OK, the next part is confusing. We're about to reconcile the Suspense
      // boundary's children. This involves some custom reconcilation logic. Two
      // main reasons this is so complicated.
      // 
      // First, Legacy Mode has different semantics for backwards compatibility. The
      // primary tree will commit in an inconsistent state, so when we do the
      // second pass to render the fallback, we do some exceedingly, uh, clever
      // hacks to make that not totally break. Like transferring effects and
      // deletions from hidden tree. In Concurrent Mode, it's much simpler,
      // because we bailout on the primary tree completely and leave it in its old
      // state, no effects. Same as what we do for Offscreen (except that
      // Offscreen doesn't have the first render pass).
      // 
      // Second is hydration. During hydration, the Suspense fiber has a slightly
      // different layout, where the child points to a dehydrated fragment, which
      // contains the DOM rendered by the server.
      // 
      // Third, even if you set all that aside, Suspense is like error boundaries in
      // that we first we try to render one tree, and if that fails, we render again
      // and switch to a different tree. Like a try/catch block. So we have to track
      // which branch we're currently rendering. Ideally we would model this using
      // a stack.
      if (current === null) {
        // Initial mount
        // If we're currently hydrating, try to hydrate this boundary.
        // But only if this has a fallback.
        if (nextProps.fallback !== undefined) {
          tryToClaimNextHydratableInstance(workInProgress);
        }
        var nextPrimaryChildren = nextProps.children;
        var nextFallbackChildren = nextProps.fallback;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
          var primaryChildFragment = workInProgress.child;
          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
          workInProgress.memoizedState = SUSPENDED_MARKER;
          return fallbackFragment;
        } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
          // This is a CPU-bound tree. Skip this tree and show a placeholder to
          // unblock the surrounding content. Then immediately retry after the
          // initial commit.
          var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
          var _primaryChildFragment = workInProgress.child;
          _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
          workInProgress.memoizedState = SUSPENDED_MARKER;
          // Since nothing actually suspended, there will nothing to ping this to
          // get it started back up to attempt the next item. While in terms of
          // priority this work has the same priority as this current render, it's
          // not part of the same transition once the transition has committed. If
          // it's sync, we still want to yield so that it can be painted.
          // Conceptually, this is really the same as pinging. We can use any
          // RetryLane even if it's the one currently rendering since we're leaving
          // it behind on this node.
          workInProgress.lanes = SomeRetryLane;
          {
            markSpawnedWork(SomeRetryLane);
          }
          return _fallbackFragment;
        } else {
          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
        }
      } else {
        // This is an update.
        // If the current fiber has a SuspenseState, that means it's already showing
        // a fallback.
        var prevState = current.memoizedState;
        if (prevState !== null) {
          if (showFallback) {
            var _nextFallbackChildren2 = nextProps.fallback;
            var _nextPrimaryChildren2 = nextProps.children;
            var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
            var _primaryChildFragment3 = workInProgress.child;
            var prevOffscreenState = current.child.memoizedState;
            _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
            _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
            workInProgress.memoizedState = SUSPENDED_MARKER;
            return _fallbackChildFragment;
          } else {
            var _nextPrimaryChildren3 = nextProps.children;
            var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
            workInProgress.memoizedState = null;
            return _primaryChildFragment4;
          }
        } else {
          // The current tree is not already showing a fallback.
          if (showFallback) {
            // Timed out.
            var _nextFallbackChildren3 = nextProps.fallback;
            var _nextPrimaryChildren4 = nextProps.children;
            var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
            var _primaryChildFragment5 = workInProgress.child;
            var _prevOffscreenState = current.child.memoizedState;
            _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
            _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
            // Skip the primary children, and continue working on the
            // fallback children.
            workInProgress.memoizedState = SUSPENDED_MARKER;
            return _fallbackChildFragment2;
          } else {
            // Still haven't timed out. Continue rendering the children, like we
            // normally do.
            var _nextPrimaryChildren5 = nextProps.children;
            var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
            workInProgress.memoizedState = null;
            return _primaryChildFragment6;
          }
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
      var mode = workInProgress.mode;
      var primaryChildProps = {
        mode: 'visible',
        children: primaryChildren
      };
      var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
      primaryChildFragment.return = workInProgress;
      workInProgress.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
      var mode = workInProgress.mode;
      var progressedPrimaryFragment = workInProgress.child;
      var primaryChildProps = {
        mode: 'hidden',
        children: primaryChildren
      };
      var primaryChildFragment;
      var fallbackChildFragment;
      if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress.mode & ProfileMode) {
          // Reset the durations from the first pass so they aren't included in the
          // final amounts. This seems counterintuitive, since we're intentionally
          // not measuring part of the render phase, but this makes it match what we
          // do in Concurrent Mode.
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = 0;
          primaryChildFragment.treeBaseDuration = 0;
        }
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
      } else {
        primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
      }
      primaryChildFragment.return = workInProgress;
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current, offscreenProps) {
      // The props argument to `createWorkInProgress` is `any` typed, so we use this
      // wrapper function to constrain it.
      return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: 'visible',
        children: primaryChildren
      });
      if ((workInProgress.mode & BlockingMode) === NoMode) {
        primaryChildFragment.lanes = renderLanes;
      }
      primaryChildFragment.return = workInProgress;
      primaryChildFragment.sibling = null;
      if (currentFallbackChildFragment !== null) {
        // Delete the fallback child fragment
        currentFallbackChildFragment.nextEffect = null;
        currentFallbackChildFragment.flags = Deletion;
        workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
      }
      workInProgress.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
      var mode = workInProgress.mode;
      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildProps = {
        mode: 'hidden',
        children: primaryChildren
      };
      var primaryChildFragment;
      if (// In legacy mode, we commit the primary tree as if it successfully
      // completed, even though it's in an inconsistent state.
      (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
      // already cloned. In legacy mode, the only case where this isn't true is
      // when DevTools forces us to display a fallback; we skip the first render
      // pass entirely and go straight to rendering the fallback. (In Concurrent
      // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
      // only codepath.)
      workInProgress.child !== currentPrimaryChildFragment) {
        var progressedPrimaryFragment = workInProgress.child;
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress.mode & ProfileMode) {
          // Reset the durations from the first pass so they aren't included in the
          // final amounts. This seems counterintuitive, since we're intentionally
          // not measuring part of the render phase, but this makes it match what we
          // do in Concurrent Mode.
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        }
        // The fallback fiber was added as a deletion effect during the first pass.
        // However, since we're going to remain on the fallback, we no longer want
        // to delete it. So we need to remove it from the list. Deletions are stored
        // on the same list as effects. We want to keep the effects from the primary
        // tree. So we copy the primary child fragment's effect list, which does not
        // include the fallback deletion effect.
        var progressedLastEffect = primaryChildFragment.lastEffect;
        if (progressedLastEffect !== null) {
          workInProgress.firstEffect = primaryChildFragment.firstEffect;
          workInProgress.lastEffect = progressedLastEffect;
          progressedLastEffect.nextEffect = null;
        } else {
          // TODO: Reset this somewhere else? Lol legacy mode is so weird.
          workInProgress.firstEffect = workInProgress.lastEffect = null;
        }
      } else {
        primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
      }
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null) {
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      } else {
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
      }
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
      }
      scheduleWorkOnParentPath(fiber.return, renderLanes);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
      // Mark any Suspense boundaries with fallbacks as having work to do.
      // If they were previously forced into fallbacks, they may now be able
      // to unblock.
      var node = firstChild;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            scheduleWorkOnFiber(node, renderLanes);
          }
        } else if (node.tag === SuspenseListComponent) {
          // If the tail is hidden there might not be an Suspense boundaries
          // to schedule work on. In this case we have to schedule it on the
          // list itself.
          // We don't have to traverse to the children of the list since
          // the list will propagate the change when it rerenders.
          scheduleWorkOnFiber(node, renderLanes);
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      // This is going to find the last row among these children that is already
      // showing content on the screen, as opposed to being in fallback state or
      // new. If a row has multiple Suspense boundaries, any of them being in the
      // fallback state, counts as the whole row being in a fallback state.
      // Note that the "rows" will be workInProgress, but any nested children
      // will still be current since we haven't rendered them yet. The mounted
      // order may not be the same as the new order. We use the new order.
      var row = firstChild;
      var lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        // New rows can't be content rows.
        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;
          if (typeof revealOrder === 'string') {
            switch (revealOrder.toLowerCase()) {
              case 'together':
              case 'forwards':
              case 'backwards':
                {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
              case 'forward':
              case 'backward':
                {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }
    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
            didWarnAboutTailOptions[tailMode] = true;
            error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
            didWarnAboutTailOptions[tailMode] = true;
            error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
      {
        var isArray = Array.isArray(childSlot);
        var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
        if (isArray || isIterable) {
          var type = isArray ? 'array' : 'iterable';
          error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
          return false;
        }
      }
      return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              if (!validateSuspenseListNestedChild(children[i], i)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i = 0;
                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    return;
                  }
                  _i++;
                }
              }
            } else {
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
      var renderState = workInProgress.memoizedState;
      if (renderState === null) {
        workInProgress.memoizedState = {
          isBackwards: isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail: tail,
          tailMode: tailMode,
          lastEffect: lastEffectBeforeRendering
        };
      } else {
        // We can reuse the existing object from previous renders.
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.renderingStartTime = 0;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailMode = tailMode;
        renderState.lastEffect = lastEffectBeforeRendering;
      }
    }
    // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current, workInProgress, newChildren, renderLanes);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress.flags |= DidCapture;
      } else {
        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore) {
          // If we previously forced a fallback, we need to schedule work
          // on any nested boundaries to let them know to try to render
          // again. This is the same as context updating.
          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      pushSuspenseContext(workInProgress, suspenseContext);
      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
      } else {
        switch (revealOrder) {
          case 'forwards':
            {
              var lastContentRow = findLastContentRow(workInProgress.child);
              var tail;
              if (lastContentRow === null) {
                // The whole list is part of the tail.
                // TODO: We could fast path by just rendering the tail now.
                tail = workInProgress.child;
                workInProgress.child = null;
              } else {
                // Disconnect the tail rows after the content row.
                // We're going to render them separately later.
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress, false, // isBackwards
              tail, lastContentRow, tailMode, workInProgress.lastEffect);
              break;
            }
          case 'backwards':
            {
              // We're going to find the first row that has existing content.
              // At the same time we're going to reverse the list of everything
              // we pass in the meantime. That's going to be our tail in reverse
              // order.
              var _tail = null;
              var row = workInProgress.child;
              workInProgress.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                // New rows can't be content rows.
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  // This is the beginning of the main content.
                  workInProgress.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              // TODO: If workInProgress.child is null, we can continue on the tail immediately.
              initSuspenseListRenderState(workInProgress, true, // isBackwards
              _tail, null, // last
              tailMode, workInProgress.lastEffect);
              break;
            }
          case 'together':
            {
              initSuspenseListRenderState(workInProgress, false, // isBackwards
              null, // tail
              null, // last
              undefined, workInProgress.lastEffect);
              break;
            }
          default:
            {
              // The default reveal order is the same as not having
              // a boundary.
              workInProgress.memoizedState = null;
            }
        }
      }
      return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;
      if (current === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
      } else {
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      }
      return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      {
        if (!(('value' in newProps))) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
            hasWarnedAboutUsingNoValuePropOnContextProvider = true;
            error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
          }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        }
      }
      pushProvider(workInProgress, newValue);
      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);
        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderLanes);
        }
      }
      var newChildren = newProps.children;
      reconcileChildren(current, workInProgress, newChildren, renderLanes);
      return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
      var context = workInProgress.type;
      // The logic below for Context differs depending on PROD or DEV mode. In
      // DEV mode, we create a separate object for Context.Consumer that acts
      // like a proxy to Context. This proxy object adds unnecessary code in PROD
      // so we use the old behaviour (Context.Consumer references Context) to
      // reduce size and overhead. The separate object references context via
      // a property called "_context", which also gives us the ability to check
      // in DEV mode if this property exists or not and warn if it does not.
      {
        if (context._context === undefined) {
          // This may be because it's a Context (rather than a Consumer).
          // Or it may be because it's older React where they're the same thing.
          // We only want to warn if we're sure it's a new React.
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        if (typeof render !== 'function') {
          error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
        }
      }
      prepareToReadContext(workInProgress, renderLanes);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren;
      {
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
              // React DevTools reads this flag.
}
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      reconcileChildren(current, workInProgress, newChildren, renderLanes);
      return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
      if (current !== null) {
        // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
      }
      {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
      }
      markSkippedUpdateLanes(workInProgress.lanes);
      // Check if the children have any pending work.
      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
      }
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) {
          throw new Error('Cannot swap the root fiber.');
        }
        // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null;
        // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null) {
            throw new Error('Expected parent to have a child.');
          }
          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;
            if (prevSibling === null) {
              throw new Error('Expected to find the previous sibling.');
            }
          }
          prevSibling.sibling = newWorkInProgress;
        }
        // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
          last.nextEffect = current;
          returnFiber.lastEffect = current;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = current;
        }
        current.nextEffect = null;
        current.flags = Deletion;
        newWorkInProgress.flags |= Placement;
        // Restart work from the new fiber.
        return newWorkInProgress;
      }
    }
    function beginWork(current, workInProgress, renderLanes) {
      var updateLanes = workInProgress.lanes;
      {
        if (workInProgress._debugNeedsRemount && current !== null) {
          // This will restart the begin phase with a new fiber.
          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        }
      }
      if (current !== null) {
        var oldProps = current.memoizedProps;
        var newProps = workInProgress.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
        workInProgress.type !== current.type) {
          // If props or context changed, mark the fiber as having performed work.
          // This may be unset if the props are determined to be equal later (memo).
          didReceiveUpdate = true;
        } else if (!includesSomeLane(renderLanes, updateLanes)) {
          didReceiveUpdate = false;
          // This fiber does not have any pending work. Bailout without entering
          // the begin phase. There's still some bookkeeping we that needs to be done
          // in this optimized path, mostly pushing stuff onto the stack.
          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress);
              break;
            case ClassComponent:
              {
                var Component = workInProgress.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }
                break;
              }
            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;
            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }
            case Profiler:
              {
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) {
                  workInProgress.flags |= Update;
                }
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
              break;
            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                if (state !== null) {
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  // child fragment.
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes, primaryChildLanes)) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                  } else {
                    // The primary child fragment does not have pending work marked
                    // on it
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
            case SuspenseListComponent:
              {
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                  }
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                  workInProgress.flags |= DidCapture;
                }
                // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                  // Reset to the "together" mode in case we've started a different
                  // update in the past but didn't complete it.
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                  return null;
                }
              }
            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
              }
          }
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } else {
          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
          } else {
            // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
          }
        }
      } else {
        didReceiveUpdate = false;
      }
      // Before entering the begin phase, clear pending update priority.
      // TODO: This assumes that we're about to evaluate the component and process
      // the update queue. However, there's an exception: SimpleMemoComponent
      // sometimes bails out later in the begin phase. This indicates that we should
      // move this assignment out of the common path and into each branch.
      workInProgress.lanes = NoLanes;
      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
          }
        case LazyComponent:
          {
            var elementType = workInProgress.elementType;
            return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
          }
        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
          }
        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;
            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
          }
        case HostRoot:
          return updateHostRoot(current, workInProgress, renderLanes);
        case HostComponent:
          return updateHostComponent(current, workInProgress, renderLanes);
        case HostText:
          return updateHostText(current, workInProgress);
        case SuspenseComponent:
          return updateSuspenseComponent(current, workInProgress, renderLanes);
        case HostPortal:
          return updatePortalComponent(current, workInProgress, renderLanes);
        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;
            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
          }
        case Fragment:
          return updateFragment(current, workInProgress, renderLanes);
        case Mode:
          return updateMode(current, workInProgress, renderLanes);
        case Profiler:
          return updateProfiler(current, workInProgress, renderLanes);
        case ContextProvider:
          return updateContextProvider(current, workInProgress, renderLanes);
        case ContextConsumer:
          return updateContextConsumer(current, workInProgress, renderLanes);
        case MemoComponent:
          {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps;
            // Resolve outer props first, then resolve inner props.
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                  'prop', getComponentName(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
          }
        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
          }
        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;
            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
          }
        case SuspenseListComponent:
          {
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
          }
        case FundamentalComponent:
          {
            break;
          }
        case ScopeComponent:
          {
            break;
          }
        case Block:
          {
            break;
          }
        case OffscreenComponent:
          {
            return updateOffscreenComponent(current, workInProgress, renderLanes);
          }
        case LegacyHiddenComponent:
          {
            return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
          }
      }
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
      workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    {
      // Mutation mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) ; else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      };
      updateHostContainer = function (workInProgress) {};
      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        }
        // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };
      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating()) {
        // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
      }
      switch (renderState.tailMode) {
        case 'hidden':
          {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            // Next we're simply going to delete all insertions after the
            // last rendered item.
            if (lastTailNode === null) {
              // All remaining items in the tail are insertions.
              renderState.tail = null;
            } else {
              // Detach the insertion after the last node that was already
              // inserted.
              lastTailNode.sibling = null;
            }
            break;
          }
        case 'collapsed':
          {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            // Next we're simply going to delete all insertions after the
            // last rendered item.
            if (_lastTailNode === null) {
              // All remaining items in the tail are insertions.
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                // We suspended during the head. We want to show at least one
                // row at the tail. So we'll keep on and cut off the rest.
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              // Detach the insertion after the last node that was already
              // inserted.
              _lastTailNode.sibling = null;
            }
            break;
          }
      }
    }
    function completeWork(current, workInProgress, renderLanes) {
      var newProps = workInProgress.pendingProps;
      switch (workInProgress.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          return null;
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            return null;
          }
        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            resetWorkInProgressVersions();
            var fiberRoot = workInProgress.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              var wasHydrated = popHydrationState(workInProgress);
              if (wasHydrated) {
                // If we hydrated, then we'll need to schedule an update for
                // the commit side-effects on the root.
                markUpdate(workInProgress);
              } else if (!fiberRoot.hydrate) {
                // Schedule an effect to clear this container at the start of the next commit.
                // This handles the case of React rendering into a container with previous children.
                // It's also safe to do for updates too, because current.child would only be null
                // if the previous render was null (so the the container would already be empty).
                workInProgress.flags |= Snapshot;
              }
            }
            updateHostContainer(workInProgress);
            return null;
          }
        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;
            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                if (!(workInProgress.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                // This can happen when we abort work.
                return null;
              }
              var currentHostContext = getHostContext();
              // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on whether we want to add them top->down or
              // bottom->up. Top->down is faster in IE11.
              var _wasHydrated = popHydrationState(workInProgress);
              if (_wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node need to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                appendAllChildren(instance, workInProgress, false, false);
                workInProgress.stateNode = instance;
                // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress);
                }
              }
              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }
            return null;
          }
        case HostText:
          {
            var newText = newProps;
            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps;
              // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.
              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                if (!(workInProgress.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }
            return null;
          }
        case SuspenseComponent:
          {
            popSuspenseContext(workInProgress);
            var nextState = workInProgress.memoizedState;
            if ((workInProgress.flags & DidCapture) !== NoFlags) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.lanes = renderLanes;
              // Do not reset the effect list.
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress);
              }
              return workInProgress;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current === null) {
              if (workInProgress.memoizedProps.fallback !== undefined) {
                popHydrationState(workInProgress);
              }
            } else {
              var prevState = current.memoizedState;
              prevDidTimeout = prevState !== null;
            }
            if (nextDidTimeout && !prevDidTimeout) {
              // If this subtreee is running in blocking mode we can suspend,
              // otherwise we won't suspend.
              // TODO: This will still suspend a synchronous tree if anything
              // in the concurrent tree already suspended during this render.
              // This is a known bug.
              if ((workInProgress.mode & BlockingMode) !== NoMode) {
                // TODO: Move this back to throwException because this is too late
                // if this is a large tree which is common for initial loads. We
                // don't know if we should restart a render or not until we get
                // this marker, and this is too late.
                // If this render already had a ping or lower pri updates,
                // and this is the first time we know we're going to suspend we
                // should be able to immediately restart from within throwException.
                var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  // If this was in an invisible tree or a new render, then showing
                  // this boundary is ok.
                  renderDidSuspend();
                } else {
                  // Otherwise, we're going to have to hide content so we should
                  // suspend for longer if possible.
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
            {
              // TODO: Only schedule updates if these values are non equal, i.e. it changed.
              if (nextDidTimeout || prevDidTimeout) {
                // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
              }
            }
            return null;
          }
        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          if (current === null) {
            preparePortalMount(workInProgress.stateNode.containerInfo);
          }
          return null;
        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          return null;
        case IncompleteClassComponent:
          {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }
            return null;
          }
        case SuspenseListComponent:
          {
            popSuspenseContext(workInProgress);
            var renderState = workInProgress.memoizedState;
            if (renderState === null) {
              // We're running in the default, "independent" mode.
              // We don't do anything in this mode.
              return null;
            }
            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              // We just rendered the head.
              if (!didSuspendAlready) {
                // This is the first pass. We need to figure out if anything is still
                // suspended in the rendered set.
                // If new content unsuspended, but there's still some content that
                // didn't. Then we need to do a second pass that forces everything
                // to keep showing their fallbacks.
                // We might be suspended if something in this render pass suspended, or
                // something in the previous committed pass suspended. Otherwise,
                // there's no chance so we can skip the expensive call to
                // findFirstSuspended.
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      // If this is a newly suspended tree, it might not get committed as
                      // part of the second pass. In that case nothing will subscribe to
                      // its thennables. Instead, we'll transfer its thennables to the
                      // SuspenseList so that it can retry if they resolve.
                      // There might be multiple of these in the list but since we're
                      // going to wait for all of them anyway, it doesn't really matter
                      // which ones gets to ping. In theory we could get clever and keep
                      // track of how many dependencies remain but it gets tricky because
                      // in the meantime, we can add/remove/change items and dependencies.
                      // We might bail out of the loop before finding any but that
                      // doesn't matter since that means that the other boundaries that
                      // we did find already has their listeners attached.
                      var newThennables = suspended.updateQueue;
                      if (newThennables !== null) {
                        workInProgress.updateQueue = newThennables;
                        workInProgress.flags |= Update;
                      }
                      // Rerender the whole list, but this time, we'll force fallbacks
                      // to stay in place.
                      // Reset the effect list before doing the second pass since that's now invalid.
                      if (renderState.lastEffect === null) {
                        workInProgress.firstEffect = null;
                      }
                      workInProgress.lastEffect = renderState.lastEffect;
                      // Reset the child fibers to their original state.
                      resetChildFibers(workInProgress, renderLanes);
                      // Set up the Suspense Context to force suspense and immediately
                      // rerender the children.
                      pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  // We have already passed our CPU deadline but we still have rows
                  // left in the tail. We'll just give up further attempts to render
                  // the main content and only render fallbacks.
                  workInProgress.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  // Since nothing actually suspended, there will nothing to ping this
                  // to get it started back up to attempt the next item. While in terms
                  // of priority this work has the same priority as this current render,
                  // it's not part of the same transition once the transition has
                  // committed. If it's sync, we still want to yield so that it can be
                  // painted. Conceptually, this is really the same as pinging.
                  // We can use any RetryLane even if it's the one currently rendering
                  // since we're leaving it behind on this node.
                  workInProgress.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              // Append the rendered row to the child list.
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress.flags |= DidCapture;
                  didSuspendAlready = true;
                  // Ensure we transfer the update queue to the parent so that it doesn't
                  // get lost if this row ends up dropped during a second pass.
                  var _newThennables = _suspended.updateQueue;
                  if (_newThennables !== null) {
                    workInProgress.updateQueue = _newThennables;
                    workInProgress.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  // This might have been modified.
                  if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating()) // We don't cut it if we're hydrating.
                  {
                    // We need to delete the row we just rendered.
                    // Reset the effect list to what it was before we rendered this
                    // child. The nested children have already appended themselves.
                    var lastEffect = workInProgress.lastEffect = renderState.lastEffect;
                    // Remove any effects that were appended after this point.
                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }
                    // We're done.
                    return null;
                  }
                } else if (// The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                  // We have now passed our CPU deadline and we'll just give up further
                  // attempts to render the main content and only render fallbacks.
                  // The assumption is that this is usually faster.
                  workInProgress.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  // Since nothing actually suspended, there will nothing to ping this
                  // to get it started back up to attempt the next item. While in terms
                  // of priority this work has the same priority as this current render,
                  // it's not part of the same transition once the transition has
                  // committed. If it's sync, we still want to yield so that it can be
                  // painted. Conceptually, this is really the same as pinging.
                  // We can use any RetryLane even if it's the one currently rendering
                  // since we're leaving it behind on this node.
                  workInProgress.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              }
              if (renderState.isBackwards) {
                // The effect list of the backwards tail will have been added
                // to the end. This breaks the guarantee that life-cycles fire in
                // sibling order but that isn't a strong guarantee promised by React.
                // Especially since these might also just pop in during future commits.
                // Append to the beginning of the list.
                renderedTail.sibling = workInProgress.child;
                workInProgress.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              // We still have tail rows to render.
              // Pop a row.
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress.lastEffect;
              renderState.renderingStartTime = now();
              next.sibling = null;
              // Restore the context.
              // TODO: We can probably just avoid popping it instead and only
              // setting it the first time we go from not suspended to suspended.
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress, suspenseContext);
              // Do a pass over the next row.
              return next;
            }
            return null;
          }
        case FundamentalComponent:
          {
            break;
          }
        case ScopeComponent:
          {
            break;
          }
        case Block:
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          {
            popRenderLanes(workInProgress);
            if (current !== null) {
              var _nextState = workInProgress.memoizedState;
              var _prevState = current.memoizedState;
              var prevIsHidden = _prevState !== null;
              var nextIsHidden = _nextState !== null;
              if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                workInProgress.flags |= Update;
              }
            }
            return null;
          }
      }
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function unwindWork(workInProgress, renderLanes) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            var flags = workInProgress.flags;
            if (flags & ShouldCapture) {
              workInProgress.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress);
              }
              return workInProgress;
            }
            return null;
          }
        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            resetWorkInProgressVersions();
            var _flags = workInProgress.flags;
            if (!((_flags & DidCapture) === NoFlags)) {
              {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }
            }
            workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
        case HostComponent:
          {
            // TODO: popHydrationState
            popHostContext(workInProgress);
            return null;
          }
        case SuspenseComponent:
          {
            popSuspenseContext(workInProgress);
            var _flags2 = workInProgress.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;
              // Captured a suspense effect. Re-render the boundary.
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress);
              }
              return workInProgress;
            }
            return null;
          }
        case SuspenseListComponent:
          {
            popSuspenseContext(workInProgress);
            // SuspenseList doesn't actually catch anything. It should've been
            // caught by a nested boundary. If not, it should bubble through.
            return null;
          }
        case HostPortal:
          popHostContainer(workInProgress);
          return null;
        case ContextProvider:
          popProvider(workInProgress);
          return null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(workInProgress);
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          popProvider(interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
      return true;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError = showErrorDialog(boundary, errorInfo);
        // Allow injected showErrorDialog() to prevent default console.error logging.
        // This enables renderers like ReactNative to better manage redbox behavior.
        if (logError === false) {
          return;
        }
        var error = errorInfo.value;
        if (true) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          var componentStack = stack !== null ? stack : '';
          // Browsers support silencing uncaught errors by calling
          // `preventDefault()` in window `error` handler.
          // We record this information as an expando on the error.
          if (error != null && error._suppressLogging) {
            if (boundary.tag === ClassComponent) {
              // The error is recoverable and was silenced.
              // Ignore it and don't print the stack addendum.
              // This is handy for testing error boundaries without noise.
              return;
            }
            // The error is fatal. Since the silencing might have
            // been accidental, we'll surface it anyway.
            // However, the browser would have silenced the original error
            // so we'll print it first, and then print the stack addendum.
            console['error'](error);
          }
          var componentName = source ? getComponentName(source.type) : null;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
          var errorBoundaryMessage;
          var errorBoundaryName = getComponentName(boundary.type);
          if (errorBoundaryName) {
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          } else {
            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
          }
          var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          // In development, we provide our own message with just the component stack.
          // We don't include the original error message and JS stack because the browser
          // has already printed it. Even if the application swallows the error, it is still
          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
          console['error'](combinedMessage);
        } else {
          // In production, we print the error directly.
          // This will include the message, the JS stack, and anything the browser wants to show.
          // We pass the error object instead of custom message so that the browser displays the error natively.
          console['error'](error);
        }
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      // Unmount the root by rendering null.
      update.tag = CaptureUpdate;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      update.payload = {
        element: null
      };
      var error = errorInfo.value;
      update.callback = function () {
        onUncaughtError(error);
        logCapturedError(fiber, errorInfo);
      };
      return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === 'function') {
        var error$1 = errorInfo.value;
        update.payload = function () {
          logCapturedError(fiber, errorInfo);
          return getDerivedStateFromError(error$1);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          if (typeof getDerivedStateFromError !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            // Only log here if componentDidCatch is the only error boundary method defined
            logCapturedError(fiber, errorInfo);
          }
          var error$1 = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error$1, {
            componentStack: stack !== null ? stack : ''
          });
          {
            if (typeof getDerivedStateFromError !== 'function') {
              // If componentDidCatch is the only error boundary method defined,
              // then it needs to call setState to recover from errors.
              // If no state update is scheduled then the boundary will swallow the error.
              if (!includesSomeLane(fiber.lanes, SyncLane)) {
                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
              }
            }
          }
        };
      } else {
        update.callback = function () {
          markFailedErrorBoundaryForHotReloading(fiber);
        };
      }
      return update;
    }
    function attachPingListener(root, wakeable, lanes) {
      // Attach a listener to the promise to "ping" the root and retry. But only if
      // one does not already exist for the lanes we're currently rendering (which
      // acts like a "thread ID" here).
      var pingCache = root.pingCache;
      var threadIDs;
      if (pingCache === null) {
        pingCache = root.pingCache = new PossiblyWeakMap$1();
        threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable);
        if (threadIDs === undefined) {
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        }
      }
      if (!threadIDs.has(lanes)) {
        // Memoize using the thread ID to prevent redundant listeners.
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
        wakeable.then(ping, ping);
      }
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
      // The source fiber did not complete.
      sourceFiber.flags |= Incomplete;
      // Its effect list is no longer valid.
      sourceFiber.firstEffect = sourceFiber.lastEffect = null;
      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a wakeable.
        var wakeable = value;
        if ((sourceFiber.mode & BlockingMode) === NoMode) {
          // Reset the memoizedState to what it was before we attempted
          // to render it.
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
        var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
        // Schedule the nearest Suspense to re-render the timed out view.
        var _workInProgress = returnFiber;
        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
            // Found the nearest boundary.
            // Stash the promise on the boundary fiber. If the boundary times out, we'll
            // attach another listener to flip the boundary back to its normal state.
            var wakeables = _workInProgress.updateQueue;
            if (wakeables === null) {
              var updateQueue = new Set();
              updateQueue.add(wakeable);
              _workInProgress.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
            // If the boundary is outside of blocking mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. In the commit phase, we'll schedule a
            // subsequent synchronous update to re-render the Suspense.
            // 
            // Note: It doesn't matter whether the component that suspended was
            // inside a blocking mode tree. If the Suspense is outside of it, we
            // should *not* suspend the commit.
            if ((_workInProgress.mode & BlockingMode) === NoMode) {
              _workInProgress.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              // We're going to commit this fiber even though it didn't complete.
              // But we shouldn't call any lifecycle methods or callbacks. Remove
              // all lifecycle effect tags.
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  // This is a new mount. Change the tag so it's not mistaken for a
                  // completed class component. For example, we should not call
                  // componentWillUnmount if it is deleted.
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  // When we try rendering again, we should not reuse the current fiber,
                  // since it's known to be in an inconsistent state. Use a force update to
                  // prevent a bail out.
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              }
              // The source fiber did not complete. Mark it with Sync priority to
              // indicate that it still has pending work.
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              // Exit without suspending.
              return;
            }
            // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.
            // 
            // After this we'll use a set of heuristics to determine whether this
            // render pass will run to completion or restart or "suspend" the commit.
            // The actual logic for this is spread out in different places.
            // 
            // This first principle is that if we're going to suspend when we complete
            // a root, then we should also restart if we get an update or ping that
            // might unsuspend it, and vice versa. The only reason to suspend is
            // because you think you might want to restart before committing. However,
            // it doesn't make sense to restart only while in the period we're suspended.
            // 
            // Restarting too aggressively is also not good because it starves out any
            // intermediate loading state. So we use heuristics to determine when.
            // Suspense Heuristics
            // 
            // If nothing threw a Promise or all the same fallbacks are already showing,
            // then don't suspend/restart.
            // 
            // If this is an initial render of a new tree of Suspense boundaries and
            // those trigger a fallback, then don't suspend/restart. We want to ensure
            // that we can show the initial loading state as quickly as possible.
            // 
            // If we hit a "Delayed" case, such as when we'd switch from content back into
            // a fallback, then we should always suspend/restart. Transitions apply
            // to this case. If none is defined, JND is used instead.
            // 
            // If we're already showing a fallback and it gets "retried", allowing us to show
            // another level, but there's still an inner boundary that would show a fallback,
            // then we suspend/restart for 500ms since the last time we showed a fallback
            // anywhere in the tree. This effectively throttles progressive loading into a
            // consistent train of commits. This also gives us an opportunity to restart to
            // get to the completed state slightly earlier.
            // 
            // If there's ambiguity due to batching it's resolved in preference of:
            // 1) "delayed", 2) "initial render", 3) "retry".
            // 
            // We want to ensure that a "busy" state doesn't get force committed. We want to
            // ensure that new initial loading states can commit as soon as possible.
            attachPingListener(root, wakeable, rootRenderLanes);
            _workInProgress.flags |= ShouldCapture;
            _workInProgress.lanes = rootRenderLanes;
            return;
          }
          // This boundary already captured during this render. Continue to the next
          // boundary.
          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null);
        // No boundary was found. Fallthrough to error mode.
        // TODO: Use invariant so the message is stripped in prod?
        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
      }
      // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.
      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;
      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
              var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }
          case ClassComponent:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;
            if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);
              // Schedule the error boundary to re-render using updated state
              var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress, _update2);
              return;
            }
            break;
        }
        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function (current, instance) {
      instance.props = current.memoizedProps;
      instance.state = current.memoizedState;
      {
        instance.componentWillUnmount();
      }
    };
    // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current, unmountError);
        }
      }
    }
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);
            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current, error);
        }
      }
    }
    function commitBeforeMutationLifeCycles(current, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
        case Block:
          {
            return;
          }
        case ClassComponent:
          {
            if (finishedWork.flags & Snapshot) {
              if (current !== null) {
                var prevProps = current.memoizedProps;
                var prevState = current.memoizedState;
                var instance = finishedWork.stateNode;
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
            }
            return;
          }
        case HostRoot:
          {
            {
              if (finishedWork.flags & Snapshot) {
                var root = finishedWork.stateNode;
                clearContainer(root.containerInfo);
              }
            }
            return;
          }
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          // Nothing to do for these component types
          return;
      }
      {
        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & tag) === tag) {
            // Unmount
            var destroy = effect.destroy;
            effect.destroy = undefined;
            if (destroy !== undefined) {
              destroy();
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(tag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & tag) === tag) {
            // Mount
            var create = effect.create;
            effect.destroy = create();
            {
              var destroy = effect.destroy;
              if (destroy !== undefined && typeof destroy !== 'function') {
                var addendum = void 0;
                if (destroy === null) {
                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                } else if (typeof destroy.then === 'function') {
                  addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                } else {
                  addendum = ' You returned: ' + destroy;
                }
                error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function schedulePassiveEffects(finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          var _effect = effect, next = _effect.next, tag = _effect.tag;
          if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
            enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
            enqueuePendingPassiveHookEffectMount(finishedWork, effect);
          }
          effect = next;
        } while (effect !== firstEffect);
      }
    }
    function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
        case Block:
          {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
            }
            schedulePassiveEffects(finishedWork);
            return;
          }
        case ClassComponent:
          {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                }
                {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                var prevState = current.memoizedState;
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                }
                {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
            // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
                              // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
}
              // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            return;
          }
        case HostRoot:
          {
            // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            return;
          }
        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode;
            // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.
            if (current === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            return;
          }
        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }
        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }
        case Profiler:
          {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime = getCommitTime();
              if (typeof onRender === 'function') {
                {
                  onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                }
              }
            }
            return;
          }
        case SuspenseComponent:
          {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            return;
          }
        case SuspenseListComponent:
        case IncompleteClassComponent:
        case FundamentalComponent:
        case ScopeComponent:
        case OffscreenComponent:
        case LegacyHiddenComponent:
          return;
      }
      {
        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;
            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;
            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        // Moved outside to ensure DCE works with this flag
        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }
    function commitDetachRef(current) {
      var currentRef = current.ref;
      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    }
    // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current, renderPriorityLevel) {
      onCommitUnmount(current);
      switch (current.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
        case Block:
          {
            var updateQueue = current.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                  if (destroy !== undefined) {
                    if ((tag & Passive$1) !== NoFlags$1) {
                      enqueuePendingPassiveHookEffectUnmount(current, effect);
                    } else {
                      {
                        safelyCallDestroy(current, destroy);
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
            return;
          }
        case ClassComponent:
          {
            safelyDetachRef(current);
            var instance = current.stateNode;
            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current, instance);
            }
            return;
          }
        case HostComponent:
          {
            safelyDetachRef(current);
            return;
          }
        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            {
              unmountHostComponents(finishedRoot, current);
            }
            return;
          }
        case FundamentalComponent:
          {
            return;
          }
        case DehydratedFragment:
          {
            return;
          }
        case ScopeComponent:
          {
            return;
          }
      }
    }
    function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      // we do an inner loop while we're still inside the host node.
      var node = root;
      while (true) {
        commitUnmount(finishedRoot, node);
        // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.
        if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === root) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function detachFiberMutation(fiber) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      // Note: we cannot null out sibling here, otherwise it can cause issues
      // with findDOMNode and how it requires the sibling field to carry out
      // traversal in a later effect. See PR #16820. We now clear the sibling
      // field after effects, see: detachFiberAfterEffects.
      // 
      // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
      // It may be required if the current component is an error boundary,
      // and one of its descendants throws while unmounting a passive effect.
      fiber.alternate = null;
      fiber.child = null;
      fiber.dependencies = null;
      fiber.firstEffect = null;
      fiber.lastEffect = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.return = null;
      fiber.updateQueue = null;
      {
        fiber._debugOwner = null;
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      {
        {
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      // TODO: Find a more efficient way to do this.
      var node = fiber;
      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.flags & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          }
          // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.
          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        }
        // Check if this host node is stable or about to be placed.
        if (!(node.flags & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      // Note: these two variables *must* always be updated together.
      var parent;
      var isContainer;
      var parentStateNode = parentFiber.stateNode;
      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentStateNode;
          isContainer = false;
          break;
        case HostRoot:
          parent = parentStateNode.containerInfo;
          isContainer = true;
          break;
        case HostPortal:
          parent = parentStateNode.containerInfo;
          isContainer = true;
          break;
        case FundamentalComponent:
        default:
          {
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
      }
      if (parentFiber.flags & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent);
        // Clear ContentReset from the effect tag
        parentFiber.flags &= ~ContentReset;
      }
      var before = getHostSibling(finishedWork);
      // We only have the top Fiber that was inserted but we need to recurse down its
      // children to find all the terminal nodes.
      if (isContainer) {
        insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
      } else {
        insertOrAppendPlacementNode(finishedWork, before, parent);
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost || enableFundamentalAPI) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (before) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          appendChildToContainer(parent, stateNode);
        }
      } else if (tag === HostPortal) ; else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost || enableFundamentalAPI) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (before) {
          insertBefore(parent, stateNode, before);
        } else {
          appendChild(parent, stateNode);
        }
      } else if (tag === HostPortal) ; else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNode(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
      // We only have the top Fiber that was deleted but we need to recurse down its
      // children to find all the terminal nodes.
      var node = current;
      // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.
      var currentParentIsValid = false;
      // Note: these two variables *must* always be updated together.
      var currentParent;
      var currentParentIsContainer;
      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;
          findParent: while (true) {
            if (!(parent !== null)) {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var parentStateNode = parent.stateNode;
            switch (parent.tag) {
              case HostComponent:
                currentParent = parentStateNode;
                currentParentIsContainer = false;
                break findParent;
              case HostRoot:
                currentParent = parentStateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
              case HostPortal:
                currentParent = parentStateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }
            parent = parent.return;
          }
          currentParentIsValid = true;
        }
        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(finishedRoot, node);
          // After all the children have unmounted, it is now safe to remove the
          // node from the tree.
          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          }
        } else if (node.tag === HostPortal) {
          if (node.child !== null) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo;
            currentParentIsContainer = true;
            // Visit children because portals might contain host components.
            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(finishedRoot, node);
          // Visit children because we may find more host components below.
          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }
        if (node === current) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === current) {
            return;
          }
          node = node.return;
          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function commitDeletion(finishedRoot, current, renderPriorityLevel) {
      {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current);
      }
      var alternate = current.alternate;
      detachFiberMutation(current);
      if (alternate !== null) {
        detachFiberMutation(alternate);
      }
    }
    function commitWork(current, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
        case Block:
          {
            // Layout effects are destroyed during the mutation phase so that all
            // destroy functions for all fibers are called before any create functions.
            // This prevents sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
            }
            return;
          }
        case ClassComponent:
          {
            return;
          }
        case HostComponent:
          {
            var instance = finishedWork.stateNode;
            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps;
              // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.
              var oldProps = current !== null ? current.memoizedProps : newProps;
              var type = finishedWork.type;
              // TODO: Type the updateQueue to be specific to host components.
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps);
              }
            }
            return;
          }
        case HostText:
          {
            if (!(finishedWork.stateNode !== null)) {
              {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldText = current !== null ? current.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
        case HostRoot:
          {
            {
              var _root = finishedWork.stateNode;
              if (_root.hydrate) {
                // We've just hydrated. No need to hydrate again.
                _root.hydrate = false;
                commitHydratedContainer(_root.containerInfo);
              }
            }
            return;
          }
        case Profiler:
          {
            return;
          }
        case SuspenseComponent:
          {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
        case SuspenseListComponent:
          {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
        case IncompleteClassComponent:
          {
            return;
          }
        case FundamentalComponent:
          {
            break;
          }
        case ScopeComponent:
          {
            break;
          }
        case OffscreenComponent:
        case LegacyHiddenComponent:
          {
            var newState = finishedWork.memoizedState;
            var isHidden = newState !== null;
            hideOrUnhideAllChildren(finishedWork, isHidden);
            return;
          }
      }
      {
        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function commitSuspenseComponent(finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState !== null) {
        markCommitTimeOfFallback();
        {
          // Hide the Offscreen component that contains the primary children. TODO:
          // Ideally, this effect would have been scheduled on the Offscreen fiber
          // itself. That's how unhiding works: the Offscreen component schedules an
          // effect on itself. However, in this case, the component didn't complete,
          // so the fiber was never added to the effect list in the normal path. We
          // could have appended it to the effect list in the Suspense component's
          // second pass, but doing it this way is less complicated. This would be
          // simpler if we got rid of the effect list and traversed the tree, like
          // we're planning to do.
          var primaryChildParent = finishedWork.child;
          hideOrUnhideAllChildren(primaryChildParent, true);
        }
      }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current = finishedWork.alternate;
        if (current !== null) {
          var prevState = current.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null) {
              commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      // If this boundary just timed out, then it will have a set of wakeables.
      // For each wakeable, attach a listener so that when it resolves, React
      // attempts to re-render the boundary in the primary (pre-timeout) state.
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet();
        }
        wakeables.forEach(function (wakeable) {
          // Memoize using the boundary fiber to prevent redundant listeners.
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            {
              if (wakeable.__reactDoNotTraceInteractions !== true) {
                retry = tracing.unstable_wrap(retry);
              }
            }
            retryCache.add(wakeable);
            wakeable.then(retry, retry);
          }
        });
      }
    }
    // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current, finishedWork) {
      if (current !== null) {
        var oldState = current.memoizedState;
        if (oldState === null || oldState.dehydrated !== null) {
          var newState = finishedWork.memoizedState;
          return newState !== null && newState.dehydrated === null;
        }
      }
      return false;
    }
    function commitResetTextContent(current) {
      resetTextContent(current.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor$1 = Symbol.for;
      COMPONENT_TYPE = symbolFor$1('selector.component');
      HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
      ROLE_TYPE = symbolFor$1('selector.role');
      TEST_NAME_TYPE = symbolFor$1('selector.test_id');
      TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      {
        commitHooks.forEach(function (commitHook) {
          return commitHook();
        });
      }
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /**/
    0;
    var BatchedContext = /**/
    1;
    var EventContext = /**/
    2;
    var DiscreteEventContext = /**/
    4;
    var LegacyUnbatchedContext = /**/
    8;
    var RenderContext = /**/
    16;
    var CommitContext = /**/
    32;
    var RetryAfterError = /**/
    64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    // Describes where we are in the React execution stack
    var executionContext = NoContext;
    // The root we're working on
    var workInProgressRoot = null;
    // The fiber we're working on
    var workInProgress = null;
    // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes;
    // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    // 
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete;
    // A fatal error, if one is thrown
    var workInProgressRootFatalError = null;
    // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes;
    // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes;
    // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes;
    // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null;
    // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity;
    // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null;
    // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null;
    // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes;
    // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        // We're inside React, so it's fine to read the actual time.
        return now();
      }
      // We're not inside React, so we may be in the middle of a browser event.
      if (currentEventTime !== NoTimestamp) {
        // Use the same start time for all updates until we enter React again.
        return currentEventTime;
      }
      // This is the first update since React yielded. Compute a new start time.
      currentEventTime = now();
      return currentEventTime;
    }
    function requestUpdateLane(fiber) {
      // Special cases
      var mode = fiber.mode;
      if ((mode & BlockingMode) === NoMode) {
        return SyncLane;
      } else if ((mode & ConcurrentMode) === NoMode) {
        return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
      }
      // The algorithm for assigning an update to a lane should be stable for all
      // updates at the same priority within the same event. To do this, the inputs
      // to the algorithm must be the same. For example, we use the `renderLanes`
      // to avoid choosing a lane that is already in the middle of rendering.
      // 
      // However, the "included" lanes could be mutated in between updates in the
      // same event, like if you perform an update inside `flushSync`. Or any other
      // code path that might call `prepareFreshStack`.
      // 
      // The trick we use is to cache the first of each of these inputs within an
      // event. Then reset the cached values once we can be sure the event is over.
      // Our heuristic for that is whenever we enter a concurrent work loop.
      // 
      // We'll do the same for `currentEventPendingLanes` below.
      if (currentEventWipLanes === NoLanes) {
        currentEventWipLanes = workInProgressRootIncludedLanes;
      }
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (currentEventPendingLanes !== NoLanes) {
          currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
        }
        return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
      }
      // TODO: Remove this dependency on the Scheduler priority.
      // To do that, we're replacing it with an update lane priority.
      var schedulerPriority = getCurrentPriorityLevel();
      // The old behavior was using the priority level of the Scheduler.
      // This couples React to the Scheduler internals, so we're replacing it
      // with the currentUpdateLanePriority above. As an example of how this
      // could be problematic, if we're not inside `Scheduler.runWithPriority`,
      // then we'll get the priority of the current running Scheduler task,
      // which is probably not what we want.
      var lane;
      if (// TODO: Temporary. We're removing the concept of discrete updates.
      (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
        lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
      } else {
        var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
        lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
      }
      return lane;
    }
    function requestRetryLane(fiber) {
      // This is a fork of `requestUpdateLane` designed specifically for Suspense
      // "retries" — a special update that attempts to flip a Suspense boundary
      // from its placeholder state to its primary/resolved state.
      // Special cases
      var mode = fiber.mode;
      if ((mode & BlockingMode) === NoMode) {
        return SyncLane;
      } else if ((mode & ConcurrentMode) === NoMode) {
        return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
      }
      // See `requestUpdateLane` for explanation of `currentEventWipLanes`
      if (currentEventWipLanes === NoLanes) {
        currentEventWipLanes = workInProgressRootIncludedLanes;
      }
      return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
      checkForNestedUpdates();
      warnAboutRenderPhaseUpdatesInDEV(fiber);
      var root = markUpdateLaneFromFiberToRoot(fiber, lane);
      if (root === null) {
        warnAboutUpdateOnUnmountedFiberInDEV(fiber);
        return null;
      }
      // Mark that the root has a pending update.
      markRootUpdated(root, lane, eventTime);
      if (root === workInProgressRoot) {
        // Received an update to a tree that's in the middle of rendering. Mark
        // that there was an interleaved update work on this root. Unless the
        // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
        // phase update. In that case, we don't treat render phase updates as if
        // they were interleaved, for backwards compat reasons.
        {
          workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
        }
        if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
          // The root already suspended with a delay, which means this render
          // definitely won't finish. Since we have a new update, let's mark it as
          // suspended now, right before marking the incoming update. This has the
          // effect of interrupting the current render and switching to the update.
          // TODO: Make sure this doesn't override pings that happen while we've
          // already started rendering.
          markRootSuspended$1(root, workInProgressRootRenderLanes);
        }
      }
      // TODO: requestUpdateLanePriority also reads the priority. Pass the
      // priority as an argument to that function and this one.
      var priorityLevel = getCurrentPriorityLevel();
      if (lane === SyncLane) {
        if (// Check if we're inside unbatchedUpdates
        (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
        (executionContext & (RenderContext | CommitContext)) === NoContext) {
          // Register pending interactions on the root to avoid losing traced interaction data.
          schedulePendingInteractions(root, lane);
          // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
          // root inside of batchedUpdates should be synchronous, but layout updates
          // should be deferred until the end of the batch.
          performSyncWorkOnRoot(root);
        } else {
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, lane);
          if (executionContext === NoContext) {
            // Flush the synchronous work now, unless we're already working or inside
            // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
            // scheduleCallbackForFiber to preserve the ability to schedule a callback
            // without immediately flushing it. We only do this for user-initiated
            // updates, to preserve historical behavior of legacy mode.
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      } else {
        // Schedule a discrete update but only if it's not Sync.
        if ((executionContext & DiscreteEventContext) !== NoContext && (// Only updates at user-blocking priority or greater are considered
        // discrete, even inside a discrete event.
        priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
          // This is the result of a discrete event. Track the lowest priority
          // discrete update per root so we can flush them early, if needed.
          if (rootsWithPendingDiscreteUpdates === null) {
            rootsWithPendingDiscreteUpdates = new Set([root]);
          } else {
            rootsWithPendingDiscreteUpdates.add(root);
          }
        }
        // Schedule other updates after in case the callback is sync.
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, lane);
      }
      // We use this when assigning a lane for a transition inside
      // `requestUpdateLane`. We assume it's the same as the root being updated,
      // since in the common case of a single root app it probably is. If it's not
      // the same root, then it's not a huge deal, we just might batch more stuff
      // together more than necessary.
      mostRecentlyUpdatedRoot = root;
    }
    // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      // Update the source fiber's lanes
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      }
      {
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
              // Walk the parent path to the root and update the child expiration time.
}
      // Walk the parent path to the root and update the child expiration time.
      var node = sourceFiber;
      var parent = sourceFiber.return;
      while (parent !== null) {
        parent.childLanes = mergeLanes(parent.childLanes, lane);
        alternate = parent.alternate;
        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        } else {
          {
            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        node = parent;
        parent = parent.return;
      }
      if (node.tag === HostRoot) {
        var root = node.stateNode;
        return root;
      } else {
        return null;
      }
    }
    // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
      var existingCallbackNode = root.callbackNode;
      // Check if any lanes are being starved by other work. If so, mark them as
      // expired so we know to work on those next.
      markStarvedLanesAsExpired(root, currentTime);
      // Determine the next lanes to work on, and their priority.
      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      // This returns the priority level computed during the `getNextLanes` call.
      var newCallbackPriority = returnNextLanesPriority();
      if (nextLanes === NoLanes) {
        // Special case: There's nothing to work on.
        if (existingCallbackNode !== null) {
          cancelCallback(existingCallbackNode);
          root.callbackNode = null;
          root.callbackPriority = NoLanePriority;
        }
        return;
      }
      // Check if there's an existing task. We may be able to reuse it.
      if (existingCallbackNode !== null) {
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority) {
          // The priority hasn't changed. We can reuse the existing task. Exit.
          return;
        }
        // The priority changed. Cancel the existing callback. We'll schedule a new
        // one below.
        cancelCallback(existingCallbackNode);
      }
      // Schedule a new callback.
      var newCallbackNode;
      if (newCallbackPriority === SyncLanePriority) {
        // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
      } else if (newCallbackPriority === SyncBatchedLanePriority) {
        newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
      } else {
        var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
        newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
      }
      root.callbackPriority = newCallbackPriority;
      root.callbackNode = newCallbackNode;
    }
    // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root) {
      // Since we know we're in a React event, we can clear the current
      // event time. The next update will compute a new event time.
      currentEventTime = NoTimestamp;
      currentEventWipLanes = NoLanes;
      currentEventPendingLanes = NoLanes;
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      // Flush any pending passive effects before deciding which lanes to work on,
      // in case they schedule additional work.
      var originalCallbackNode = root.callbackNode;
      var didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        // Something in the passive effect phase may have canceled the current task.
        // Check if the task node for this root was changed.
        if (root.callbackNode !== originalCallbackNode) {
          // The current task was canceled. Exit. We don't need to call
          // `ensureRootIsScheduled` because the check above implies either that
          // there's a new task, or that there's no remaining work on this root.
          return null;
        }
      }
      // Determine the next expiration time to work on, using the fields stored
      // on the root.
      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes) {
        // Defensive coding. This is never expected to happen.
        return null;
      }
      var exitStatus = renderRootConcurrent(root, lanes);
      if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
        // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        // 
        // So we'll throw out the current work and restart.
        prepareFreshStack(root, NoLanes);
      } else if (exitStatus !== RootIncomplete) {
        if (exitStatus === RootErrored) {
          executionContext |= RetryAfterError;
          // If an error occurred during hydration,
          // discard server response and fall back to client side render.
          if (root.hydrate) {
            root.hydrate = false;
            clearContainer(root.containerInfo);
          }
          // If something threw an error, try rendering one more time. We'll render
          // synchronously to block concurrent data mutations, and we'll includes
          // all pending updates are included. If it still fails after the second
          // attempt, we'll give up and commit the resulting tree.
          lanes = getLanesToRetrySynchronouslyOnError(root);
          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root, lanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw fatalError;
        }
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        finishConcurrentRender(root, exitStatus, lanes);
      }
      ensureRootIsScheduled(root, now());
      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
      return null;
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
      switch (exitStatus) {
        case RootIncomplete:
        case RootFatalErrored:
          {
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }
          }
        case RootErrored:
          {
            // We should have already attempted to retry this tree. If we reached
            // this point, it errored again. Commit it.
            commitRoot(root);
            break;
          }
        case RootSuspended:
          {
            markRootSuspended$1(root, lanes);
            // We have an acceptable loading state. We need to figure out if we
            // should immediately commit it or wait a bit.
            if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              // This render only included retries, no updates. Throttle committing
              // retries so that we don't show too many loading states too quickly.
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              // Don't bother with a very short suspense time.
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root, NoLanes);
                if (nextLanes !== NoLanes) {
                  // There's additional work on this root.
                  break;
                }
                var suspendedLanes = root.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  // We should prefer to render the fallback of at the last
                  // suspended level. Ping the last suspended level to try
                  // rendering it again.
                  // FIXME: What if the suspended lanes are Idle? Should not restart.
                  var eventTime = requestEventTime();
                  markRootPinged(root, suspendedLanes);
                  break;
                }
                // The render is suspended, it hasn't timed out, and there's no
                // lower priority work to do. Instead of committing the fallback
                // immediately, wait for more data to arrive.
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                break;
              }
            }
            // The work expired. Commit immediately.
            commitRoot(root);
            break;
          }
        case RootSuspendedWithDelay:
          {
            markRootSuspended$1(root, lanes);
            if (includesOnlyTransitions(lanes)) {
              // This is a transition, so we should exit without committing a
              // placeholder and without scheduling a timeout. Delay indefinitely
              // until we receive more data.
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              // This is not a transition, but we did trigger an avoided state.
              // Schedule a placeholder to display after a short delay, using the Just
              // Noticeable Difference.
              // TODO: Is the JND optimization worth the added complexity? If this is
              // the only reason we track the event time, then probably not.
              // Consider removing.
              var mostRecentEventTime = getMostRecentEventTime(root, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              // Don't bother with a very short suspense time.
              if (_msUntilTimeout > 10) {
                // Instead of committing the fallback immediately, wait for more data
                // to arrive.
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                break;
              }
            }
            // Commit the placeholder.
            commitRoot(root);
            break;
          }
        case RootCompleted:
          {
            // The work completed. Ready to commit.
            commitRoot(root);
            break;
          }
        default:
          {
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
          }
      }
    }
    function markRootSuspended$1(root, suspendedLanes) {
      // When suspending, we should always exclude lanes that were pinged or (more
      // rarely, since we try to avoid it) updated during the render phase.
      // TODO: Lol maybe there's a better way to factor this besides this
      // obnoxiously named function :)
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
      markRootSuspended(root, suspendedLanes);
    }
    // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      flushPassiveEffects();
      var lanes;
      var exitStatus;
      if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
        // There's a partial tree, and at least one of its lanes has expired. Finish
        // rendering it before rendering the rest of the expired work.
        lanes = workInProgressRootRenderLanes;
        exitStatus = renderRootSync(root, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
          // The render included lanes that were updated during the render phase.
          // For example, when unhiding a hidden tree, we include all the lanes
          // that were previously skipped when the tree was hidden. That set of
          // lanes is a superset of the lanes we started rendering with.
          // 
          // Note that this only happens when part of the tree is rendered
          // concurrently. If the whole tree is rendered synchronously, then there
          // are no interleaved events.
          lanes = getNextLanes(root, lanes);
          exitStatus = renderRootSync(root, lanes);
        }
      } else {
        lanes = getNextLanes(root, NoLanes);
        exitStatus = renderRootSync(root, lanes);
      }
      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
        executionContext |= RetryAfterError;
        // If an error occurred during hydration,
        // discard server response and fall back to client side render.
        if (root.hydrate) {
          root.hydrate = false;
          clearContainer(root.containerInfo);
        }
        // If something threw an error, try rendering one more time. We'll render
        // synchronously to block concurrent data mutations, and we'll includes
        // all pending updates are included. If it still fails after the second
        // attempt, we'll give up and commit the resulting tree.
        lanes = getLanesToRetrySynchronouslyOnError(root);
        if (lanes !== NoLanes) {
          exitStatus = renderRootSync(root, lanes);
        }
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root, NoLanes);
        markRootSuspended$1(root, lanes);
        ensureRootIsScheduled(root, now());
        throw fatalError;
      }
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      var finishedWork = root.current.alternate;
      root.finishedWork = finishedWork;
      root.finishedLanes = lanes;
      commitRoot(root);
      // Before exiting, make sure there's a callback scheduled for the next
      // pending level.
      ensureRootIsScheduled(root, now());
      return null;
    }
    function flushDiscreteUpdates() {
      // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
      // However, `act` uses `batchedUpdates`, so there's no way to distinguish
      // those two cases. Need to fix this before exposing flushDiscreteUpdates
      // as a public API.
      if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
          }
                  // We're already rendering, so we can't synchronously flush pending work.
          // This is probably a nested event dispatch triggered by a lifecycle/effect,
          // like `el.focus()`. Exit.
}
        // We're already rendering, so we can't synchronously flush pending work.
        // This is probably a nested event dispatch triggered by a lifecycle/effect,
        // like `el.focus()`. Exit.
        return;
      }
      flushPendingDiscreteUpdates();
      // If the discrete updates scheduled passive effects, flush them now so that
      // they fire before the next serial event.
      flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
      if (rootsWithPendingDiscreteUpdates !== null) {
        // For each root with pending discrete updates, schedule a callback to
        // immediately flush them.
        var roots = rootsWithPendingDiscreteUpdates;
        rootsWithPendingDiscreteUpdates = null;
        roots.forEach(function (root) {
          markDiscreteUpdatesExpired(root);
          ensureRootIsScheduled(root, now());
        });
      }
      // Now flush the immediate queue.
      flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
    function batchedEventUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= EventContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
      var prevExecutionContext = executionContext;
      executionContext |= DiscreteEventContext;
      {
        try {
          return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            // Flush the immediate callbacks that were scheduled during this batch
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
    }
    function unbatchedUpdates(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext &= ~BatchedContext;
      executionContext |= LegacyUnbatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
    function flushSync(fn, a) {
      var prevExecutionContext = executionContext;
      if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
        {
          error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
        }
        return fn(a);
      }
      executionContext |= BatchedContext;
      {
        try {
          if (fn) {
            return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
          } else {
            return undefined;
          }
        } finally {
          executionContext = prevExecutionContext;
          // Flush the immediate callbacks that were scheduled during this batch.
          // Note that this will happen even if batchedUpdates is higher up
          // the stack.
          flushSyncCallbackQueue();
        }
      }
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
      workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
      root.finishedWork = null;
      root.finishedLanes = NoLanes;
      var timeoutHandle = root.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        // The root previous suspended and scheduled a timeout to commit a fallback
        // state. Now that we have additional work, cancel the timeout.
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(timeoutHandle);
      }
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root;
      workInProgress = createWorkInProgress(root.current, null);
      workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
      workInProgressRootExitStatus = RootIncomplete;
      workInProgressRootFatalError = null;
      workInProgressRootSkippedLanes = NoLanes;
      workInProgressRootUpdatedLanes = NoLanes;
      workInProgressRootPingedLanes = NoLanes;
      {
        spawnedWorkDuringRender = null;
      }
      {
        ReactStrictModeWarnings.discardPendingWarnings();
      }
    }
    function handleError(root, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          // Reset module-level state that was set during the render phase.
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          // TODO: I found and added this missing line while investigating a
          // separate issue. Write a regression test using string refs.
          ReactCurrentOwner$2.current = null;
          if (erroredWork === null || erroredWork.return === null) {
            // Expected to be working on a non-root fiber. This is a fatal error
            // because there's no ancestor that can handle it; the root is
            // supposed to capture all errors that weren't caught by an error
            // boundary.
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            // Set `workInProgress` to null. This represents advancing to the next
            // sibling, or the parent if there are no siblings. But since the root
            // has no siblings nor a parent, we set it to null. Usually this is
            // handled by `completeUnitOfWork` or `unwindWork`, but since we're
            // intentionally not calling those, we need set it here.
            // TODO: Consider calling `unwindWork` to pop the contexts.
            workInProgress = null;
            return;
          }
          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
            // Record the time spent rendering before an error was thrown. This
            // avoids inaccurate Profiler durations in the case of a
            // suspended render.
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          // Something in the return path also threw.
          thrownValue = yetAnotherThrownValue;
          if (workInProgress === erroredWork && erroredWork !== null) {
            // If this boundary has already errored, then we had trouble processing
            // the error. Bubble it to the next boundary.
            erroredWork = erroredWork.return;
            workInProgress = erroredWork;
          } else {
            erroredWork = workInProgress;
          }
          continue;
        }
        // Return to the normal work loop.
        return;
      } while (true);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      if (prevDispatcher === null) {
        // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
      } else {
        return prevDispatcher;
      }
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root) {
      {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
        return prevInteractions;
      }
    }
    function popInteractions(prevInteractions) {
      {
        tracing.__interactionsRef.current = prevInteractions;
      }
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootIncomplete) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      // Check if there are updates that we skipped tree that might have unblocked
      // this render.
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
        // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
    }
    function renderDidError() {
      if (workInProgressRootExitStatus !== RootCompleted) {
        workInProgressRootExitStatus = RootErrored;
      }
    }
    // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
      // If something errored or completed, we can't really be sure,
      // so those are false.
      return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      // If the root or lanes have changed, throw out the existing stack
      // and prepare a fresh one. Otherwise we'll continue where we left off.
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
        prepareFreshStack(root, lanes);
        startWorkOnPendingInteractions(root, lanes);
      }
      var prevInteractions = pushInteractions(root);
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      {
        popInteractions(prevInteractions);
      }
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      if (workInProgress !== null) {
        // This is a sync render, so we should have finished the whole tree.
        {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes;
      return workInProgressRootExitStatus;
    }
    // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline*/
    function workLoopSync() {
      // Already timed out, so perform work without checking if we need to yield.
      while (workInProgress !== null) {
        performUnitOfWork(workInProgress);
      }
    }
    function renderRootConcurrent(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      // If the root or lanes have changed, throw out the existing stack
      // and prepare a fresh one. Otherwise we'll continue where we left off.
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
        resetRenderTimer();
        prepareFreshStack(root, lanes);
        startWorkOnPendingInteractions(root, lanes);
      }
      var prevInteractions = pushInteractions(root);
      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      {
        popInteractions(prevInteractions);
      }
      popDispatcher(prevDispatcher);
      executionContext = prevExecutionContext;
      if (workInProgress !== null) {
        return RootIncomplete;
      } else {
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        // Return the final exit status.
        return workInProgressRootExitStatus;
      }
    }
    /** @noinline*/
    function workLoopConcurrent() {
      // Perform work until Scheduler asks us to yield
      while (workInProgress !== null && !shouldYield()) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      // The current, flushed, state of this fiber is the alternate. Ideally
      // nothing should rely on this, but relying on it here means that we don't
      // need an additional field on the work in progress.
      var current = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next;
      if ((unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
      }
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
      } else {
        workInProgress = next;
      }
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      // Attempt to complete the current unit of work, then move to the next
      // sibling. If there are no more siblings, return to the parent fiber.
      var completedWork = unitOfWork;
      do {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = completedWork.alternate;
        var returnFiber = completedWork.return;
        // Check if the work completed or if something threw.
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next = completeWork(current, completedWork, subtreeRenderLanes);
          } else {
            startProfilerTimer(completedWork);
            next = completeWork(current, completedWork, subtreeRenderLanes);
            // Update render duration assuming we didn't error.
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next !== null) {
            // Completing this fiber spawned new work. Work on that next.
            workInProgress = next;
            return;
          }
          resetChildLanes(completedWork);
          if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
          (returnFiber.flags & Incomplete) === NoFlags) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = completedWork.firstEffect;
            }
            if (completedWork.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
              }
              returnFiber.lastEffect = completedWork.lastEffect;
            }
            // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if needed,
            // by doing multiple passes over the effect list. We don't want to
            // schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.
            var flags = completedWork.flags;
            // Skip both NoWork and PerformedWork tags when creating the effect
            // list. PerformedWork effect is read by React DevTools but shouldn't be
            // committed.
            if (flags > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = completedWork;
              } else {
                returnFiber.firstEffect = completedWork;
              }
              returnFiber.lastEffect = completedWork;
            }
          }
        } else {
          // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.
          var _next = unwindWork(completedWork);
          // Because this fiber did not complete, don't reset its expiration time.
          if (_next !== null) {
            // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.
            _next.flags &= HostEffectMask;
            workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            // Include the time spent working on failed children before continuing.
            var actualDuration = completedWork.actualDuration;
            var child = completedWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.flags |= Incomplete;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          // If there is more work to do in this returnFiber, do that next.
          workInProgress = siblingFiber;
          return;
        }
        // Otherwise, return to the parent
        completedWork = returnFiber;
        // Update the next thing we're working on in case something throws.
        workInProgress = completedWork;
      } while (completedWork !== null);
      // We've reached the root.
      if (workInProgressRootExitStatus === RootIncomplete) {
        workInProgressRootExitStatus = RootCompleted;
      }
    }
    function resetChildLanes(completedWork) {
      if (// TODO: Move this check out of the hot path by moving `resetChildLanes`
      // to switch statement in `completeWork`.
      (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }
      var newChildLanes = NoLanes;
      // Bubble up the earliest expiration time.
      if ((completedWork.mode & ProfileMode) !== NoMode) {
        // In profiling mode, resetChildExpirationTime is also used to reset
        // profiler durations.
        var actualDuration = completedWork.actualDuration;
        var treeBaseDuration = completedWork.selfBaseDuration;
        // When a fiber is cloned, its actualDuration is reset to 0. This value will
        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration. If
        // the fiber has not been cloned though, (meaning no work was done), then
        // this value will reflect the amount of time spent working on a previous
        // render. In that case it should not bubble. We determine whether it was
        // cloned by comparing the child pointer.
        var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
        var child = completedWork.child;
        while (child !== null) {
          newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }
          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }
        var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
        if (isTimedOutSuspense) {
          // Don't count time spent in a timed out Suspense subtree as part of the base duration.
          var primaryChildFragment = completedWork.child;
          if (primaryChildFragment !== null) {
            treeBaseDuration -= primaryChildFragment.treeBaseDuration;
          }
        }
        completedWork.actualDuration = actualDuration;
        completedWork.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = completedWork.child;
        while (_child !== null) {
          newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
          _child = _child.sibling;
        }
      }
      completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root) {
      var renderPriorityLevel = getCurrentPriorityLevel();
      runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
      return null;
    }
    function commitRootImpl(root, renderPriorityLevel) {
      do {
        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
      } while (rootWithPendingPassiveEffects !== null);
      flushRenderPhaseStrictModeWarningsInDEV();
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      var finishedWork = root.finishedWork;
      var lanes = root.finishedLanes;
      if (finishedWork === null) {
        return null;
      }
      root.finishedWork = null;
      root.finishedLanes = NoLanes;
      if (!(finishedWork !== root.current)) {
        {
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      // commitRoot never returns a continuation; it always finishes synchronously.
      // So we can clear these now to allow a new callback to be scheduled.
      root.callbackNode = null;
      // Update the first and last pending times on this root. The new first
      // pending time is whatever is left on the root fiber.
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      markRootFinished(root, remainingLanes);
      // Clear already finished discrete updates in case that a later call of
      // `flushDiscreteUpdates` starts a useless render pass which may cancels
      // a scheduled timeout.
      if (rootsWithPendingDiscreteUpdates !== null) {
        if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
          rootsWithPendingDiscreteUpdates.delete(root);
        }
      }
      if (root === workInProgressRoot) {
        // We can reset these now that they are finished.
        workInProgressRoot = null;
        workInProgress = null;
        workInProgressRootRenderLanes = NoLanes;
      }
      // Get the list of effects.
      var firstEffect;
      if (finishedWork.flags > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if it
        // had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }
      if (firstEffect !== null) {
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        // Reset this to null before calling lifecycles
        ReactCurrentOwner$2.current = null;
        // The commit phase is broken into several sub-phases. We do a separate pass
        // of the effect list for each phase: all mutation effects come before all
        // layout effects, and so on.
        // The first phase a "before mutation" phase. We use this phase to read the
        // state of the host tree right before we mutate it. This is where
        // getSnapshotBeforeUpdate is called.
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        shouldFireAfterActiveInstanceBlur = false;
        nextEffect = firstEffect;
        do {
          {
            invokeGuardedCallback(null, commitBeforeMutationEffects, null);
            if (hasCaughtError()) {
              if (!(nextEffect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var error = clearCaughtError();
              captureCommitPhaseError(nextEffect, error);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);
        // We no longer need to track the active instance fiber
        focusedInstanceHandle = null;
        {
          // Mark the current commit time to be shared by all Profilers in this
          // batch. This enables them to be grouped later.
          recordCommitTime();
                  // The next phase is the mutation phase, where we mutate the host tree.
}
        // The next phase is the mutation phase, where we mutate the host tree.
        nextEffect = firstEffect;
        do {
          {
            invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
            if (hasCaughtError()) {
              if (!(nextEffect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var _error = clearCaughtError();
              captureCommitPhaseError(nextEffect, _error);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);
        resetAfterCommit(root.containerInfo);
        // The work-in-progress tree is now the current tree. This must come after
        // the mutation phase, so that the previous tree is still current during
        // componentWillUnmount, but before the layout phase, so that the finished
        // work is current during componentDidMount/Update.
        root.current = finishedWork;
        // The next phase is the layout phase, where we call effects that read
        // the host tree after it's been mutated. The idiomatic use case for this is
        // layout, but class component lifecycles also fire here for legacy reasons.
        nextEffect = firstEffect;
        do {
          {
            invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);
            if (hasCaughtError()) {
              if (!(nextEffect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var _error2 = clearCaughtError();
              captureCommitPhaseError(nextEffect, _error2);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);
        nextEffect = null;
        // Tell Scheduler to yield at the end of the frame, so the browser has an
        // opportunity to paint.
        requestPaint();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
      } else {
        // No effects.
        root.current = finishedWork;
        // Measure these anyway so the flamegraph explicitly shows that there were
        // no effects.
        // TODO: Maybe there's a better way to report this.
        {
          recordCommitTime();
        }
      }
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects) {
        // This commit has passive effects. Stash a reference to them. But don't
        // schedule a callback until after flushing layout work.
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root;
        pendingPassiveEffectsLanes = lanes;
        pendingPassiveEffectsRenderPriority = renderPriorityLevel;
      } else {
        // We are done with the effect chain at this point so let's clear the
        // nextEffect pointers to assist with GC. If we have passive effects, we'll
        // clear this in flushPassiveEffects.
        nextEffect = firstEffect;
        while (nextEffect !== null) {
          var nextNextEffect = nextEffect.nextEffect;
          nextEffect.nextEffect = null;
          if (nextEffect.flags & Deletion) {
            detachFiberAfterEffects(nextEffect);
          }
          nextEffect = nextNextEffect;
        }
      }
      // Read this again, since an effect might have updated it
      remainingLanes = root.pendingLanes;
      // Check if there's remaining work on this root
      if (remainingLanes !== NoLanes) {
        {
          if (spawnedWorkDuringRender !== null) {
            var expirationTimes = spawnedWorkDuringRender;
            spawnedWorkDuringRender = null;
            for (var i = 0; i < expirationTimes.length; i++) {
              scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
            }
          }
          schedulePendingInteractions(root, remainingLanes);
        }
      } else {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      {
        if (!rootDidHavePassiveEffects) {
          // If there are no passive effects, then we can complete the pending interactions.
          // Otherwise, we'll wait until after the passive effects are flushed.
          // Wait to do this until after remaining work has been scheduled,
          // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
          finishPendingInteractions(root, lanes);
        }
      }
      if (remainingLanes === SyncLane) {
        // Count the number of times the root synchronously re-renders without
        // finishing. If there are too many, it indicates an infinite update loop.
        if (root === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root;
        }
      } else {
        nestedUpdateCount = 0;
      }
      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
      {
        onCommitRoot$1();
              // Always call this before exiting `commitRoot`, to ensure that any
        // additional work on this root is scheduled.
}
      // Always call this before exiting `commitRoot`, to ensure that any
      // additional work on this root is scheduled.
      ensureRootIsScheduled(root, now());
      if (hasUncaughtError) {
        hasUncaughtError = false;
        var _error3 = firstUncaughtError;
        firstUncaughtError = null;
        throw _error3;
      }
      if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
        // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
      }
      // If layout work was scheduled, flush it now.
      flushSyncCallbackQueue();
      return null;
    }
    function commitBeforeMutationEffects() {
      while (nextEffect !== null) {
        var current = nextEffect.alternate;
        if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
          if ((nextEffect.flags & Deletion) !== NoFlags) {
            if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
              shouldFireAfterActiveInstanceBlur = true;
            }
          } else {
            // TODO: Move this out of the hot path using a dedicated effect tag.
            if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
              shouldFireAfterActiveInstanceBlur = true;
            }
          }
        }
        var flags = nextEffect.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(nextEffect);
          commitBeforeMutationLifeCycles(current, nextEffect);
          resetCurrentFiber();
        }
        if ((flags & Passive) !== NoFlags) {
          // If there are passive effects, schedule a callback to flush at
          // the earliest opportunity.
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function () {
              flushPassiveEffects();
              return null;
            });
          }
        }
        nextEffect = nextEffect.nextEffect;
      }
    }
    function commitMutationEffects(root, renderPriorityLevel) {
      // TODO: Should probably move the bulk of this function to commitWork.
      while (nextEffect !== null) {
        setCurrentFiber(nextEffect);
        var flags = nextEffect.flags;
        if (flags & ContentReset) {
          commitResetTextContent(nextEffect);
        }
        if (flags & Ref) {
          var current = nextEffect.alternate;
          if (current !== null) {
            commitDetachRef(current);
          }
        }
        // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every possible
        // bitmap value, we remove the secondary effects from the effect tag and
        // switch on that value.
        var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
        switch (primaryFlags) {
          case Placement:
            {
              commitPlacement(nextEffect);
              // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted does
              // and isMounted is deprecated anyway so we should be able to kill this.
              nextEffect.flags &= ~Placement;
              break;
            }
          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect);
              // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.
              nextEffect.flags &= ~Placement;
              // Update
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
          case Hydrating:
            {
              nextEffect.flags &= ~Hydrating;
              break;
            }
          case HydratingAndUpdate:
            {
              nextEffect.flags &= ~Hydrating;
              // Update
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
          case Update:
            {
              var _current3 = nextEffect.alternate;
              commitWork(_current3, nextEffect);
              break;
            }
          case Deletion:
            {
              commitDeletion(root, nextEffect);
              break;
            }
        }
        resetCurrentFiber();
        nextEffect = nextEffect.nextEffect;
      }
    }
    function commitLayoutEffects(root, committedLanes) {
      while (nextEffect !== null) {
        setCurrentFiber(nextEffect);
        var flags = nextEffect.flags;
        if (flags & (Update | Callback)) {
          var current = nextEffect.alternate;
          commitLifeCycles(root, current, nextEffect);
        }
        {
          if (flags & Ref) {
            commitAttachRef(nextEffect);
          }
        }
        resetCurrentFiber();
        nextEffect = nextEffect.nextEffect;
      }
    }
    function flushPassiveEffects() {
      // Returns whether passive effects were flushed.
      if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
        var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
        pendingPassiveEffectsRenderPriority = NoPriority$1;
        {
          return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
      }
      return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
      pendingPassiveHookEffectsMount.push(effect, fiber);
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority$1, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
      pendingPassiveHookEffectsUnmount.push(effect, fiber);
      {
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.flags |= PassiveUnmountPendingDev;
        }
      }
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority$1, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }
    function invokePassiveEffectCreate(effect) {
      var create = effect.create;
      effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }
      var root = rootWithPendingPassiveEffects;
      var lanes = pendingPassiveEffectsLanes;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsLanes = NoLanes;
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Cannot flush passive effects while already rendering.");
        }
      }
      {
        isFlushingPassiveEffects = true;
      }
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      var prevInteractions = pushInteractions(root);
      // It's important that ALL pending passive effect destroy functions are called
      // before ANY passive effect create functions are called.
      // Otherwise effects in sibling components might interfere with each other.
      // e.g. a destroy function in one component may unintentionally override a ref
      // value set by a create function in another component.
      // Layout effects have the same constraint.
      // First pass: Destroy stale passive effects.
      var unmountEffects = pendingPassiveHookEffectsUnmount;
      pendingPassiveHookEffectsUnmount = [];
      for (var i = 0; i < unmountEffects.length; i += 2) {
        var _effect = unmountEffects[i];
        var fiber = unmountEffects[i + 1];
        var destroy = _effect.destroy;
        _effect.destroy = undefined;
        {
          fiber.flags &= ~PassiveUnmountPendingDev;
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.flags &= ~PassiveUnmountPendingDev;
          }
        }
        if (typeof destroy === 'function') {
          {
            setCurrentFiber(fiber);
            {
              invokeGuardedCallback(null, destroy, null);
            }
            if (hasCaughtError()) {
              if (!(fiber !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var error = clearCaughtError();
              captureCommitPhaseError(fiber, error);
            }
            resetCurrentFiber();
          }
        }
      }
      // Second pass: Create new passive effects.
      var mountEffects = pendingPassiveHookEffectsMount;
      pendingPassiveHookEffectsMount = [];
      for (var _i = 0; _i < mountEffects.length; _i += 2) {
        var _effect2 = mountEffects[_i];
        var _fiber = mountEffects[_i + 1];
        {
          setCurrentFiber(_fiber);
          {
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
          }
          if (hasCaughtError()) {
            if (!(_fiber !== null)) {
              {
                throw Error("Should be working on an effect.");
              }
            }
            var _error4 = clearCaughtError();
            captureCommitPhaseError(_fiber, _error4);
          }
          resetCurrentFiber();
        }
      }
      // Note: This currently assumes there are no passive effects on the root fiber
      // because the root is not part of its own effect list.
      // This could change in the future.
      var effect = root.current.firstEffect;
      while (effect !== null) {
        var nextNextEffect = effect.nextEffect;
        // Remove nextEffect pointer to assist GC
        effect.nextEffect = null;
        if (effect.flags & Deletion) {
          detachFiberAfterEffects(effect);
        }
        effect = nextNextEffect;
      }
      {
        popInteractions(prevInteractions);
        finishPendingInteractions(root, lanes);
      }
      {
        isFlushingPassiveEffects = false;
      }
      executionContext = prevExecutionContext;
      flushSyncCallbackQueue();
      // If additional passive effects were scheduled, increment a counter. If this
      // exceeds the limit, we'll fire a warning.
      nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
      return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }
    function prepareToThrowUncaughtError(error) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error;
      }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      var errorInfo = createCapturedValue(error, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
      enqueueUpdate(rootFiber, update);
      var eventTime = requestEventTime();
      var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
      if (root !== null) {
        markRootUpdated(root, SyncLane, eventTime);
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, SyncLane);
      }
    }
    function captureCommitPhaseError(sourceFiber, error) {
      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        return;
      }
      var fiber = sourceFiber.return;
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValue(error, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
            enqueueUpdate(fiber, update);
            var eventTime = requestEventTime();
            var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
            if (root !== null) {
              markRootUpdated(root, SyncLane, eventTime);
              ensureRootIsScheduled(root, eventTime);
              schedulePendingInteractions(root, SyncLane);
            } else {
              // This component has already been unmounted.
              // We can't schedule any follow up work for the root because the fiber is already unmounted,
              // but we can still call the log-only boundary so the error isn't swallowed.
              // 
              // TODO This is only a temporary bandaid for the old reconciler fork.
              // We can delete this special case once the new fork is merged.
              if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                try {
                  instance.componentDidCatch(error, errorInfo);
                } catch (errorToIgnore) {}
              }
            }
            return;
          }
        }
        fiber = fiber.return;
      }
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
      var pingCache = root.pingCache;
      if (pingCache !== null) {
        // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
      }
      var eventTime = requestEventTime();
      markRootPinged(root, pingedLanes);
      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
        // Received a ping at the same priority level at which we're currently
        // rendering. We might want to restart this render. This should mirror
        // the logic of whether or not a root suspends once it completes.
        // TODO: If we're rendering sync either due to Sync, Batched or expired,
        // we should probably never restart.
        // If we're suspended with delay, or if it's a retry, we'll always suspend
        // so we can always restart.
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          // Restart from the root.
          prepareFreshStack(root, NoLanes);
        } else {
          // Even though we can't restart right now, we might get an
          // opportunity later. So we mark this render as having a ping.
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
      }
      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      // The boundary fiber (a Suspense component or SuspenseList component)
      // previously was rendered in its fallback state. One of the promises that
      // suspended it has resolved, which means at least part of the tree was
      // likely unblocked. Try rendering again, at a new expiration time.
      if (retryLane === NoLane) {
        retryLane = requestRetryLane(boundaryFiber);
      }
      // TODO: Special case idle priority?
      var eventTime = requestEventTime();
      var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
      if (root !== null) {
        markRootUpdated(root, retryLane, eventTime);
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, retryLane);
      }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane;
      // Default
      var retryCache;
      {
        retryCache = boundaryFiber.stateNode;
      }
      if (retryCache !== null) {
        // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;
        {
          {
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
        }
      }
      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
        }
      }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          // We let the other warning about render phase updates deal with this one.
          return;
        }
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
          return;
        }
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
          // Only warn for user-defined components, not internal ones like Suspense.
          return;
        }
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
        }
        var previousFiber = current;
        try {
          setCurrentFiber(fiber);
          error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
      {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
          // Only warn for user-defined components, not internal ones like Suspense.
          return;
        }
        // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
          return;
        }
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
          if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
        }
        if (isFlushingPassiveEffects) ; else {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function (current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
          if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
            // Don't replay promises. Treat everything else like an error.
            throw originalError;
          }
          // Keep this code in sync with handleError; any changes here must have
          // corresponding changes there.
          resetContextDependencies();
          resetHooksAfterThrow();
          // Don't reset current debug fiber, since we're about to work on the
          // same fiber again.
          // Unwind the failed stack frame
          unwindInterruptedWork(unitOfWork);
          // Restore the original properties of the fiber.
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
          if (unitOfWork.mode & ProfileMode) {
            // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
          }
          // Run beginWork again.
          invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
            // Rethrow this error instead of the original one.
            throw replayError;
          } else {
            // This branch is reachable if the render phase is impure.
            throw originalError;
          }
        }
      };
    }
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    {
      didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    }
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              {
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown';
                // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                  error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
            case ClassComponent:
              {
                if (!didWarnAboutUpdateInRender) {
                  error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
          }
        }
      }
    }
    // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
      current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
      {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
            'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
            'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
      {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
          error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
        }
      }
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
      {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
    // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false;
    // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
      {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
          if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
            didWarnAboutUnmockedScheduler = true;
            error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
            "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
          }
        }
      }
    }
    function computeThreadID(root, lane) {
      // Interaction threads are unique per root and expiration time.
      // NOTE: Intentionally unsound cast. All that matters is that it's a number
      // and it represents a batch of work. Could make a helper function instead,
      // but meh this is fine for now.
      return lane * 1000 + root.interactionThreadID;
    }
    function markSpawnedWork(lane) {
      if (spawnedWorkDuringRender === null) {
        spawnedWorkDuringRender = [lane];
      } else {
        spawnedWorkDuringRender.push(lane);
      }
    }
    function scheduleInteractions(root, lane, interactions) {
      if (interactions.size > 0) {
        var pendingInteractionMap = root.pendingInteractionMap;
        var pendingInteractions = pendingInteractionMap.get(lane);
        if (pendingInteractions != null) {
          interactions.forEach(function (interaction) {
            if (!pendingInteractions.has(interaction)) {
              // Update the pending async work count for previously unscheduled interaction.
              interaction.__count++;
            }
            pendingInteractions.add(interaction);
          });
        } else {
          pendingInteractionMap.set(lane, new Set(interactions));
          // Update the pending async work count for the current interactions.
          interactions.forEach(function (interaction) {
            interaction.__count++;
          });
        }
        var subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(root, lane);
          subscriber.onWorkScheduled(interactions, threadID);
        }
      }
    }
    function schedulePendingInteractions(root, lane) {
      scheduleInteractions(root, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root, lanes) {
      // we can accurately attribute time spent working on it, And so that cascading
      // work triggered during the render phase will be associated with it.
      var interactions = new Set();
      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
        if (includesSomeLane(lanes, scheduledLane)) {
          scheduledInteractions.forEach(function (interaction) {
            return interactions.add(interaction);
          });
        }
      });
      // Store the current set of interactions on the FiberRoot for a few reasons:
      // We can re-use it in hot functions like performConcurrentWorkOnRoot()
      // without having to recalculate it. We will also use it in commitWork() to
      // pass to any Profiler onRender() hooks. This also provides DevTools with a
      // way to access it when the onCommitRoot() hook is called.
      root.memoizedInteractions = interactions;
      if (interactions.size > 0) {
        var subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(root, lanes);
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function () {
              throw error;
            });
          }
        }
      }
    }
    function finishPendingInteractions(root, committedLanes) {
      var remainingLanesAfterCommit = root.pendingLanes;
      var subscriber;
      try {
        subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null && root.memoizedInteractions.size > 0) {
          // FIXME: More than one lane can finish in a single commit.
          var threadID = computeThreadID(root, committedLanes);
          subscriber.onWorkStopped(root.memoizedInteractions, threadID);
        }
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority$1, function () {
          throw error;
        });
      } finally {
        // Clear completed interactions from the pending Map.
        // Unless the render was suspended or cascading work was scheduled,
        // In which case– leave pending interactions until the subsequent render.
        var pendingInteractionMap = root.pendingInteractionMap;
        pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
          // Only decrement the pending interaction count if we're done.
          // If there's still work at the current priority,
          // That indicates that we are waiting for suspense data.
          if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
            pendingInteractionMap.delete(lane);
            scheduledInteractions.forEach(function (interaction) {
              interaction.__count--;
              if (subscriber !== null && interaction.__count === 0) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  // If the subscriber throws, rethrow it in a separate task
                  scheduleCallback(ImmediatePriority$1, function () {
                    throw error;
                  });
                }
              }
            });
          }
        });
      }
    }
    // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
      // Never force flush in production. This function should get stripped out.
      return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
      fiber.sibling = null;
      fiber.stateNode = null;
    }
    var resolveFamily = null;
    // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function (handler) {
      {
        resolveFamily = handler;
      }
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return type;
        }
        var family = resolveFamily(type);
        if (family === undefined) {
          return type;
        }
        // Use the latest known implementation.
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      // No implementation differences.
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return type;
        }
        var family = resolveFamily(type);
        if (family === undefined) {
          // Check if we're dealing with a real forwardRef. Don't want to crash early.
          if (type !== null && type !== undefined && typeof type.render === 'function') {
            // ForwardRef is special because its resolved .type is an object,
            // but it's possible that we only have its inner render function in the map.
            // If that inner render function is different, we'll build a new forwardRef type.
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== undefined) {
                syntheticType.displayName = type.displayName;
              }
              return syntheticType;
            }
          }
          return type;
        }
        // Use the latest known implementation.
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return false;
        }
        var prevType = fiber.elementType;
        var nextType = element.type;
        // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent:
            {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true;
              }
              break;
            }
          case FunctionComponent:
            {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
              }
              break;
            }
          case ForwardRef:
            {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
          case MemoComponent:
          case SimpleMemoComponent:
            {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
          default:
            return false;
        }
        // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
          // Note: memo() and forwardRef() we'll compare outer rather than inner type.
          // This means both of them need to be registered to preserve state.
          // If we unwrapped and compared the inner types for wrappers instead,
          // then we would risk falsely saying two separate memo(Foo)
          // calls are equivalent because they wrap the same Foo function.
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }
        return false;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return;
        }
        if (typeof WeakSet !== 'function') {
          return;
        }
        if (failedBoundaries === null) {
          failedBoundaries = new WeakSet();
        }
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function (root, update) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return;
        }
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function () {
          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
      }
    };
    var scheduleRoot = function (root, element) {
      {
        if (root.context !== emptyContextObject) {
          // Super edge case: root has a legacy _renderSubtree context
          // but we don't know the parentComponent so we can't pass it.
          // Just ignore. We'll delete this with _renderSubtree code path later.
          return;
        }
        flushPassiveEffects();
        flushSync(function () {
          updateContainer(element, root, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null) {
          throw new Error('Expected resolveFamily to be set during hot reload.');
        }
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== undefined) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }
        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }
        if (needsRemount || needsRender) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }
        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }
    var findHostInstancesForRefresh = function (root, families) {
      {
        var hostInstances = new Set();
        var types = new Set(families.map(function (family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = false;
        if (candidateType !== null) {
          if (types.has(candidateType)) {
            didMatch = true;
          }
        }
        if (didMatch) {
          // We have a match. This only drills down to the closest host components.
          // There's no need to search deeper because for the purpose of giving
          // visual feedback, "flashing" outermost parent rectangles is sufficient.
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          // If there's no match, maybe there will be one further down in the child tree.
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
          }
        }
        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) {
          return;
        }
        // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while (true) {
          switch (node.tag) {
            case HostComponent:
              hostInstances.add(node.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node.stateNode.containerInfo);
              return;
          }
          if (node.return === null) {
            throw new Error('Expected to reach root first.');
          }
          node = node.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node = fiber;
        var foundHostInstances = false;
        while (true) {
          if (node.tag === HostComponent) {
            // We got a match.
            foundHostInstances = true;
            hostInstances.add(node.stateNode);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === fiber) {
            return foundHostInstances;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === fiber) {
              return foundHostInstances;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return false;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /*eslint-disable no-new*/
        new Map([[nonExtensibleObject, null]]);
        new Set([nonExtensibleObject]);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      // Fiber
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      // Effects
      this.flags = NoFlags;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.lanes = NoLanes;
      this.childLanes = NoLanes;
      this.alternate = null;
      {
        // Note: The following is done to avoid a v8 performance cliff.
        // 
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        // 
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }
      {
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    }
    // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    // more difficult to predict when they get optimized and they are almost
    // never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    // always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    // to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    // is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    // compatible.
    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === 'function') {
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }
    // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
      var workInProgress = current.alternate;
      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
          workInProgress._debugHookTypes = current._debugHookTypes;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps;
        // Needed because Blocks store data on type.
        workInProgress.type = current.type;
        // We already have an alternate.
        // Reset the effect tag.
        workInProgress.flags = NoFlags;
        // The effect list is no longer valid.
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      // Clone the dependencies object. This is mutated during the render phase, so
      // it cannot be shared with the current fiber.
      var currentDependencies = current.dependencies;
      workInProgress.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };
      // These will be overridden during the parent's reconciliation
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }
      {
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress.type = resolveFunctionForHotReloading(current.type);
            break;
          case ClassComponent:
            workInProgress.type = resolveClassForHotReloading(current.type);
            break;
          case ForwardRef:
            workInProgress.type = resolveForwardRefForHotReloading(current.type);
            break;
        }
      }
      return workInProgress;
    }
    // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
      // This resets the Fiber to what createFiber or createWorkInProgress would
      // have set the values to before during the first pass. Ideally this wouldn't
      // be necessary but unfortunately many code paths reads from the workInProgress
      // when they should be reading from current and writing to workInProgress.
      // We assume pendingProps, index, key, ref, return are still untouched to
      // avoid doing another reconciliation.
      // Reset the effect tag but keep any Placement tags, since that's something
      // that child fiber is setting, not the reconciliation.
      workInProgress.flags &= Placement;
      // The effect list is no longer valid.
      workInProgress.nextEffect = null;
      workInProgress.firstEffect = null;
      workInProgress.lastEffect = null;
      var current = workInProgress.alternate;
      if (current === null) {
        // Reset to createFiber's initial values.
        workInProgress.childLanes = NoLanes;
        workInProgress.lanes = renderLanes;
        workInProgress.child = null;
        workInProgress.memoizedProps = null;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.dependencies = null;
        workInProgress.stateNode = null;
        {
          // Note: We don't reset the actualTime counts. It's useful to accumulate
          // actual time across multiple render passes.
          workInProgress.selfBaseDuration = 0;
          workInProgress.treeBaseDuration = 0;
        }
      } else {
        // Reset to the cloned values that createWorkInProgress would've.
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        // Needed because Blocks store data on type.
        workInProgress.type = current.type;
        // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        {
          // Note: We don't reset the actualTime counts. It's useful to accumulate
          // actual time across multiple render passes.
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
      }
      return workInProgress;
    }
    function createHostRootFiber(tag) {
      var mode;
      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode | BlockingMode | StrictMode;
      } else if (tag === BlockingRoot) {
        mode = BlockingMode | StrictMode;
      } else {
        mode = NoMode;
      }
      if (isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent;
      // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
      var resolvedType = type;
      if (typeof type === 'function') {
        if (shouldConstruct$1(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
          case REACT_DEBUG_TRACING_MODE_TYPE:
            fiberTag = Mode;
            mode |= DebugTracingMode;
            break;
          case REACT_STRICT_MODE_TYPE:
            fiberTag = Mode;
            mode |= StrictMode;
            break;
          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, lanes, key);
          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, lanes, key);
          case REACT_SUSPENSE_LIST_TYPE:
            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
          case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
          case REACT_LEGACY_HIDDEN_TYPE:
            return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
          case REACT_SCOPE_TYPE:
          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                  case REACT_BLOCK_TYPE:
                    fiberTag = Block;
                    break getTag;
                }
              }
              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              {
                {
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
            }
        }
      }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.lanes = lanes;
      {
        fiber._debugOwner = owner;
      }
      return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      {
        if (typeof pendingProps.id !== 'string') {
          error('Profiler must specify an "id" as a prop');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      // TODO: The Profiler fiber shouldn't have a type. It has a tag.
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.lanes = lanes;
      {
        fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        };
      }
      return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      fiber.type = REACT_SUSPENSE_TYPE;
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      {
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
      }
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      {
        fiber.type = REACT_OFFSCREEN_TYPE;
      }
      fiber.elementType = REACT_OFFSCREEN_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
      var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
      // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      {
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
      }
      fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      // TODO: These should not need a type.
      fiber.elementType = 'DELETED';
      fiber.type = 'DELETED';
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.lanes = lanes;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }
    // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }
      // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.current = null;
      this.pingCache = null;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.hydrate = hydrate;
      this.callbackNode = null;
      this.callbackPriority = NoLanePriority;
      this.eventTimes = createLaneMap(NoLanes);
      this.expirationTimes = createLaneMap(NoTimestamp);
      this.pendingLanes = NoLanes;
      this.suspendedLanes = NoLanes;
      this.pingedLanes = NoLanes;
      this.expiredLanes = NoLanes;
      this.mutableReadLanes = NoLanes;
      this.finishedLanes = NoLanes;
      this.entangledLanes = NoLanes;
      this.entanglements = createLaneMap(NoLanes);
      {
        this.mutableSourceEagerHydrationData = null;
      }
      {
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
      }
      {
        switch (tag) {
          case BlockingRoot:
            this._debugRootType = 'createBlockingRoot()';
            break;
          case ConcurrentRoot:
            this._debugRootType = 'createRoot()';
            break;
          case LegacyRoot:
            this._debugRootType = 'createLegacyRoot()';
            break;
        }
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
      var root = new FiberRootNode(containerInfo, tag, hydrate);
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(tag);
      root.current = uninitializedFiber;
      uninitializedFiber.stateNode = root;
      initializeUpdateQueue(uninitializedFiber);
      return root;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
      var getVersion = mutableSource._getVersion;
      var version = getVersion(mutableSource._source);
      // TODO Clear this data once all pending hydration work is finished.
      // Retaining it forever may interfere with GC.
      if (root.mutableSourceEagerHydrationData == null) {
        root.mutableSourceEagerHydrationData = [mutableSource, version];
      } else {
        root.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
    }
    function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);
        if (fiber === undefined) {
          if (typeof component.render === 'function') {
            {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          } else {
            {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || 'Component';
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;
            var previousFiber = current;
            try {
              setCurrentFiber(hostFiber);
              if (fiber.mode & StrictMode) {
                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
              } else {
                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
              }
            } finally {
              // Ideally this should reset to previous but this shouldn't be called in
              // render and there's another warning for that anyway.
              if (previousFiber) {
                setCurrentFiber(previousFiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
      return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
      {
        onScheduleRoot(container, element);
      }
      var current$1 = container.current;
      var eventTime = requestEventTime();
      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfUnmockedScheduler(current$1);
          warnIfNotScopedWithMatchingAct(current$1);
        }
      }
      var lane = requestUpdateLane(current$1);
      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }
      {
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }
      var update = createUpdate(eventTime, lane);
      // Caution: React DevTools currently depends on this property
      // being called "element".
      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;
      if (callback !== null) {
        {
          if (typeof callback !== 'function') {
            error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
          }
        }
        update.callback = callback;
      }
      enqueueUpdate(current$1, update);
      scheduleUpdateOnFiber(current$1, lane, eventTime);
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null) {
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
      }
    }
    // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate) {
        markRetryLaneImpl(alternate, retryLane);
      }
    }
    function attemptUserBlockingHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
      }
      var eventTime = requestEventTime();
      var lane = InputDiscreteHydrationLane;
      scheduleUpdateOnFiber(fiber, lane, eventTime);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
      }
      var eventTime = requestEventTime();
      var lane = SelectiveHydrationLane;
      scheduleUpdateOnFiber(fiber, lane, eventTime);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
      }
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      scheduleUpdateOnFiber(fiber, lane, eventTime);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
      try {
        setCurrentUpdateLanePriority(priority);
        return fn();
      } finally {}
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      if (hostFiber.tag === FundamentalComponent) {
        return hostFiber.stateNode.instance;
      }
      return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function (fiber) {
      return false;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function (obj, path, index) {
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
        if (index + 1 === path.length) {
          if (Array.isArray(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
          return updated;
        }
        // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
      };
      var copyWithDelete = function (obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
      };
      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
        if (index + 1 === oldPath.length) {
          var newKey = newPath[index];
          // $FlowFixMe number or string is fine here
          updated[newKey] = updated[oldKey];
          if (Array.isArray(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          // $FlowFixMe number or string is fine here
          updated[oldKey] = copyWithRenameImpl(// $FlowFixMe number or string is fine here
          obj[oldKey], oldPath, newPath, index + 1);
        }
        return updated;
      };
      var copyWithRename = function (obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn('copyWithRename() expects paths of the same length');
          return;
        } else {
          for (var i = 0; i < newPath.length - 1; i++) {
            if (oldPath[i] !== newPath[i]) {
              warn('copyWithRename() expects paths to be the same except for the deepest key');
              return;
            }
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      };
      var copyWithSetImpl = function (obj, path, index, value) {
        if (index >= path.length) {
          return value;
        }
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
        // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
      };
      var copyWithSet = function (obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      };
      var findHook = function (fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while (currentHook !== null && id > 0) {
          currentHook = currentHook.next;
          id--;
        }
        return currentHook;
      };
      // Support DevTools editable values for useState and useReducer.
      overrideHookState = function (fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path, value);
          hook.memoizedState = newState;
          hook.baseState = newState;
          // We aren't actually adding an update to the queue,
          // because there is no update we can add for useReducer hooks that won't trigger an error.
          // (There's no appropriate action type for DevTools overrides.)
          // As a result though, React will see the scheduled update as a noop and bailout.
          // Shallow cloning props works as a workaround for now to bypass the bailout check.
          fiber.memoizedProps = _assign({}, fiber.memoizedProps);
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
      };
      overrideHookStateDeletePath = function (fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path);
          hook.memoizedState = newState;
          hook.baseState = newState;
          // We aren't actually adding an update to the queue,
          // because there is no update we can add for useReducer hooks that won't trigger an error.
          // (There's no appropriate action type for DevTools overrides.)
          // As a result though, React will see the scheduled update as a noop and bailout.
          // Shallow cloning props works as a workaround for now to bypass the bailout check.
          fiber.memoizedProps = _assign({}, fiber.memoizedProps);
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
      };
      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState;
          hook.baseState = newState;
          // We aren't actually adding an update to the queue,
          // because there is no update we can add for useReducer hooks that won't trigger an error.
          // (There's no appropriate action type for DevTools overrides.)
          // As a result though, React will see the scheduled update as a noop and bailout.
          // Shallow cloning props works as a workaround for now to bypass the bailout check.
          fiber.memoizedProps = _assign({}, fiber.memoizedProps);
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
      };
      // Support DevTools props for function components, forwardRef, memo, host components, etc.
      overrideProps = function (fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      overridePropsDeletePath = function (fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      overridePropsRenamePath = function (fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      scheduleUpdate = function (fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      setSuspenseHandler = function (newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState: overrideHookState,
        overrideHookStateDeletePath: overrideHookStateDeletePath,
        overrideHookStateRenamePath: overrideHookStateRenamePath,
        overrideProps: overrideProps,
        overridePropsDeletePath: overridePropsDeletePath,
        overridePropsRenamePath: overridePropsRenamePath,
        setSuspenseHandler: setSuspenseHandler,
        scheduleUpdate: scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher,
        findHostInstanceByFiber: findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        // React Refresh
        findHostInstancesForRefresh: findHostInstancesForRefresh,
        scheduleRefresh: scheduleRefresh,
        scheduleRoot: scheduleRoot,
        setRefreshHandler: setRefreshHandler,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: getCurrentFiberForDevTools
      });
    }
    function ReactDOMRoot(container, options) {
      this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
    }
    function ReactDOMBlockingRoot(container, tag, options) {
      this._internalRoot = createRootImpl(container, tag, options);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
      var root = this._internalRoot;
      {
        if (typeof arguments[1] === 'function') {
          error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
        }
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
            }
          }
        }
      }
      updateContainer(children, root, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
      {
        if (typeof arguments[0] === 'function') {
          error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
        }
      }
      var root = this._internalRoot;
      var container = root.containerInfo;
      updateContainer(null, root, null, function () {
        unmarkContainerAsRoot(container);
      });
    };
    function createRootImpl(container, tag, options) {
      // Tag is either LegacyRoot or Concurrent Root
      var hydrate = options != null && options.hydrate === true;
      var hydrationCallbacks = options != null && options.hydrationOptions || null;
      var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
      var root = createContainer(container, tag, hydrate);
      markContainerAsRoot(root.current, container);
      var containerNodeType = container.nodeType;
      {
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
      }
      if (mutableSources) {
        for (var i = 0; i < mutableSources.length; i++) {
          var mutableSource = mutableSources[i];
          registerMutableSourceForHydration(root, mutableSource);
        }
      }
      return root;
    }
    function createLegacyRoot(container, options) {
      return new ReactDOMBlockingRoot(container, LegacyRoot, options);
    }
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    {
      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
            }
          }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
          error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
        }
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
          error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
        }
      };
    }
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }
      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
      // First clear any existing content.
      if (!shouldHydrate) {
        var warned = false;
        var rootSibling;
        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }
      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      }
      return createLegacyRoot(container, shouldHydrate ? {
        hydrate: true
      } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      {
        if (callback !== null && typeof callback !== 'function') {
          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      }
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
              // TODO: Without `any` type, Flow says "Property cannot be accessed on any
        // member of intersection type." Whyyyyyy.
}
      // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.
      var root = container._reactRootContainer;
      var fiberRoot;
      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
        fiberRoot = root._internalRoot;
        if (typeof callback === 'function') {
          var originalCallback = callback;
          callback = function () {
            var instance = getPublicRootInstance(fiberRoot);
            originalCallback.call(instance);
          };
        }
        // Initial mount should not be batched.
        unbatchedUpdates(function () {
          updateContainer(children, fiberRoot, parentComponent, callback);
        });
      } else {
        fiberRoot = root._internalRoot;
        if (typeof callback === 'function') {
          var _originalCallback = callback;
          callback = function () {
            var instance = getPublicRootInstance(fiberRoot);
            _originalCallback.call(instance);
          };
        }
        // Update
        updateContainer(children, fiberRoot, parentComponent, callback);
      }
      return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
      {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender) {
            error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
          }
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE) {
        return componentOrElement;
      }
      {
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
      }
    }
    function hydrate(element, container, callback) {
      if (!isValidContainer(container)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) {
          error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
        }
              // TODO: throw or warn if we couldn't hydrate?
}
      // TODO: throw or warn if we couldn't hydrate?
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
      if (!isValidContainer(container)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) {
          error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      if (!isValidContainer(containerNode)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      if (!(parentComponent != null && has(parentComponent))) {
        {
          throw Error("parentComponent must be a valid React Component");
        }
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
      if (!isValidContainer(container)) {
        {
          throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) {
          error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
        }
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact) {
            error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
          }
                  // Unmount should not be batched.
}
        // Unmount should not be batched.
        unbatchedUpdates(function () {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
            // $FlowFixMe This should probably use `delete container._reactRootContainer`
            container._reactRootContainer = null;
            unmarkContainerAsRoot(container);
          });
        });
        // If you call unmountComponentAtNode twice in quick succession, you'll
        // get `true` twice. That's probably fine?
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
          // Check if the container itself is a React root node.
          var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild) {
            error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
          }
        }
        return false;
      }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    {
      if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
      }
    }
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (!isValidContainer(container)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      // TODO: pass ReactDOM portal implementation as third argument
      // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }
      }
      return createPortal$1(children, container, key);
    }
    var Internals = {
      // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
      // This is an array for better minification.
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
      IsThisRendererActing]
    };
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol;
          // Don't warn in exotic cases like chrome-extension://.
          if ((/^(https?|file):$/).test(protocol)) {
            // eslint-disable-next-line react-internal/no-production-logging
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
  })();
}

},{"react":"4g1R3","object-assign":"6aGxX","scheduler":"EbF0Y","scheduler/tracing":"6VGPS"}],"EbF0Y":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/scheduler.production.min.js');
} else {
  module.exports = require('./cjs/scheduler.development.js');
}

},{"./cjs/scheduler.development.js":"5C9Ne"}],"5C9Ne":[function(require,module,exports) {
/** @license React v0.20.2
* scheduler.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
      var localPerformance = performance;
      exports.unstable_now = function () {
        return localPerformance.now();
      };
    } else {
      var localDate = Date;
      var initialTime = localDate.now();
      exports.unstable_now = function () {
        return localDate.now() - initialTime;
      };
    }
    if (// If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
      // fallback to a naive implementation.
      var _callback = null;
      var _timeoutID = null;
      var _flushCallback = function () {
        if (_callback !== null) {
          try {
            var currentTime = exports.unstable_now();
            var hasRemainingTime = true;
            _callback(hasRemainingTime, currentTime);
            _callback = null;
          } catch (e) {
            setTimeout(_flushCallback, 0);
            throw e;
          }
        }
      };
      requestHostCallback = function (cb) {
        if (_callback !== null) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, 0);
        }
      };
      requestHostTimeout = function (cb, ms) {
        _timeoutID = setTimeout(cb, ms);
      };
      cancelHostTimeout = function () {
        clearTimeout(_timeoutID);
      };
      exports.unstable_shouldYield = function () {
        return false;
      };
      requestPaint = exports.unstable_forceFrameRate = function () {};
    } else {
      // Capture local references to native APIs, in case a polyfill overrides them.
      var _setTimeout = window.setTimeout;
      var _clearTimeout = window.clearTimeout;
      if (typeof console !== 'undefined') {
        // TODO: Scheduler no longer requires these methods to be polyfilled. But
        // maybe we want to continue warning if they don't exist, to preserve the
        // option to rely on it in the future?
        var requestAnimationFrame = window.requestAnimationFrame;
        var cancelAnimationFrame = window.cancelAnimationFrame;
        if (typeof requestAnimationFrame !== 'function') {
          // Using console['error'] to evade Babel and ESLint
          console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
        }
        if (typeof cancelAnimationFrame !== 'function') {
          // Using console['error'] to evade Babel and ESLint
          console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
        }
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      // Scheduler periodically yields in case there is other work on the main
      // thread, like user events. By default, it yields multiple times per frame.
      // It does not attempt to align with frame boundaries, since most tasks don't
      // need to be frame aligned; for those that do, use requestAnimationFrame.
      var yieldInterval = 5;
      var deadline = 0;
      // TODO: Make this configurable
      {
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function () {
          return exports.unstable_now() >= deadline;
        };
        // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function () {};
      }
      exports.unstable_forceFrameRate = function (fps) {
        if (fps < 0 || fps > 125) {
          // Using console['error'] to evade Babel and ESLint
          console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
          return;
        }
        if (fps > 0) {
          yieldInterval = Math.floor(1000 / fps);
        } else {
          // reset the framerate
          yieldInterval = 5;
        }
      };
      var performWorkUntilDeadline = function () {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          // Yield after `yieldInterval` ms, regardless of where we are in the vsync
          // cycle. This means there's always time remaining at the beginning of
          // the message event.
          deadline = currentTime + yieldInterval;
          var hasTimeRemaining = true;
          try {
            var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            if (!hasMoreWork) {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            } else {
              // If there's more work, schedule the next message event at the end
              // of the preceding one.
              port.postMessage(null);
            }
          } catch (error) {
            // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            port.postMessage(null);
            throw error;
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var channel = new MessageChannel();
      var port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline;
      requestHostCallback = function (callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          port.postMessage(null);
        }
      };
      requestHostTimeout = function (callback, ms) {
        taskTimeoutID = _setTimeout(function () {
          callback(exports.unstable_now());
        }, ms);
      };
      cancelHostTimeout = function () {
        _clearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      };
    }
    function push(heap, node) {
      var index = heap.length;
      heap.push(node);
      siftUp(heap, node, index);
    }
    function peek(heap) {
      var first = heap[0];
      return first === undefined ? null : first;
    }
    function pop(heap) {
      var first = heap[0];
      if (first !== undefined) {
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      } else {
        return null;
      }
    }
    function siftUp(heap, node, i) {
      var index = i;
      while (true) {
        var parentIndex = index - 1 >>> 1;
        var parent = heap[parentIndex];
        if (parent !== undefined && compare(parent, node) > 0) {
          // The parent is larger. Swap positions.
          heap[parentIndex] = node;
          heap[index] = parent;
          index = parentIndex;
        } else {
          // The parent is smaller. Exit.
          return;
        }
      }
    }
    function siftDown(heap, node, i) {
      var index = i;
      var length = heap.length;
      while (index < length) {
        var leftIndex = (index + 1) * 2 - 1;
        var left = heap[leftIndex];
        var rightIndex = leftIndex + 1;
        var right = heap[rightIndex];
        // If the left or right node is smaller, swap with the smaller of those.
        if (left !== undefined && compare(left, node) < 0) {
          if (right !== undefined && compare(right, left) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            heap[index] = left;
            heap[leftIndex] = node;
            index = leftIndex;
          }
        } else if (right !== undefined && compare(right, node) < 0) {
          heap[index] = right;
          heap[rightIndex] = node;
          index = rightIndex;
        } else {
          // Neither child is smaller. Exit.
          return;
        }
      }
    }
    function compare(a, b) {
      // Compare sort index first, then task id.
      var diff = a.sortIndex - b.sortIndex;
      return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /*eslint-disable no-var*/
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;
    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
    // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = [];
    // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1;
    // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority;
    // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
      // Check for tasks that are no longer delayed and add them to the queue.
      var timer = peek(timerQueue);
      while (timer !== null) {
        if (timer.callback === null) {
          // Timer was cancelled.
          pop(timerQueue);
        } else if (timer.startTime <= currentTime) {
          // Timer fired. Transfer to the task queue.
          pop(timerQueue);
          timer.sortIndex = timer.expirationTime;
          push(taskQueue, timer);
        } else {
          // Remaining timers are pending.
          return;
        }
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = false;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled) {
        if (peek(taskQueue) !== null) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
        }
      }
    }
    function flushWork(hasTimeRemaining, initialTime) {
      isHostCallbackScheduled = false;
      if (isHostTimeoutScheduled) {
        // We scheduled a timeout but it's no longer needed. Cancel it.
        isHostTimeoutScheduled = false;
        cancelHostTimeout();
      }
      isPerformingWork = true;
      var previousPriorityLevel = currentPriorityLevel;
      try {
        if (enableProfiling) {
          try {
            return workLoop(hasTimeRemaining, initialTime);
          } catch (error) {
            if (currentTask !== null) {
              var currentTime = exports.unstable_now();
              markTaskErrored(currentTask, currentTime);
              currentTask.isQueued = false;
            }
            throw error;
          }
        } else {
          // No catch in prod code path.
          return workLoop(hasTimeRemaining, initialTime);
        }
      } finally {
        currentTask = null;
        currentPriorityLevel = previousPriorityLevel;
        isPerformingWork = false;
      }
    }
    function workLoop(hasTimeRemaining, initialTime) {
      var currentTime = initialTime;
      advanceTimers(currentTime);
      currentTask = peek(taskQueue);
      while (currentTask !== null && !enableSchedulerDebugging) {
        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
          // This currentTask hasn't expired, and we've reached the deadline.
          break;
        }
        var callback = currentTask.callback;
        if (typeof callback === 'function') {
          currentTask.callback = null;
          currentPriorityLevel = currentTask.priorityLevel;
          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
          var continuationCallback = callback(didUserCallbackTimeout);
          currentTime = exports.unstable_now();
          if (typeof continuationCallback === 'function') {
            currentTask.callback = continuationCallback;
          } else {
            if (currentTask === peek(taskQueue)) {
              pop(taskQueue);
            }
          }
          advanceTimers(currentTime);
        } else {
          pop(taskQueue);
        }
        currentTask = peek(taskQueue);
      }
      // Return whether there's additional work
      if (currentTask !== null) {
        return true;
      } else {
        var firstTimer = peek(timerQueue);
        if (firstTimer !== null) {
          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
        return false;
      }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;
        default:
          priorityLevel = NormalPriority;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    }
    function unstable_next(eventHandler) {
      var priorityLevel;
      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          // Shift down to normal priority
          priorityLevel = NormalPriority;
          break;
        default:
          // Anything lower than normal priority should remain at the current level.
          priorityLevel = currentPriorityLevel;
          break;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    }
    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
      var currentTime = exports.unstable_now();
      var startTime;
      if (typeof options === 'object' && options !== null) {
        var delay = options.delay;
        if (typeof delay === 'number' && delay > 0) {
          startTime = currentTime + delay;
        } else {
          startTime = currentTime;
        }
      } else {
        startTime = currentTime;
      }
      var timeout;
      switch (priorityLevel) {
        case ImmediatePriority:
          timeout = IMMEDIATE_PRIORITY_TIMEOUT;
          break;
        case UserBlockingPriority:
          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
          break;
        case IdlePriority:
          timeout = IDLE_PRIORITY_TIMEOUT;
          break;
        case LowPriority:
          timeout = LOW_PRIORITY_TIMEOUT;
          break;
        case NormalPriority:
        default:
          timeout = NORMAL_PRIORITY_TIMEOUT;
          break;
      }
      var expirationTime = startTime + timeout;
      var newTask = {
        id: taskIdCounter++,
        callback: callback,
        priorityLevel: priorityLevel,
        startTime: startTime,
        expirationTime: expirationTime,
        sortIndex: -1
      };
      if (startTime > currentTime) {
        // This is a delayed task.
        newTask.sortIndex = startTime;
        push(timerQueue, newTask);
        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
          // All tasks are delayed, and this is the task with the earliest delay.
          if (isHostTimeoutScheduled) {
            // Cancel an existing timeout.
            cancelHostTimeout();
          } else {
            isHostTimeoutScheduled = true;
          }
          // Schedule a timeout.
          requestHostTimeout(handleTimeout, startTime - currentTime);
        }
      } else {
        newTask.sortIndex = expirationTime;
        push(taskQueue, newTask);
        // wait until the next time we yield.
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
      if (!isHostCallbackScheduled && !isPerformingWork) {
        isHostCallbackScheduled = true;
        requestHostCallback(flushWork);
      }
    }
    function unstable_getFirstCallbackNode() {
      return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
      // remove from the queue because you can't remove arbitrary nodes from an
      // array based heap, only the first one.)
      task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}

},{}],"6VGPS":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/scheduler-tracing.production.min.js');
} else {
  module.exports = require('./cjs/scheduler-tracing.development.js');
}

},{"./cjs/scheduler-tracing.development.js":"1NsIB"}],"1NsIB":[function(require,module,exports) {
/** @license React v0.20.2
* scheduler-tracing.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var DEFAULT_THREAD_ID = 0;
    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;
    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null;
    // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }
    function unstable_clear(callback) {
      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();
      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }
    function unstable_getCurrent() {
      {
        return exports.__interactionsRef.current;
      }
    }
    function unstable_getThreadID() {
      return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current;
      // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.
      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue;
      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--;
              // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }
      return returnValue;
    }
    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;
      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      }
      // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;
      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;
        try {
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;
              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }
          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true;
            // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }
      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;
        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;
            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };
      return wrapped;
    }
    var subscribers = null;
    {
      subscribers = new Set();
    }
    function unstable_subscribe(subscriber) {
      {
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }
    function unstable_unsubscribe(subscriber) {
      {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }
    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
  })();
}

},{}],"5gJEu":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./msal-react.cjs.production.min.js');
} else {
  module.exports = require('./msal-react.cjs.development.js');
}

},{"./msal-react.cjs.development.js":"3dP0v"}],"3dP0v":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var msalBrowser = require('@azure/msal-browser');

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/*
 * Stubbed context implementation
 * Only used when there is no provider, which is an unsupported scenario
 */

const defaultMsalContext = {
  instance: msalBrowser.stubbedPublicClientApplication,
  inProgress: msalBrowser.InteractionStatus.None,
  accounts: [],
  logger: /*#__PURE__*/new msalBrowser.Logger({})
};
const MsalContext = /*#__PURE__*/React.createContext(defaultMsalContext);
const MsalConsumer = MsalContext.Consumer;

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
function getChildrenOrFunction(children, args) {
  if (typeof children === "function") {
    return children(args);
  }

  return children;
}
/**
 * Helper function to determine whether 2 arrays are equal
 * Used to avoid unnecessary state updates
 * @param arrayA
 * @param arrayB
 */

function accountArraysAreEqual(arrayA, arrayB) {
  if (arrayA.length !== arrayB.length) {
    return false;
  }

  const comparisonArray = [...arrayB];
  return arrayA.every(elementA => {
    const elementB = comparisonArray.shift();

    if (!elementA || !elementB) {
      return false;
    }

    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;
  });
}

/* eslint-disable header/header */
const name = "@azure/msal-react";
const version = "1.0.0";

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
function MsalProvider({
  instance,
  children
}) {
  React.useEffect(() => {
    instance.initializeWrapperLibrary(msalBrowser.WrapperSKU.React, version);
  }, [instance]); // Create a logger instance for msal-react with the same options as PublicClientApplication

  const logger = React.useMemo(() => {
    return instance.getLogger().clone(name, version);
  }, [instance]); // State hook to store accounts

  const [accounts, setAccounts] = React.useState([]); // State hook to store in progress value

  const [inProgress, setInProgress] = React.useState(msalBrowser.InteractionStatus.Startup);
  React.useEffect(() => {
    const callbackId = instance.addEventCallback(message => {
      switch (message.eventType) {
        case msalBrowser.EventType.LOGIN_SUCCESS:
        case msalBrowser.EventType.SSO_SILENT_SUCCESS:
        case msalBrowser.EventType.HANDLE_REDIRECT_END:
        case msalBrowser.EventType.LOGIN_FAILURE:
        case msalBrowser.EventType.SSO_SILENT_FAILURE:
        case msalBrowser.EventType.LOGOUT_END:
        case msalBrowser.EventType.ACQUIRE_TOKEN_SUCCESS:
        case msalBrowser.EventType.ACQUIRE_TOKEN_FAILURE:
          const currentAccounts = instance.getAllAccounts();

          if (!accountArraysAreEqual(currentAccounts, accounts)) {
            logger.info("MsalProvider - updating account state");
            setAccounts(currentAccounts);
          } else {
            logger.info("MsalProvider - no account changes");
          }

          break;
      }
    });
    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);
    return () => {
      // Remove callback when component unmounts or accounts change
      if (callbackId) {
        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);
        instance.removeEventCallback(callbackId);
      }
    };
  }, [instance, accounts, logger]);
  React.useEffect(() => {
    const callbackId = instance.addEventCallback(message => {
      const status = msalBrowser.EventMessageUtils.getInteractionStatusFromEvent(message);

      if (status !== null) {
        logger.info(`MsalProvider - ${message.eventType} results in setting inProgress to ${status}`);
        setInProgress(status);
      }
    });
    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);
    instance.handleRedirectPromise().catch(() => {
      // Errors should be handled by listening to the LOGIN_FAILURE event
      return;
    });
    return () => {
      if (callbackId) {
        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);
        instance.removeEventCallback(callbackId);
      }
    };
  }, [instance, logger]);
  const contextValue = {
    instance,
    inProgress,
    accounts,
    logger
  };
  return React__default.createElement(MsalContext.Provider, {
    value: contextValue
  }, children);
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Returns Msal Context values
 */

const useMsal = () => React.useContext(MsalContext);

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

function getAccount(instance, accountIdentifiers) {
  const allAccounts = instance.getAllAccounts();

  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {
    const matchedAccounts = allAccounts.filter(accountObj => {
      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {
        return false;
      }

      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {
        return false;
      }

      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {
        return false;
      }

      return true;
    });
    return matchedAccounts[0] || null;
  } else {
    return null;
  }
}
/**
 * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in
 * @param accountIdentifiers
 */


function useAccount(accountIdentifiers) {
  const {
    instance,
    inProgress
  } = useMsal();
  const initialStateValue = inProgress === msalBrowser.InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);
  const [account, setAccount] = React.useState(initialStateValue);
  React.useEffect(() => {
    const currentAccount = getAccount(instance, accountIdentifiers);

    if (!msalBrowser.AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {
      setAccount(currentAccount);
    }
  }, [inProgress, accountIdentifiers, instance, account]);
  return account;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

function isAuthenticated(allAccounts, account, matchAccount) {
  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {
    return !!account;
  }

  return allAccounts.length > 0;
}
/**
 * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in
 * @param matchAccount
 */


function useIsAuthenticated(matchAccount) {
  const {
    accounts: allAccounts,
    inProgress
  } = useMsal();
  const account = useAccount(matchAccount || {});
  const initialStateValue = inProgress === msalBrowser.InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);
  const [hasAuthenticated, setHasAuthenticated] = React.useState(initialStateValue);
  React.useEffect(() => {
    setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));
  }, [allAccounts, account, matchAccount]);
  return hasAuthenticated;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Renders child components if user is authenticated
 * @param props
 */

function AuthenticatedTemplate({
  username,
  homeAccountId,
  localAccountId,
  children
}) {
  const context = useMsal();
  const accountIdentifier = React.useMemo(() => {
    return {
      username,
      homeAccountId,
      localAccountId
    };
  }, [username, homeAccountId, localAccountId]);
  const isAuthenticated = useIsAuthenticated(accountIdentifier);

  if (isAuthenticated && context.inProgress !== msalBrowser.InteractionStatus.Startup) {
    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));
  }

  return null;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Renders child components if user is unauthenticated
 * @param props
 */

function UnauthenticatedTemplate({
  username,
  homeAccountId,
  localAccountId,
  children
}) {
  const context = useMsal();
  const accountIdentifier = React.useMemo(() => {
    return {
      username,
      homeAccountId,
      localAccountId
    };
  }, [username, homeAccountId, localAccountId]);
  const isAuthenticated = useIsAuthenticated(accountIdentifier);

  if (!isAuthenticated && context.inProgress !== msalBrowser.InteractionStatus.Startup && context.inProgress !== msalBrowser.InteractionStatus.HandleRedirect) {
    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));
  }

  return null;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.
 * Optionally provide a request object to be used in the login call.
 * Optionally provide a specific user that should be logged in.
 * @param interactionType
 * @param authenticationRequest
 * @param accountIdentifiers
 */

function useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {
  const {
    instance,
    inProgress,
    logger
  } = useMsal();
  const isAuthenticated = useIsAuthenticated(accountIdentifiers);
  const [[result, error], setResponse] = React.useState([null, null]);
  const [hasBeenCalled, setHasBeenCalled] = React.useState(false);
  const login = React.useCallback(async (callbackInteractionType, callbackRequest) => {
    const loginType = callbackInteractionType || interactionType;
    const loginRequest = callbackRequest || authenticationRequest;

    switch (loginType) {
      case msalBrowser.InteractionType.Popup:
        logger.verbose("useMsalAuthentication - Calling loginPopup");
        return instance.loginPopup(loginRequest);

      case msalBrowser.InteractionType.Redirect:
        // This promise is not expected to resolve due to full frame redirect
        logger.verbose("useMsalAuthentication - Calling loginRedirect");
        return instance.loginRedirect(loginRequest).then(null);

      case msalBrowser.InteractionType.Silent:
        logger.verbose("useMsalAuthentication - Calling ssoSilent");
        return instance.ssoSilent(loginRequest);

      default:
        throw "Invalid interaction type provided.";
    }
  }, [instance, interactionType, authenticationRequest, logger]);
  React.useEffect(() => {
    const callbackId = instance.addEventCallback(message => {
      switch (message.eventType) {
        case msalBrowser.EventType.LOGIN_SUCCESS:
        case msalBrowser.EventType.SSO_SILENT_SUCCESS:
          if (message.payload) {
            setResponse([message.payload, null]);
          }

          break;

        case msalBrowser.EventType.LOGIN_FAILURE:
        case msalBrowser.EventType.SSO_SILENT_FAILURE:
          if (message.error) {
            setResponse([null, message.error]);
          }

          break;
      }
    });
    logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);
    return () => {
      if (callbackId) {
        logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);
        instance.removeEventCallback(callbackId);
      }
    };
  }, [instance, logger]);
  React.useEffect(() => {
    if (!hasBeenCalled && !error && !isAuthenticated && inProgress === msalBrowser.InteractionStatus.None) {
      logger.info("useMsalAuthentication - No user is authenticated, attempting to login"); // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned

      setHasBeenCalled(true);
      login().catch(() => {
        // Errors are handled by the event handler above
        return;
      });
    }
  }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);
  return {
    login,
    result,
    error
  };
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Attempts to authenticate user if not already authenticated, then renders child components
 * @param props
 */

function MsalAuthenticationTemplate({
  interactionType,
  username,
  homeAccountId,
  localAccountId,
  authenticationRequest,
  loadingComponent: LoadingComponent,
  errorComponent: ErrorComponent,
  children
}) {
  const accountIdentifier = React.useMemo(() => {
    return {
      username,
      homeAccountId,
      localAccountId
    };
  }, [username, homeAccountId, localAccountId]);
  const context = useMsal();
  const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);
  const isAuthenticated = useIsAuthenticated(accountIdentifier);

  if (msalAuthResult.error && context.inProgress === msalBrowser.InteractionStatus.None) {
    if (!!ErrorComponent) {
      return React__default.createElement(ErrorComponent, Object.assign({}, msalAuthResult));
    }

    throw msalAuthResult.error;
  }

  if (isAuthenticated) {
    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, msalAuthResult));
  }

  if (!!LoadingComponent && context.inProgress !== msalBrowser.InteractionStatus.None) {
    return React__default.createElement(LoadingComponent, Object.assign({}, context));
  }

  return null;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Higher order component wraps provided component with msal by injecting msal context values into the component's props
 * @param Component
 */

const withMsal = Component => {
  const ComponentWithMsal = props => {
    const msal = useMsal();
    return React__default.createElement(Component, Object.assign({}, props, {
      msalContext: msal
    }));
  };

  const componentName = Component.displayName || Component.name || "Component";
  ComponentWithMsal.displayName = `withMsal(${componentName})`;
  return ComponentWithMsal;
};

exports.AuthenticatedTemplate = AuthenticatedTemplate;
exports.MsalAuthenticationTemplate = MsalAuthenticationTemplate;
exports.MsalConsumer = MsalConsumer;
exports.MsalContext = MsalContext;
exports.MsalProvider = MsalProvider;
exports.UnauthenticatedTemplate = UnauthenticatedTemplate;
exports.useAccount = useAccount;
exports.useIsAuthenticated = useIsAuthenticated;
exports.useMsal = useMsal;
exports.useMsalAuthentication = useMsalAuthentication;
exports.withMsal = withMsal;

},{"react":"4g1R3","@azure/msal-browser":"YsMQ8"}],"YsMQ8":[function(require,module,exports) {
/*! @azure/msal-browser v2.14.2 2021-05-12 */
'use strict';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics$1 = function(d, b) {
    extendStatics$1 = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics$1(d, b);
};

function __extends$1(d, b) {
    extendStatics$1(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign$1 = function() {
    __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};

function __awaiter$1(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator$1(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var Constants = {
    LIBRARY_NAME: "MSAL.JS",
    SKU: "msal.js.common",
    // Prefix for all library cache entries
    CACHE_PREFIX: "msal",
    // default authority
    DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
    DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
    // ADFS String
    ADFS: "adfs",
    // Default AAD Instance Discovery Endpoint
    AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
    // Resource delimiter - used for certain cache entries
    RESOURCE_DELIM: "|",
    // Placeholder for non-existent account ids/objects
    NO_ACCOUNT: "NO_ACCOUNT",
    // Claims
    CLAIMS: "claims",
    // Consumer UTID
    CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
    // Default scopes
    OPENID_SCOPE: "openid",
    PROFILE_SCOPE: "profile",
    OFFLINE_ACCESS_SCOPE: "offline_access",
    EMAIL_SCOPE: "email",
    // Default response type for authorization code flow
    CODE_RESPONSE_TYPE: "code",
    CODE_GRANT_TYPE: "authorization_code",
    RT_GRANT_TYPE: "refresh_token",
    FRAGMENT_RESPONSE_MODE: "fragment",
    S256_CODE_CHALLENGE_METHOD: "S256",
    URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
    AUTHORIZATION_PENDING: "authorization_pending",
    NOT_DEFINED: "not_defined",
    EMPTY_STRING: "",
    FORWARD_SLASH: "/",
    IMDS_ENDPOINT: "http://169.254.169.254/metadata/instance/compute/location",
    IMDS_VERSION: "2020-06-01",
    IMDS_TIMEOUT: 2000,
    AZURE_REGION_AUTO_DISCOVER_FLAG: "AUTO_DISCOVER",
    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: "login.microsoft.com",
    KNOWN_PUBLIC_CLOUDS: ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"]
};
var OIDC_DEFAULT_SCOPES = [
    Constants.OPENID_SCOPE,
    Constants.PROFILE_SCOPE,
    Constants.OFFLINE_ACCESS_SCOPE
];
var OIDC_SCOPES = __spreadArrays(OIDC_DEFAULT_SCOPES, [
    Constants.EMAIL_SCOPE
]);
/**
 * Request header names
 */
var HeaderNames;
(function (HeaderNames) {
    HeaderNames["CONTENT_TYPE"] = "Content-Type";
    HeaderNames["RETRY_AFTER"] = "Retry-After";
})(HeaderNames || (HeaderNames = {}));
/**
 * Persistent cache keys MSAL which stay while user is logged in.
 */
var PersistentCacheKeys;
(function (PersistentCacheKeys) {
    PersistentCacheKeys["ID_TOKEN"] = "idtoken";
    PersistentCacheKeys["CLIENT_INFO"] = "client.info";
    PersistentCacheKeys["ADAL_ID_TOKEN"] = "adal.idtoken";
    PersistentCacheKeys["ERROR"] = "error";
    PersistentCacheKeys["ERROR_DESC"] = "error.description";
})(PersistentCacheKeys || (PersistentCacheKeys = {}));
/**
 * String constants related to AAD Authority
 */
var AADAuthorityConstants;
(function (AADAuthorityConstants) {
    AADAuthorityConstants["COMMON"] = "common";
    AADAuthorityConstants["ORGANIZATIONS"] = "organizations";
    AADAuthorityConstants["CONSUMERS"] = "consumers";
})(AADAuthorityConstants || (AADAuthorityConstants = {}));
/**
 * Keys in the hashParams sent by AAD Server
 */
var AADServerParamKeys;
(function (AADServerParamKeys) {
    AADServerParamKeys["CLIENT_ID"] = "client_id";
    AADServerParamKeys["REDIRECT_URI"] = "redirect_uri";
    AADServerParamKeys["RESPONSE_TYPE"] = "response_type";
    AADServerParamKeys["RESPONSE_MODE"] = "response_mode";
    AADServerParamKeys["GRANT_TYPE"] = "grant_type";
    AADServerParamKeys["CLAIMS"] = "claims";
    AADServerParamKeys["SCOPE"] = "scope";
    AADServerParamKeys["ERROR"] = "error";
    AADServerParamKeys["ERROR_DESCRIPTION"] = "error_description";
    AADServerParamKeys["ACCESS_TOKEN"] = "access_token";
    AADServerParamKeys["ID_TOKEN"] = "id_token";
    AADServerParamKeys["REFRESH_TOKEN"] = "refresh_token";
    AADServerParamKeys["EXPIRES_IN"] = "expires_in";
    AADServerParamKeys["STATE"] = "state";
    AADServerParamKeys["NONCE"] = "nonce";
    AADServerParamKeys["PROMPT"] = "prompt";
    AADServerParamKeys["SESSION_STATE"] = "session_state";
    AADServerParamKeys["CLIENT_INFO"] = "client_info";
    AADServerParamKeys["CODE"] = "code";
    AADServerParamKeys["CODE_CHALLENGE"] = "code_challenge";
    AADServerParamKeys["CODE_CHALLENGE_METHOD"] = "code_challenge_method";
    AADServerParamKeys["CODE_VERIFIER"] = "code_verifier";
    AADServerParamKeys["CLIENT_REQUEST_ID"] = "client-request-id";
    AADServerParamKeys["X_CLIENT_SKU"] = "x-client-SKU";
    AADServerParamKeys["X_CLIENT_VER"] = "x-client-VER";
    AADServerParamKeys["X_CLIENT_OS"] = "x-client-OS";
    AADServerParamKeys["X_CLIENT_CPU"] = "x-client-CPU";
    AADServerParamKeys["X_CLIENT_CURR_TELEM"] = "x-client-current-telemetry";
    AADServerParamKeys["X_CLIENT_LAST_TELEM"] = "x-client-last-telemetry";
    AADServerParamKeys["X_MS_LIB_CAPABILITY"] = "x-ms-lib-capability";
    AADServerParamKeys["POST_LOGOUT_URI"] = "post_logout_redirect_uri";
    AADServerParamKeys["ID_TOKEN_HINT"] = "id_token_hint";
    AADServerParamKeys["DEVICE_CODE"] = "device_code";
    AADServerParamKeys["CLIENT_SECRET"] = "client_secret";
    AADServerParamKeys["CLIENT_ASSERTION"] = "client_assertion";
    AADServerParamKeys["CLIENT_ASSERTION_TYPE"] = "client_assertion_type";
    AADServerParamKeys["TOKEN_TYPE"] = "token_type";
    AADServerParamKeys["REQ_CNF"] = "req_cnf";
    AADServerParamKeys["OBO_ASSERTION"] = "assertion";
    AADServerParamKeys["REQUESTED_TOKEN_USE"] = "requested_token_use";
    AADServerParamKeys["ON_BEHALF_OF"] = "on_behalf_of";
    AADServerParamKeys["FOCI"] = "foci";
})(AADServerParamKeys || (AADServerParamKeys = {}));
/**
 * Claims request keys
 */
var ClaimsRequestKeys;
(function (ClaimsRequestKeys) {
    ClaimsRequestKeys["ACCESS_TOKEN"] = "access_token";
    ClaimsRequestKeys["XMS_CC"] = "xms_cc";
})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));
/**
 * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
 * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
 * internal partners too, hence the choice of generic "string" type instead of the "enum"
 */
var PromptValue = {
    LOGIN: "login",
    SELECT_ACCOUNT: "select_account",
    CONSENT: "consent",
    NONE: "none",
};
/**
 * SSO Types - generated to populate hints
 */
var SSOTypes;
(function (SSOTypes) {
    SSOTypes["ACCOUNT"] = "account";
    SSOTypes["SID"] = "sid";
    SSOTypes["LOGIN_HINT"] = "login_hint";
    SSOTypes["ID_TOKEN"] = "id_token";
    SSOTypes["DOMAIN_HINT"] = "domain_hint";
    SSOTypes["ORGANIZATIONS"] = "organizations";
    SSOTypes["CONSUMERS"] = "consumers";
    SSOTypes["ACCOUNT_ID"] = "accountIdentifier";
    SSOTypes["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
})(SSOTypes || (SSOTypes = {}));
/**
 * allowed values for codeVerifier
 */
var CodeChallengeMethodValues = {
    PLAIN: "plain",
    S256: "S256"
};
/**
 * allowed values for response_mode
 */
var ResponseMode;
(function (ResponseMode) {
    ResponseMode["QUERY"] = "query";
    ResponseMode["FRAGMENT"] = "fragment";
    ResponseMode["FORM_POST"] = "form_post";
})(ResponseMode || (ResponseMode = {}));
/**
 * allowed grant_type
 */
var GrantType;
(function (GrantType) {
    GrantType["IMPLICIT_GRANT"] = "implicit";
    GrantType["AUTHORIZATION_CODE_GRANT"] = "authorization_code";
    GrantType["CLIENT_CREDENTIALS_GRANT"] = "client_credentials";
    GrantType["RESOURCE_OWNER_PASSWORD_GRANT"] = "password";
    GrantType["REFRESH_TOKEN_GRANT"] = "refresh_token";
    GrantType["DEVICE_CODE_GRANT"] = "device_code";
    GrantType["JWT_BEARER"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
})(GrantType || (GrantType = {}));
/**
 * Account types in Cache
 */
var CacheAccountType;
(function (CacheAccountType) {
    CacheAccountType["MSSTS_ACCOUNT_TYPE"] = "MSSTS";
    CacheAccountType["ADFS_ACCOUNT_TYPE"] = "ADFS";
    CacheAccountType["MSAV1_ACCOUNT_TYPE"] = "MSA";
    CacheAccountType["GENERIC_ACCOUNT_TYPE"] = "Generic"; // NTLM, Kerberos, FBA, Basic etc
})(CacheAccountType || (CacheAccountType = {}));
/**
 * Separators used in cache
 */
var Separators;
(function (Separators) {
    Separators["CACHE_KEY_SEPARATOR"] = "-";
    Separators["CLIENT_INFO_SEPARATOR"] = ".";
})(Separators || (Separators = {}));
/**
 * Credential Type stored in the cache
 */
var CredentialType;
(function (CredentialType) {
    CredentialType["ID_TOKEN"] = "IdToken";
    CredentialType["ACCESS_TOKEN"] = "AccessToken";
    CredentialType["ACCESS_TOKEN_WITH_AUTH_SCHEME"] = "AccessToken_With_AuthScheme";
    CredentialType["REFRESH_TOKEN"] = "RefreshToken";
})(CredentialType || (CredentialType = {}));
/**
 * Credential Type stored in the cache
 */
var CacheSchemaType;
(function (CacheSchemaType) {
    CacheSchemaType["ACCOUNT"] = "Account";
    CacheSchemaType["CREDENTIAL"] = "Credential";
    CacheSchemaType["ID_TOKEN"] = "IdToken";
    CacheSchemaType["ACCESS_TOKEN"] = "AccessToken";
    CacheSchemaType["REFRESH_TOKEN"] = "RefreshToken";
    CacheSchemaType["APP_METADATA"] = "AppMetadata";
    CacheSchemaType["TEMPORARY"] = "TempCache";
    CacheSchemaType["TELEMETRY"] = "Telemetry";
    CacheSchemaType["UNDEFINED"] = "Undefined";
    CacheSchemaType["THROTTLING"] = "Throttling";
})(CacheSchemaType || (CacheSchemaType = {}));
/**
 * Combine all cache types
 */
var CacheType;
(function (CacheType) {
    CacheType[CacheType["ADFS"] = 1001] = "ADFS";
    CacheType[CacheType["MSA"] = 1002] = "MSA";
    CacheType[CacheType["MSSTS"] = 1003] = "MSSTS";
    CacheType[CacheType["GENERIC"] = 1004] = "GENERIC";
    CacheType[CacheType["ACCESS_TOKEN"] = 2001] = "ACCESS_TOKEN";
    CacheType[CacheType["REFRESH_TOKEN"] = 2002] = "REFRESH_TOKEN";
    CacheType[CacheType["ID_TOKEN"] = 2003] = "ID_TOKEN";
    CacheType[CacheType["APP_METADATA"] = 3001] = "APP_METADATA";
    CacheType[CacheType["UNDEFINED"] = 9999] = "UNDEFINED";
})(CacheType || (CacheType = {}));
/**
 * More Cache related constants
 */
var APP_METADATA = "appmetadata";
var ClientInfo = "client_info";
var THE_FAMILY_ID = "1";
var AUTHORITY_METADATA_CONSTANTS = {
    CACHE_KEY: "authority-metadata",
    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours
};
var AuthorityMetadataSource;
(function (AuthorityMetadataSource) {
    AuthorityMetadataSource["CONFIG"] = "config";
    AuthorityMetadataSource["CACHE"] = "cache";
    AuthorityMetadataSource["NETWORK"] = "network";
})(AuthorityMetadataSource || (AuthorityMetadataSource = {}));
var SERVER_TELEM_CONSTANTS = {
    SCHEMA_VERSION: 2,
    MAX_CUR_HEADER_BYTES: 80,
    MAX_LAST_HEADER_BYTES: 330,
    MAX_CACHED_ERRORS: 50,
    CACHE_KEY: "server-telemetry",
    CATEGORY_SEPARATOR: "|",
    VALUE_SEPARATOR: ",",
    OVERFLOW_TRUE: "1",
    OVERFLOW_FALSE: "0",
    UNKNOWN_ERROR: "unknown_error"
};
/**
 * Type of the authentication request
 */
exports.AuthenticationScheme = void 0;
(function (AuthenticationScheme) {
    AuthenticationScheme["POP"] = "pop";
    AuthenticationScheme["BEARER"] = "Bearer";
})(exports.AuthenticationScheme || (exports.AuthenticationScheme = {}));
/**
 * Constants related to throttling
 */
var ThrottlingConstants = {
    // Default time to throttle RequestThumbprint in seconds
    DEFAULT_THROTTLE_TIME_SECONDS: 60,
    // Default maximum time to throttle in seconds, overrides what the server sends back
    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
    // Prefix for storing throttling entries
    THROTTLING_PREFIX: "throttling",
    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling
    X_MS_LIB_CAPABILITY_VALUE: "retry-after, h429"
};
var Errors = {
    INVALID_GRANT_ERROR: "invalid_grant",
    CLIENT_MISMATCH_ERROR: "client_mismatch",
};
/**
 * Password grant parameters
 */
var PasswordGrantConstants;
(function (PasswordGrantConstants) {
    PasswordGrantConstants["username"] = "username";
    PasswordGrantConstants["password"] = "password";
})(PasswordGrantConstants || (PasswordGrantConstants = {}));
/**
 * Response codes
 */
var ResponseCodes;
(function (ResponseCodes) {
    ResponseCodes[ResponseCodes["httpSuccess"] = 200] = "httpSuccess";
    ResponseCodes[ResponseCodes["httpBadRequest"] = 400] = "httpBadRequest";
})(ResponseCodes || (ResponseCodes = {}));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * AuthErrorMessage class containing string constants used by error codes and messages.
 */
var AuthErrorMessage = {
    unexpectedError: {
        code: "unexpected_error",
        desc: "Unexpected error in authentication."
    }
};
/**
 * General error class thrown by the MSAL.js library.
 */
var AuthError = /** @class */ (function (_super) {
    __extends(AuthError, _super);
    function AuthError(errorCode, errorMessage, suberror) {
        var _this = this;
        var errorString = errorMessage ? errorCode + ": " + errorMessage : errorCode;
        _this = _super.call(this, errorString) || this;
        Object.setPrototypeOf(_this, AuthError.prototype);
        _this.errorCode = errorCode || Constants.EMPTY_STRING;
        _this.errorMessage = errorMessage || "";
        _this.subError = suberror || "";
        _this.name = "AuthError";
        return _this;
    }
    /**
     * Creates an error that is thrown when something unexpected happens in the library.
     * @param errDesc
     */
    AuthError.createUnexpectedError = function (errDesc) {
        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
    };
    return AuthError;
}(Error));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var DEFAULT_CRYPTO_IMPLEMENTATION = {
    createNewGuid: function () {
        var notImplErr = "Crypto interface - createNewGuid() has not been implemented";
        throw AuthError.createUnexpectedError(notImplErr);
    },
    base64Decode: function () {
        var notImplErr = "Crypto interface - base64Decode() has not been implemented";
        throw AuthError.createUnexpectedError(notImplErr);
    },
    base64Encode: function () {
        var notImplErr = "Crypto interface - base64Encode() has not been implemented";
        throw AuthError.createUnexpectedError(notImplErr);
    },
    generatePkceCodes: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Crypto interface - generatePkceCodes() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    getPublicKeyThumbprint: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Crypto interface - getPublicKeyThumbprint() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    signJwt: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Crypto interface - signJwt() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ClientAuthErrorMessage class containing string constants used by error codes and messages.
 */
var ClientAuthErrorMessage = {
    clientInfoDecodingError: {
        code: "client_info_decoding_error",
        desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
    },
    clientInfoEmptyError: {
        code: "client_info_empty_error",
        desc: "The client info was empty. Please review the trace to determine the root cause."
    },
    tokenParsingError: {
        code: "token_parsing_error",
        desc: "Token cannot be parsed. Please review stack trace to determine root cause."
    },
    nullOrEmptyToken: {
        code: "null_or_empty_token",
        desc: "The token is null or empty. Please review the trace to determine the root cause."
    },
    endpointResolutionError: {
        code: "endpoints_resolution_error",
        desc: "Error: could not resolve endpoints. Please check network and try again."
    },
    networkError: {
        code: "network_error",
        desc: "Network request failed. Please check network trace to determine root cause."
    },
    unableToGetOpenidConfigError: {
        code: "openid_config_error",
        desc: "Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints."
    },
    hashNotDeserialized: {
        code: "hash_not_deserialized",
        desc: "The hash parameters could not be deserialized. Please review the trace to determine the root cause."
    },
    blankGuidGenerated: {
        code: "blank_guid_generated",
        desc: "The guid generated was blank. Please review the trace to determine the root cause."
    },
    invalidStateError: {
        code: "invalid_state",
        desc: "State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."
    },
    stateMismatchError: {
        code: "state_mismatch",
        desc: "State mismatch error. Please check your network. Continued requests may cause cache overflow."
    },
    stateNotFoundError: {
        code: "state_not_found",
        desc: "State not found"
    },
    nonceMismatchError: {
        code: "nonce_mismatch",
        desc: "Nonce mismatch error. This may be caused by a race condition in concurrent requests."
    },
    nonceNotFoundError: {
        code: "nonce_not_found",
        desc: "nonce not found"
    },
    noTokensFoundError: {
        code: "no_tokens_found",
        desc: "No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken()."
    },
    multipleMatchingTokens: {
        code: "multiple_matching_tokens",
        desc: "The cache contains multiple tokens satisfying the requirements. " +
            "Call AcquireToken again providing more requirements such as authority or account."
    },
    multipleMatchingAccounts: {
        code: "multiple_matching_accounts",
        desc: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"
    },
    multipleMatchingAppMetadata: {
        code: "multiple_matching_appMetadata",
        desc: "The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata"
    },
    tokenRequestCannotBeMade: {
        code: "request_cannot_be_made",
        desc: "Token request cannot be made without authorization code or refresh token."
    },
    appendEmptyScopeError: {
        code: "cannot_append_empty_scope",
        desc: "Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."
    },
    removeEmptyScopeError: {
        code: "cannot_remove_empty_scope",
        desc: "Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."
    },
    appendScopeSetError: {
        code: "cannot_append_scopeset",
        desc: "Cannot append ScopeSet due to error."
    },
    emptyInputScopeSetError: {
        code: "empty_input_scopeset",
        desc: "Empty input ScopeSet cannot be processed."
    },
    DeviceCodePollingCancelled: {
        code: "device_code_polling_cancelled",
        desc: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."
    },
    DeviceCodeExpired: {
        code: "device_code_expired",
        desc: "Device code is expired."
    },
    NoAccountInSilentRequest: {
        code: "no_account_in_silent_request",
        desc: "Please pass an account object, silent flow is not supported without account information"
    },
    invalidCacheRecord: {
        code: "invalid_cache_record",
        desc: "Cache record object was null or undefined."
    },
    invalidCacheEnvironment: {
        code: "invalid_cache_environment",
        desc: "Invalid environment when attempting to create cache entry"
    },
    noAccountFound: {
        code: "no_account_found",
        desc: "No account found in cache for given key."
    },
    CachePluginError: {
        code: "no cache plugin set on CacheManager",
        desc: "ICachePlugin needs to be set before using readFromStorage or writeFromStorage"
    },
    noCryptoObj: {
        code: "no_crypto_object",
        desc: "No crypto object detected. This is required for the following operation: "
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    unexpectedAccountType: {
        code: "unexpected_account_type",
        desc: "Unexpected account type."
    },
    unexpectedCredentialType: {
        code: "unexpected_credential_type",
        desc: "Unexpected credential type."
    },
    invalidAssertion: {
        code: "invalid_assertion",
        desc: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"
    },
    invalidClientCredential: {
        code: "invalid_client_credential",
        desc: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"
    },
    tokenRefreshRequired: {
        code: "token_refresh_required",
        desc: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."
    },
    userTimeoutReached: {
        code: "user_timeout_reached",
        desc: "User defined timeout for device code polling reached",
    },
    tokenClaimsRequired: {
        code: "token_claims_cnf_required_for_signedjwt",
        desc: "Cannot generate a POP jwt if the token_claims are not populated"
    },
    noAuthorizationCodeFromServer: {
        code: "authorization_code_missing_from_server_response",
        desc: "Server response does not contain an authorization code to proceed"
    },
    noAzureRegionDetected: {
        code: "no_azure_region_detected",
        desc: "No azure region was detected and no fallback was made available"
    },
    accessTokenEntityNullError: {
        code: "access_token_entity_null",
        desc: "Access token entity is null, please check logs and cache to ensure a valid access token is present."
    }
};
/**
 * Error thrown when there is an error in the client code running on the browser.
 */
var ClientAuthError = /** @class */ (function (_super) {
    __extends(ClientAuthError, _super);
    function ClientAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientAuthError";
        Object.setPrototypeOf(_this, ClientAuthError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when client info object doesn't decode correctly.
     * @param caughtError
     */
    ClientAuthError.createClientInfoDecodingError = function (caughtError) {
        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
    };
    /**
     * Creates an error thrown if the client info is empty.
     * @param rawClientInfo
     */
    ClientAuthError.createClientInfoEmptyError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, "" + ClientAuthErrorMessage.clientInfoEmptyError.desc);
    };
    /**
     * Creates an error thrown when the id token extraction errors out.
     * @param err
     */
    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {
        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + " Failed with error: " + caughtExtractionError);
    };
    /**
     * Creates an error thrown when the id token string is null or empty.
     * @param invalidRawTokenString
     */
    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {
        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + " Raw Token Value: " + invalidRawTokenString);
    };
    /**
     * Creates an error thrown when the endpoint discovery doesn't complete correctly.
     */
    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + " Detail: " + errDetail);
    };
    /**
     * Creates an error thrown when the fetch client throws
     */
    ClientAuthError.createNetworkError = function (endpoint, errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + " | Fetch client threw: " + errDetail + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data
     */
    ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + " Attempted to retrieve endpoints from: " + errDetail);
    };
    /**
     * Creates an error thrown when the hash cannot be deserialized.
     * @param hashParamObj
     */
    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {
        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + " Given Object: " + hashParamObj);
    };
    /**
     * Creates an error thrown when the state cannot be parsed.
     * @param invalidState
     */
    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {
        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " Invalid State: " + invalidState + ", Root Err: " + errorString);
    };
    /**
     * Creates an error thrown when two states do not match.
     */
    ClientAuthError.createStateMismatchError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);
    };
    /**
     * Creates an error thrown when the state is not present
     * @param missingState
     */
    ClientAuthError.createStateNotFoundError = function (missingState) {
        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + ":  " + missingState);
    };
    /**
     * Creates an error thrown when the nonce does not match.
     */
    ClientAuthError.createNonceMismatchError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);
    };
    /**
     * Creates an error thrown when the mnonce is not present
     * @param missingNonce
     */
    ClientAuthError.createNonceNotFoundError = function (missingNonce) {
        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + ":  " + missingNonce);
    };
    /**
     * Creates an error thrown when the authorization code required for a token request is null or empty.
     */
    ClientAuthError.createNoTokensFoundError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);
    };
    /**
     * Throws error when multiple tokens are in cache.
     */
    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
    };
    /**
     * Throws error when multiple accounts are in cache for the given params
     */
    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);
    };
    /**
     * Throws error when multiple appMetada are in cache for the given clientId.
     */
    ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);
    };
    /**
     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.
     */
    ClientAuthError.createTokenRequestCannotBeMadeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */
    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {
        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */
    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {
        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append null or empty ScopeSet.
     * @param appendError
     */
    ClientAuthError.createAppendScopeSetError = function (appendError) {
        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + " Detail Error: " + appendError);
    };
    /**
     * Throws error if ScopeSet is null or undefined.
     * @param givenScopeSet
     */
    ClientAuthError.createEmptyInputScopeSetError = function (givenScopeSet) {
        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, ClientAuthErrorMessage.emptyInputScopeSetError.desc + " Given ScopeSet: " + givenScopeSet);
    };
    /**
     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow
     */
    ClientAuthError.createDeviceCodeCancelledError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, "" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);
    };
    /**
     * Throws error if device code is expired
     */
    ClientAuthError.createDeviceCodeExpiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, "" + ClientAuthErrorMessage.DeviceCodeExpired.desc);
    };
    /**
     * Throws error when silent requests are made without an account object
     */
    ClientAuthError.createNoAccountInSilentRequestError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, "" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);
    };
    /**
     * Throws error when cache record is null or undefined.
     */
    ClientAuthError.createNullOrUndefinedCacheRecord = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);
    };
    /**
     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object
     */
    ClientAuthError.createInvalidCacheEnvironmentError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);
    };
    /**
     * Throws error when account is not found in cache.
     */
    ClientAuthError.createNoAccountFoundError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);
    };
    /**
     * Throws error if ICachePlugin not set on CacheManager.
     */
    ClientAuthError.createCachePluginError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, "" + ClientAuthErrorMessage.CachePluginError.desc);
    };
    /**
     * Throws error if crypto object not found.
     * @param operationName
     */
    ClientAuthError.createNoCryptoObjectError = function (operationName) {
        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, "" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);
    };
    /**
     * Throws error if cache type is invalid.
     */
    ClientAuthError.createInvalidCacheTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, "" + ClientAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Throws error if unexpected account type.
     */
    ClientAuthError.createUnexpectedAccountTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, "" + ClientAuthErrorMessage.unexpectedAccountType.desc);
    };
    /**
     * Throws error if unexpected credential type.
     */
    ClientAuthError.createUnexpectedCredentialTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, "" + ClientAuthErrorMessage.unexpectedCredentialType.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */
    ClientAuthError.createInvalidAssertionError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, "" + ClientAuthErrorMessage.invalidAssertion.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */
    ClientAuthError.createInvalidCredentialError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, "" + ClientAuthErrorMessage.invalidClientCredential.desc);
    };
    /**
     * Throws error if token cannot be retrieved from cache due to refresh being required.
     */
    ClientAuthError.createRefreshRequiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);
    };
    /**
     * Throws error if the user defined timeout is reached.
     */
    ClientAuthError.createUserTimeoutReachedError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);
    };
    /*
     * Throws error if token claims are not populated for a signed jwt generation
     */
    ClientAuthError.createTokenClaimsRequiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);
    };
    /**
     * Throws error when the authorization code is missing from the server response
     */
    ClientAuthError.createNoAuthCodeInServerResponseError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);
    };
    return ClientAuthError;
}(AuthError));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * @hidden
 */
var StringUtils = /** @class */ (function () {
    function StringUtils() {
    }
    /**
     * decode a JWT
     *
     * @param authToken
     */
    StringUtils.decodeAuthToken = function (authToken) {
        if (StringUtils.isEmpty(authToken)) {
            throw ClientAuthError.createTokenNullOrEmptyError(authToken);
        }
        var tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
        var matches = tokenPartsRegex.exec(authToken);
        if (!matches || matches.length < 4) {
            throw ClientAuthError.createTokenParsingError("Given token is malformed: " + JSON.stringify(authToken));
        }
        var crackedToken = {
            header: matches[1],
            JWSPayload: matches[2],
            JWSSig: matches[3]
        };
        return crackedToken;
    };
    /**
     * Check if a string is empty.
     *
     * @param str
     */
    StringUtils.isEmpty = function (str) {
        return (typeof str === "undefined" || !str || 0 === str.length);
    };
    /**
     * Check if stringified object is empty
     * @param strObj
     */
    StringUtils.isEmptyObj = function (strObj) {
        if (strObj && !StringUtils.isEmpty(strObj)) {
            try {
                var obj = JSON.parse(strObj);
                return Object.keys(obj).length === 0;
            }
            catch (e) { }
        }
        return true;
    };
    StringUtils.startsWith = function (str, search) {
        return str.indexOf(search) === 0;
    };
    StringUtils.endsWith = function (str, search) {
        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));
    };
    /**
     * Parses string into an object.
     *
     * @param query
     */
    StringUtils.queryStringToObject = function (query) {
        var match; // Regex for replacing addition symbol with a space
        var pl = /\+/g;
        var search = /([^&=]+)=([^&]*)/g;
        var decode = function (s) { return decodeURIComponent(decodeURIComponent(s.replace(pl, " "))); };
        var obj = {};
        match = search.exec(query);
        while (match) {
            obj[decode(match[1])] = decode(match[2]);
            match = search.exec(query);
        }
        return obj;
    };
    /**
     * Trims entries in an array.
     *
     * @param arr
     */
    StringUtils.trimArrayEntries = function (arr) {
        return arr.map(function (entry) { return entry.trim(); });
    };
    /**
     * Removes empty strings from array
     * @param arr
     */
    StringUtils.removeEmptyStringsFromArray = function (arr) {
        return arr.filter(function (entry) {
            return !StringUtils.isEmpty(entry);
        });
    };
    /**
     * Attempts to parse a string into JSON
     * @param str
     */
    StringUtils.jsonParseHelper = function (str) {
        try {
            return JSON.parse(str);
        }
        catch (e) {
            return null;
        }
    };
    /**
     * Tests if a given string matches a given pattern, with support for wildcards and queries.
     * @param pattern Wildcard pattern to string match. Supports "*" for wildcards and "?" for queries
     * @param input String to match against
     */
    StringUtils.matchPattern = function (pattern, input) {
        /**
         * Wildcard support: https://stackoverflow.com/a/3117248/4888559
         * Queries: replaces "?" in string with escaped "\?" for regex test
         */
        var regex = new RegExp(pattern.replace(/\*/g, "[^ ]*").replace(/\?/g, "\\\?"));
        return regex.test(input);
    };
    return StringUtils;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Log message level.
 */
exports.LogLevel = void 0;
(function (LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warning"] = 1] = "Warning";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    LogLevel[LogLevel["Trace"] = 4] = "Trace";
})(exports.LogLevel || (exports.LogLevel = {}));
/**
 * Class which facilitates logging of messages to a specific place.
 */
var Logger = /** @class */ (function () {
    function Logger(loggerOptions, packageName, packageVersion) {
        // Current log level, defaults to info.
        this.level = exports.LogLevel.Info;
        var defaultLoggerCallback = function () { };
        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;
        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;
        this.level = loggerOptions.logLevel || exports.LogLevel.Info;
        this.packageName = packageName || Constants.EMPTY_STRING;
        this.packageVersion = packageVersion || Constants.EMPTY_STRING;
    }
    /**
     * Create new Logger with existing configurations.
     */
    Logger.prototype.clone = function (packageName, packageVersion) {
        return new Logger({ loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level }, packageName, packageVersion);
    };
    /**
     * Log message with required options.
     */
    Logger.prototype.logMessage = function (logMessage, options) {
        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {
            return;
        }
        var timestamp = new Date().toUTCString();
        var logHeader = StringUtils.isEmpty(this.correlationId) ? "[" + timestamp + "] : " : "[" + timestamp + "] : [" + this.correlationId + "]";
        var log = logHeader + " : " + this.packageName + "@" + this.packageVersion + " : " + exports.LogLevel[options.logLevel] + " - " + logMessage;
        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": ""}${options.context ? `:${options.context}` : ""}`)(logMessage);
        this.executeCallback(options.logLevel, log, options.containsPii || false);
    };
    /**
     * Execute callback with message.
     */
    Logger.prototype.executeCallback = function (level, message, containsPii) {
        if (this.localCallback) {
            this.localCallback(level, message, containsPii);
        }
    };
    /**
     * Logs error messages.
     */
    Logger.prototype.error = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Error,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs error messages with PII.
     */
    Logger.prototype.errorPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Error,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages.
     */
    Logger.prototype.warning = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Warning,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages with PII.
     */
    Logger.prototype.warningPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Warning,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages.
     */
    Logger.prototype.info = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Info,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages with PII.
     */
    Logger.prototype.infoPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Info,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages.
     */
    Logger.prototype.verbose = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Verbose,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages with PII.
     */
    Logger.prototype.verbosePii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Verbose,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs trace messages.
     */
    Logger.prototype.trace = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Trace,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs trace messages with PII.
     */
    Logger.prototype.tracePii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Trace,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Returns whether PII Logging is enabled or not.
     */
    Logger.prototype.isPiiLoggingEnabled = function () {
        return this.piiLoggingEnabled || false;
    };
    return Logger;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */
/* eslint-disable header/header */
var name$1 = "@azure/msal-common";
var version$1 = "4.3.0";

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc
 *
 * Key:Value Schema:
 *
 * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      oboAssertion: access token passed in as part of OBO request
 * }
 */
var CredentialEntity = /** @class */ (function () {
    function CredentialEntity() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */
    CredentialEntity.prototype.generateAccountId = function () {
        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);
    };
    /**
     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>
     */
    CredentialEntity.prototype.generateCredentialId = function () {
        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);
    };
    /**
     * Generate target key component as per schema: <target>
     */
    CredentialEntity.prototype.generateTarget = function () {
        return CredentialEntity.generateTargetForCacheKey(this.target);
    };
    /**
     * generates credential key
     */
    CredentialEntity.prototype.generateCredentialKey = function () {
        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId);
    };
    /**
     * returns the type of the cache (in this case credential)
     */
    CredentialEntity.prototype.generateType = function () {
        switch (this.credentialType) {
            case CredentialType.ID_TOKEN:
                return CacheType.ID_TOKEN;
            case CredentialType.ACCESS_TOKEN:
                return CacheType.ACCESS_TOKEN;
            case CredentialType.REFRESH_TOKEN:
                return CacheType.REFRESH_TOKEN;
            default: {
                throw ClientAuthError.createUnexpectedCredentialTypeError();
            }
        }
    };
    /**
     * helper function to return `CredentialType`
     * @param key
     */
    CredentialEntity.getCredentialType = function (key) {
        // First keyword search will match all "AccessToken" and "AccessToken_With_AuthScheme" credentials
        if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {
            // Perform second search to differentiate between "AccessToken" and "AccessToken_With_AuthScheme" credential types
            if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {
                return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
            }
            return CredentialType.ACCESS_TOKEN;
        }
        else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {
            return CredentialType.ID_TOKEN;
        }
        else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {
            return CredentialType.REFRESH_TOKEN;
        }
        return Constants.NOT_DEFINED;
    };
    /**
     * generates credential key
     */
    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId) {
        var credentialKey = [
            this.generateAccountIdForCacheKey(homeAccountId, environment),
            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),
            this.generateTargetForCacheKey(target),
        ];
        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * generates Account Id for keys
     * @param homeAccountId
     * @param environment
     */
    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {
        var accountId = [homeAccountId, environment];
        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generates Credential Id for keys
     * @param credentialType
     * @param realm
     * @param clientId
     * @param familyId
     */
    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {
        var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN
            ? familyId || clientId
            : clientId;
        var credentialId = [
            credentialType,
            clientOrFamilyId,
            realm || "",
        ];
        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate target key component as per schema: <target>
     */
    CredentialEntity.generateTargetForCacheKey = function (scopes) {
        return (scopes || "").toLowerCase();
    };
    return CredentialEntity;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
 */
var ClientConfigurationErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    claimsRequestParsingError: {
        code: "claims_request_parsing_error",
        desc: "Could not parse the given claims request object."
    },
    authorityUriInsecure: {
        code: "authority_uri_insecure",
        desc: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"
    },
    urlParseError: {
        code: "url_parse_error",
        desc: "URL could not be parsed into appropriate segments."
    },
    urlEmptyError: {
        code: "empty_url_error",
        desc: "URL was empty or null."
    },
    emptyScopesError: {
        code: "empty_input_scopes_error",
        desc: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."
    },
    nonArrayScopesError: {
        code: "nonarray_input_scopes_error",
        desc: "Scopes cannot be passed as non-array."
    },
    clientIdSingleScopeError: {
        code: "clientid_input_scopes_error",
        desc: "Client ID can only be provided as a single scope."
    },
    invalidPrompt: {
        code: "invalid_prompt_value",
        desc: "Supported prompt values are 'login', 'select_account', 'consent' and 'none'.  Please see here for valid configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options",
    },
    invalidClaimsRequest: {
        code: "invalid_claims",
        desc: "Given claims parameter must be a stringified JSON object."
    },
    tokenRequestEmptyError: {
        code: "token_request_empty",
        desc: "Token request was empty and not found in cache."
    },
    logoutRequestEmptyError: {
        code: "logout_request_empty",
        desc: "The logout request was null or undefined."
    },
    invalidCodeChallengeMethod: {
        code: "invalid_code_challenge_method",
        desc: "code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\"."
    },
    invalidCodeChallengeParams: {
        code: "pkce_params_missing",
        desc: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"
    },
    invalidCloudDiscoveryMetadata: {
        code: "invalid_cloud_discovery_metadata",
        desc: "Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields"
    },
    invalidAuthorityMetadata: {
        code: "invalid_authority_metadata",
        desc: "Invalid authorityMetadata provided. Must by a JSON object containing authorization_endpoint, token_endpoint, end_session_endpoint, issuer fields."
    },
    untrustedAuthority: {
        code: "untrusted_authority",
        desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."
    }
};
/**
 * Error thrown when there is an error in configuration of the MSAL.js library.
 */
var ClientConfigurationError = /** @class */ (function (_super) {
    __extends(ClientConfigurationError, _super);
    function ClientConfigurationError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientConfigurationError";
        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */
    ClientConfigurationError.createRedirectUriEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */
    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the claims request could not be successfully parsed
     */
    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
    };
    /**
     * Creates an error thrown if authority uri is given an insecure protocol.
     * @param urlString
     */
    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + " Given URI: " + urlString);
    };
    /**
     * Creates an error thrown if URL string does not parse into separate segments.
     * @param urlString
     */
    ClientConfigurationError.createUrlParseError = function (urlParseError) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + " Given Error: " + urlParseError);
    };
    /**
     * Creates an error thrown if URL string is empty or null.
     * @param urlString
     */
    ClientConfigurationError.createUrlEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);
    };
    /**
     * Error thrown when scopes are not an array
     * @param inputScopes
     */
    ClientConfigurationError.createScopesNonArrayError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopesError.code, ClientConfigurationErrorMessage.nonArrayScopesError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when scopes are empty.
     * @param scopesValue
     */
    ClientConfigurationError.createEmptyScopesArrayError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, ClientConfigurationErrorMessage.emptyScopesError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when client id scope is not provided as single scope.
     * @param inputScopes
     */
    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when prompt is not an allowed type.
     * @param promptValue
     */
    ClientConfigurationError.createInvalidPromptError = function (promptValue) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
    };
    /**
     * Creates error thrown when claims parameter is not a stringified JSON object
     */
    ClientConfigurationError.createInvalidClaimsRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */
    ClientConfigurationError.createEmptyLogoutRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */
    ClientConfigurationError.createEmptyTokenRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);
    };
    /**
     * Throws error when an invalid code_challenge_method is passed by the user
     */
    ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);
    };
    /**
     * Throws error when both params: code_challenge and code_challenge_method are not passed together
     */
    ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */
    ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */
    ClientConfigurationError.createInvalidAuthorityMetadataError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);
    };
    /**
     * Throws error when provided authority is not a member of the trusted host list
     */
    ClientConfigurationError.createUntrustedAuthorityError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);
    };
    return ClientConfigurationError;
}(ClientAuthError));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
 * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
 * to ensure uniqueness of strings.
 */
var ScopeSet = /** @class */ (function () {
    function ScopeSet(inputScopes) {
        var _this = this;
        // Filter empty string and null/undefined array items
        var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];
        var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];
        // Validate and filter scopes (validate function throws if validation fails)
        this.validateInputScopes(filteredInput);
        this.scopes = new Set(); // Iterator in constructor not supported by IE11
        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });
    }
    /**
     * Factory method to create ScopeSet from space-delimited string
     * @param inputScopeString
     * @param appClientId
     * @param scopesRequired
     */
    ScopeSet.fromString = function (inputScopeString) {
        inputScopeString = inputScopeString || "";
        var inputScopes = inputScopeString.split(" ");
        return new ScopeSet(inputScopes);
    };
    /**
     * Used to validate the scopes input parameter requested  by the developer.
     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
     */
    ScopeSet.prototype.validateInputScopes = function (inputScopes) {
        // Check if scopes are required but not given or is an empty array
        if (!inputScopes || inputScopes.length < 1) {
            throw ClientConfigurationError.createEmptyScopesArrayError(inputScopes);
        }
    };
    /**
     * Check if a given scope is present in this set of scopes.
     * @param scope
     */
    ScopeSet.prototype.containsScope = function (scope) {
        var lowerCaseScopes = this.printScopesLowerCase().split(" ");
        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);
        // compare lowercase scopes
        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
    };
    /**
     * Check if a set of scopes is present in this set of scopes.
     * @param scopeSet
     */
    ScopeSet.prototype.containsScopeSet = function (scopeSet) {
        var _this = this;
        if (!scopeSet || scopeSet.scopes.size <= 0) {
            return false;
        }
        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));
    };
    /**
     * Check if set of scopes contains only the defaults
     */
    ScopeSet.prototype.containsOnlyOIDCScopes = function () {
        var _this = this;
        var defaultScopeCount = 0;
        OIDC_SCOPES.forEach(function (defaultScope) {
            if (_this.containsScope(defaultScope)) {
                defaultScopeCount += 1;
            }
        });
        return this.scopes.size === defaultScopeCount;
    };
    /**
     * Appends single scope if passed
     * @param newScope
     */
    ScopeSet.prototype.appendScope = function (newScope) {
        if (!StringUtils.isEmpty(newScope)) {
            this.scopes.add(newScope.trim());
        }
    };
    /**
     * Appends multiple scopes if passed
     * @param newScopes
     */
    ScopeSet.prototype.appendScopes = function (newScopes) {
        var _this = this;
        try {
            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });
        }
        catch (e) {
            throw ClientAuthError.createAppendScopeSetError(e);
        }
    };
    /**
     * Removes element from set of scopes.
     * @param scope
     */
    ScopeSet.prototype.removeScope = function (scope) {
        if (StringUtils.isEmpty(scope)) {
            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);
        }
        this.scopes.delete(scope.trim());
    };
    /**
     * Removes default scopes from set of scopes
     * Primarily used to prevent cache misses if the default scopes are not returned from the server
     */
    ScopeSet.prototype.removeOIDCScopes = function () {
        var _this = this;
        OIDC_SCOPES.forEach(function (defaultScope) {
            _this.scopes.delete(defaultScope);
        });
    };
    /**
     * Combines an array of scopes with the current set of scopes.
     * @param otherScopes
     */
    ScopeSet.prototype.unionScopeSets = function (otherScopes) {
        if (!otherScopes) {
            throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);
        }
        var unionScopes = new Set(); // Iterator in constructor not supported in IE11
        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
        return unionScopes;
    };
    /**
     * Check if scopes intersect between this set and another.
     * @param otherScopes
     */
    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {
        if (!otherScopes) {
            throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);
        }
        // Do not allow OIDC scopes to be the only intersecting scopes
        if (!otherScopes.containsOnlyOIDCScopes()) {
            otherScopes.removeOIDCScopes();
        }
        var unionScopes = this.unionScopeSets(otherScopes);
        var sizeOtherScopes = otherScopes.getScopeCount();
        var sizeThisScopes = this.getScopeCount();
        var sizeUnionScopes = unionScopes.size;
        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);
    };
    /**
     * Returns size of set of scopes.
     */
    ScopeSet.prototype.getScopeCount = function () {
        return this.scopes.size;
    };
    /**
     * Returns the scopes as an array of string values
     */
    ScopeSet.prototype.asArray = function () {
        var array = [];
        this.scopes.forEach(function (val) { return array.push(val); });
        return array;
    };
    /**
     * Prints scopes into a space-delimited string
     */
    ScopeSet.prototype.printScopes = function () {
        if (this.scopes) {
            var scopeArr = this.asArray();
            return scopeArr.join(" ");
        }
        return "";
    };
    /**
     * Prints scopes into a space-delimited lower-case string (used for caching)
     */
    ScopeSet.prototype.printScopesLowerCase = function () {
        return this.printScopes().toLowerCase();
    };
    return ScopeSet;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Function to build a client info object
 * @param rawClientInfo
 * @param crypto
 */
function buildClientInfo(rawClientInfo, crypto) {
    if (StringUtils.isEmpty(rawClientInfo)) {
        throw ClientAuthError.createClientInfoEmptyError();
    }
    try {
        var decodedClientInfo = crypto.base64Decode(rawClientInfo);
        return JSON.parse(decodedClientInfo);
    }
    catch (e) {
        throw ClientAuthError.createClientInfoDecodingError(e);
    }
}

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Authority types supported by MSAL.
 */
var AuthorityType;
(function (AuthorityType) {
    AuthorityType[AuthorityType["Default"] = 0] = "Default";
    AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
})(AuthorityType || (AuthorityType = {}));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
 *
 * Key : Value Schema
 *
 * Key: <home_account_id>-<environment>-<realm*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
 *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
 *      authorityType: Accounts authority type as a string
 *      name: Full name for the account, including given name and family name,
 *      clientInfo: Full base64 encoded client info received from ESTS
 *      lastModificationTime: last time this entity was modified in the cache
 *      lastModificationApp:
 *      oboAssertion: access token passed in as part of OBO request
 *      idTokenClaims: Object containing claims parsed from ID token
 * }
 */
var AccountEntity = /** @class */ (function () {
    function AccountEntity() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */
    AccountEntity.prototype.generateAccountId = function () {
        var accountId = [this.homeAccountId, this.environment];
        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>
     */
    AccountEntity.prototype.generateAccountKey = function () {
        return AccountEntity.generateAccountCacheKey({
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            localAccountId: this.localAccountId
        });
    };
    /**
     * returns the type of the cache (in this case account)
     */
    AccountEntity.prototype.generateType = function () {
        switch (this.authorityType) {
            case CacheAccountType.ADFS_ACCOUNT_TYPE:
                return CacheType.ADFS;
            case CacheAccountType.MSAV1_ACCOUNT_TYPE:
                return CacheType.MSA;
            case CacheAccountType.MSSTS_ACCOUNT_TYPE:
                return CacheType.MSSTS;
            case CacheAccountType.GENERIC_ACCOUNT_TYPE:
                return CacheType.GENERIC;
            default: {
                throw ClientAuthError.createUnexpectedAccountTypeError();
            }
        }
    };
    /**
     * Returns the AccountInfo interface for this account.
     */
    AccountEntity.prototype.getAccountInfo = function () {
        return {
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            localAccountId: this.localAccountId,
            name: this.name,
            idTokenClaims: this.idTokenClaims
        };
    };
    /**
     * Generates account key from interface
     * @param accountInterface
     */
    AccountEntity.generateAccountCacheKey = function (accountInterface) {
        var accountKey = [
            accountInterface.homeAccountId,
            accountInterface.environment || "",
            accountInterface.tenantId || "",
        ];
        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
     * @param clientInfo
     * @param authority
     * @param idToken
     * @param policy
     */
    AccountEntity.createAccount = function (clientInfo, homeAccountId, authority, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {
        var _a, _b, _c, _d, _e, _f;
        var account = new AccountEntity();
        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;
        account.clientInfo = clientInfo;
        account.homeAccountId = homeAccountId;
        var env = authority.getPreferredCache();
        if (StringUtils.isEmpty(env)) {
            throw ClientAuthError.createInvalidCacheEnvironmentError();
        }
        account.environment = env;
        // non AAD scenarios can have empty realm
        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || "";
        account.oboAssertion = oboAssertion;
        if (idToken) {
            account.idTokenClaims = idToken.claims;
            // How do you account for MSA CID here?
            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || "";
            /*
             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.
             * This field should not be relied upon if a custom policy is configured to return more than 1 email.
             */
            account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : "");
            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;
        }
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        return account;
    };
    /**
     * Builds non-AAD/ADFS account.
     * @param authority
     * @param idToken
     */
    AccountEntity.createGenericAccount = function (authority, homeAccountId, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {
        var _a, _b, _c, _d;
        var account = new AccountEntity();
        account.authorityType = (authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;
        account.homeAccountId = homeAccountId;
        // non AAD scenarios can have empty realm
        account.realm = "";
        account.oboAssertion = oboAssertion;
        var env = authority.getPreferredCache();
        if (StringUtils.isEmpty(env)) {
            throw ClientAuthError.createInvalidCacheEnvironmentError();
        }
        if (idToken) {
            // How do you account for MSA CID here?
            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || "";
            // upn claim for most ADFS scenarios
            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || "";
            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || "";
            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;
        }
        account.environment = env;
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        /*
         * add uniqueName to claims
         * account.name = idToken.claims.uniqueName;
         */
        return account;
    };
    /**
     * Generate HomeAccountId from server response
     * @param serverClientInfo
     * @param authType
     */
    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {
        var _a;
        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;
        // since ADFS does not have tid and does not set client_info
        if (authType === AuthorityType.Adfs) {
            return accountId;
        }
        // for cases where there is clientInfo
        if (serverClientInfo) {
            var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);
            if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {
                return "" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;
            }
        }
        // default to "sub" claim
        logger.verbose("No client info in response");
        return accountId;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AccountEntity.isAccountEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("localAccountId") &&
            entity.hasOwnProperty("username") &&
            entity.hasOwnProperty("authorityType"));
    };
    /**
     * Helper function to determine whether 2 accountInfo objects represent the same account
     * @param accountA
     * @param accountB
     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality
     */
    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {
        if (!accountA || !accountB) {
            return false;
        }
        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false
        if (compareClaims) {
            var accountAClaims = (accountA.idTokenClaims || {});
            var accountBClaims = (accountB.idTokenClaims || {});
            // issued at timestamp and nonce are expected to change each time a new id token is acquired
            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&
                (accountAClaims.nonce === accountBClaims.nonce);
        }
        return (accountA.homeAccountId === accountB.homeAccountId) &&
            (accountA.localAccountId === accountB.localAccountId) &&
            (accountA.username === accountB.username) &&
            (accountA.tenantId === accountB.tenantId) &&
            (accountA.environment === accountB.environment) &&
            claimsMatch;
    };
    return AccountEntity;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * JWT Token representation class. Parses token string and generates claims object.
 */
var AuthToken = /** @class */ (function () {
    function AuthToken(rawToken, crypto) {
        if (StringUtils.isEmpty(rawToken)) {
            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);
        }
        this.rawToken = rawToken;
        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);
    }
    /**
     * Extract token by decoding the rawToken
     *
     * @param encodedToken
     */
    AuthToken.extractTokenClaims = function (encodedToken, crypto) {
        var decodedToken = StringUtils.decodeAuthToken(encodedToken);
        // token will be decoded to get the username
        try {
            var base64TokenPayload = decodedToken.JWSPayload;
            // base64Decode() should throw an error if there is an issue
            var base64Decoded = crypto.base64Decode(base64TokenPayload);
            return JSON.parse(base64Decoded);
        }
        catch (err) {
            throw ClientAuthError.createTokenParsingError(err);
        }
    };
    return AuthToken;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
 */
var CacheManager = /** @class */ (function () {
    function CacheManager(clientId, cryptoImpl) {
        this.clientId = clientId;
        this.cryptoImpl = cryptoImpl;
    }
    /**
     * Returns all accounts in cache
     */
    CacheManager.prototype.getAllAccounts = function () {
        var _this = this;
        var currentAccounts = this.getAccountsFilteredBy();
        var accountValues = Object.keys(currentAccounts).map(function (accountKey) { return currentAccounts[accountKey]; });
        var numAccounts = accountValues.length;
        if (numAccounts < 1) {
            return [];
        }
        else {
            var allAccounts = accountValues.map(function (value) {
                var accountEntity = CacheManager.toObject(new AccountEntity(), value);
                var accountInfo = accountEntity.getAccountInfo();
                var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);
                if (idToken && !accountInfo.idTokenClaims) {
                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, _this.cryptoImpl).claims;
                }
                return accountInfo;
            });
            return allAccounts;
        }
    };
    /**
     * saves a cache record
     * @param cacheRecord
     */
    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {
        if (!cacheRecord) {
            throw ClientAuthError.createNullOrUndefinedCacheRecord();
        }
        if (!!cacheRecord.account) {
            this.setAccount(cacheRecord.account);
        }
        if (!!cacheRecord.idToken) {
            this.setIdTokenCredential(cacheRecord.idToken);
        }
        if (!!cacheRecord.accessToken) {
            this.saveAccessToken(cacheRecord.accessToken);
        }
        if (!!cacheRecord.refreshToken) {
            this.setRefreshTokenCredential(cacheRecord.refreshToken);
        }
        if (!!cacheRecord.appMetadata) {
            this.setAppMetadata(cacheRecord.appMetadata);
        }
    };
    /**
     * saves access token credential
     * @param credential
     */
    CacheManager.prototype.saveAccessToken = function (credential) {
        var _this = this;
        var currentTokenCache = this.getCredentialsFilteredBy({
            clientId: credential.clientId,
            credentialType: credential.credentialType,
            environment: credential.environment,
            homeAccountId: credential.homeAccountId,
            realm: credential.realm,
        });
        var currentScopes = ScopeSet.fromString(credential.target);
        var currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) { return currentTokenCache.accessTokens[key]; });
        if (currentAccessTokens) {
            currentAccessTokens.forEach(function (tokenEntity) {
                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);
                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {
                    _this.removeCredential(tokenEntity);
                }
            });
        }
        this.setAccessTokenCredential(credential);
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */
    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {
        return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : "", accountFilter ? accountFilter.environment : "", accountFilter ? accountFilter.realm : "");
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */
    CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAccounts = {};
        allCacheKeys.forEach(function (cacheKey) {
            var entity = _this.getAccount(cacheKey);
            if (!entity) {
                return;
            }
            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {
                return;
            }
            if (!!environment && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!!realm && !_this.matchRealm(entity, realm)) {
                return;
            }
            matchingAccounts[cacheKey] = entity;
        });
        return matchingAccounts;
    };
    /**
     * retrieve credentails matching all provided filters; if no filter is set, get all credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     */
    CacheManager.prototype.getCredentialsFilteredBy = function (filter) {
        return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion);
    };
    /**
     * Support function to help match credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     */
    CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingCredentials = {
            idTokens: {},
            accessTokens: {},
            refreshTokens: {},
        };
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-credential type cache entities
            var credType = CredentialEntity.getCredentialType(cacheKey);
            if (credType === Constants.NOT_DEFINED) {
                return;
            }
            // Attempt retrieval
            var entity = _this.getSpecificCredential(cacheKey, credType);
            if (!entity) {
                return;
            }
            if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {
                return;
            }
            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {
                return;
            }
            if (!!environment && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!!realm && !_this.matchRealm(entity, realm)) {
                return;
            }
            if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {
                return;
            }
            if (!!clientId && !_this.matchClientId(entity, clientId)) {
                return;
            }
            if (!!familyId && !_this.matchFamilyId(entity, familyId)) {
                return;
            }
            /*
             * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
             * Resource specific refresh tokens case will be added when the support is deemed necessary
             */
            if (!!target && !_this.matchTarget(entity, target)) {
                return;
            }
            switch (credType) {
                case CredentialType.ID_TOKEN:
                    matchingCredentials.idTokens[cacheKey] = entity;
                    break;
                case CredentialType.ACCESS_TOKEN:
                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                    matchingCredentials.accessTokens[cacheKey] = entity;
                    break;
                case CredentialType.REFRESH_TOKEN:
                    matchingCredentials.refreshTokens[cacheKey] = entity;
                    break;
            }
        });
        return matchingCredentials;
    };
    /**
     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata
     * @param filter
     */
    CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {
        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);
    };
    /**
     * Support function to help match appMetadata
     * @param environment
     * @param clientId
     */
    CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAppMetadata = {};
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-appMetadata type cache entities
            if (!_this.isAppMetadata(cacheKey)) {
                return;
            }
            // Attempt retrieval
            var entity = _this.getAppMetadata(cacheKey);
            if (!entity) {
                return;
            }
            if (!!environment && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!!clientId && !_this.matchClientId(entity, clientId)) {
                return;
            }
            matchingAppMetadata[cacheKey] = entity;
        });
        return matchingAppMetadata;
    };
    /**
     * retrieve authorityMetadata that contains a matching alias
     * @param filter
     */
    CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {
        var _this = this;
        var allCacheKeys = this.getAuthorityMetadataKeys();
        var matchedEntity = null;
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-authorityMetadata type cache entities
            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {
                return;
            }
            // Attempt retrieval
            var entity = _this.getAuthorityMetadata(cacheKey);
            if (!entity) {
                return;
            }
            if (entity.aliases.indexOf(host) === -1) {
                return;
            }
            matchedEntity = entity;
        });
        return matchedEntity;
    };
    /**
     * Removes all accounts and related tokens from cache.
     */
    CacheManager.prototype.removeAllAccounts = function () {
        var _this = this;
        var allCacheKeys = this.getKeys();
        allCacheKeys.forEach(function (cacheKey) {
            var entity = _this.getAccount(cacheKey);
            if (!entity) {
                return;
            }
            _this.removeAccount(cacheKey);
        });
        return true;
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
    CacheManager.prototype.removeAccount = function (accountKey) {
        var account = this.getAccount(accountKey);
        if (!account) {
            throw ClientAuthError.createNoAccountFoundError();
        }
        return (this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
    CacheManager.prototype.removeAccountContext = function (account) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var accountId = account.generateAccountId();
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-credential type cache entities
            var credType = CredentialEntity.getCredentialType(cacheKey);
            if (credType === Constants.NOT_DEFINED) {
                return;
            }
            var cacheEntity = _this.getSpecificCredential(cacheKey, credType);
            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {
                _this.removeCredential(cacheEntity);
            }
        });
        return true;
    };
    /**
     * returns a boolean if the given credential is removed
     * @param credential
     */
    CacheManager.prototype.removeCredential = function (credential) {
        var key = credential.generateCredentialKey();
        return this.removeItem(key, CacheSchemaType.CREDENTIAL);
    };
    /**
     * Removes all app metadata objects from cache.
     */
    CacheManager.prototype.removeAppMetadata = function () {
        var _this = this;
        var allCacheKeys = this.getKeys();
        allCacheKeys.forEach(function (cacheKey) {
            if (_this.isAppMetadata(cacheKey)) {
                _this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);
            }
        });
        return true;
    };
    /**
     * Retrieve the cached credentials into a cacherecord
     * @param account
     * @param clientId
     * @param scopes
     * @param environment
     * @param authScheme
     */
    CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment, authScheme) {
        var cachedAccount = this.readAccountFromCache(account);
        var cachedIdToken = this.readIdTokenFromCache(clientId, account);
        var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);
        var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);
        var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);
        if (cachedAccount && cachedIdToken) {
            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;
        }
        return {
            account: cachedAccount,
            idToken: cachedIdToken,
            accessToken: cachedAccessToken,
            refreshToken: cachedRefreshToken,
            appMetadata: cachedAppMetadata,
        };
    };
    /**
     * Retrieve AccountEntity from cache
     * @param account
     */
    CacheManager.prototype.readAccountFromCache = function (account) {
        var accountKey = AccountEntity.generateAccountCacheKey(account);
        return this.getAccount(accountKey);
    };
    /**
     * Retrieve IdTokenEntity from cache
     * @param clientId
     * @param account
     * @param inputRealm
     */
    CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {
        var idTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: CredentialType.ID_TOKEN,
            clientId: clientId,
            realm: account.tenantId,
        };
        var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);
        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });
        var numIdTokens = idTokens.length;
        if (numIdTokens < 1) {
            return null;
        }
        else if (numIdTokens > 1) {
            throw ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return idTokens[0];
    };
    /**
     * Retrieve AccessTokenEntity from cache
     * @param clientId
     * @param account
     * @param scopes
     * @param authScheme
     */
    CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes, authScheme) {
        var credentialType = (authScheme === exports.AuthenticationScheme.POP) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;
        var accessTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: credentialType,
            clientId: clientId,
            realm: account.tenantId,
            target: scopes.printScopesLowerCase(),
        };
        var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);
        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
        var numAccessTokens = accessTokens.length;
        if (numAccessTokens < 1) {
            return null;
        }
        else if (numAccessTokens > 1) {
            throw ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return accessTokens[0];
    };
    /**
     * Helper to retrieve the appropriate refresh token from cache
     * @param clientId
     * @param account
     * @param familyRT
     */
    CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {
        var id = familyRT ? THE_FAMILY_ID : undefined;
        var refreshTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: CredentialType.REFRESH_TOKEN,
            clientId: clientId,
            familyId: id
        };
        var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);
        var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) { return credentialCache.refreshTokens[key]; });
        var numRefreshTokens = refreshTokens.length;
        if (numRefreshTokens < 1) {
            return null;
        }
        // address the else case after remove functions address environment aliases
        return refreshTokens[0];
    };
    /**
     * Retrieve AppMetadataEntity from cache
     */
    CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {
        var appMetadataFilter = {
            environment: environment,
            clientId: clientId,
        };
        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);
        var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });
        var numAppMetadata = appMetadataEntries.length;
        if (numAppMetadata < 1) {
            return null;
        }
        else if (numAppMetadata > 1) {
            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();
        }
        return appMetadataEntries[0];
    };
    /**
     * Return the family_id value associated  with FOCI
     * @param environment
     * @param clientId
     */
    CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {
        var appMetadata = this.readAppMetadataFromCache(environment, clientId);
        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);
    };
    /**
     * helper to match account ids
     * @param value
     * @param homeAccountId
     */
    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {
        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);
    };
    /**
     * helper to match assertion
     * @param value
     * @param oboAssertion
     */
    CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {
        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);
    };
    /**
     * helper to match environment
     * @param value
     * @param environment
     */
    CacheManager.prototype.matchEnvironment = function (entity, environment) {
        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);
        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {
            return true;
        }
        return false;
    };
    /**
     * helper to match credential type
     * @param entity
     * @param credentialType
     */
    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {
        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());
    };
    /**
     * helper to match client ids
     * @param entity
     * @param clientId
     */
    CacheManager.prototype.matchClientId = function (entity, clientId) {
        return !!(entity.clientId && clientId === entity.clientId);
    };
    /**
     * helper to match family ids
     * @param entity
     * @param familyId
     */
    CacheManager.prototype.matchFamilyId = function (entity, familyId) {
        return !!(entity.familyId && familyId === entity.familyId);
    };
    /**
     * helper to match realm
     * @param entity
     * @param realm
     */
    CacheManager.prototype.matchRealm = function (entity, realm) {
        return !!(entity.realm && realm === entity.realm);
    };
    /**
     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
     * @param entity
     * @param target
     */
    CacheManager.prototype.matchTarget = function (entity, target) {
        var isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);
        if (isNotAccessTokenCredential || !entity.target) {
            return false;
        }
        var entityScopeSet = ScopeSet.fromString(entity.target);
        var requestTargetScopeSet = ScopeSet.fromString(target);
        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {
            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes
        }
        else {
            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);
        }
        return entityScopeSet.containsScopeSet(requestTargetScopeSet);
    };
    /**
     * returns if a given cache entity is of the type appmetadata
     * @param key
     */
    CacheManager.prototype.isAppMetadata = function (key) {
        return key.indexOf(APP_METADATA) !== -1;
    };
    /**
     * returns if a given cache entity is of the type authoritymetadata
     * @param key
     */
    CacheManager.prototype.isAuthorityMetadata = function (key) {
        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;
    };
    /**
     * returns cache key used for cloud instance metadata
     */
    CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {
        return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + "-" + this.clientId + "-" + authority;
    };
    /**
     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache
     * @param key
     * @param credType
     */
    CacheManager.prototype.getSpecificCredential = function (key, credType) {
        switch (credType) {
            case CredentialType.ID_TOKEN: {
                return this.getIdTokenCredential(key);
            }
            case CredentialType.ACCESS_TOKEN:
            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {
                return this.getAccessTokenCredential(key);
            }
            case CredentialType.REFRESH_TOKEN: {
                return this.getRefreshTokenCredential(key);
            }
            default:
                return null;
        }
    };
    /**
     * Helper to convert serialized data to object
     * @param obj
     * @param json
     */
    CacheManager.toObject = function (obj, json) {
        for (var propertyName in json) {
            obj[propertyName] = json[propertyName];
        }
        return obj;
    };
    return CacheManager;
}());
var DefaultStorageClass = /** @class */ (function (_super) {
    __extends(DefaultStorageClass, _super);
    function DefaultStorageClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultStorageClass.prototype.setAccount = function () {
        var notImplErr = "Storage interface - setAccount() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAccount = function () {
        var notImplErr = "Storage interface - getAccount() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setIdTokenCredential = function () {
        var notImplErr = "Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getIdTokenCredential = function () {
        var notImplErr = "Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setAccessTokenCredential = function () {
        var notImplErr = "Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAccessTokenCredential = function () {
        var notImplErr = "Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setRefreshTokenCredential = function () {
        var notImplErr = "Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getRefreshTokenCredential = function () {
        var notImplErr = "Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setAppMetadata = function () {
        var notImplErr = "Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAppMetadata = function () {
        var notImplErr = "Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setServerTelemetry = function () {
        var notImplErr = "Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getServerTelemetry = function () {
        var notImplErr = "Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setAuthorityMetadata = function () {
        var notImplErr = "Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAuthorityMetadata = function () {
        var notImplErr = "Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {
        var notImplErr = "Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.setThrottlingCache = function () {
        var notImplErr = "Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getThrottlingCache = function () {
        var notImplErr = "Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.removeItem = function () {
        var notImplErr = "Storage interface - removeItem() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.containsKey = function () {
        var notImplErr = "Storage interface - containsKey() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getKeys = function () {
        var notImplErr = "Storage interface - getKeys() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.clear = function () {
        var notImplErr = "Storage interface - clear() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    return DefaultStorageClass;
}(CacheManager));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Token renewal offset default in seconds
var DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
var DEFAULT_SYSTEM_OPTIONS = {
    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC
};
var DEFAULT_LOGGER_IMPLEMENTATION = {
    loggerCallback: function () {
        // allow users to not set loggerCallback
    },
    piiLoggingEnabled: false,
    logLevel: exports.LogLevel.Info
};
var DEFAULT_NETWORK_IMPLEMENTATION = {
    sendGetRequestAsync: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Network interface - sendGetRequestAsync() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    sendPostRequestAsync: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Network interface - sendPostRequestAsync() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};
var DEFAULT_LIBRARY_INFO = {
    sku: Constants.SKU,
    version: version$1,
    cpu: "",
    os: ""
};
var DEFAULT_CLIENT_CREDENTIALS = {
    clientSecret: "",
    clientAssertion: undefined
};
/**
 * Function that sets the default options when not explicitly configured from app developer
 *
 * @param Configuration
 *
 * @returns Configuration
 */
function buildClientConfiguration(_a) {
    var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;
    return {
        authOptions: buildAuthOptions(userAuthOptions),
        systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),
        loggerOptions: __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption),
        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),
        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,
        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
        libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),
        serverTelemetryManager: serverTelemetryManager || null,
        persistencePlugin: persistencePlugin || null,
        serializableCache: serializableCache || null
    };
}
/**
 * Construct authoptions from the client and platform passed values
 * @param authOptions
 */
function buildAuthOptions(authOptions) {
    return __assign({ clientCapabilities: [] }, authOptions);
}

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Error thrown when there is an error with the server code, for example, unavailability.
 */
var ServerError = /** @class */ (function (_super) {
    __extends(ServerError, _super);
    function ServerError(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "ServerError";
        Object.setPrototypeOf(_this, ServerError.prototype);
        return _this;
    }
    return ServerError;
}(AuthError));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ThrottlingUtils = /** @class */ (function () {
    function ThrottlingUtils() {
    }
    /**
     * Prepares a RequestThumbprint to be stored as a key.
     * @param thumbprint
     */
    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {
        return ThrottlingConstants.THROTTLING_PREFIX + "." + JSON.stringify(thumbprint);
    };
    /**
     * Performs necessary throttling checks before a network request.
     * @param cacheManager
     * @param thumbprint
     */
    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {
        var _a;
        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);
        var value = cacheManager.getThrottlingCache(key);
        if (value) {
            if (value.throttleTime < Date.now()) {
                cacheManager.removeItem(key, CacheSchemaType.THROTTLING);
                return;
            }
            throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(" ")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);
        }
    };
    /**
     * Performs necessary throttling checks after a network request.
     * @param cacheManager
     * @param thumbprint
     * @param response
     */
    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {
        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {
            var thumbprintValue = {
                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),
                error: response.body.error,
                errorCodes: response.body.error_codes,
                errorMessage: response.body.error_description,
                subError: response.body.suberror
            };
            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);
        }
    };
    /**
     * Checks a NetworkResponse object's status codes against 429 or 5xx
     * @param response
     */
    ThrottlingUtils.checkResponseStatus = function (response) {
        return response.status === 429 || response.status >= 500 && response.status < 600;
    };
    /**
     * Checks a NetworkResponse object's RetryAfter header
     * @param response
     */
    ThrottlingUtils.checkResponseForRetryAfter = function (response) {
        if (response.headers) {
            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);
        }
        return false;
    };
    /**
     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
     * @param throttleTime
     */
    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {
        if (throttleTime <= 0) {
            throttleTime = 0;
        }
        var currentSeconds = Date.now() / 1000;
        return Math.floor(Math.min(currentSeconds + (throttleTime || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
    };
    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {
        var thumbprint = {
            clientId: clientId,
            authority: authority,
            scopes: scopes,
            homeAccountIdentifier: homeAccountIdentifier
        };
        var key = this.generateThrottlingStorageKey(thumbprint);
        return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);
    };
    return ThrottlingUtils;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var NetworkManager = /** @class */ (function () {
    function NetworkManager(networkClient, cacheManager) {
        this.networkClient = networkClient;
        this.cacheManager = cacheManager;
    }
    /**
     * Wraps sendPostRequestAsync with necessary preflight and postflight logic
     * @param thumbprint
     * @param tokenEndpoint
     * @param options
     */
    NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1 instanceof AuthError) {
                            throw e_1;
                        }
                        else {
                            throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);
                        }
                    case 4:
                        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return NetworkManager;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 */
var BaseClient = /** @class */ (function () {
    function BaseClient(configuration) {
        // Set the configuration
        this.config = buildClientConfiguration(configuration);
        // Initialize the logger
        this.logger = new Logger(this.config.loggerOptions, name$1, version$1);
        // Initialize crypto
        this.cryptoUtils = this.config.cryptoInterface;
        // Initialize storage interface
        this.cacheManager = this.config.storageInterface;
        // Set the network interface
        this.networkClient = this.config.networkInterface;
        // Set the NetworkManager
        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);
        // Set TelemetryManager
        this.serverTelemetryManager = this.config.serverTelemetryManager;
        // set Authority
        this.authority = this.config.authOptions.authority;
    }
    /**
     * Creates default headers for requests to token endpoint
     */
    BaseClient.prototype.createDefaultTokenRequestHeaders = function () {
        var headers = {};
        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;
        return headers;
    };
    /**
     * Http post to token endpoint
     * @param tokenEndpoint
     * @param queryString
     * @param headers
     * @param thumbprint
     */
    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];
                    case 1:
                        response = _a.sent();
                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {
                            // Telemetry data successfully logged by server, clear Telemetry cache
                            this.config.serverTelemetryManager.clearTelemetryCache();
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Updates the authority object of the client. Endpoint discovery must be completed.
     * @param updatedAuthority
     */
    BaseClient.prototype.updateAuthority = function (updatedAuthority) {
        if (!updatedAuthority.discoveryComplete()) {
            throw ClientAuthError.createEndpointDiscoveryIncompleteError("Updated authority has not completed endpoint discovery.");
        }
        this.authority = updatedAuthority;
    };
    return BaseClient;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Validates server consumable params from the "request" objects
 */
var RequestValidator = /** @class */ (function () {
    function RequestValidator() {
    }
    /**
     * Utility to check if the `redirectUri` in the request is a non-null value
     * @param redirectUri
     */
    RequestValidator.validateRedirectUri = function (redirectUri) {
        if (StringUtils.isEmpty(redirectUri)) {
            throw ClientConfigurationError.createRedirectUriEmptyError();
        }
    };
    /**
     * Utility to validate prompt sent by the user in the request
     * @param prompt
     */
    RequestValidator.validatePrompt = function (prompt) {
        if ([
            PromptValue.LOGIN,
            PromptValue.SELECT_ACCOUNT,
            PromptValue.CONSENT,
            PromptValue.NONE
        ].indexOf(prompt) < 0) {
            throw ClientConfigurationError.createInvalidPromptError(prompt);
        }
    };
    RequestValidator.validateClaims = function (claims) {
        try {
            JSON.parse(claims);
        }
        catch (e) {
            throw ClientConfigurationError.createInvalidClaimsRequestError();
        }
    };
    /**
     * Utility to validate code_challenge and code_challenge_method
     * @param codeChallenge
     * @param codeChallengeMethod
     */
    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {
            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
        }
        else {
            this.validateCodeChallengeMethod(codeChallengeMethod);
        }
    };
    /**
     * Utility to validate code_challenge_method
     * @param codeChallengeMethod
     */
    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {
        if ([
            CodeChallengeMethodValues.PLAIN,
            CodeChallengeMethodValues.S256
        ].indexOf(codeChallengeMethod) < 0) {
            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();
        }
    };
    /**
     * Removes unnecessary or duplicate query parameters from extraQueryParameters
     * @param request
     */
    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {
        if (!eQParams) {
            return {};
        }
        // Remove any query parameters already included in SSO params
        queryParams.forEach(function (value, key) {
            if (eQParams[key]) {
                delete eQParams[key];
            }
        });
        return eQParams;
    };
    return RequestValidator;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RequestParameterBuilder = /** @class */ (function () {
    function RequestParameterBuilder() {
        this.parameters = new Map();
    }
    /**
     * add response_type = code
     */
    RequestParameterBuilder.prototype.addResponseTypeCode = function () {
        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));
    };
    /**
     * add response_mode. defaults to query.
     * @param responseMode
     */
    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {
        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY));
    };
    /**
     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
     * @param scopeSet
     * @param addOidcScopes
     */
    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {
        if (addOidcScopes === void 0) { addOidcScopes = true; }
        var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];
        var scopeSet = new ScopeSet(requestScopes);
        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
    };
    /**
     * add clientId
     * @param clientId
     */
    RequestParameterBuilder.prototype.addClientId = function (clientId) {
        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
    };
    /**
     * add redirect_uri
     * @param redirectUri
     */
    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {
        RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add post logout redirectUri
     * @param redirectUri
     */
    RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {
        RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add id_token_hint to logout request
     * @param idTokenHint
     */
    RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {
        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));
    };
    /**
     * add domain_hint
     * @param domainHint
     */
    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {
        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
    };
    /**
     * add login_hint
     * @param loginHint
     */
    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {
        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
    };
    /**
     * add sid
     * @param sid
     */
    RequestParameterBuilder.prototype.addSid = function (sid) {
        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));
    };
    /**
     * add claims
     * @param claims
     */
    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {
        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
        RequestValidator.validateClaims(mergedClaims);
        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
    };
    /**
     * add correlationId
     * @param correlationId
     */
    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {
        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
    };
    /**
     * add library info query params
     * @param libraryInfo
     */
    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {
        // Telemetry Info
        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
    };
    /**
     * add prompt
     * @param prompt
     */
    RequestParameterBuilder.prototype.addPrompt = function (prompt) {
        RequestValidator.validatePrompt(prompt);
        this.parameters.set("" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
    };
    /**
     * add state
     * @param state
     */
    RequestParameterBuilder.prototype.addState = function (state) {
        if (!StringUtils.isEmpty(state)) {
            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));
        }
    };
    /**
     * add nonce
     * @param nonce
     */
    RequestParameterBuilder.prototype.addNonce = function (nonce) {
        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));
    };
    /**
     * add code_challenge and code_challenge_method
     * - throw if either of them are not passed
     * @param codeChallenge
     * @param codeChallengeMethod
     */
    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
        if (codeChallenge && codeChallengeMethod) {
            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
        }
        else {
            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
        }
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */
    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {
        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */
    RequestParameterBuilder.prototype.addDeviceCode = function (code) {
        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
    };
    /**
     * add the `refreshToken` passed by the user
     * @param refreshToken
     */
    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {
        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
    };
    /**
     * add the `code_verifier` passed by the user to exchange for a token
     * @param codeVerifier
     */
    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {
        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
    };
    /**
     * add client_secret
     * @param clientSecret
     */
    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {
        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
    };
    /**
     * add clientAssertion for confidential client flows
     * @param clientAssertion
     */
    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {
        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
    };
    /**
     * add clientAssertionType for confidential client flows
     * @param clientAssertionType
     */
    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {
        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
    };
    /**
     * add OBO assertion for confidential client flows
     * @param clientAssertion
     */
    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {
        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
    };
    /**
     * add grant type
     * @param grantType
     */
    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {
        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
    };
    /**
     * add grant type
     * @param grantType
     */
    RequestParameterBuilder.prototype.addGrantType = function (grantType) {
        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
    };
    /**
     * add client info
     *
     */
    RequestParameterBuilder.prototype.addClientInfo = function () {
        this.parameters.set(ClientInfo, "1");
    };
    /**
     * add extraQueryParams
     * @param eQparams
     */
    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {
        var _this = this;
        RequestValidator.sanitizeEQParams(eQparams, this.parameters);
        Object.keys(eQparams).forEach(function (key) {
            _this.parameters.set(key, eQparams[key]);
        });
    };
    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {
        var mergedClaims;
        // Parse provided claims into JSON object or initialize empty object
        if (!claims) {
            mergedClaims = {};
        }
        else {
            try {
                mergedClaims = JSON.parse(claims);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidClaimsRequestError();
            }
        }
        if (clientCapabilities && clientCapabilities.length > 0) {
            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {
                // Add access_token key to claims object
                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};
            }
            // Add xms_cc claim with provided clientCapabilities to access_token key
            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {
                values: clientCapabilities
            };
        }
        return JSON.stringify(mergedClaims);
    };
    /**
     * adds `username` for Password Grant flow
     * @param username
     */
    RequestParameterBuilder.prototype.addUsername = function (username) {
        this.parameters.set(PasswordGrantConstants.username, username);
    };
    /**
     * adds `password` for Password Grant flow
     * @param password
     */
    RequestParameterBuilder.prototype.addPassword = function (password) {
        this.parameters.set(PasswordGrantConstants.password, password);
    };
    /**
     * add pop_jwk to query params
     * @param cnfString
     */
    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {
        if (!StringUtils.isEmpty(cnfString)) {
            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.POP);
            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
        }
    };
    /**
     * add server telemetry fields
     * @param serverTelemetryManager
     */
    RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {
        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());
        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());
    };
    /**
     * Adds parameter that indicates to the server that throttling is supported
     */
    RequestParameterBuilder.prototype.addThrottling = function () {
        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);
    };
    /**
     * Utility to create a URL from the params map
     */
    RequestParameterBuilder.prototype.createQueryString = function () {
        var queryParameterArray = new Array();
        this.parameters.forEach(function (value, key) {
            queryParameterArray.push(key + "=" + value);
        });
        return queryParameterArray.join("&");
    };
    return RequestParameterBuilder;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ID_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      realm: Full tenant or organizational identifier that the account belongs to
 * }
 */
var IdTokenEntity = /** @class */ (function (_super) {
    __extends(IdTokenEntity, _super);
    function IdTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create IdTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */
    IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {
        var idTokenEntity = new IdTokenEntity();
        idTokenEntity.credentialType = CredentialType.ID_TOKEN;
        idTokenEntity.homeAccountId = homeAccountId;
        idTokenEntity.environment = environment;
        idTokenEntity.clientId = clientId;
        idTokenEntity.secret = idToken;
        idTokenEntity.realm = tenantId;
        idTokenEntity.oboAssertion = oboAssertion;
        return idTokenEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    IdTokenEntity.isIdTokenEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity["credentialType"] === CredentialType.ID_TOKEN);
    };
    return IdTokenEntity;
}(CredentialEntity));

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class which exposes functions for managing date and time operations.
 */
var TimeUtils = /** @class */ (function () {
    function TimeUtils() {
    }
    /**
     * return the current time in Unix time (seconds).
     */
    TimeUtils.nowSeconds = function () {
        // Date.getTime() returns in milliseconds.
        return Math.round(new Date().getTime() / 1000.0);
    };
    /**
     * check if a token is expired based on given UTC time in seconds.
     * @param expiresOn
     */
    TimeUtils.isTokenExpired = function (expiresOn, offset) {
        // check for access token expiry
        var expirationSec = Number(expiresOn) || 0;
        var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;
        // If current time + offset is greater than token expiration time, then token is expired.
        return (offsetCurrentTimeSec > expirationSec);
    };
    return TimeUtils;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ACCESS_TOKEN Credential Type
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      cachedAt: Absolute device time when entry was created in the cache.
 *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.
 *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.
 *      keyId: used for POP and SSH tokenTypes
 *      tokenType: Type of the token issued. Usually "Bearer"
 * }
 */
var AccessTokenEntity = /** @class */ (function (_super) {
    __extends(AccessTokenEntity, _super);
    function AccessTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create AccessTokenEntity
     * @param homeAccountId
     * @param environment
     * @param accessToken
     * @param clientId
     * @param tenantId
     * @param scopes
     * @param expiresOn
     * @param extExpiresOn
     */
    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion) {
        var _a;
        var atEntity = new AccessTokenEntity();
        atEntity.homeAccountId = homeAccountId;
        atEntity.credentialType = CredentialType.ACCESS_TOKEN;
        atEntity.secret = accessToken;
        var currentTime = TimeUtils.nowSeconds();
        atEntity.cachedAt = currentTime.toString();
        /*
         * Token expiry time.
         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.
         */
        atEntity.expiresOn = expiresOn.toString();
        atEntity.extendedExpiresOn = extExpiresOn.toString();
        if (refreshOn) {
            atEntity.refreshOn = refreshOn.toString();
        }
        atEntity.environment = environment;
        atEntity.clientId = clientId;
        atEntity.realm = tenantId;
        atEntity.target = scopes;
        atEntity.oboAssertion = oboAssertion;
        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? exports.AuthenticationScheme.BEARER : tokenType;
        // Create Access Token With AuthScheme instead of regular access token
        if (atEntity.tokenType === exports.AuthenticationScheme.POP) {
            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
            // Make sure keyId is present and add it to credential
            var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);
            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {
                throw ClientAuthError.createTokenClaimsRequiredError();
            }
            atEntity.keyId = tokenClaims.cnf.kid;
        }
        return atEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AccessTokenEntity.isAccessTokenEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity.hasOwnProperty("target") &&
            (entity["credentialType"] === CredentialType.ACCESS_TOKEN || entity["credentialType"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));
    };
    return AccessTokenEntity;
}(CredentialEntity));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * REFRESH_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--
 *
 * Value:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 * }
 */
var RefreshTokenEntity = /** @class */ (function (_super) {
    __extends(RefreshTokenEntity, _super);
    function RefreshTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create RefreshTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */
    RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {
        var rtEntity = new RefreshTokenEntity();
        rtEntity.clientId = clientId;
        rtEntity.credentialType = CredentialType.REFRESH_TOKEN;
        rtEntity.environment = environment;
        rtEntity.homeAccountId = homeAccountId;
        rtEntity.secret = refreshToken;
        rtEntity.oboAssertion = oboAssertion;
        if (familyId)
            rtEntity.familyId = familyId;
        return rtEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    RefreshTokenEntity.isRefreshTokenEntity = function (entity) {
        if (!entity) {
            return false;
        }
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity["credentialType"] === CredentialType.REFRESH_TOKEN);
    };
    return RefreshTokenEntity;
}(CredentialEntity));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * InteractionRequiredAuthErrorMessage class containing string constants used by error codes and messages.
 */
var InteractionRequiredAuthErrorMessage = [
    "interaction_required",
    "consent_required",
    "login_required"
];
var InteractionRequiredAuthSubErrorMessage = [
    "message_only",
    "additional_action",
    "basic_action",
    "user_password_expired",
    "consent_required"
];
/**
 * Error thrown when user interaction is required at the auth server.
 */
var InteractionRequiredAuthError = /** @class */ (function (_super) {
    __extends(InteractionRequiredAuthError, _super);
    function InteractionRequiredAuthError(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "InteractionRequiredAuthError";
        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
        return _this;
    }
    InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {
        var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredAuthErrorMessage.indexOf(errorCode) > -1;
        var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
        var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredAuthErrorMessage.some(function (irErrorCode) {
            return errorString.indexOf(irErrorCode) > -1;
        });
        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
    };
    return InteractionRequiredAuthError;
}(ServerError));

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var CacheRecord = /** @class */ (function () {
    function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
        this.account = accountEntity || null;
        this.idToken = idTokenEntity || null;
        this.accessToken = accessTokenEntity || null;
        this.refreshToken = refreshTokenEntity || null;
        this.appMetadata = appMetadataEntity || null;
    }
    return CacheRecord;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which provides helpers for OAuth 2.0 protocol specific values
 */
var ProtocolUtils = /** @class */ (function () {
    function ProtocolUtils() {
    }
    /**
     * Appends user state with random guid, or returns random guid.
     * @param userState
     * @param randomGuid
     */
    ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {
        var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);
        return !StringUtils.isEmpty(userState) ? "" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;
    };
    /**
     * Generates the state value used by the common library.
     * @param randomGuid
     * @param cryptoObj
     */
    ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {
        if (!cryptoObj) {
            throw ClientAuthError.createNoCryptoObjectError("generateLibraryState");
        }
        // Create a state object containing a unique id and the timestamp of the request creation
        var stateObj = {
            id: cryptoObj.createNewGuid()
        };
        if (meta) {
            stateObj.meta = meta;
        }
        var stateString = JSON.stringify(stateObj);
        return cryptoObj.base64Encode(stateString);
    };
    /**
     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
     * @param state
     * @param cryptoObj
     */
    ProtocolUtils.parseRequestState = function (cryptoObj, state) {
        if (!cryptoObj) {
            throw ClientAuthError.createNoCryptoObjectError("parseRequestState");
        }
        if (StringUtils.isEmpty(state)) {
            throw ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
        }
        try {
            // Split the state between library state and user passed state and decode them separately
            var splitState = decodeURIComponent(state).split(Constants.RESOURCE_DELIM);
            var libraryState = splitState[0];
            var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : "";
            var libraryStateString = cryptoObj.base64Decode(libraryState);
            var libraryStateObj = JSON.parse(libraryStateString);
            return {
                userRequestState: !StringUtils.isEmpty(userState) ? userState : "",
                libraryState: libraryStateObj
            };
        }
        catch (e) {
            throw ClientAuthError.createInvalidStateError(state, e);
        }
    };
    return ProtocolUtils;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Url object class which can perform various transformations on url strings.
 */
var UrlString = /** @class */ (function () {
    function UrlString(url) {
        this._urlString = url;
        if (StringUtils.isEmpty(this._urlString)) {
            // Throws error if url is empty
            throw ClientConfigurationError.createUrlEmptyError();
        }
        if (StringUtils.isEmpty(this.getHash())) {
            this._urlString = UrlString.canonicalizeUri(url);
        }
    }
    Object.defineProperty(UrlString.prototype, "urlString", {
        get: function () {
            return this._urlString;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Ensure urls are lower case and end with a / character.
     * @param url
     */
    UrlString.canonicalizeUri = function (url) {
        if (url) {
            url = url.toLowerCase();
            if (StringUtils.endsWith(url, "?")) {
                url = url.slice(0, -1);
            }
            else if (StringUtils.endsWith(url, "?/")) {
                url = url.slice(0, -2);
            }
            if (!StringUtils.endsWith(url, "/")) {
                url += "/";
            }
        }
        return url;
    };
    /**
     * Throws if urlString passed is not a valid authority URI string.
     */
    UrlString.prototype.validateAsUri = function () {
        // Attempts to parse url for uri components
        var components;
        try {
            components = this.getUrlComponents();
        }
        catch (e) {
            throw ClientConfigurationError.createUrlParseError(e);
        }
        // Throw error if URI or path segments are not parseable.
        if (!components.HostNameAndPort || !components.PathSegments) {
            throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        }
        // Throw error if uri is insecure.
        if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);
        }
    };
    /**
     * Function to remove query string params from url. Returns the new url.
     * @param url
     * @param name
     */
    UrlString.prototype.urlRemoveQueryStringParameter = function (name) {
        var regex = new RegExp("(\\&" + name + "=)[^\&]+");
        this._urlString = this.urlString.replace(regex, "");
        // name=value&
        regex = new RegExp("(" + name + "=)[^\&]+&");
        this._urlString = this.urlString.replace(regex, "");
        // name=value
        regex = new RegExp("(" + name + "=)[^\&]+");
        this._urlString = this.urlString.replace(regex, "");
        return this.urlString;
    };
    /**
     * Given a url and a query string return the url with provided query string appended
     * @param url
     * @param queryString
     */
    UrlString.appendQueryString = function (url, queryString) {
        if (StringUtils.isEmpty(queryString)) {
            return url;
        }
        return url.indexOf("?") < 0 ? url + "?" + queryString : url + "&" + queryString;
    };
    /**
     * Returns a url with the hash removed
     * @param url
     */
    UrlString.removeHashFromUrl = function (url) {
        return UrlString.canonicalizeUri(url.split("#")[0]);
    };
    /**
     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
     * @param href The url
     * @param tenantId The tenant id to replace
     */
    UrlString.prototype.replaceTenantPath = function (tenantId) {
        var urlObject = this.getUrlComponents();
        var pathArray = urlObject.PathSegments;
        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {
            pathArray[0] = tenantId;
        }
        return UrlString.constructAuthorityUriFromObject(urlObject);
    };
    /**
     * Returns the anchor part(#) of the URL
     */
    UrlString.prototype.getHash = function () {
        return UrlString.parseHash(this.urlString);
    };
    /**
     * Parses out the components from a url string.
     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
     */
    UrlString.prototype.getUrlComponents = function () {
        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
        var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
        // If url string does not match regEx, we throw an error
        var match = this.urlString.match(regEx);
        if (!match) {
            throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        }
        // Url component object
        var urlComponents = {
            Protocol: match[1],
            HostNameAndPort: match[4],
            AbsolutePath: match[5],
            QueryString: match[7]
        };
        var pathSegments = urlComponents.AbsolutePath.split("/");
        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
        urlComponents.PathSegments = pathSegments;
        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith("/")) {
            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
        }
        return urlComponents;
    };
    UrlString.getDomainFromUrl = function (url) {
        var regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
        var match = url.match(regEx);
        if (!match) {
            throw ClientConfigurationError.createUrlParseError("Given url string: " + url);
        }
        return match[2];
    };
    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {
        if (relativeUrl[0] === Constants.FORWARD_SLASH) {
            var url = new UrlString(baseUrl);
            var baseComponents = url.getUrlComponents();
            return baseComponents.Protocol + "//" + baseComponents.HostNameAndPort + relativeUrl;
        }
        return relativeUrl;
    };
    /**
     * Parses hash string from given string. Returns empty string if no hash symbol is found.
     * @param hashString
     */
    UrlString.parseHash = function (hashString) {
        var hashIndex1 = hashString.indexOf("#");
        var hashIndex2 = hashString.indexOf("#/");
        if (hashIndex2 > -1) {
            return hashString.substring(hashIndex2 + 2);
        }
        else if (hashIndex1 > -1) {
            return hashString.substring(hashIndex1 + 1);
        }
        return "";
    };
    UrlString.constructAuthorityUriFromObject = function (urlObject) {
        return new UrlString(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
    };
    /**
     * Returns URL hash as server auth code response object.
     */
    UrlString.getDeserializedHash = function (hash) {
        // Check if given hash is empty
        if (StringUtils.isEmpty(hash)) {
            return {};
        }
        // Strip the # symbol if present
        var parsedHash = UrlString.parseHash(hash);
        // If # symbol was not present, above will return empty string, so give original hash value
        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);
        // Check if deserialization didn't work
        if (!deserializedHash) {
            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));
        }
        return deserializedHash;
    };
    /**
     * Check if the hash of the URL string contains known properties
     */
    UrlString.hashContainsKnownProperties = function (hash) {
        if (StringUtils.isEmpty(hash)) {
            return false;
        }
        var parameters = UrlString.getDeserializedHash(hash);
        return !!(parameters.code ||
            parameters.error_description ||
            parameters.error ||
            parameters.state);
    };
    return UrlString;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var KeyLocation;
(function (KeyLocation) {
    KeyLocation["SW"] = "sw";
    KeyLocation["UHW"] = "uhw";
})(KeyLocation || (KeyLocation = {}));
var PopTokenGenerator = /** @class */ (function () {
    function PopTokenGenerator(cryptoUtils) {
        this.cryptoUtils = cryptoUtils;
    }
    PopTokenGenerator.prototype.generateCnf = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var kidThumbprint, reqCnf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];
                    case 1:
                        kidThumbprint = _a.sent();
                        reqCnf = {
                            kid: kidThumbprint,
                            xms_ksl: KeyLocation.SW
                        };
                        return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];
                }
            });
        });
    };
    PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var tokenClaims, resourceRequestMethod, resourceRequestUri, shrClaims, resourceUrlString, resourceUrlComponents;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tokenClaims = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);
                        resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims;
                        resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;
                        resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();
                        if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {
                            throw ClientAuthError.createTokenClaimsRequiredError();
                        }
                        return [4 /*yield*/, this.cryptoUtils.signJwt({
                                at: accessToken,
                                ts: TimeUtils.nowSeconds(),
                                m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),
                                u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,
                                nonce: this.cryptoUtils.createNewGuid(),
                                p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,
                                q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,
                                client_claims: shrClaims || undefined
                            }, tokenClaims.cnf.kid)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    return PopTokenGenerator;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * APP_METADATA Cache
 *
 * Key:Value Schema:
 *
 * Key: appmetadata-<environment>-<client_id>
 *
 * Value:
 * {
 *      clientId: client ID of the application
 *      environment: entity that issued the token, represented as a full host
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 * }
 */
var AppMetadataEntity = /** @class */ (function () {
    function AppMetadataEntity() {
    }
    /**
     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
     */
    AppMetadataEntity.prototype.generateAppMetadataKey = function () {
        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);
    };
    /**
     * Generate AppMetadata Cache Key
     */
    AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {
        var appMetaDataKeyArray = [
            APP_METADATA,
            environment,
            clientId,
        ];
        return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Creates AppMetadataEntity
     * @param clientId
     * @param environment
     * @param familyId
     */
    AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {
        var appMetadata = new AppMetadataEntity();
        appMetadata.clientId = clientId;
        appMetadata.environment = environment;
        if (familyId) {
            appMetadata.familyId = familyId;
        }
        return appMetadata;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AppMetadataEntity.isAppMetadataEntity = function (key, entity) {
        if (!entity) {
            return false;
        }
        return (key.indexOf(APP_METADATA) === 0 &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("environment"));
    };
    return AppMetadataEntity;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class instance helps track the memory changes facilitating
 * decisions to read from and write to the persistent cache
 */ var TokenCacheContext = /** @class */ (function () {
    function TokenCacheContext(tokenCache, hasChanged) {
        this.cache = tokenCache;
        this.hasChanged = hasChanged;
    }
    Object.defineProperty(TokenCacheContext.prototype, "cacheHasChanged", {
        /**
         * boolean which indicates the changes in cache
         */
        get: function () {
            return this.hasChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenCacheContext.prototype, "tokenCache", {
        /**
         * function to retrieve the token cache
         */
        get: function () {
            return this.cache;
        },
        enumerable: true,
        configurable: true
    });
    return TokenCacheContext;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class that handles response parsing.
 */
var ResponseHandler = /** @class */ (function () {
    function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {
        this.clientId = clientId;
        this.cacheStorage = cacheStorage;
        this.cryptoObj = cryptoObj;
        this.logger = logger;
        this.serializableCache = serializableCache;
        this.persistencePlugin = persistencePlugin;
    }
    /**
     * Function which validates server authorization code response.
     * @param serverResponseHash
     * @param cachedState
     * @param cryptoObj
     */
    ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {
        if (!serverResponseHash.state || !cachedState) {
            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError("Server State") : ClientAuthError.createStateNotFoundError("Cached State");
        }
        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {
            throw ClientAuthError.createStateMismatchError();
        }
        // Check for error
        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {
                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
            }
            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
        }
        if (serverResponseHash.client_info) {
            buildClientInfo(serverResponseHash.client_info, cryptoObj);
        }
    };
    /**
     * Function which validates server authorization token response.
     * @param serverResponse
     */
    ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {
        // Check for error
        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {
                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);
            }
            var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);
        }
    };
    /**
     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
     * @param serverTokenResponse
     * @param authority
     */
    ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {
        return __awaiter(this, void 0, void 0, function () {
            var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (serverTokenResponse.id_token) {
                            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);
                            // token nonce check (TODO: Add a warning if no nonce is given?)
                            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {
                                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {
                                    throw ClientAuthError.createNonceMismatchError();
                                }
                            }
                        }
                        // generate homeAccountId
                        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                        if (!!authCodePayload && !!authCodePayload.state) {
                            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                        }
                        cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 4, 7]);
                        if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];
                        this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                        cacheContext = new TokenCacheContext(this.serializableCache, true);
                        return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        /*
                         * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                         * If not present, we should return null, as it's the case that another application called removeAccount in between
                         * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.
                         */
                        if (handlingRefreshTokenResponse && cacheRecord.account) {
                            key = cacheRecord.account.generateAccountKey();
                            account = this.cacheStorage.getAccount(key);
                            if (!account) {
                                this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];
                            }
                        }
                        this.cacheStorage.saveCacheRecord(cacheRecord);
                        return [3 /*break*/, 7];
                    case 4:
                        if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 6];
                        this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                        return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [7 /*endfinally*/];
                    case 7: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];
                }
            });
        });
    };
    /**
     * Generates CacheRecord
     * @param serverTokenResponse
     * @param idTokenObj
     * @param authority
     */
    ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, idTokenObj, requestScopes, oboAssertion, authCodePayload) {
        var env = authority.getPreferredCache();
        if (StringUtils.isEmpty(env)) {
            throw ClientAuthError.createInvalidCacheEnvironmentError();
        }
        // IdToken: non AAD scenarios can have empty realm
        var cachedIdToken;
        var cachedAccount;
        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {
            cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING, oboAssertion);
            cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);
        }
        // AccessToken
        var cachedAccessToken = null;
        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {
            // If scopes not returned in server response, use request scopes
            var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);
            /*
             * Use timestamp calculated before request
             * Server may return timestamps as strings, parse to numbers if so.
             */
            var expiresIn = (typeof serverTokenResponse.expires_in === "string" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;
            var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === "string" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;
            var refreshIn = (typeof serverTokenResponse.refresh_in === "string" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;
            var tokenExpirationSeconds = reqTimestamp + expiresIn;
            var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;
            var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;
            // non AAD scenarios can have empty realm
            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion);
        }
        // refreshToken
        var cachedRefreshToken = null;
        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {
            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);
        }
        // appMetadata
        var cachedAppMetadata = null;
        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {
            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);
        }
        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
    };
    /**
     * Generate Account
     * @param serverTokenResponse
     * @param idToken
     * @param authority
     */
    ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {
        var authorityType = authority.authorityType;
        var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : "";
        var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : "";
        // ADFS does not require client_info in the response
        if (authorityType === AuthorityType.Adfs) {
            this.logger.verbose("Authority type is ADFS, creating ADFS account");
            return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);
        }
        // This fallback applies to B2C as well as they fall under an AAD account type.
        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") {
            throw ClientAuthError.createClientInfoEmptyError();
        }
        return serverTokenResponse.client_info ?
            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) :
            AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);
    };
    /**
     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
     *
     * Optionally takes a state string that is set as-is in the response.
     *
     * @param cacheRecord
     * @param idTokenObj
     * @param fromTokenCache
     * @param stateString
     */
    ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        accessToken = "";
                        responseScopes = [];
                        expiresOn = null;
                        familyId = Constants.EMPTY_STRING;
                        if (!cacheRecord.accessToken) return [3 /*break*/, 4];
                        if (!(cacheRecord.accessToken.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new PopTokenGenerator(cryptoObj);
                        return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];
                    case 1:
                        accessToken = _d.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        accessToken = cacheRecord.accessToken.secret;
                        _d.label = 3;
                    case 3:
                        responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                        expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                        extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                        _d.label = 4;
                    case 4:
                        if (cacheRecord.appMetadata) {
                            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;
                        }
                        uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;
                        tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;
                        return [2 /*return*/, {
                                authority: authority.canonicalAuthority,
                                uniqueId: uid,
                                tenantId: tid,
                                scopes: responseScopes,
                                account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,
                                idTokenClaims: idTokenObj ? idTokenObj.claims : {},
                                accessToken: accessToken,
                                fromCache: fromTokenCache,
                                expiresOn: expiresOn,
                                extExpiresOn: extExpiresOn,
                                familyId: familyId,
                                tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,
                                state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,
                                cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,
                                msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING
                            }];
                }
            });
        });
    };
    return ResponseHandler;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Oauth2.0 Authorization Code client
 */
var AuthorizationCodeClient = /** @class */ (function (_super) {
    __extends(AuthorizationCodeClient, _super);
    function AuthorizationCodeClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Creates the URL of the authorization request letting the user input credentials and consent to the
     * application. The URL target the /authorize endpoint of the authority configured in the
     * application object.
     *
     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
     * acquireToken(AuthorizationCodeRequest)
     * @param request
     */
    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var queryString;
            return __generator(this, function (_a) {
                queryString = this.createAuthCodeUrlQueryString(request);
                return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];
            });
        });
    };
    /**
     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
     * authorization_code_grant
     * @param request
     */
    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {
        return __awaiter(this, void 0, void 0, function () {
            var reqTimestamp, response, responseHandler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.info("in acquireToken call");
                        if (!request || StringUtils.isEmpty(request.code)) {
                            throw ClientAuthError.createTokenRequestCannotBeMadeError();
                        }
                        reqTimestamp = TimeUtils.nowSeconds();
                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        // Validate response. This function throws a server error if an error is returned by the server.
                        responseHandler.validateTokenResponse(response.body);
                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Handles the hash fragment response from public client code request. Returns a code response used by
     * the client to exchange for a token in acquireToken.
     * @param hashFragment
     */
    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {
        // Handle responses.
        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);
        // Deserialize hash fragment response parameters.
        var hashUrlString = new UrlString(hashFragment);
        // Deserialize hash fragment response parameters.
        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());
        // Get code response
        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);
        // throw when there is no auth code in the response
        if (!serverParams.code) {
            throw ClientAuthError.createNoAuthCodeInServerResponseError();
        }
        return __assign(__assign({}, serverParams), { 
            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod
            code: serverParams.code });
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */
    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {
        // Throw error if logoutRequest is null/undefined
        if (!logoutRequest) {
            throw ClientConfigurationError.createEmptyLogoutRequestError();
        }
        if (logoutRequest.account) {
            // Clear given account.
            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));
        }
        else {
            // Clear all accounts and tokens
            this.cacheManager.clear();
        }
        var queryString = this.createLogoutUrlQueryString(logoutRequest);
        // Construct logout URI.
        return StringUtils.isEmpty(queryString) ? this.authority.endSessionEndpoint : this.authority.endSessionEndpoint + "?" + queryString;
    };
    /**
     * Executes POST request to token endpoint
     * @param authority
     * @param request
     */
    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {
        return __awaiter(this, void 0, void 0, function () {
            var thumbprint, requestBody, queryParameters, headers, endpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes
                        };
                        return [4 /*yield*/, this.createTokenRequestBody(request)];
                    case 1:
                        requestBody = _a.sent();
                        queryParameters = this.createTokenQueryParameters(request);
                        headers = this.createDefaultTokenRequestHeaders();
                        endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + "?" + queryParameters;
                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                }
            });
        });
    };
    /**
     * Creates query string for the /token request
     * @param request
     */
    AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        if (request.tokenQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Generates a map for all the params to be sent to the service
     * @param request
     */
    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameterBuilder = new RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        // validate the redirectUri (to be a non null value)
                        parameterBuilder.addRedirectUri(request.redirectUri);
                        // Add scope array, parameter builder will add default scopes and dedupe
                        parameterBuilder.addScopes(request.scopes);
                        // add code: user set, not validated
                        parameterBuilder.addAuthorizationCode(request.code);
                        // Add library metadata
                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                        parameterBuilder.addThrottling();
                        if (this.serverTelemetryManager) {
                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                        }
                        // add code_verifier if passed
                        if (request.codeVerifier) {
                            parameterBuilder.addCodeVerifier(request.codeVerifier);
                        }
                        if (this.config.clientCredentials.clientSecret) {
                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        }
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);
                        parameterBuilder.addClientInfo();
                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                    case 1:
                        cnfString = _a.sent();
                        parameterBuilder.addPopToken(cnfString);
                        _a.label = 2;
                    case 2:
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        }
                        return [2 /*return*/, parameterBuilder.createQueryString()];
                }
            });
        });
    };
    /**
     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
     * @param request
     */
    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);
        parameterBuilder.addScopes(requestScopes);
        // validate the redirectUri (to be a non null value)
        parameterBuilder.addRedirectUri(request.redirectUri);
        // generate the correlationId if not set by the user and add
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        parameterBuilder.addCorrelationId(correlationId);
        // add response_mode. If not passed in it defaults to query.
        parameterBuilder.addResponseMode(request.responseMode);
        // add response_type = code
        parameterBuilder.addResponseTypeCode();
        // add library info parameters
        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
        // add client_info=1
        parameterBuilder.addClientInfo();
        if (request.codeChallenge && request.codeChallengeMethod) {
            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
        }
        if (request.prompt) {
            parameterBuilder.addPrompt(request.prompt);
        }
        if (request.domainHint) {
            parameterBuilder.addDomainHint(request.domainHint);
        }
        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object
        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {
            // AAD will throw if prompt=select_account is passed with an account hint
            if (request.sid && request.prompt === PromptValue.NONE) {
                // SessionID is only used in silent calls
                this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request");
                parameterBuilder.addSid(request.sid);
            }
            else if (request.account) {
                var accountSid = this.extractAccountSid(request.account);
                // If account and loginHint are provided, we will check account first for sid before adding loginHint
                if (accountSid && request.prompt === PromptValue.NONE) {
                    // SessionId is only used in silent calls
                    this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account");
                    parameterBuilder.addSid(accountSid);
                }
                else if (request.loginHint) {
                    this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request");
                    parameterBuilder.addLoginHint(request.loginHint);
                }
                else if (request.account.username) {
                    // Fallback to account username if provided
                    this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account");
                    parameterBuilder.addLoginHint(request.account.username);
                }
            }
            else if (request.loginHint) {
                this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request");
                parameterBuilder.addLoginHint(request.loginHint);
            }
        }
        else {
            this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");
        }
        if (request.nonce) {
            parameterBuilder.addNonce(request.nonce);
        }
        if (request.state) {
            parameterBuilder.addState(request.state);
        }
        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        }
        if (request.extraQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * This API validates the `EndSessionRequest` and creates a URL
     * @param request
     */
    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        if (request.postLogoutRedirectUri) {
            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);
        }
        if (request.correlationId) {
            parameterBuilder.addCorrelationId(request.correlationId);
        }
        if (request.idTokenHint) {
            parameterBuilder.addIdTokenHint(request.idTokenHint);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.
     * @param account
     */
    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {
        if (account.idTokenClaims) {
            var tokenClaims = account.idTokenClaims;
            return tokenClaims.sid || null;
        }
        return null;
    };
    return AuthorizationCodeClient;
}(BaseClient));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * OAuth2.0 refresh token client
 */
var RefreshTokenClient = /** @class */ (function (_super) {
    __extends(RefreshTokenClient, _super);
    function RefreshTokenClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    RefreshTokenClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var reqTimestamp, response, responseHandler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reqTimestamp = TimeUtils.nowSeconds();
                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        responseHandler.validateTokenResponse(response.body);
                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];
                }
            });
        });
    };
    /**
     * Gets cached refresh token and attaches to request, then calls acquireToken API
     * @param request
     */
    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
            return __generator(this, function (_a) {
                // Cannot renew token if no request object is given.
                if (!request) {
                    throw ClientConfigurationError.createEmptyTokenRequestError();
                }
                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                if (!request.account) {
                    throw ClientAuthError.createNoAccountInSilentRequestError();
                }
                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);
                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                if (isFOCI) {
                    try {
                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];
                    }
                    catch (e) {
                        noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;
                        clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;
                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {
                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                            // throw in all other cases
                        }
                        else {
                            throw e;
                        }
                    }
                }
                // fall back to application refresh token acquisition
                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
            });
        });
    };
    /**
     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
     * @param request
     */
    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {
        return __awaiter(this, void 0, void 0, function () {
            var refreshToken, refreshTokenRequest;
            return __generator(this, function (_a) {
                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);
                // no refresh Token
                if (!refreshToken) {
                    throw ClientAuthError.createNoTokensFoundError();
                }
                refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || exports.AuthenticationScheme.BEARER });
                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];
            });
        });
    };
    /**
     * Constructs the network message and makes a NW call to the underlying secure token service
     * @param request
     * @param authority
     */
    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBody, queryParameters, headers, thumbprint, endpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];
                    case 1:
                        requestBody = _a.sent();
                        queryParameters = this.createTokenQueryParameters(request);
                        headers = this.createDefaultTokenRequestHeaders();
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes
                        };
                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);
                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                }
            });
        });
    };
    /**
     * Creates query string for the /token request
     * @param request
     */
    RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        if (request.tokenQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Helper function to create the token request body
     * @param request
     */
    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        parameterBuilder = new RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        parameterBuilder.addScopes(request.scopes);
                        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);
                        parameterBuilder.addClientInfo();
                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                        parameterBuilder.addThrottling();
                        if (this.serverTelemetryManager) {
                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                        }
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        parameterBuilder.addRefreshToken(request.refreshToken);
                        if (this.config.clientCredentials.clientSecret) {
                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        }
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                        _b = (_a = parameterBuilder).addPopToken;
                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 2;
                    case 2:
                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        }
                        return [2 /*return*/, parameterBuilder.createQueryString()];
                }
            });
        });
    };
    return RefreshTokenClient;
}(BaseClient));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentFlowClient = /** @class */ (function (_super) {
    __extends(SilentFlowClient, _super);
    function SilentFlowClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
     * the given token and returns the renewed token
     * @param request
     */
    SilentFlowClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, refreshTokenClient;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.acquireCachedToken(request)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {
                            refreshTokenClient = new RefreshTokenClient(this.config);
                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];
                        }
                        else {
                            throw e_1;
                        }
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves token from cache or throws an error if it must be refreshed.
     * @param request
     */
    SilentFlowClient.prototype.acquireCachedToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var requestScopes, environment, authScheme, cacheRecord;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Cannot renew token if no request object is given.
                        if (!request) {
                            throw ClientConfigurationError.createEmptyTokenRequestError();
                        }
                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                        if (!request.account) {
                            throw ClientAuthError.createNoAccountInSilentRequestError();
                        }
                        requestScopes = new ScopeSet(request.scopes || []);
                        environment = request.authority || this.authority.getPreferredCache();
                        authScheme = request.authenticationScheme || exports.AuthenticationScheme.BEARER;
                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);
                        if (request.forceRefresh ||
                            !StringUtils.isEmptyObj(request.claims) ||
                            !cacheRecord.accessToken ||
                            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds) ||
                            (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0))) {
                            // Must refresh due to request parameters, or expired or non-existent access_token
                            throw ClientAuthError.createRefreshRequiredError();
                        }
                        if (this.config.serverTelemetryManager) {
                            this.config.serverTelemetryManager.incrementCacheHits();
                        }
                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Helper function to build response object from the CacheRecord
     * @param cacheRecord
     */
    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {
        return __awaiter(this, void 0, void 0, function () {
            var idTokenObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (cacheRecord.idToken) {
                            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);
                        }
                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SilentFlowClient;
}(BaseClient));

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
function isOpenIdConfigResponse(response) {
    return (response.hasOwnProperty("authorization_endpoint") &&
        response.hasOwnProperty("token_endpoint") &&
        response.hasOwnProperty("end_session_endpoint") &&
        response.hasOwnProperty("issuer"));
}

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Protocol modes supported by MSAL.
 */
exports.ProtocolMode = void 0;
(function (ProtocolMode) {
    ProtocolMode["AAD"] = "AAD";
    ProtocolMode["OIDC"] = "OIDC";
})(exports.ProtocolMode || (exports.ProtocolMode = {}));

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var AuthorityMetadataEntity = /** @class */ (function () {
    function AuthorityMetadataEntity() {
        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
    }
    /**
     * Update the entity with new aliases, preferred_cache and preferred_network values
     * @param metadata
     * @param fromNetwork
     */
    AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {
        this.aliases = metadata.aliases;
        this.preferred_cache = metadata.preferred_cache;
        this.preferred_network = metadata.preferred_network;
        this.aliasesFromNetwork = fromNetwork;
    };
    /**
     * Update the entity with new endpoints
     * @param metadata
     * @param fromNetwork
     */
    AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {
        this.authorization_endpoint = metadata.authorization_endpoint;
        this.token_endpoint = metadata.token_endpoint;
        this.end_session_endpoint = metadata.end_session_endpoint;
        this.issuer = metadata.issuer;
        this.endpointsFromNetwork = fromNetwork;
    };
    /**
     * Save the authority that was used to create this cache entry
     * @param authority
     */
    AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {
        this.canonical_authority = authority;
    };
    /**
     * Reset the exiresAt value
     */
    AuthorityMetadataEntity.prototype.resetExpiresAt = function () {
        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
    };
    /**
     * Returns whether or not the data needs to be refreshed
     */
    AuthorityMetadataEntity.prototype.isExpired = function () {
        return this.expiresAt <= TimeUtils.nowSeconds();
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {
        if (!entity) {
            return false;
        }
        return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&
            entity.hasOwnProperty("aliases") &&
            entity.hasOwnProperty("preferred_cache") &&
            entity.hasOwnProperty("preferred_network") &&
            entity.hasOwnProperty("canonical_authority") &&
            entity.hasOwnProperty("authorization_endpoint") &&
            entity.hasOwnProperty("token_endpoint") &&
            entity.hasOwnProperty("end_session_endpoint") &&
            entity.hasOwnProperty("issuer") &&
            entity.hasOwnProperty("aliasesFromNetwork") &&
            entity.hasOwnProperty("endpointsFromNetwork") &&
            entity.hasOwnProperty("expiresAt"));
    };
    return AuthorityMetadataEntity;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
function isCloudInstanceDiscoveryResponse(response) {
    return (response.hasOwnProperty("tenant_discovery_endpoint") &&
        response.hasOwnProperty("metadata"));
}

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RegionDiscovery = /** @class */ (function () {
    function RegionDiscovery(networkInterface) {
        this.networkInterface = networkInterface;
    }
    /**
     * Detect the region from the application's environment.
     *
     * @returns Promise<string | null>
     */
    RegionDiscovery.prototype.detectRegion = function (environmentRegion) {
        return __awaiter(this, void 0, void 0, function () {
            var autodetectedRegionName, response, latestIMDSVersion, response_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        autodetectedRegionName = environmentRegion;
                        if (!!autodetectedRegionName) return [3 /*break*/, 7];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION)];
                    case 2:
                        response = _a.sent();
                        if (response.status === ResponseCodes.httpSuccess) {
                            autodetectedRegionName = response.body;
                        }
                        if (!(response.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getCurrentVersion()];
                    case 3:
                        latestIMDSVersion = _a.sent();
                        if (!latestIMDSVersion) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.getRegionFromIMDS(latestIMDSVersion)];
                    case 4:
                        response_1 = _a.sent();
                        if (response_1.status === ResponseCodes.httpSuccess) {
                            autodetectedRegionName = response_1.body;
                        }
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 7: return [2 /*return*/, autodetectedRegionName || null];
                }
            });
        });
    };
    /**
     * Make the call to the IMDS endpoint
     *
     * @param imdsEndpointUrl
     * @returns Promise<NetworkResponse<string>>
     */
    RegionDiscovery.prototype.getRegionFromIMDS = function (version) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + "?api-version=" + version + "&format=text", RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT)];
            });
        });
    };
    /**
     * Get the most recent version of the IMDS endpoint available
     *
     * @returns Promise<string | null>
     */
    RegionDiscovery.prototype.getCurrentVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + "?format=json", RegionDiscovery.IMDS_OPTIONS)];
                    case 1:
                        response = _a.sent();
                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.
                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body["newest-versions"] && response.body["newest-versions"].length > 0) {
                            return [2 /*return*/, response.body["newest-versions"][0]];
                        }
                        return [2 /*return*/, null];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // Options for the IMDS endpoint request
    RegionDiscovery.IMDS_OPTIONS = { headers: { "Metadata": "true" } };
    return RegionDiscovery;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
 * endpoint. It will store the pertinent config data in this object for use during token calls.
 */
var Authority = /** @class */ (function () {
    function Authority(authority, networkInterface, cacheManager, authorityOptions) {
        this.canonicalAuthority = authority;
        this._canonicalAuthority.validateAsUri();
        this.networkInterface = networkInterface;
        this.cacheManager = cacheManager;
        this.authorityOptions = authorityOptions;
        this.regionDiscovery = new RegionDiscovery(networkInterface);
    }
    Object.defineProperty(Authority.prototype, "authorityType", {
        // See above for AuthorityType
        get: function () {
            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;
            if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {
                return AuthorityType.Adfs;
            }
            return AuthorityType.Default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "protocolMode", {
        /**
         * ProtocolMode enum representing the way endpoints are constructed.
         */
        get: function () {
            return this.authorityOptions.protocolMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "options", {
        /**
         * Returns authorityOptions which can be used to reinstantiate a new authority instance
         */
        get: function () {
            return this.authorityOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "canonicalAuthority", {
        /**
         * A URL that is the authority set by the developer
         */
        get: function () {
            return this._canonicalAuthority.urlString;
        },
        /**
         * Sets canonical authority.
         */
        set: function (url) {
            this._canonicalAuthority = new UrlString(url);
            this._canonicalAuthority.validateAsUri();
            this._canonicalAuthorityUrlComponents = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "canonicalAuthorityUrlComponents", {
        /**
         * Get authority components.
         */
        get: function () {
            if (!this._canonicalAuthorityUrlComponents) {
                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
            }
            return this._canonicalAuthorityUrlComponents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "hostnameAndPort", {
        /**
         * Get hostname and port i.e. login.microsoftonline.com
         */
        get: function () {
            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "tenant", {
        /**
         * Get tenant for authority.
         */
        get: function () {
            return this.canonicalAuthorityUrlComponents.PathSegments[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "authorizationEndpoint", {
        /**
         * OAuth /authorize endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.authorization_endpoint);
                return this.replaceTenant(endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "tokenEndpoint", {
        /**
         * OAuth /token endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.token_endpoint);
                return this.replaceTenant(endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "deviceCodeEndpoint", {
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.token_endpoint.replace("/token", "/devicecode"));
                return this.replaceTenant(endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "endSessionEndpoint", {
        /**
         * OAuth logout endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.end_session_endpoint);
                return this.replaceTenant(endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "selfSignedJwtAudience", {
        /**
         * OAuth issuer for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.issuer);
                return this.replaceTenant(endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Replaces tenant in url path with current tenant. Defaults to common.
     * @param urlString
     */
    Authority.prototype.replaceTenant = function (urlString) {
        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
    };
    /**
     * Replaces path such as tenant or policy with the current tenant or policy.
     * @param urlString
     */
    Authority.prototype.replacePath = function (urlString) {
        var endpoint = urlString;
        var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);
        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;
        currentAuthorityParts.forEach(function (currentPart, index) {
            var cachedPart = cachedAuthorityParts[index];
            if (currentPart !== cachedPart) {
                endpoint = endpoint.replace("/" + cachedPart + "/", "/" + currentPart + "/");
            }
        });
        return endpoint;
    };
    Object.defineProperty(Authority.prototype, "defaultOpenIdConfigurationEndpoint", {
        /**
         * The default open id configuration endpoint for any canonical authority.
         */
        get: function () {
            if (this.authorityType === AuthorityType.Adfs || this.protocolMode === exports.ProtocolMode.OIDC) {
                return this.canonicalAuthority + ".well-known/openid-configuration";
            }
            return this.canonicalAuthority + "v2.0/.well-known/openid-configuration";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Boolean that returns whethr or not tenant discovery has been completed.
     */
    Authority.prototype.discoveryComplete = function () {
        return !!this.metadata;
    };
    /**
     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network
     * and the /authorize, /token and logout endpoints.
     */
    Authority.prototype.resolveEndpointsAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);
                        if (!metadataEntity) {
                            metadataEntity = new AuthorityMetadataEntity();
                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                        }
                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];
                    case 1:
                        cloudDiscoverySource = _a.sent();
                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);
                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];
                    case 2:
                        endpointSource = _a.sent();
                        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {
                            // Reset the expiration time unless both values came from a successful cache lookup
                            metadataEntity.resetExpiresAt();
                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                        }
                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);
                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);
                        this.metadata = metadataEntity;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update AuthorityMetadataEntity with new endpoints and return where the information came from
     * @param metadataEntity
     */
    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var metadata, autodetectedRegionName, azureRegion;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        metadata = this.getEndpointMetadataFromConfig();
                        if (metadata) {
                            metadataEntity.updateEndpointMetadata(metadata, false);
                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];
                        }
                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {
                            // No need to update
                            return [2 /*return*/, AuthorityMetadataSource.CACHE];
                        }
                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];
                    case 1:
                        metadata = _b.sent();
                        if (!metadata) return [3 /*break*/, 4];
                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion)];
                    case 2:
                        autodetectedRegionName = _b.sent();
                        azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG
                            ? autodetectedRegionName
                            : this.authorityOptions.azureRegionConfiguration.azureRegion;
                        if (azureRegion) {
                            metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);
                        }
                        _b.label = 3;
                    case 3:
                        metadataEntity.updateEndpointMetadata(metadata, true);
                        return [2 /*return*/, AuthorityMetadataSource.NETWORK];
                    case 4: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);
                }
            });
        });
    };
    /**
     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority
     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy
     * @param metadataEntity
     */
    Authority.prototype.isAuthoritySameType = function (metadataEntity) {
        var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);
        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;
    };
    /**
     * Parse authorityMetadata config option
     */
    Authority.prototype.getEndpointMetadataFromConfig = function () {
        if (this.authorityOptions.authorityMetadata) {
            try {
                return JSON.parse(this.authorityOptions.authorityMetadata);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidAuthorityMetadataError();
            }
        }
        return null;
    };
    /**
     * Gets OAuth endpoints from the given OpenID configuration endpoint.
     */
    Authority.prototype.getEndpointMetadataFromNetwork = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from
     * @param cachedMetadata
     * @param newMetadata
     */
    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadata = this.getCloudDiscoveryMetadataFromConfig();
                        if (metadata) {
                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);
                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];
                        }
                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network
                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {
                            // No need to update
                            return [2 /*return*/, AuthorityMetadataSource.CACHE];
                        }
                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];
                    case 1:
                        metadata = _a.sent();
                        if (metadata) {
                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);
                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];
                        }
                        else {
                            // Metadata could not be obtained from config, cache or network
                            throw ClientConfigurationError.createUntrustedAuthorityError();
                        }
                }
            });
        });
    };
    /**
     * Parse cloudDiscoveryMetadata config or check knownAuthorities
     */
    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {
        // Check if network response was provided in config
        if (this.authorityOptions.cloudDiscoveryMetadata) {
            try {
                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);
                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);
                if (metadata) {
                    return metadata;
                }
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();
            }
        }
        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities
        if (this.isInKnownAuthorities()) {
            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
        }
        return null;
    };
    /**
     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
     * @param networkInterface
     */
    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {
        return __awaiter(this, void 0, void 0, function () {
            var instanceDiscoveryEndpoint, match, response, metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        instanceDiscoveryEndpoint = "" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + "oauth2/v2.0/authorize";
                        match = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];
                    case 2:
                        response = _a.sent();
                        metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];
                        if (metadata.length === 0) {
                            // If no metadata is returned, authority is untrusted
                            return [2 /*return*/, null];
                        }
                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 4:
                        if (!match) {
                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded 
                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
                        }
                        return [2 /*return*/, match];
                }
            });
        });
    };
    /**
     * Helper function to determine if this host is included in the knownAuthorities config option
     */
    Authority.prototype.isInKnownAuthorities = function () {
        var _this = this;
        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {
            return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;
        });
        return matches.length > 0;
    };
    /**
     * Creates cloud discovery metadata object from a given host
     * @param host
     */
    Authority.createCloudDiscoveryMetadataFromHost = function (host) {
        return {
            preferred_network: host,
            preferred_cache: host,
            aliases: [host]
        };
    };
    /**
     * Searches instance discovery network response for the entry that contains the host in the aliases list
     * @param response
     * @param authority
     */
    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {
        for (var i = 0; i < response.length; i++) {
            var metadata = response[i];
            if (metadata.aliases.indexOf(authority) > -1) {
                return metadata;
            }
        }
        return null;
    };
    /**
     * helper function to generate environment from authority object
     */
    Authority.prototype.getPreferredCache = function () {
        if (this.discoveryComplete()) {
            return this.metadata.preferred_cache;
        }
        else {
            throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        }
    };
    /**
     * Returns whether or not the provided host is an alias of this authority instance
     * @param host
     */
    Authority.prototype.isAlias = function (host) {
        return this.metadata.aliases.indexOf(host) > -1;
    };
    /**
     * Checks whether the provided host is that of a public cloud authority
     *
     * @param authority string
     * @returns bool
     */
    Authority.isPublicCloudAuthority = function (host) {
        return Constants.KNOWN_PUBLIC_CLOUDS.includes(host);
    };
    /**
     * Rebuild the authority string with the region
     *
     * @param host string
     * @param region string
     */
    Authority.buildRegionalAuthorityString = function (host, region, queryString) {
        // Create and validate a Url string object with the initial authority string
        var authorityUrlInstance = new UrlString(host);
        authorityUrlInstance.validateAsUri();
        var authorityUrlParts = authorityUrlInstance.getUrlComponents();
        var hostNameAndPort = region + "." + authorityUrlParts.HostNameAndPort;
        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {
            hostNameAndPort = region + "." + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;
        }
        // Include the query string portion of the url
        var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;
        // Add the query string if a query string was provided
        if (queryString)
            return url + "?" + queryString;
        return url;
    };
    /**
     * Replace the endpoints in the metadata object with their regional equivalents.
     *
     * @param metadata OpenIdConfigResponse
     * @param azureRegion string
     */
    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {
        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);
        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature
        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, "allowestsrnonmsi=true");
        metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);
        return metadata;
    };
    return Authority;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var AuthorityFactory = /** @class */ (function () {
    function AuthorityFactory() {
    }
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Also performs endpoint discovery.
     *
     * @param authorityUri
     * @param networkClient
     * @param protocolMode
     */
    AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var acquireTokenAuthority, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, acquireTokenAuthority];
                    case 3:
                        e_1 = _a.sent();
                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Does not perform endpoint discovery.
     *
     * @param authorityUrl
     * @param networkInterface
     * @param protocolMode
     */
    AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions) {
        // Throw error if authority url is empty
        if (StringUtils.isEmpty(authorityUrl)) {
            throw ClientConfigurationError.createUrlEmptyError();
        }
        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions);
    };
    return AuthorityFactory;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ServerTelemetryEntity = /** @class */ (function () {
    function ServerTelemetryEntity() {
        this.failedRequests = [];
        this.errors = [];
        this.cacheHits = 0;
    }
    /**
     * validates if a given cache entry is "Telemetry", parses <key,value>
     * @param key
     * @param entity
     */
    ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {
        var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;
        var validateEntity = true;
        if (entity) {
            validateEntity =
                entity.hasOwnProperty("failedRequests") &&
                    entity.hasOwnProperty("errors") &&
                    entity.hasOwnProperty("cacheHits");
        }
        return validateKey && validateEntity;
    };
    return ServerTelemetryEntity;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ThrottlingEntity = /** @class */ (function () {
    function ThrottlingEntity() {
    }
    /**
     * validates if a given cache entry is "Throttling", parses <key,value>
     * @param key
     * @param entity
     */
    ThrottlingEntity.isThrottlingEntity = function (key, entity) {
        var validateKey = false;
        if (key) {
            validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;
        }
        var validateEntity = true;
        if (entity) {
            validateEntity = entity.hasOwnProperty("throttleTime");
        }
        return validateKey && validateEntity;
    };
    return ThrottlingEntity;
}());

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var StubbedNetworkModule = {
    sendGetRequestAsync: function () {
        var notImplErr = "Network interface - sendGetRequestAsync() has not been implemented for the Network interface.";
        return Promise.reject(AuthError.createUnexpectedError(notImplErr));
    },
    sendPostRequestAsync: function () {
        var notImplErr = "Network interface - sendPostRequestAsync() has not been implemented for the Network interface.";
        return Promise.reject(AuthError.createUnexpectedError(notImplErr));
    }
};

/*! @azure/msal-common v4.3.0 2021-05-12 */

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ServerTelemetryManager = /** @class */ (function () {
    function ServerTelemetryManager(telemetryRequest, cacheManager) {
        this.cacheManager = cacheManager;
        this.apiId = telemetryRequest.apiId;
        this.correlationId = telemetryRequest.correlationId;
        this.forceRefresh = telemetryRequest.forceRefresh || false;
        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;
        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;
        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
    }
    /**
     * API to add MSER Telemetry to request
     */
    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {
        var forceRefreshInt = this.forceRefresh ? 1 : 0;
        var request = "" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + forceRefreshInt;
        var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, request, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to add MSER Telemetry for the last failed request
     */
    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {
        var lastRequests = this.getLastRequests();
        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errorCount = lastRequests.errors.length;
        // Indicate whether this header contains all data or partial data
        var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;
        var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to cache token failures for MSER data capture
     * @param error
     */
    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {
        var lastRequests = this.getLastRequests();
        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {
            // Remove a cached error to make room, first in first out
            lastRequests.failedRequests.shift(); // apiId
            lastRequests.failedRequests.shift(); // correlationId
            lastRequests.errors.shift();
        }
        lastRequests.failedRequests.push(this.apiId, this.correlationId);
        if (!StringUtils.isEmpty(error.subError)) {
            lastRequests.errors.push(error.subError);
        }
        else if (!StringUtils.isEmpty(error.errorCode)) {
            lastRequests.errors.push(error.errorCode);
        }
        else if (!!error && error.toString()) {
            lastRequests.errors.push(error.toString());
        }
        else {
            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);
        }
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
        return;
    };
    /**
     * Update server telemetry cache entry by incrementing cache hit counter
     */
    ServerTelemetryManager.prototype.incrementCacheHits = function () {
        var lastRequests = this.getLastRequests();
        lastRequests.cacheHits += 1;
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
        return lastRequests.cacheHits;
    };
    /**
     * Get the server telemetry entity from cache or initialize a new one
     */
    ServerTelemetryManager.prototype.getLastRequests = function () {
        var initialValue = new ServerTelemetryEntity();
        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);
        return lastRequests || initialValue;
    };
    /**
     * Remove server telemetry cache entry
     */
    ServerTelemetryManager.prototype.clearTelemetryCache = function () {
        var lastRequests = this.getLastRequests();
        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        var errorCount = lastRequests.errors.length;
        if (numErrorsFlushed === errorCount) {
            // All errors were sent on last request, clear Telemetry cache
            this.cacheManager.removeItem(this.telemetryCacheKey);
        }
        else {
            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
            var serverTelemEntity = new ServerTelemetryEntity();
            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error
            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);
        }
    };
    /**
     * Returns the maximum number of errors that can be flushed to the server in the next network request
     * @param serverTelemetryEntity
     */
    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {
        var i;
        var maxErrors = 0;
        var dataSize = 0;
        var errorCount = serverTelemetryEntity.errors.length;
        for (i = 0; i < errorCount; i++) {
            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
            var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;
            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;
            var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;
            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {
                // Adding this entry to the header would still keep header size below the limit
                maxErrors += 1;
            }
            else {
                break;
            }
        }
        return maxErrors;
    };
    return ServerTelemetryManager;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Constants
 */
var BrowserConstants = {
    /**
     * Interaction in progress cache value
     */
    INTERACTION_IN_PROGRESS_VALUE: "interaction_in_progress",
    /**
     * Invalid grant error code
     */
    INVALID_GRANT_ERROR: "invalid_grant",
    /**
     * Default popup window width
     */
    POPUP_WIDTH: 483,
    /**
     * Default popup window height
     */
    POPUP_HEIGHT: 600,
    /**
     * Name of the popup window starts with
     */
    POPUP_NAME_PREFIX: "msal",
    /**
     * Default popup monitor poll interval in milliseconds
     */
    POLL_INTERVAL_MS: 50,
    /**
     * Msal-browser SKU
     */
    MSAL_SKU: "msal.js.browser",
};
exports.BrowserCacheLocation = void 0;
(function (BrowserCacheLocation) {
    BrowserCacheLocation["LocalStorage"] = "localStorage";
    BrowserCacheLocation["SessionStorage"] = "sessionStorage";
    BrowserCacheLocation["MemoryStorage"] = "memoryStorage";
})(exports.BrowserCacheLocation || (exports.BrowserCacheLocation = {}));
/**
 * HTTP Request types supported by MSAL.
 */
var HTTP_REQUEST_TYPE;
(function (HTTP_REQUEST_TYPE) {
    HTTP_REQUEST_TYPE["GET"] = "GET";
    HTTP_REQUEST_TYPE["POST"] = "POST";
})(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));
/**
 * Temporary cache keys for MSAL, deleted after any request.
 */
var TemporaryCacheKeys;
(function (TemporaryCacheKeys) {
    TemporaryCacheKeys["AUTHORITY"] = "authority";
    TemporaryCacheKeys["ACQUIRE_TOKEN_ACCOUNT"] = "acquireToken.account";
    TemporaryCacheKeys["SESSION_STATE"] = "session.state";
    TemporaryCacheKeys["REQUEST_STATE"] = "request.state";
    TemporaryCacheKeys["NONCE_IDTOKEN"] = "nonce.id_token";
    TemporaryCacheKeys["ORIGIN_URI"] = "request.origin";
    TemporaryCacheKeys["RENEW_STATUS"] = "token.renew.status";
    TemporaryCacheKeys["URL_HASH"] = "urlHash";
    TemporaryCacheKeys["REQUEST_PARAMS"] = "request.params";
    TemporaryCacheKeys["SCOPES"] = "scopes";
    TemporaryCacheKeys["INTERACTION_STATUS_KEY"] = "interaction.status";
})(TemporaryCacheKeys || (TemporaryCacheKeys = {}));
/**
 * API Codes for Telemetry purposes.
 * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
 * 0-99 Silent Flow
 * 800-899 Auth Code Flow
 */
exports.ApiId = void 0;
(function (ApiId) {
    ApiId[ApiId["acquireTokenRedirect"] = 861] = "acquireTokenRedirect";
    ApiId[ApiId["acquireTokenPopup"] = 862] = "acquireTokenPopup";
    ApiId[ApiId["ssoSilent"] = 863] = "ssoSilent";
    ApiId[ApiId["acquireTokenSilent_authCode"] = 864] = "acquireTokenSilent_authCode";
    ApiId[ApiId["handleRedirectPromise"] = 865] = "handleRedirectPromise";
    ApiId[ApiId["acquireTokenSilent_silentFlow"] = 61] = "acquireTokenSilent_silentFlow";
    ApiId[ApiId["logout"] = 961] = "logout";
    ApiId[ApiId["logoutPopup"] = 962] = "logoutPopup";
})(exports.ApiId || (exports.ApiId = {}));
/*
 * Interaction type of the API - used for state and telemetry
 */
exports.InteractionType = void 0;
(function (InteractionType) {
    InteractionType["Redirect"] = "redirect";
    InteractionType["Popup"] = "popup";
    InteractionType["Silent"] = "silent";
})(exports.InteractionType || (exports.InteractionType = {}));
/**
 * Types of interaction currently in progress.
 * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.
 */
exports.InteractionStatus = void 0;
(function (InteractionStatus) {
    /**
     * Initial status before interaction occurs
     */
    InteractionStatus["Startup"] = "startup";
    /**
     * Status set when all login calls occuring
     */
    InteractionStatus["Login"] = "login";
    /**
     * Status set when logout call occuring
     */
    InteractionStatus["Logout"] = "logout";
    /**
     * Status set for acquireToken calls
     */
    InteractionStatus["AcquireToken"] = "acquireToken";
    /**
     * Status set for ssoSilent calls
     */
    InteractionStatus["SsoSilent"] = "ssoSilent";
    /**
     * Status set when handleRedirect in progress
     */
    InteractionStatus["HandleRedirect"] = "handleRedirect";
    /**
     * Status set when interaction is complete
     */
    InteractionStatus["None"] = "none";
})(exports.InteractionStatus || (exports.InteractionStatus = {}));
var DEFAULT_REQUEST = {
    scopes: OIDC_DEFAULT_SCOPES
};
/**
 * JWK Key Format string (Type MUST be defined for window crypto APIs)
 */
var KEY_FORMAT_JWK = "jwk";
// Supported wrapper SKUs
exports.WrapperSKU = void 0;
(function (WrapperSKU) {
    WrapperSKU["React"] = "@azure/msal-react";
    WrapperSKU["Angular"] = "@azure/msal-angular";
})(exports.WrapperSKU || (exports.WrapperSKU = {}));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class for math specific functions in browser.
 */
var MathUtils = /** @class */ (function () {
    function MathUtils() {
    }
    /**
     * Decimal to Hex
     *
     * @param num
     */
    MathUtils.decimalToHex = function (num) {
        var hex = num.toString(16);
        while (hex.length < 2) {
            hex = "0" + hex;
        }
        return hex;
    };
    return MathUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var GuidGenerator = /** @class */ (function () {
    function GuidGenerator(cryptoObj) {
        this.cryptoObj = cryptoObj;
    }
    /*
     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
     * pseudo-random numbers.
     * The algorithm is as follows:
     *     Set the two most significant bits (bits 6 and 7) of the
     *        clock_seq_hi_and_reserved to zero and one, respectively.
     *     Set the four most significant bits (bits 12 through 15) of the
     *        time_hi_and_version field to the 4-bit version number from
     *        Section 4.1.3. Version4
     *     Set all the other bits to randomly (or pseudo-randomly) chosen
     *     values.
     * UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
     * time-low               = 4hexOctet
     * time-mid               = 2hexOctet
     * time-high-and-version  = 2hexOctet
     * clock-seq-and-reserved = hexOctet:
     * clock-seq-low          = hexOctet
     * node                   = 6hexOctet
     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
     * y values are 8, 9, A, B
     */
    GuidGenerator.prototype.generateGuid = function () {
        try {
            var buffer = new Uint8Array(16);
            this.cryptoObj.getRandomValues(buffer);
            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.
            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.
            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.
            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])
                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])
                + "-" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])
                + "-" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])
                + "-" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])
                + "-" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])
                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])
                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);
        }
        catch (err) {
            var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
            var hex = "0123456789abcdef";
            var r = 0;
            var guidResponse = "";
            for (var i = 0; i < 36; i++) {
                if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {
                    // each x and y needs to be random
                    r = Math.random() * 16 | 0;
                }
                if (guidHolder[i] === "x") {
                    guidResponse += hex[r];
                }
                else if (guidHolder[i] === "y") {
                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                    r |= 0x8; // set pos 3 to 1 as 1???
                    guidResponse += hex[r];
                }
                else {
                    guidResponse += guidHolder[i];
                }
            }
            return guidResponse;
        }
    };
    /**
     * verifies if a string is  GUID
     * @param guid
     */
    GuidGenerator.isGuid = function (guid) {
        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return regexGuid.test(guid);
    };
    return GuidGenerator;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility functions for strings in a browser. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */
var BrowserStringUtils = /** @class */ (function () {
    function BrowserStringUtils() {
    }
    /**
     * Converts string to Uint8Array
     * @param sDOMStr
     */
    BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {
        var nChr;
        var nArrLen = 0;
        var nStrLen = sDOMStr.length;
        /* mapping... */
        for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {
            nChr = sDOMStr.charCodeAt(nMapIdx);
            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;
        }
        var aBytes = new Uint8Array(nArrLen);
        /* transcription... */
        for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {
            nChr = sDOMStr.charCodeAt(nChrIdx);
            if (nChr < 128) {
                /* one byte */
                aBytes[nIdx++] = nChr;
            }
            else if (nChr < 0x800) {
                /* two bytes */
                aBytes[nIdx++] = 192 + (nChr >>> 6);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else if (nChr < 0x10000) {
                /* three bytes */
                aBytes[nIdx++] = 224 + (nChr >>> 12);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else if (nChr < 0x200000) {
                /* four bytes */
                aBytes[nIdx++] = 240 + (nChr >>> 18);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else if (nChr < 0x4000000) {
                /* five bytes */
                aBytes[nIdx++] = 248 + (nChr >>> 24);
                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
            else /* if (nChr <= 0x7fffffff) */ {
                /* six bytes */
                aBytes[nIdx++] = 252 + (nChr >>> 30);
                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
        }
        return aBytes;
    };
    /**
     * Converst string to ArrayBuffer
     * @param dataString
     */
    BrowserStringUtils.stringToArrayBuffer = function (dataString) {
        var data = new ArrayBuffer(dataString.length);
        var dataView = new Uint8Array(data);
        for (var i = 0; i < dataString.length; i++) {
            dataView[i] = dataString.charCodeAt(i);
        }
        return data;
    };
    /**
     * Converts Uint8Array to a string
     * @param aBytes
     */
    BrowserStringUtils.utf8ArrToString = function (aBytes) {
        var sView = "";
        for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {
            nPart = aBytes[nIdx];
            sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */
                /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */
                (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */
                    (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                    : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */
                        (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                        : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */
                            (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                            : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */
                                (nPart - 192 << 6) + aBytes[++nIdx] - 128
                                : /* nPart < 127 ? */ /* one byte */
                                    nPart);
        }
        return sView;
    };
    return BrowserStringUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */
var Base64Encode = /** @class */ (function () {
    function Base64Encode() {
    }
    /**
     * Returns URL Safe b64 encoded string from a plaintext string.
     * @param input
     */
    Base64Encode.prototype.urlEncode = function (input) {
        return encodeURIComponent(this.encode(input)
            .replace(/=/g, "")
            .replace(/\+/g, "-")
            .replace(/\//g, "_"));
    };
    /**
     * Returns URL Safe b64 encoded string from an int8Array.
     * @param inputArr
     */
    Base64Encode.prototype.urlEncodeArr = function (inputArr) {
        return this.base64EncArr(inputArr)
            .replace(/=/g, "")
            .replace(/\+/g, "-")
            .replace(/\//g, "_");
    };
    /**
     * Returns b64 encoded string from plaintext string.
     * @param input
     */
    Base64Encode.prototype.encode = function (input) {
        var inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);
        return this.base64EncArr(inputUtf8Arr);
    };
    /**
     * Base64 encode byte array
     * @param aBytes
     */
    Base64Encode.prototype.base64EncArr = function (aBytes) {
        var eqLen = (3 - (aBytes.length % 3)) % 3;
        var sB64Enc = "";
        for (var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
            nMod3 = nIdx % 3;
            /* Uncomment the following line in order to split the output in lines 76-character long: */
            /*
             *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
             */
            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
            if (nMod3 === 2 || aBytes.length - nIdx === 1) {
                sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));
                nUint24 = 0;
            }
        }
        return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? "=" : "==");
    };
    /**
     * Base64 string to array encoding helper
     * @param nUint6
     */
    Base64Encode.prototype.uint6ToB64 = function (nUint6) {
        return nUint6 < 26 ?
            nUint6 + 65
            : nUint6 < 52 ?
                nUint6 + 71
                : nUint6 < 62 ?
                    nUint6 - 4
                    : nUint6 === 62 ?
                        43
                        : nUint6 === 63 ?
                            47
                            :
                                65;
    };
    return Base64Encode;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */
var Base64Decode = /** @class */ (function () {
    function Base64Decode() {
    }
    /**
     * Returns a URL-safe plaintext decoded string from b64 encoded input.
     * @param input
     */
    Base64Decode.prototype.decode = function (input) {
        var encodedString = input.replace(/-/g, "+").replace(/_/g, "/");
        switch (encodedString.length % 4) {
            case 0:
                break;
            case 2:
                encodedString += "==";
                break;
            case 3:
                encodedString += "=";
                break;
            default:
                throw new Error("Invalid base64 string");
        }
        var inputUtf8Arr = this.base64DecToArr(encodedString);
        return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);
    };
    /**
     * Decodes base64 into Uint8Array
     * @param base64String
     * @param nBlockSize
     */
    Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {
        var sB64Enc = base64String.replace(/[^A-Za-z0-9\+\/]/g, "");
        var nInLen = sB64Enc.length;
        var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;
        var aBytes = new Uint8Array(nOutLen);
        for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
            nMod4 = nInIdx & 3;
            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
            if (nMod4 === 3 || nInLen - nInIdx === 1) {
                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                }
                nUint24 = 0;
            }
        }
        return aBytes;
    };
    /**
     * Base64 string to array decoding helper
     * @param charNum
     */
    Base64Decode.prototype.b64ToUint6 = function (charNum) {
        return charNum > 64 && charNum < 91 ?
            charNum - 65
            : charNum > 96 && charNum < 123 ?
                charNum - 71
                : charNum > 47 && charNum < 58 ?
                    charNum + 4
                    : charNum === 43 ?
                        62
                        : charNum === 47 ?
                            63
                            :
                                0;
    };
    return Base64Decode;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */
var BrowserAuthErrorMessage = {
    pkceNotGenerated: {
        code: "pkce_not_created",
        desc: "The PKCE code challenge and verifier could not be generated."
    },
    cryptoDoesNotExist: {
        code: "crypto_nonexistent",
        desc: "The crypto object or function is not available."
    },
    httpMethodNotImplementedError: {
        code: "http_method_not_implemented",
        desc: "The HTTP method given has not been implemented in this library."
    },
    emptyNavigateUriError: {
        code: "empty_navigate_uri",
        desc: "Navigation URI is empty. Please check stack trace for more info."
    },
    hashEmptyError: {
        code: "hash_empty_error",
        desc: "Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash."
    },
    hashDoesNotContainStateError: {
        code: "no_state_in_hash",
        desc: "Hash does not contain state. Please verify that the request originated from msal."
    },
    hashDoesNotContainKnownPropertiesError: {
        code: "hash_does_not_contain_known_properties",
        desc: "Hash does not contain known properites. Please verify that your redirectUri is not changing the hash."
    },
    unableToParseStateError: {
        code: "unable_to_parse_state",
        desc: "Unable to parse state. Please verify that the request originated from msal."
    },
    stateInteractionTypeMismatchError: {
        code: "state_interaction_type_mismatch",
        desc: "Hash contains state but the interaction type does not match the caller."
    },
    interactionInProgress: {
        code: "interaction_in_progress",
        desc: "Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors."
    },
    popUpWindowError: {
        code: "popup_window_error",
        desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
    },
    emptyWindowError: {
        code: "empty_window_error",
        desc: "window.open returned null or undefined window object."
    },
    userCancelledError: {
        code: "user_cancelled",
        desc: "User cancelled the flow."
    },
    monitorPopupTimeoutError: {
        code: "monitor_window_timeout",
        desc: "Token acquisition in popup failed due to timeout."
    },
    monitorIframeTimeoutError: {
        code: "monitor_window_timeout",
        desc: "Token acquisition in iframe failed due to timeout."
    },
    redirectInIframeError: {
        code: "redirect_in_iframe",
        desc: "Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs."
    },
    blockTokenRequestsInHiddenIframeError: {
        code: "block_iframe_reload",
        desc: "Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors"
    },
    blockAcquireTokenInPopupsError: {
        code: "block_nested_popups",
        desc: "Request was blocked inside a popup because MSAL detected it was running in a popup."
    },
    iframeClosedPrematurelyError: {
        code: "iframe_closed_prematurely",
        desc: "The iframe being monitored was closed prematurely."
    },
    silentSSOInsufficientInfoError: {
        code: "silent_sso_error",
        desc: "Silent SSO could not be completed - insufficient information was provided. Please provide either a loginHint or sid."
    },
    noAccountError: {
        code: "no_account_error",
        desc: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request."
    },
    silentPromptValueError: {
        code: "silent_prompt_value_error",
        desc: "The value given for the prompt value is not valid for silent requests - must be set to 'none'."
    },
    noTokenRequestCacheError: {
        code: "no_token_request_cache_error",
        desc: "No token request in found in cache."
    },
    unableToParseTokenRequestCacheError: {
        code: "unable_to_parse_token_request_cache_error",
        desc: "The cached token request could not be parsed."
    },
    noCachedAuthorityError: {
        code: "no_cached_authority_error",
        desc: "No cached authority found."
    },
    authRequestNotSet: {
        code: "auth_request_not_set_error",
        desc: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler"
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    notInBrowserEnvironment: {
        code: "non_browser_environment",
        desc: "Login and token requests are not supported in non-browser environments."
    },
    databaseNotOpen: {
        code: "database_not_open",
        desc: "Database is not open!"
    },
    noNetworkConnectivity: {
        code: "no_network_connectivity",
        desc: "No network connectivity. Check your internet connection."
    },
    postRequestFailed: {
        code: "post_request_failed",
        desc: "Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'"
    },
    getRequestFailed: {
        code: "get_request_failed",
        desc: "Network request failed. Please check the network trace to determine root cause."
    },
    failedToParseNetworkResponse: {
        code: "failed_to_parse_response",
        desc: "Failed to parse network response. Check network trace."
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */
var BrowserAuthError = /** @class */ (function (_super) {
    __extends$1(BrowserAuthError, _super);
    function BrowserAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        Object.setPrototypeOf(_this, BrowserAuthError.prototype);
        _this.name = "BrowserAuthError";
        return _this;
    }
    /**
     * Creates an error thrown when PKCE is not implemented.
     * @param errDetail
     */
    BrowserAuthError.createPkceNotGeneratedError = function (errDetail) {
        return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + " Detail:" + errDetail);
    };
    /**
     * Creates an error thrown when the crypto object is unavailable.
     * @param errDetail
     */
    BrowserAuthError.createCryptoNotAvailableError = function (errDetail) {
        return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + " Detail:" + errDetail);
    };
    /**
     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.
     * @param method
     */
    BrowserAuthError.createHttpMethodNotImplementedError = function (method) {
        return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + " Given Method: " + method);
    };
    /**
     * Creates an error thrown when the navigation URI is empty.
     */
    BrowserAuthError.createEmptyNavigationUriError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     * @param hashValue
     */
    BrowserAuthError.createEmptyHashError = function (hashValue) {
        return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + " Given Url: " + hashValue);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     */
    BrowserAuthError.createHashDoesNotContainStateError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);
    };
    /**
     * Creates an error thrown when the hash string value does not contain known properties
     */
    BrowserAuthError.createHashDoesNotContainKnownPropertiesError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     */
    BrowserAuthError.createUnableToParseStateError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);
    };
    /**
     * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.
     */
    BrowserAuthError.createStateInteractionTypeMismatchError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);
    };
    /**
     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.
     */
    BrowserAuthError.createInteractionInProgressError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);
    };
    /**
     * Creates an error thrown when the popup window could not be opened.
     * @param errDetail
     */
    BrowserAuthError.createPopupWindowError = function (errDetail) {
        var errorMessage = BrowserAuthErrorMessage.popUpWindowError.desc;
        errorMessage = !StringUtils.isEmpty(errDetail) ? errorMessage + " Details: " + errDetail : errorMessage;
        return new BrowserAuthError(BrowserAuthErrorMessage.popUpWindowError.code, errorMessage);
    };
    /**
     * Creates an error thrown when window.open returns an empty window object.
     * @param errDetail
     */
    BrowserAuthError.createEmptyWindowCreatedError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);
    };
    /**
     * Creates an error thrown when the user closes a popup.
     */
    BrowserAuthError.createUserCancelledError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);
    };
    /**
     * Creates an error thrown when monitorPopupFromHash times out for a given popup.
     */
    BrowserAuthError.createMonitorPopupTimeoutError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);
    };
    /**
     * Creates an error thrown when monitorIframeFromHash times out for a given iframe.
     */
    BrowserAuthError.createMonitorIframeTimeoutError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);
    };
    /**
     * Creates an error thrown when navigateWindow is called inside an iframe.
     * @param windowParentCheck
     */
    BrowserAuthError.createRedirectInIframeError = function (windowParentCheck) {
        return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + " (window.parent !== window) => " + windowParentCheck);
    };
    /**
     * Creates an error thrown when an auth reload is done inside an iframe.
     */
    BrowserAuthError.createBlockReloadInHiddenIframeError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);
    };
    /**
     * Creates an error thrown when a popup attempts to call an acquireToken API
     * @returns
     */
    BrowserAuthError.createBlockAcquireTokenInPopupsError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);
    };
    /**
     * Creates an error thrown when an iframe is found to be closed before the timeout is reached.
     */
    BrowserAuthError.createIframeClosedPrematurelyError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);
    };
    /**
     * Creates an error thrown when the login_hint, sid or account object is not provided in the ssoSilent API.
     */
    BrowserAuthError.createSilentSSOInsufficientInfoError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.silentSSOInsufficientInfoError.code, BrowserAuthErrorMessage.silentSSOInsufficientInfoError.desc);
    };
    /**
     * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.
     */
    BrowserAuthError.createNoAccountError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);
    };
    /**
     * Creates an error thrown when a given prompt value is invalid for silent requests.
     */
    BrowserAuthError.createSilentPromptValueError = function (givenPrompt) {
        return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + " Given value: " + givenPrompt);
    };
    /**
     * Creates an error thrown when the cached token request could not be retrieved from the cache
     */
    BrowserAuthError.createUnableToParseTokenRequestCacheError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);
    };
    /**
     * Creates an error thrown when the token request could not be retrieved from the cache
     */
    BrowserAuthError.createNoTokenRequestCacheError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);
    };
    /**
     * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)
     */
    BrowserAuthError.createAuthRequestNotSetError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);
    };
    /**
     * Creates an error thrown when the authority could not be retrieved from the cache
     */
    BrowserAuthError.createNoCachedAuthorityError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);
    };
    /**
     * Creates an error thrown if cache type is invalid.
     */
    BrowserAuthError.createInvalidCacheTypeError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, "" + BrowserAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Create an error thrown when login and token requests are made from a non-browser environment
     */
    BrowserAuthError.createNonBrowserEnvironmentError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);
    };
    /**
     * Create an error thrown when indexDB database is not open
     */
    BrowserAuthError.createDatabaseNotOpenError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);
    };
    /**
     * Create an error thrown when token fetch fails due to no internet
     */
    BrowserAuthError.createNoNetworkConnectivityError = function () {
        return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);
    };
    /**
     * Create an error thrown when token fetch fails due to reasons other than internet connectivity
     */
    BrowserAuthError.createPostRequestFailedError = function (errorDesc, endpoint) {
        return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, BrowserAuthErrorMessage.postRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when get request fails due to reasons other than internet connectivity
     */
    BrowserAuthError.createGetRequestFailedError = function (errorDesc, endpoint) {
        return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, BrowserAuthErrorMessage.getRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when network client fails to parse network response
     */
    BrowserAuthError.createFailedToParseNetworkResponseError = function (endpoint) {
        return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, BrowserAuthErrorMessage.failedToParseNetworkResponse.desc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    return BrowserAuthError;
}(AuthError));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Constant byte array length
var RANDOM_BYTE_ARR_LENGTH = 32;
/**
 * Class which exposes APIs to generate PKCE codes and code verifiers.
 */
var PkceGenerator = /** @class */ (function () {
    function PkceGenerator(cryptoObj) {
        this.base64Encode = new Base64Encode();
        this.cryptoObj = cryptoObj;
    }
    /**
     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
     */
    PkceGenerator.prototype.generateCodes = function () {
        return __awaiter$1(this, void 0, void 0, function () {
            var codeVerifier, codeChallenge;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        codeVerifier = this.generateCodeVerifier();
                        return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];
                    case 1:
                        codeChallenge = _a.sent();
                        return [2 /*return*/, {
                                verifier: codeVerifier,
                                challenge: codeChallenge
                            }];
                }
            });
        });
    };
    /**
     * Generates a random 32 byte buffer and returns the base64
     * encoded string to be used as a PKCE Code Verifier
     */
    PkceGenerator.prototype.generateCodeVerifier = function () {
        try {
            // Generate random values as utf-8
            var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
            this.cryptoObj.getRandomValues(buffer);
            // encode verifier as base64
            var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);
            return pkceCodeVerifierB64;
        }
        catch (e) {
            throw BrowserAuthError.createPkceNotGeneratedError(e);
        }
    };
    /**
     * Creates a base64 encoded PKCE Code Challenge string from the
     * hash created from the PKCE Code Verifier supplied
     */
    PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {
        return __awaiter$1(this, void 0, void 0, function () {
            var pkceHashedCodeVerifier, e_1;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];
                    case 1:
                        pkceHashedCodeVerifier = _a.sent();
                        // encode hash as base64
                        return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];
                    case 2:
                        e_1 = _a.sent();
                        throw BrowserAuthError.createPkceNotGeneratedError(e_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return PkceGenerator;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
 */
// RSA KeyGen Algorithm
var PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
// SHA-256 hashing algorithm
var S256_HASH_ALG = "SHA-256";
// MOD length for PoP tokens
var MODULUS_LENGTH = 2048;
// Public Exponent
var PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);
/**
 * This class implements functions used by the browser library to perform cryptography operations such as
 * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
 */
var BrowserCrypto = /** @class */ (function () {
    function BrowserCrypto() {
        if (!(this.hasCryptoAPI())) {
            throw BrowserAuthError.createCryptoNotAvailableError("Browser crypto or msCrypto object not available.");
        }
        this._keygenAlgorithmOptions = {
            name: PKCS1_V15_KEYGEN_ALG,
            hash: S256_HASH_ALG,
            modulusLength: MODULUS_LENGTH,
            publicExponent: PUBLIC_EXPONENT
        };
    }
    /**
     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
     * @param dataString
     */
    BrowserCrypto.prototype.sha256Digest = function (dataString) {
        return __awaiter$1(this, void 0, void 0, function () {
            var data;
            return __generator$1(this, function (_a) {
                data = BrowserStringUtils.stringToUtf8Arr(dataString);
                return [2 /*return*/, this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data)];
            });
        });
    };
    /**
     * Populates buffer with cryptographically random values.
     * @param dataBuffer
     */
    BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
        var cryptoObj = window["msCrypto"] || window.crypto;
        if (!cryptoObj.getRandomValues) {
            throw BrowserAuthError.createCryptoNotAvailableError("getRandomValues does not exist.");
        }
        cryptoObj.getRandomValues(dataBuffer);
    };
    /**
     * Generates a keypair based on current keygen algorithm config.
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, (this.hasIECrypto() ?
                        this.msCryptoGenerateKey(extractable, usages)
                        : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages))];
            });
        });
    };
    /**
     * Export key as Json Web Key (JWK)
     * @param key
     * @param format
     */
    BrowserCrypto.prototype.exportJwk = function (key) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];
            });
        });
    };
    /**
     * Imports key as Json Web Key (JWK), can set extractable and usages.
     * @param key
     * @param format
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {
        return __awaiter$1(this, void 0, void 0, function () {
            var keyString, keyBuffer;
            return __generator$1(this, function (_a) {
                keyString = BrowserCrypto.getJwkString(key);
                keyBuffer = BrowserStringUtils.stringToArrayBuffer(keyString);
                return [2 /*return*/, this.hasIECrypto() ?
                        this.msCryptoImportKey(keyBuffer, extractable, usages)
                        : window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages)];
            });
        });
    };
    /**
     * Signs given data with given key
     * @param key
     * @param data
     */
    BrowserCrypto.prototype.sign = function (key, data) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, this.hasIECrypto() ?
                        this.msCryptoSign(key, data)
                        : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data)];
            });
        });
    };
    /**
     * Check whether IE crypto or other browser cryptography is available.
     */
    BrowserCrypto.prototype.hasCryptoAPI = function () {
        return this.hasIECrypto() || this.hasBrowserCrypto();
    };
    /**
     * Checks whether IE crypto (AKA msCrypto) is available.
     */
    BrowserCrypto.prototype.hasIECrypto = function () {
        return "msCrypto" in window;
    };
    /**
     * Check whether browser crypto is available.
     */
    BrowserCrypto.prototype.hasBrowserCrypto = function () {
        return "crypto" in window;
    };
    /**
     * Helper function for SHA digest.
     * @param algorithm
     * @param data
     */
    BrowserCrypto.prototype.getSubtleCryptoDigest = function (algorithm, data) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, window.crypto.subtle.digest(algorithm, data)];
            });
        });
    };
    /**
     * IE Helper function for SHA digest.
     * @param algorithm
     * @param data
     */
    BrowserCrypto.prototype.getMSCryptoDigest = function (algorithm, data) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var digestOperation = window["msCrypto"].subtle.digest(algorithm, data.buffer);
                        digestOperation.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        digestOperation.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for generating a keypair
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.msCryptoGenerateKey = function (extractable, usages) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msGenerateKey = window["msCrypto"].subtle.generateKey(_this._keygenAlgorithmOptions, extractable, usages);
                        msGenerateKey.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        msGenerateKey.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for exportKey
     * @param key
     * @param format
     */
    BrowserCrypto.prototype.msCryptoExportJwk = function (key) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msExportKey = window["msCrypto"].subtle.exportKey(KEY_FORMAT_JWK, key);
                        msExportKey.addEventListener("complete", function (e) {
                            var resultBuffer = e.target.result;
                            var resultString = BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer))
                                .replace(/\r/g, "")
                                .replace(/\n/g, "")
                                .replace(/\t/g, "")
                                .split(" ").join("")
                                .replace("\u0000", "");
                            try {
                                resolve(JSON.parse(resultString));
                            }
                            catch (e) {
                                reject(e);
                            }
                        });
                        msExportKey.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for importKey
     * @param key
     * @param format
     * @param extractable
     * @param usages
     */
    BrowserCrypto.prototype.msCryptoImportKey = function (keyBuffer, extractable, usages) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msImportKey = window["msCrypto"].subtle.importKey(KEY_FORMAT_JWK, keyBuffer, _this._keygenAlgorithmOptions, extractable, usages);
                        msImportKey.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        msImportKey.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * IE Helper function for sign JWT
     * @param key
     * @param data
     */
    BrowserCrypto.prototype.msCryptoSign = function (key, data) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var msSign = window["msCrypto"].subtle.sign(_this._keygenAlgorithmOptions, key, data);
                        msSign.addEventListener("complete", function (e) {
                            resolve(e.target.result);
                        });
                        msSign.addEventListener("error", function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * Returns stringified jwk.
     * @param jwk
     */
    BrowserCrypto.getJwkString = function (jwk) {
        return JSON.stringify(jwk, Object.keys(jwk).sort());
    };
    return BrowserCrypto;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
 */
var DatabaseStorage = /** @class */ (function () {
    function DatabaseStorage(dbName, tableName, version) {
        this.dbName = dbName;
        this.tableName = tableName;
        this.version = version;
        this.dbOpen = false;
    }
    /**
     * Opens IndexedDB instance.
     */
    DatabaseStorage.prototype.open = function () {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        // TODO: Add timeouts?
                        var openDB = window.indexedDB.open(_this.dbName, _this.version);
                        openDB.addEventListener("upgradeneeded", function (e) {
                            var event = e;
                            event.target.result.createObjectStore(_this.tableName);
                        });
                        openDB.addEventListener("success", function (e) {
                            var event = e;
                            _this.db = event.target.result;
                            _this.dbOpen = true;
                            resolve();
                        });
                        openDB.addEventListener("error", function (error) { return reject(error); });
                    })];
            });
        });
    };
    /**
     * Retrieves item from IndexedDB instance.
     * @param key
     */
    DatabaseStorage.prototype.get = function (key) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.dbOpen) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.open()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                            // TODO: Add timeouts?
                            if (!_this.db) {
                                return reject(BrowserAuthError.createDatabaseNotOpenError());
                            }
                            var transaction = _this.db.transaction([_this.tableName], "readonly");
                            var objectStore = transaction.objectStore(_this.tableName);
                            var dbGet = objectStore.get(key);
                            dbGet.addEventListener("success", function (e) {
                                var event = e;
                                resolve(event.target.result);
                            });
                            dbGet.addEventListener("error", function (e) { return reject(e); });
                        })];
                }
            });
        });
    };
    /**
     * Adds item to IndexedDB under given key
     * @param key
     * @param payload
     */
    DatabaseStorage.prototype.put = function (key, payload) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _this = this;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.dbOpen) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.open()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                            // TODO: Add timeouts?
                            if (!_this.db) {
                                return reject(BrowserAuthError.createDatabaseNotOpenError());
                            }
                            var transaction = _this.db.transaction([_this.tableName], "readwrite");
                            var objectStore = transaction.objectStore(_this.tableName);
                            var dbPut = objectStore.put(payload, key);
                            dbPut.addEventListener("success", function (e) {
                                var event = e;
                                resolve(event.target.result);
                            });
                            dbPut.addEventListener("error", function (e) { return reject(e); });
                        })];
                }
            });
        });
    };
    return DatabaseStorage;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
 * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
 */
var CryptoOps = /** @class */ (function () {
    function CryptoOps() {
        // Browser crypto needs to be validated first before any other classes can be set.
        this.browserCrypto = new BrowserCrypto();
        this.b64Encode = new Base64Encode();
        this.b64Decode = new Base64Decode();
        this.guidGenerator = new GuidGenerator(this.browserCrypto);
        this.pkceGenerator = new PkceGenerator(this.browserCrypto);
        this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);
    }
    /**
     * Creates a new random GUID - used to populate state and nonce.
     * @returns string (GUID)
     */
    CryptoOps.prototype.createNewGuid = function () {
        return this.guidGenerator.generateGuid();
    };
    /**
     * Encodes input string to base64.
     * @param input
     */
    CryptoOps.prototype.base64Encode = function (input) {
        return this.b64Encode.encode(input);
    };
    /**
     * Decodes input string from base64.
     * @param input
     */
    CryptoOps.prototype.base64Decode = function (input) {
        return this.b64Decode.decode(input);
    };
    /**
     * Generates PKCE codes used in Authorization Code Flow.
     */
    CryptoOps.prototype.generatePkceCodes = function () {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, this.pkceGenerator.generateCodes()];
            });
        });
    };
    /**
     * Generates a keypair, stores it and returns a thumbprint
     * @param request
     */
    CryptoOps.prototype.getPublicKeyThumbprint = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkBuffer, publicJwkHash, privateKeyJwk, unextractablePrivateKey;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];
                    case 1:
                        keyPair = _a.sent();
                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];
                    case 2:
                        publicKeyJwk = _a.sent();
                        pubKeyThumprintObj = {
                            e: publicKeyJwk.e,
                            kty: publicKeyJwk.kty,
                            n: publicKeyJwk.n
                        };
                        publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);
                        return [4 /*yield*/, this.browserCrypto.sha256Digest(publicJwkString)];
                    case 3:
                        publicJwkBuffer = _a.sent();
                        publicJwkHash = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));
                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];
                    case 4:
                        privateKeyJwk = _a.sent();
                        return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, ["sign"])];
                    case 5:
                        unextractablePrivateKey = _a.sent();
                        // Store Keypair data in keystore
                        this.cache.put(publicJwkHash, {
                            privateKey: unextractablePrivateKey,
                            publicKey: keyPair.publicKey,
                            requestMethod: request.resourceRequestMethod,
                            requestUri: request.resourceRequestUri
                        });
                        return [2 /*return*/, publicJwkHash];
                }
            });
        });
    };
    /**
     * Signs the given object as a jwt payload with private key retrieved by given kid.
     * @param payload
     * @param kid
     */
    CryptoOps.prototype.signJwt = function (payload, kid) {
        return __awaiter$1(this, void 0, void 0, function () {
            var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cache.get(kid)];
                    case 1:
                        cachedKeyPair = _a.sent();
                        return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];
                    case 2:
                        publicKeyJwk = _a.sent();
                        publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);
                        header = {
                            alg: publicKeyJwk.alg,
                            type: KEY_FORMAT_JWK
                        };
                        encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));
                        // Generate payload
                        payload.cnf = {
                            jwk: JSON.parse(publicKeyJwkString)
                        };
                        encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));
                        tokenString = encodedHeader + "." + encodedPayload;
                        tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);
                        return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];
                    case 3:
                        signatureBuffer = _a.sent();
                        encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));
                        return [2 /*return*/, tokenString + "." + encodedSignature];
                }
            });
        });
    };
    CryptoOps.POP_KEY_USAGES = ["sign", "verify"];
    CryptoOps.EXTRACTABLE = true;
    CryptoOps.DB_VERSION = 1;
    CryptoOps.DB_NAME = "msal.db";
    CryptoOps.TABLE_NAME = CryptoOps.DB_NAME + ".keys";
    return CryptoOps;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */
var BrowserConfigurationAuthErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    storageNotSupportedError: {
        code: "storage_not_supported",
        desc: "Given storage configuration option was not supported."
    },
    noRedirectCallbacksSet: {
        code: "no_redirect_callbacks",
        desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. " +
            "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
    },
    invalidCallbackObject: {
        code: "invalid_callback_object",
        desc: "The object passed for the callback was invalid. " +
            "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
    },
    stubPcaInstanceCalled: {
        code: "stubbed_public_client_application_called",
        desc: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors"
    },
    inMemRedirectUnavailable: {
        code: "in_mem_redirect_unavailable",
        desc: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */
var BrowserConfigurationAuthError = /** @class */ (function (_super) {
    __extends$1(BrowserConfigurationAuthError, _super);
    function BrowserConfigurationAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "BrowserConfigurationAuthError";
        Object.setPrototypeOf(_this, BrowserConfigurationAuthError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */
    BrowserConfigurationAuthError.createRedirectUriEmptyError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code, BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */
    BrowserConfigurationAuthError.createPostLogoutRedirectUriEmptyError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code, BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates error thrown when given storage location is not supported.
     * @param givenStorageLocation
     */
    BrowserConfigurationAuthError.createStorageNotSupportedError = function (givenStorageLocation) {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc + " Given Location: " + givenStorageLocation);
    };
    /**
     * Creates error thrown when callback object is invalid.
     * @param callbackObject
     */
    BrowserConfigurationAuthError.createInvalidCallbackObjectError = function (callbackObject) {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.invalidCallbackObject.code, BrowserConfigurationAuthErrorMessage.invalidCallbackObject.desc + " Given value for callback function: " + callbackObject);
    };
    /**
     * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().
     */
    BrowserConfigurationAuthError.createRedirectCallbacksNotSetError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);
    };
    /**
     * Creates error thrown when the stub instance of PublicClientApplication is called.
     */
    BrowserConfigurationAuthError.createStubPcaInstanceCalledError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code, BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);
    };
    /*
     * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.
     */
    BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError = function () {
        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);
    };
    return BrowserConfigurationAuthError;
}(AuthError));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var BrowserStorage = /** @class */ (function () {
    function BrowserStorage(cacheLocation) {
        this.validateWindowStorage(cacheLocation);
        this.windowStorage = window[cacheLocation];
    }
    BrowserStorage.prototype.validateWindowStorage = function (cacheLocation) {
        if (cacheLocation !== exports.BrowserCacheLocation.LocalStorage && cacheLocation !== exports.BrowserCacheLocation.SessionStorage) {
            throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
        }
        var storageSupported = !!window[cacheLocation];
        if (!storageSupported) {
            throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
        }
    };
    BrowserStorage.prototype.getItem = function (key) {
        return this.windowStorage.getItem(key);
    };
    BrowserStorage.prototype.setItem = function (key, value) {
        this.windowStorage.setItem(key, value);
    };
    BrowserStorage.prototype.removeItem = function (key) {
        this.windowStorage.removeItem(key);
    };
    BrowserStorage.prototype.getKeys = function () {
        return Object.keys(this.windowStorage);
    };
    BrowserStorage.prototype.containsKey = function (key) {
        return this.windowStorage.hasOwnProperty(key);
    };
    return BrowserStorage;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var MemoryStorage = /** @class */ (function () {
    function MemoryStorage() {
        this.cache = new Map();
    }
    MemoryStorage.prototype.getItem = function (key) {
        return this.cache.get(key) || null;
    };
    MemoryStorage.prototype.setItem = function (key, value) {
        this.cache.set(key, value);
    };
    MemoryStorage.prototype.removeItem = function (key) {
        this.cache.delete(key);
    };
    MemoryStorage.prototype.getKeys = function () {
        var cacheKeys = [];
        this.cache.forEach(function (value, key) {
            cacheKeys.push(key);
        });
        return cacheKeys;
    };
    MemoryStorage.prototype.containsKey = function (key) {
        return this.cache.has(key);
    };
    MemoryStorage.prototype.clear = function () {
        this.cache.clear();
    };
    return MemoryStorage;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var BrowserProtocolUtils = /** @class */ (function () {
    function BrowserProtocolUtils() {
    }
    /**
     * Extracts the BrowserStateObject from the state string.
     * @param browserCrypto
     * @param state
     */
    BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {
        if (StringUtils.isEmpty(state)) {
            return null;
        }
        try {
            var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);
            return requestStateObj.libraryState.meta;
        }
        catch (e) {
            throw ClientAuthError.createInvalidStateError(state, e);
        }
    };
    /**
     * Parses properties of server response from url hash
     * @param locationHash Hash from url
     */
    BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {
        if (!locationHash) {
            return {};
        }
        var hashUrlString = new UrlString(locationHash);
        return UrlString.getDeserializedHash(hashUrlString.getHash());
    };
    return BrowserProtocolUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements the cache storage interface for MSAL through browser local or session storage.
 * Cookies are only used if storeAuthStateInCookie is true, and are only used for
 * parameters such as state and nonce, generally.
 */
var BrowserCacheManager = /** @class */ (function (_super) {
    __extends$1(BrowserCacheManager, _super);
    function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {
        var _this = _super.call(this, clientId, cryptoImpl) || this;
        // Cookie life calculation (hours * minutes * seconds * ms)
        _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;
        _this.cacheConfig = cacheConfig;
        _this.logger = logger;
        _this.internalStorage = new MemoryStorage();
        _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);
        _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation);
        // Migrate any cache entries from older versions of MSAL.
        _this.migrateCacheEntries();
        return _this;
    }
    /**
     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
     * @param cacheLocation
     */
    BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {
        switch (cacheLocation) {
            case exports.BrowserCacheLocation.LocalStorage:
            case exports.BrowserCacheLocation.SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new BrowserStorage(cacheLocation);
                }
                catch (e) {
                    this.logger.verbose(e);
                    break;
                }
            case exports.BrowserCacheLocation.MemoryStorage:
        }
        this.cacheConfig.cacheLocation = exports.BrowserCacheLocation.MemoryStorage;
        return new MemoryStorage();
    };
    /**
     *
     * @param cacheLocation
     */
    BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (cacheLocation) {
        switch (cacheLocation) {
            case exports.BrowserCacheLocation.LocalStorage:
            case exports.BrowserCacheLocation.SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new BrowserStorage(exports.BrowserCacheLocation.SessionStorage);
                }
                catch (e) {
                    this.logger.verbose(e);
                    return this.internalStorage;
                }
            case exports.BrowserCacheLocation.MemoryStorage:
            default:
                return this.internalStorage;
        }
    };
    /**
     * Migrate all old cache entries to new schema. No rollback supported.
     * @param storeAuthStateInCookie
     */
    BrowserCacheManager.prototype.migrateCacheEntries = function () {
        var _this = this;
        var idTokenKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.ID_TOKEN;
        var clientInfoKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.CLIENT_INFO;
        var errorKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.ERROR;
        var errorDescKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.ERROR_DESC;
        var idTokenValue = this.browserStorage.getItem(idTokenKey);
        var clientInfoValue = this.browserStorage.getItem(clientInfoKey);
        var errorValue = this.browserStorage.getItem(errorKey);
        var errorDescValue = this.browserStorage.getItem(errorDescKey);
        var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];
        var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];
        keysToMigrate.forEach(function (cacheKey, index) { return _this.migrateCacheEntry(cacheKey, values[index]); });
    };
    /**
     * Utility function to help with migration.
     * @param newKey
     * @param value
     * @param storeAuthStateInCookie
     */
    BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {
        if (value) {
            this.setTemporaryCache(newKey, value, true);
        }
    };
    /**
     * Parses passed value as JSON object, JSON.parse() will throw an error.
     * @param input
     */
    BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {
        try {
            var parsedJson = JSON.parse(jsonValue);
            /**
             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
             *
             */
            return (parsedJson && typeof parsedJson === "object") ? parsedJson : null;
        }
        catch (error) {
            return null;
        }
    };
    /**
     * fetches the entry from the browser storage based off the key
     * @param key
     */
    BrowserCacheManager.prototype.getItem = function (key) {
        return this.browserStorage.getItem(key);
    };
    /**
     * sets the entry in the browser storage
     * @param key
     * @param value
     */
    BrowserCacheManager.prototype.setItem = function (key, value) {
        this.browserStorage.setItem(key, value);
    };
    /**
     * fetch the account entity from the platform cache
     * @param accountKey
     */
    BrowserCacheManager.prototype.getAccount = function (accountKey) {
        var account = this.getItem(accountKey);
        if (!account) {
            return null;
        }
        var parsedAccount = this.validateAndParseJson(account);
        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {
            return null;
        }
        return CacheManager.toObject(new AccountEntity(), parsedAccount);
    };
    /**
     * set account entity in the platform cache
     * @param key
     * @param value
     */
    BrowserCacheManager.prototype.setAccount = function (account) {
        this.logger.trace("BrowserCacheManager.setAccount called");
        var key = account.generateAccountKey();
        this.setItem(key, JSON.stringify(account));
    };
    /**
     * generates idToken entity from a string
     * @param idTokenKey
     */
    BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {
        var value = this.getItem(idTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        var parsedIdToken = this.validateAndParseJson(value);
        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit");
        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);
    };
    /**
     * set IdToken credential to the platform cache
     * @param idToken
     */
    BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {
        this.logger.trace("BrowserCacheManager.setIdTokenCredential called");
        var idTokenKey = idToken.generateCredentialKey();
        this.setItem(idTokenKey, JSON.stringify(idToken));
    };
    /**
     * generates accessToken entity from a string
     * @param key
     */
    BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {
        var value = this.getItem(accessTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        var parsedAccessToken = this.validateAndParseJson(value);
        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit");
        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);
    };
    /**
     * set accessToken credential to the platform cache
     * @param accessToken
     */
    BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {
        this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");
        var accessTokenKey = accessToken.generateCredentialKey();
        this.setItem(accessTokenKey, JSON.stringify(accessToken));
    };
    /**
     * generates refreshToken entity from a string
     * @param refreshTokenKey
     */
    BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {
        var value = this.getItem(refreshTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        var parsedRefreshToken = this.validateAndParseJson(value);
        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit");
        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);
    };
    /**
     * set refreshToken credential to the platform cache
     * @param refreshToken
     */
    BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {
        this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");
        var refreshTokenKey = refreshToken.generateCredentialKey();
        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));
    };
    /**
     * fetch appMetadata entity from the platform cache
     * @param appMetadataKey
     */
    BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {
        var value = this.getItem(appMetadataKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit");
        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);
    };
    /**
     * set appMetadata entity to the platform cache
     * @param appMetadata
     */
    BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {
        this.logger.trace("BrowserCacheManager.setAppMetadata called");
        var appMetadataKey = appMetadata.generateAppMetadataKey();
        this.setItem(appMetadataKey, JSON.stringify(appMetadata));
    };
    /**
     * fetch server telemetry entity from the platform cache
     * @param serverTelemetryKey
     */
    BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {
        var value = this.getItem(serverTelemetryKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit");
        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);
    };
    /**
     * set server telemetry entity to the platform cache
     * @param serverTelemetryKey
     * @param serverTelemetry
     */
    BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {
        this.logger.trace("BrowserCacheManager.setServerTelemetry called");
        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));
    };
    /**
     *
     */
    BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {
        var value = this.internalStorage.getItem(key);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit");
            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);
        }
        return null;
    };
    /**
     *
     */
    BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {
        var _this = this;
        var allKeys = this.internalStorage.getKeys();
        return allKeys.filter(function (key) {
            return _this.isAuthorityMetadata(key);
        });
    };
    /**
     *
     * @param entity
     */
    BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {
        this.logger.trace("BrowserCacheManager.setAuthorityMetadata called");
        this.internalStorage.setItem(key, JSON.stringify(entity));
    };
    /**
     * fetch throttling entity from the platform cache
     * @param throttlingCacheKey
     */
    BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {
        var value = this.getItem(throttlingCacheKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        var parsedThrottlingCache = this.validateAndParseJson(value);
        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit");
        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);
    };
    /**
     * set throttling entity to the platform cache
     * @param throttlingCacheKey
     * @param throttlingCache
     */
    BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {
        this.logger.trace("BrowserCacheManager.setThrottlingCache called");
        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));
    };
    /**
     * Gets cache item with given key.
     * Will retrieve from cookies if storeAuthStateInCookie is set to true.
     * @param key
     */
    BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {
        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        if (this.cacheConfig.storeAuthStateInCookie) {
            var itemCookie = this.getItemCookie(key);
            if (itemCookie) {
                this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies");
                return itemCookie;
            }
        }
        var value = this.temporaryCacheStorage.getItem(key);
        if (!value) {
            // If temp cache item not found in session/memory, check local storage for items set by old versions
            if (this.cacheConfig.cacheLocation === exports.BrowserCacheLocation.LocalStorage) {
                var item = this.browserStorage.getItem(key);
                if (item) {
                    this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage");
                    return item;
                }
            }
            this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned");
        return value;
    };
    /**
     * Sets the cache item with the key and value given.
     * Stores in cookie if storeAuthStateInCookie is set to true.
     * This can cause cookie overflow if used incorrectly.
     * @param key
     * @param value
     */
    BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {
        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        this.temporaryCacheStorage.setItem(key, value);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie");
            this.setItemCookie(key, value);
        }
    };
    /**
     * Removes the cache item with the given key.
     * Will also clear the cookie item if storeAuthStateInCookie is set to true.
     * @param key
     */
    BrowserCacheManager.prototype.removeItem = function (key) {
        this.browserStorage.removeItem(key);
        this.temporaryCacheStorage.removeItem(key);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie");
            this.clearItemCookie(key);
        }
        return true;
    };
    /**
     * Checks whether key is in cache.
     * @param key
     */
    BrowserCacheManager.prototype.containsKey = function (key) {
        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);
    };
    /**
     * Gets all keys in window.
     */
    BrowserCacheManager.prototype.getKeys = function () {
        return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());
    };
    /**
     * Clears all cache entries created by MSAL (except tokens).
     */
    BrowserCacheManager.prototype.clear = function () {
        var _this = this;
        this.removeAllAccounts();
        this.removeAppMetadata();
        this.getKeys().forEach(function (cacheKey) {
            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js
            if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(_this.clientId) !== -1))) {
                _this.removeItem(cacheKey);
            }
        });
        this.internalStorage.clear();
    };
    /**
     * Add value to cookies
     * @param cookieName
     * @param cookieValue
     * @param expires
     */
    BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {
        var cookieStr = encodeURIComponent(cookieName) + "=" + encodeURIComponent(cookieValue) + ";path=/;";
        if (expires) {
            var expireTime = this.getCookieExpirationTime(expires);
            cookieStr += "expires=" + expireTime + ";";
        }
        if (this.cacheConfig.secureCookies) {
            cookieStr += "Secure;";
        }
        document.cookie = cookieStr;
    };
    /**
     * Get one item by key from cookies
     * @param cookieName
     */
    BrowserCacheManager.prototype.getItemCookie = function (cookieName) {
        var name = encodeURIComponent(cookieName) + "=";
        var cookieList = document.cookie.split(";");
        for (var i = 0; i < cookieList.length; i++) {
            var cookie = cookieList[i];
            while (cookie.charAt(0) === " ") {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(name) === 0) {
                return decodeURIComponent(cookie.substring(name.length, cookie.length));
            }
        }
        return "";
    };
    /**
     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.
     */
    BrowserCacheManager.prototype.clearMsalCookies = function () {
        var _this = this;
        var cookiePrefix = Constants.CACHE_PREFIX + "." + this.clientId;
        var cookieList = document.cookie.split(";");
        cookieList.forEach(function (cookie) {
            while (cookie.charAt(0) === " ") {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(cookiePrefix) === 0) {
                var cookieKey = cookie.split("=")[0];
                _this.clearItemCookie(cookieKey);
            }
        });
    };
    /**
     * Clear an item in the cookies by key
     * @param cookieName
     */
    BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {
        this.setItemCookie(cookieName, "", -1);
    };
    /**
     * Get cookie expiration time
     * @param cookieLifeDays
     */
    BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {
        var today = new Date();
        var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);
        return expr.toUTCString();
    };
    /**
     * Gets the cache object referenced by the browser
     */
    BrowserCacheManager.prototype.getCache = function () {
        return this.browserStorage;
    };
    /**
     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser
     */
    BrowserCacheManager.prototype.setCache = function () {
        // sets nothing
    };
    /**
     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
     * @param key
     * @param addInstanceId
     */
    BrowserCacheManager.prototype.generateCacheKey = function (key) {
        var generatedKey = this.validateAndParseJson(key);
        if (!generatedKey) {
            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {
                return key;
            }
            return Constants.CACHE_PREFIX + "." + this.clientId + "." + key;
        }
        return JSON.stringify(key);
    };
    /**
     * Create authorityKey to cache authority
     * @param state
     */
    BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {
        var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + "." + stateId);
    };
    /**
     * Create Nonce key to cache nonce
     * @param state
     */
    BrowserCacheManager.prototype.generateNonceKey = function (stateString) {
        var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + "." + stateId);
    };
    /**
     * Creates full cache key for the request state
     * @param stateString State string for the request
     */
    BrowserCacheManager.prototype.generateStateKey = function (stateString) {
        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests
        var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + "." + stateId);
    };
    /**
     * Gets the cached authority based on the cached state. Returns empty if no cached state found.
     */
    BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {
        var stateCacheKey = this.generateStateKey(cachedState);
        var state = this.getTemporaryCache(stateCacheKey);
        if (!state) {
            return null;
        }
        var authorityCacheKey = this.generateAuthorityKey(state);
        return this.getTemporaryCache(authorityCacheKey);
    };
    /**
     * Updates account, authority, and state in cache
     * @param serverAuthenticationRequest
     * @param account
     */
    BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance) {
        this.logger.trace("BrowserCacheManager.updateCacheEntries called");
        // Cache the request state
        var stateCacheKey = this.generateStateKey(state);
        this.setTemporaryCache(stateCacheKey, state, false);
        // Cache the nonce
        var nonceCacheKey = this.generateNonceKey(state);
        this.setTemporaryCache(nonceCacheKey, nonce, false);
        // Cache authorityKey
        var authorityCacheKey = this.generateAuthorityKey(state);
        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);
    };
    /**
     * Reset all temporary cache items
     * @param state
     */
    BrowserCacheManager.prototype.resetRequestCache = function (state) {
        var _this = this;
        this.logger.trace("BrowserCacheManager.resetRequestCache called");
        // check state and remove associated cache items
        if (!StringUtils.isEmpty(state)) {
            this.getKeys().forEach(function (key) {
                if (key.indexOf(state) !== -1) {
                    _this.removeItem(key);
                }
            });
        }
        // delete generic interactive request parameters
        if (state) {
            this.removeItem(this.generateStateKey(state));
            this.removeItem(this.generateNonceKey(state));
            this.removeItem(this.generateAuthorityKey(state));
        }
        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));
        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));
        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));
        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
    };
    /**
     * Removes temporary cache for the provided state
     * @param stateString
     */
    BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {
        this.logger.trace("BrowserCacheManager.cleanRequestByState called");
        // Interaction is completed - remove interaction status.
        if (stateString) {
            var stateKey = this.generateStateKey(stateString);
            var cachedState = this.temporaryCacheStorage.getItem(stateKey);
            this.logger.infoPii("BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: " + cachedState);
            this.resetRequestCache(cachedState || "");
        }
        this.clearMsalCookies();
    };
    /**
     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state
     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.
     * @param interactionType
     */
    BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {
        var _this = this;
        this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called");
        // Loop through all keys to find state key
        this.getKeys().forEach(function (key) {
            // If this key is not the state key, move on
            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {
                return;
            }
            // Retrieve state value, return if not a valid value
            var stateValue = _this.temporaryCacheStorage.getItem(key);
            if (!stateValue) {
                return;
            }
            // Extract state and ensure it matches given InteractionType, then clean request cache
            var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);
            if (parsedState && parsedState.interactionType === interactionType) {
                _this.logger.infoPii("BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: " + stateValue);
                _this.resetRequestCache(stateValue);
            }
        });
        this.clearMsalCookies();
    };
    BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {
        this.logger.trace("BrowserCacheManager.cacheCodeRequest called");
        var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));
        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);
    };
    /**
     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
     */
    BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {
        this.logger.trace("BrowserCacheManager.getCachedRequest called");
        // Get token request from cache and parse as TokenExchangeParameters.
        var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);
        if (!encodedTokenRequest) {
            throw BrowserAuthError.createNoTokenRequestCacheError();
        }
        var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));
        if (!parsedRequest) {
            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();
        }
        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));
        // Get cached authority and use if no authority is cached with request.
        if (StringUtils.isEmpty(parsedRequest.authority)) {
            var authorityCacheKey = this.generateAuthorityKey(state);
            var cachedAuthority = this.getTemporaryCache(authorityCacheKey);
            if (!cachedAuthority) {
                throw BrowserAuthError.createNoCachedAuthorityError();
            }
            parsedRequest.authority = cachedAuthority;
        }
        return parsedRequest;
    };
    return BrowserCacheManager;
}(CacheManager));
var DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {
    var cacheOptions = {
        cacheLocation: exports.BrowserCacheLocation.MemoryStorage,
        storeAuthStateInCookie: false,
        secureCookies: false
    };
    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);
};

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 */
var FetchClient = /** @class */ (function () {
    function FetchClient() {
    }
    /**
     * Fetch Client for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */
    FetchClient.prototype.sendGetRequestAsync = function (url, options) {
        return __awaiter$1(this, void 0, void 0, function () {
            var response, e_1, _a;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fetch(url, {
                                method: HTTP_REQUEST_TYPE.GET,
                                headers: this.getFetchHeaders(options)
                            })];
                    case 1:
                        response = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        if (window.navigator.onLine) {
                            throw BrowserAuthError.createGetRequestFailedError(e_1, url);
                        }
                        else {
                            throw BrowserAuthError.createNoNetworkConnectivityError();
                        }
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        _a = {
                            headers: this.getHeaderDict(response.headers)
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_a.body = (_b.sent()),
                            _a.status = response.status,
                            _a)];
                    case 5:
                        _b.sent();
                        throw BrowserAuthError.createFailedToParseNetworkResponseError(url);
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch Client for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */
    FetchClient.prototype.sendPostRequestAsync = function (url, options) {
        return __awaiter$1(this, void 0, void 0, function () {
            var reqBody, response, e_3, _a;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reqBody = (options && options.body) || "";
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetch(url, {
                                method: HTTP_REQUEST_TYPE.POST,
                                headers: this.getFetchHeaders(options),
                                body: reqBody
                            })];
                    case 2:
                        response = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _b.sent();
                        if (window.navigator.onLine) {
                            throw BrowserAuthError.createPostRequestFailedError(e_3, url);
                        }
                        else {
                            throw BrowserAuthError.createNoNetworkConnectivityError();
                        }
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        _a = {
                            headers: this.getHeaderDict(response.headers)
                        };
                        return [4 /*yield*/, response.json()];
                    case 5: return [2 /*return*/, (_a.body = (_b.sent()),
                            _a.status = response.status,
                            _a)];
                    case 6:
                        _b.sent();
                        throw BrowserAuthError.createFailedToParseNetworkResponseError(url);
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Fetch API Headers object from string map
     * @param inputHeaders
     */
    FetchClient.prototype.getFetchHeaders = function (options) {
        var headers = new Headers();
        if (!(options && options.headers)) {
            return headers;
        }
        var optionsHeaders = options.headers;
        Object.keys(optionsHeaders).forEach(function (key) {
            headers.append(key, optionsHeaders[key]);
        });
        return headers;
    };
    FetchClient.prototype.getHeaderDict = function (headers) {
        var headerDict = {};
        headers.forEach(function (value, key) {
            headerDict[key] = value;
        });
        return headerDict;
    };
    return FetchClient;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This client implements the XMLHttpRequest class to send GET and POST requests.
 */
var XhrClient = /** @class */ (function () {
    function XhrClient() {
    }
    /**
     * XhrClient for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */
    XhrClient.prototype.sendGetRequestAsync = function (url, options) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];
            });
        });
    };
    /**
     * XhrClient for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */
    XhrClient.prototype.sendPostRequestAsync = function (url, options) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];
            });
        });
    };
    /**
     * Helper for XhrClient requests.
     * @param url
     * @param method
     * @param options
     */
    XhrClient.prototype.sendRequestAsync = function (url, method, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open(method, url, /* async: */ true);
            _this.setXhrHeaders(xhr, options);
            xhr.onload = function () {
                if (xhr.status < 200 || xhr.status >= 300) {
                    if (method === HTTP_REQUEST_TYPE.POST) {
                        reject(BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                    }
                    else {
                        reject(BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                    }
                }
                try {
                    var jsonResponse = JSON.parse(xhr.responseText);
                    var networkResponse = {
                        headers: _this.getHeaderDict(xhr),
                        body: jsonResponse,
                        status: xhr.status
                    };
                    resolve(networkResponse);
                }
                catch (e) {
                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));
                }
            };
            xhr.onerror = function () {
                if (window.navigator.onLine) {
                    if (method === HTTP_REQUEST_TYPE.POST) {
                        reject(BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                    }
                    else {
                        reject(BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                    }
                }
                else {
                    reject(BrowserAuthError.createNoNetworkConnectivityError());
                }
            };
            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {
                xhr.send(options.body);
            }
            else if (method === HTTP_REQUEST_TYPE.GET) {
                xhr.send();
            }
            else {
                throw BrowserAuthError.createHttpMethodNotImplementedError(method);
            }
        });
    };
    /**
     * Helper to set XHR headers for request.
     * @param xhr
     * @param options
     */
    XhrClient.prototype.setXhrHeaders = function (xhr, options) {
        if (options && options.headers) {
            var headers_1 = options.headers;
            Object.keys(headers_1).forEach(function (key) {
                xhr.setRequestHeader(key, headers_1[key]);
            });
        }
    };
    /**
     * Gets a string map of the headers received in the response.
     *
     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
     * @param xhr
     */
    XhrClient.prototype.getHeaderDict = function (xhr) {
        var headerString = xhr.getAllResponseHeaders();
        var headerArr = headerString.trim().split(/[\r\n]+/);
        var headerDict = {};
        headerArr.forEach(function (value) {
            var parts = value.split(": ");
            var headerName = parts.shift();
            var headerVal = parts.join(": ");
            if (headerName && headerVal) {
                headerDict[headerName] = headerVal;
            }
        });
        return headerDict;
    };
    return XhrClient;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class for browser specific functions
 */
var BrowserUtils = /** @class */ (function () {
    function BrowserUtils() {
    }
    // #region Window Navigation and URL management
    /**
     * Clears hash from window url.
     */
    BrowserUtils.clearHash = function (contentWindow) {
        // Office.js sets history.replaceState to null
        contentWindow.location.hash = Constants.EMPTY_STRING;
        if (typeof contentWindow.history.replaceState === "function") {
            // Full removes "#" from url
            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, "" + contentWindow.location.pathname + contentWindow.location.search);
        }
    };
    /**
     * Replaces current hash with hash from provided url
     */
    BrowserUtils.replaceHash = function (url) {
        var urlParts = url.split("#");
        urlParts.shift(); // Remove part before the hash
        window.location.hash = urlParts.length > 0 ? urlParts.join("#") : "";
    };
    /**
     * Returns boolean of whether the current window is in an iframe or not.
     */
    BrowserUtils.isInIframe = function () {
        return window.parent !== window;
    };
    // #endregion
    /**
     * Returns current window URL as redirect uri
     */
    BrowserUtils.getCurrentUri = function () {
        return window.location.href.split("?")[0].split("#")[0];
    };
    /**
     * Gets the homepage url for the current window location.
     */
    BrowserUtils.getHomepage = function () {
        var currentUrl = new UrlString(window.location.href);
        var urlComponents = currentUrl.getUrlComponents();
        return urlComponents.Protocol + "//" + urlComponents.HostNameAndPort + "/";
    };
    /**
     * Returns best compatible network client object.
     */
    BrowserUtils.getBrowserNetworkClient = function () {
        if (window.fetch && window.Headers) {
            return new FetchClient();
        }
        else {
            return new XhrClient();
        }
    };
    /**
     * Throws error if we have completed an auth and are
     * attempting another auth request inside an iframe.
     */
    BrowserUtils.blockReloadInHiddenIframes = function () {
        var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);
        // return an error if called from the hidden iframe created by the msal js silent calls
        if (isResponseHash && BrowserUtils.isInIframe()) {
            throw BrowserAuthError.createBlockReloadInHiddenIframeError();
        }
    };
    /**
     * Block redirect operations in iframes unless explicitly allowed
     * @param interactionType Interaction type for the request
     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
     */
    BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {
        var isIframedApp = BrowserUtils.isInIframe();
        if (interactionType === exports.InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {
            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
            throw BrowserAuthError.createRedirectInIframeError(isIframedApp);
        }
    };
    /**
     * Block redirectUri loaded in popup from calling AcquireToken APIs
     */
    BrowserUtils.blockAcquireTokenInPopups = function () {
        // Popups opened by msal popup APIs are given a name that starts with "msal."
        if (window.opener && window.opener !== window && typeof window.name === "string" && window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + ".") === 0) {
            throw BrowserAuthError.createBlockAcquireTokenInPopupsError();
        }
    };
    /**
     * Throws error if token requests are made in non-browser environment
     * @param isBrowserEnvironment Flag indicating if environment is a browser.
     */
    BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {
        if (!isBrowserEnvironment) {
            throw BrowserAuthError.createNonBrowserEnvironmentError();
        }
    };
    /**
     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.
     */
    BrowserUtils.detectIEOrEdge = function () {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        var msie11 = ua.indexOf("Trident/");
        var msedge = ua.indexOf("Edge/");
        var isIE = msie > 0 || msie11 > 0;
        var isEdge = msedge > 0;
        return isIE || isEdge;
    };
    return BrowserUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var NavigationClient = /** @class */ (function () {
    function NavigationClient() {
    }
    /**
     * Navigates to other pages within the same web application
     * @param url
     * @param options
     */
    NavigationClient.prototype.navigateInternal = function (url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    };
    /**
     * Navigates to other pages outside the web application i.e. the Identity Provider
     * @param url
     * @param options
     */
    NavigationClient.prototype.navigateExternal = function (url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    };
    /**
     * Default navigation implementation invoked by the internal and external functions
     * @param url
     * @param options
     */
    NavigationClient.defaultNavigateWindow = function (url, options) {
        if (options.noHistory) {
            window.location.replace(url);
        }
        else {
            window.location.assign(url);
        }
        return new Promise(function (resolve) {
            setTimeout(function () {
                resolve(true);
            }, options.timeout);
        });
    };
    return NavigationClient;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Default timeout for popup windows and iframes in milliseconds
var DEFAULT_POPUP_TIMEOUT_MS = 60000;
var DEFAULT_IFRAME_TIMEOUT_MS = 6000;
var DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
/**
 * MSAL function that sets the default options when not explicitly configured from app developer
 *
 * @param auth
 * @param cache
 * @param system
 *
 * @returns Configuration object
 */
function buildConfiguration(_a, isBrowserEnvironment) {
    var userInputAuth = _a.auth, userInputCache = _a.cache, userInputSystem = _a.system;
    // Default auth options for browser
    var DEFAULT_AUTH_OPTIONS = {
        clientId: "",
        authority: "" + Constants.DEFAULT_AUTHORITY,
        knownAuthorities: [],
        cloudDiscoveryMetadata: "",
        authorityMetadata: "",
        redirectUri: "",
        postLogoutRedirectUri: "",
        navigateToLoginRequestUrl: true,
        clientCapabilities: [],
        protocolMode: exports.ProtocolMode.AAD
    };
    // Default cache options for browser
    var DEFAULT_CACHE_OPTIONS = {
        cacheLocation: exports.BrowserCacheLocation.SessionStorage,
        storeAuthStateInCookie: false,
        secureCookies: false
    };
    // Default logger options for browser
    var DEFAULT_LOGGER_OPTIONS = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        loggerCallback: function () { },
        logLevel: exports.LogLevel.Info,
        piiLoggingEnabled: false
    };
    // Default system options for browser
    var DEFAULT_BROWSER_SYSTEM_OPTIONS = __assign$1(__assign$1({}, DEFAULT_SYSTEM_OPTIONS), { loggerOptions: DEFAULT_LOGGER_OPTIONS, networkClient: isBrowserEnvironment ? BrowserUtils.getBrowserNetworkClient() : StubbedNetworkModule, navigationClient: new NavigationClient(), loadFrameTimeout: 0, 
        // If loadFrameTimeout is provided, use that as default.
        windowHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_POPUP_TIMEOUT_MS, iframeHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_IFRAME_TIMEOUT_MS, navigateFrameWait: isBrowserEnvironment && BrowserUtils.detectIEOrEdge() ? 500 : 0, redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS, asyncPopups: false, allowRedirectInIframe: false });
    var overlayedConfig = {
        auth: __assign$1(__assign$1({}, DEFAULT_AUTH_OPTIONS), userInputAuth),
        cache: __assign$1(__assign$1({}, DEFAULT_CACHE_OPTIONS), userInputCache),
        system: __assign$1(__assign$1({}, DEFAULT_BROWSER_SYSTEM_OPTIONS), userInputSystem)
    };
    return overlayedConfig;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Abstract class which defines operations for a browser interaction handling class.
 */
var InteractionHandler = /** @class */ (function () {
    function InteractionHandler(authCodeModule, storageImpl, authCodeRequest) {
        this.authModule = authCodeModule;
        this.browserStorage = storageImpl;
        this.authCodeRequest = authCodeRequest;
    }
    /**
     * Function to handle response parameters from hash.
     * @param locationHash
     */
    InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {
        return __awaiter$1(this, void 0, void 0, function () {
            var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, tokenResponse;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Check that location hash isn't empty.
                        if (StringUtils.isEmpty(locationHash)) {
                            throw BrowserAuthError.createEmptyHashError(locationHash);
                        }
                        stateKey = this.browserStorage.generateStateKey(state);
                        requestState = this.browserStorage.getTemporaryCache(stateKey);
                        if (!requestState) {
                            throw ClientAuthError.createStateNotFoundError("Cached State");
                        }
                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                        nonceKey = this.browserStorage.generateNonceKey(requestState);
                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                        // Assign code to request
                        this.authCodeRequest.code = authCodeResponse.code;
                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authCodeResponse.nonce = cachedNonce || undefined;
                        authCodeResponse.state = requestState;
                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                    case 3:
                        tokenResponse = _a.sent();
                        this.browserStorage.cleanRequestByState(state);
                        return [2 /*return*/, tokenResponse];
                }
            });
        });
    };
    InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {
        return __awaiter$1(this, void 0, void 0, function () {
            var cloudInstanceAuthorityUri, cloudInstanceAuthority;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cloudInstanceAuthorityUri = "https://" + cloudInstanceHostname + "/" + authority.tenant + "/";
                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];
                    case 1:
                        cloudInstanceAuthority = _a.sent();
                        this.authModule.updateAuthority(cloudInstanceAuthority);
                        return [2 /*return*/];
                }
            });
        });
    };
    return InteractionHandler;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RedirectHandler = /** @class */ (function (_super) {
    __extends$1(RedirectHandler, _super);
    function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserCrypto) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest) || this;
        _this.browserCrypto = browserCrypto;
        return _this;
    }
    /**
     * Redirects window to given URL.
     * @param urlNavigate
     */
    RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
        return __awaiter$1(this, void 0, void 0, function () {
            var navigationOptions, navigate;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.authModule.logger.verbose("RedirectHandler.initiateAuthRequest called");
                        if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];
                        // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
                        if (params.redirectStartPage) {
                            this.authModule.logger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set to true, caching start page");
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);
                        }
                        // Set interaction status in the library.
                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);
                        this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);
                        this.authModule.logger.infoPii("RedirectHandler.initiateAuthRequest: Navigate to:" + requestUrl);
                        navigationOptions = {
                            apiId: exports.ApiId.acquireTokenRedirect,
                            timeout: params.redirectTimeout,
                            noHistory: false
                        };
                        if (!(typeof params.onRedirectNavigate === "function")) return [3 /*break*/, 4];
                        this.authModule.logger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");
                        navigate = params.onRedirectNavigate(requestUrl);
                        if (!(navigate !== false)) return [3 /*break*/, 2];
                        this.authModule.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating");
                        return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        this.authModule.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation");
                        return [2 /*return*/];
                    case 3: return [3 /*break*/, 6];
                    case 4:
                        // Navigate window to request URL
                        this.authModule.logger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url");
                        return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        // Throw error if request URL is empty.
                        this.authModule.logger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty");
                        throw BrowserAuthError.createEmptyNavigationUriError();
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Handle authorization code response in the window.
     * @param hash
     */
    RedirectHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule, clientId) {
        return __awaiter$1(this, void 0, void 0, function () {
            var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, tokenResponse;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.authModule.logger.verbose("RedirectHandler.handleCodeResponse called");
                        // Check that location hash isn't empty.
                        if (StringUtils.isEmpty(locationHash)) {
                            throw BrowserAuthError.createEmptyHashError(locationHash);
                        }
                        // Interaction is completed - remove interaction status.
                        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
                        stateKey = this.browserStorage.generateStateKey(state);
                        requestState = this.browserStorage.getTemporaryCache(stateKey);
                        if (!requestState) {
                            throw ClientAuthError.createStateNotFoundError("Cached State");
                        }
                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                        nonceKey = this.browserStorage.generateNonceKey(requestState);
                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                        // Assign code to request
                        this.authCodeRequest.code = authCodeResponse.code;
                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authCodeResponse.nonce = cachedNonce || undefined;
                        authCodeResponse.state = requestState;
                        // Remove throttle if it exists
                        if (clientId) {
                            ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);
                        }
                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                    case 3:
                        tokenResponse = _a.sent();
                        this.browserStorage.cleanRequestByState(state);
                        return [2 /*return*/, tokenResponse];
                }
            });
        });
    };
    return RedirectHandler;
}(InteractionHandler));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var PopupUtils = /** @class */ (function () {
    function PopupUtils(storageImpl, logger) {
        this.browserStorage = storageImpl;
        this.logger = logger;
        // Properly sets this reference for the unload event.
        this.unloadWindow = this.unloadWindow.bind(this);
    }
    /**
     * @hidden
     *
     * Configures popup window for login.
     *
     * @param urlNavigate
     * @param title
     * @param popUpWidth
     * @param popUpHeight
     * @ignore
     * @hidden
     */
    PopupUtils.prototype.openPopup = function (urlNavigate, popupName, popup) {
        try {
            var popupWindow = void 0;
            // Popup window passed in, setting url to navigate to
            if (popup) {
                popupWindow = popup;
                this.logger.verbosePii("Navigating popup window to: " + urlNavigate);
                popupWindow.location.assign(urlNavigate);
            }
            else if (typeof popup === "undefined") {
                // Popup will be undefined if it was not passed in
                this.logger.verbosePii("Opening popup window to: " + urlNavigate);
                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);
            }
            // Popup will be null if popups are blocked
            if (!popupWindow) {
                throw BrowserAuthError.createEmptyWindowCreatedError();
            }
            if (popupWindow.focus) {
                popupWindow.focus();
            }
            this.currentWindow = popupWindow;
            window.addEventListener("beforeunload", this.unloadWindow);
            return popupWindow;
        }
        catch (e) {
            this.logger.error("error opening popup " + e.message);
            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
            throw BrowserAuthError.createPopupWindowError(e.toString());
        }
    };
    PopupUtils.openSizedPopup = function (urlNavigate, popupName) {
        /**
         * adding winLeft and winTop to account for dual monitor
         * using screenLeft and screenTop for IE8 and earlier
         */
        var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
        var winTop = window.screenTop ? window.screenTop : window.screenY;
        /**
         * window.innerWidth displays browser window"s height and width excluding toolbars
         * using document.documentElement.clientWidth for IE8 and earlier
         */
        var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        var left = Math.max(0, ((width / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);
        var top = Math.max(0, ((height / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);
        return window.open(urlNavigate, popupName, "width=" + BrowserConstants.POPUP_WIDTH + ", height=" + BrowserConstants.POPUP_HEIGHT + ", top=" + top + ", left=" + left + ", scrollbars=yes");
    };
    /**
     * Event callback to unload main window.
     */
    PopupUtils.prototype.unloadWindow = function (e) {
        this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Popup);
        if (this.currentWindow) {
            this.currentWindow.close();
        }
        // Guarantees browser unload will happen, so no other errors will be thrown.
        e.preventDefault();
    };
    /**
     * Closes popup, removes any state vars created during popup calls.
     * @param popupWindow
     */
    PopupUtils.prototype.cleanPopup = function (popupWindow) {
        if (popupWindow) {
            // Close window.
            popupWindow.close();
        }
        // Remove window unload function
        window.removeEventListener("beforeunload", this.unloadWindow);
        // Interaction is completed - remove interaction status.
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
    };
    /**
     * Monitors a window until it loads a url with the same origin.
     * @param popupWindow - window that is being monitored
     */
    PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var intervalId = setInterval(function () {
                if (popupWindow.closed) {
                    // Window is closed
                    _this.cleanPopup();
                    clearInterval(intervalId);
                    reject(BrowserAuthError.createUserCancelledError());
                    return;
                }
                var href = Constants.EMPTY_STRING;
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */
                    href = popupWindow.location.href;
                }
                catch (e) { }
                // Don't process blank pages or cross domain
                if (StringUtils.isEmpty(href) || href === "about:blank") {
                    return;
                }
                clearInterval(intervalId);
                resolve();
            }, BrowserConstants.POLL_INTERVAL_MS);
        });
    };
    /**
     * Generates the name for the popup based on the client id and request
     * @param clientId
     * @param request
     */
    PopupUtils.generatePopupName = function (clientId, request) {
        return BrowserConstants.POPUP_NAME_PREFIX + "." + clientId + "." + request.scopes.join("-") + "." + request.authority + "." + request.correlationId;
    };
    /**
     * Generates the name for the popup based on the client id and request for logouts
     * @param clientId
     * @param request
     */
    PopupUtils.generateLogoutPopupName = function (clientId, request) {
        var homeAccountId = request.account && request.account.homeAccountId;
        return BrowserConstants.POPUP_NAME_PREFIX + "." + clientId + "." + homeAccountId + "." + request.correlationId;
    };
    return PopupUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * This class implements the interaction handler base class for browsers. It is written specifically for handling
 * popup window scenarios. It includes functions for monitoring the popup window for a hash.
 */
var PopupHandler = /** @class */ (function (_super) {
    __extends$1(PopupHandler, _super);
    function PopupHandler(authCodeModule, storageImpl, authCodeRequest) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest) || this;
        // Properly sets this reference for the unload event.
        _this.popupUtils = new PopupUtils(storageImpl, authCodeModule.logger);
        return _this;
    }
    /**
     * Opens a popup window with given request Url.
     * @param requestUrl
     */
    PopupHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
        // Check that request url is not empty.
        if (!StringUtils.isEmpty(requestUrl)) {
            // Set interaction status in the library.
            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);
            this.authModule.logger.infoPii("Navigate to:" + requestUrl);
            // Open the popup window to requestUrl.
            return this.popupUtils.openPopup(requestUrl, params.popupName, params.popup);
        }
        else {
            // Throw error if request URL is empty.
            this.authModule.logger.error("Navigate url is empty");
            throw BrowserAuthError.createEmptyNavigationUriError();
        }
    };
    /**
     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.
     * @param popupWindow - window that is being monitored
     * @param timeout - milliseconds until timeout
     */
    PopupHandler.prototype.monitorPopupForHash = function (popupWindow) {
        var _this = this;
        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(function () {
            var contentHash = popupWindow.location.hash;
            BrowserUtils.clearHash(popupWindow);
            _this.popupUtils.cleanPopup(popupWindow);
            if (!contentHash) {
                throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);
            }
            if (UrlString.hashContainsKnownProperties(contentHash)) {
                return contentHash;
            }
            else {
                throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();
            }
        });
    };
    return PopupHandler;
}(InteractionHandler));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentHandler = /** @class */ (function (_super) {
    __extends$1(SilentHandler, _super);
    function SilentHandler(authCodeModule, storageImpl, authCodeRequest, navigateFrameWait) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest) || this;
        _this.navigateFrameWait = navigateFrameWait;
        return _this;
    }
    /**
     * Creates a hidden iframe to given URL using user-requested scopes as an id.
     * @param urlNavigate
     * @param userRequestScopes
     */
    SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {
        return __awaiter$1(this, void 0, void 0, function () {
            var _a;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (StringUtils.isEmpty(requestUrl)) {
                            // Throw error if request URL is empty.
                            this.authModule.logger.info("Navigate url is empty");
                            throw BrowserAuthError.createEmptyNavigationUriError();
                        }
                        if (!this.navigateFrameWait) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadFrame(requestUrl)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = this.loadFrameSync(requestUrl);
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    /**
     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
     * @param iframe
     * @param timeout
     */
    SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {
                _this.authModule.logger.warning("system.loadFrameTimeout or system.iframeHashTimeout set to lower (" + timeout + "ms) than the default (" + DEFAULT_IFRAME_TIMEOUT_MS + "ms). This may result in timeouts.");
            }
            /*
             * Polling for iframes can be purely timing based,
             * since we don't need to account for interaction.
             */
            var nowMark = window.performance.now();
            var timeoutMark = nowMark + timeout;
            var intervalId = setInterval(function () {
                if (window.performance.now() > timeoutMark) {
                    _this.removeHiddenIframe(iframe);
                    clearInterval(intervalId);
                    reject(BrowserAuthError.createMonitorIframeTimeoutError());
                    return;
                }
                var href = Constants.EMPTY_STRING;
                var contentWindow = iframe.contentWindow;
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */
                    href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;
                }
                catch (e) { }
                if (StringUtils.isEmpty(href)) {
                    return;
                }
                var contentHash = contentWindow ? contentWindow.location.hash : Constants.EMPTY_STRING;
                if (UrlString.hashContainsKnownProperties(contentHash)) {
                    // Success case
                    _this.removeHiddenIframe(iframe);
                    clearInterval(intervalId);
                    resolve(contentHash);
                    return;
                }
            }, BrowserConstants.POLL_INTERVAL_MS);
        });
    };
    /**
     * @hidden
     * Loads iframe with authorization endpoint URL
     * @ignore
     */
    SilentHandler.prototype.loadFrame = function (urlNavigate) {
        /*
         * This trick overcomes iframe navigation in IE
         * IE does not load the page consistently in iframe
         */
        var _this = this;
        return new Promise(function (resolve, reject) {
            var frameHandle = _this.createHiddenIframe();
            setTimeout(function () {
                if (!frameHandle) {
                    reject("Unable to load iframe");
                    return;
                }
                frameHandle.src = urlNavigate;
                resolve(frameHandle);
            }, _this.navigateFrameWait);
        });
    };
    /**
     * @hidden
     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
     * @param urlNavigate
     * @param frameName
     * @param logger
     */
    SilentHandler.prototype.loadFrameSync = function (urlNavigate) {
        var frameHandle = this.createHiddenIframe();
        frameHandle.src = urlNavigate;
        return frameHandle;
    };
    /**
     * @hidden
     * Creates a new hidden iframe or gets an existing one for silent token renewal.
     * @ignore
     */
    SilentHandler.prototype.createHiddenIframe = function () {
        var authFrame = document.createElement("iframe");
        authFrame.style.visibility = "hidden";
        authFrame.style.position = "absolute";
        authFrame.style.width = authFrame.style.height = "0";
        authFrame.style.border = "0";
        authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
        document.getElementsByTagName("body")[0].appendChild(authFrame);
        return authFrame;
    };
    /**
     * @hidden
     * Removes a hidden iframe from the page.
     * @ignore
     */
    SilentHandler.prototype.removeHiddenIframe = function (iframe) {
        if (document.body === iframe.parentNode) {
            document.body.removeChild(iframe);
        }
    };
    return SilentHandler;
}(InteractionHandler));

/* eslint-disable header/header */
var name = "@azure/msal-browser";
var version = "2.14.2";

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
exports.EventType = void 0;
(function (EventType) {
    EventType["LOGIN_START"] = "msal:loginStart";
    EventType["LOGIN_SUCCESS"] = "msal:loginSuccess";
    EventType["LOGIN_FAILURE"] = "msal:loginFailure";
    EventType["ACQUIRE_TOKEN_START"] = "msal:acquireTokenStart";
    EventType["ACQUIRE_TOKEN_SUCCESS"] = "msal:acquireTokenSuccess";
    EventType["ACQUIRE_TOKEN_FAILURE"] = "msal:acquireTokenFailure";
    EventType["ACQUIRE_TOKEN_NETWORK_START"] = "msal:acquireTokenFromNetworkStart";
    EventType["SSO_SILENT_START"] = "msal:ssoSilentStart";
    EventType["SSO_SILENT_SUCCESS"] = "msal:ssoSilentSuccess";
    EventType["SSO_SILENT_FAILURE"] = "msal:ssoSilentFailure";
    EventType["HANDLE_REDIRECT_START"] = "msal:handleRedirectStart";
    EventType["HANDLE_REDIRECT_END"] = "msal:handleRedirectEnd";
    EventType["POPUP_OPENED"] = "msal:popupOpened";
    EventType["LOGOUT_START"] = "msal:logoutStart";
    EventType["LOGOUT_SUCCESS"] = "msal:logoutSuccess";
    EventType["LOGOUT_FAILURE"] = "msal:logoutFailure";
    EventType["LOGOUT_END"] = "msal:logoutEnd";
})(exports.EventType || (exports.EventType = {}));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ClientApplication = /** @class */ (function () {
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     */
    function ClientApplication(configuration) {
        /*
         * If loaded in an environment where window is not available,
         * set internal flag to false so that further requests fail.
         * This is to support server-side rendering environments.
         */
        this.isBrowserEnvironment = typeof window !== "undefined";
        // Set the configuration.
        this.config = buildConfiguration(configuration, this.isBrowserEnvironment);
        this.activeLocalAccountId = null;
        // Array of events
        this.eventCallbacks = new Map();
        // Initialize logger
        this.logger = new Logger(this.config.system.loggerOptions, name, version);
        // Initialize the network module class.
        this.networkClient = this.config.system.networkClient;
        // Initialize the navigation client class.
        this.navigationClient = this.config.system.navigationClient;
        // Initialize redirectResponse Map
        this.redirectResponse = new Map();
        if (!this.isBrowserEnvironment) {
            this.browserStorage = DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);
            this.browserCrypto = DEFAULT_CRYPTO_IMPLEMENTATION;
            return;
        }
        // Initialize the crypto class.
        this.browserCrypto = new CryptoOps();
        // Initialize the browser storage class.
        this.browserStorage = new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger);
    }
    // #region Redirect Flow
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */
    ClientApplication.prototype.handleRedirectPromise = function (hash) {
        return __awaiter$1(this, void 0, void 0, function () {
            var loggedInAccounts, redirectResponseKey, response;
            var _this = this;
            return __generator$1(this, function (_a) {
                this.emitEvent(exports.EventType.HANDLE_REDIRECT_START, exports.InteractionType.Redirect);
                this.logger.verbose("handleRedirectPromise called");
                loggedInAccounts = this.getAllAccounts();
                if (this.isBrowserEnvironment) {
                    redirectResponseKey = hash || Constants.EMPTY_STRING;
                    response = this.redirectResponse.get(redirectResponseKey);
                    if (typeof response === "undefined") {
                        this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
                        response = this.handleRedirectResponse(hash)
                            .then(function (result) {
                            if (result) {
                                // Emit login event if number of accounts change
                                var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                                if (isLoggingIn) {
                                    _this.emitEvent(exports.EventType.LOGIN_SUCCESS, exports.InteractionType.Redirect, result);
                                    _this.logger.verbose("handleRedirectResponse returned result, login success");
                                }
                                else {
                                    _this.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Redirect, result);
                                    _this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                                }
                            }
                            _this.emitEvent(exports.EventType.HANDLE_REDIRECT_END, exports.InteractionType.Redirect);
                            return result;
                        })
                            .catch(function (e) {
                            // Emit login event if there is an account
                            if (loggedInAccounts.length > 0) {
                                _this.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Redirect, null, e);
                            }
                            else {
                                _this.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Redirect, null, e);
                            }
                            _this.emitEvent(exports.EventType.HANDLE_REDIRECT_END, exports.InteractionType.Redirect);
                            throw e;
                        });
                        this.redirectResponse.set(redirectResponseKey, response);
                    }
                    else {
                        this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
                    }
                    return [2 /*return*/, response];
                }
                this.logger.verbose("handleRedirectPromise returns null, not browser environment");
                return [2 /*return*/, null];
            });
        });
    };
    /**
     * Checks if navigateToLoginRequestUrl is set, and:
     * - if true, performs logic to cache and navigate
     * - if false, handles hash string and parses response
     * @param hash
     */
    ClientApplication.prototype.handleRedirectResponse = function (hash) {
        return __awaiter$1(this, void 0, void 0, function () {
            var responseHash, state, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.interactionInProgress()) {
                            this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                            return [2 /*return*/, null];
                        }
                        responseHash = this.getRedirectResponseHash(hash || window.location.hash);
                        if (!responseHash) {
                            // Not a recognized server response hash or hash not associated with a redirect request
                            this.logger.info("handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.");
                            this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect);
                            return [2 /*return*/, null];
                        }
                        try {
                            state = this.validateAndExtractStateFromHash(responseHash, exports.InteractionType.Redirect);
                            BrowserUtils.clearHash(window);
                            this.logger.verbose("State extracted from hash");
                        }
                        catch (e) {
                            this.logger.info("handleRedirectPromise was unable to extract state due to: " + e);
                            this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect);
                            return [2 /*return*/, null];
                        }
                        loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || "";
                        loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);
                        currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);
                        if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 2];
                        // We are on the page we need to navigate to - handle hash
                        this.logger.verbose("Current page is loginRequestUrl, handling hash");
                        return [4 /*yield*/, this.handleHash(responseHash, state)];
                    case 1:
                        handleHashResult = _a.sent();
                        if (loginRequestUrl.indexOf("#") > -1) {
                            // Replace current hash with non-msal hash, if present
                            BrowserUtils.replaceHash(loginRequestUrl);
                        }
                        return [2 /*return*/, handleHashResult];
                    case 2:
                        if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 3];
                        this.logger.verbose("NavigateToLoginRequestUrl set to false, handling hash");
                        return [2 /*return*/, this.handleHash(responseHash, state)];
                    case 3:
                        if (!!BrowserUtils.isInIframe()) return [3 /*break*/, 8];
                        /*
                         * Returned from authority using redirect - need to perform navigation before processing response
                         * Cache the hash to be retrieved after the next redirect
                         */
                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);
                        navigationOptions = {
                            apiId: exports.ApiId.handleRedirectPromise,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: true
                        };
                        processHashOnRedirect = true;
                        if (!(!loginRequestUrl || loginRequestUrl === "null")) return [3 /*break*/, 5];
                        homepage = BrowserUtils.getHomepage();
                        // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);
                        this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                        return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];
                    case 4:
                        processHashOnRedirect = _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        // Navigate to page that initiated the redirect request
                        this.logger.verbose("Navigating to loginRequestUrl: " + loginRequestUrl);
                        return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];
                    case 6:
                        processHashOnRedirect = _a.sent();
                        _a.label = 7;
                    case 7:
                        // If navigateInternal implementation returns false, handle the hash now
                        if (!processHashOnRedirect) {
                            return [2 /*return*/, this.handleHash(responseHash, state)];
                        }
                        _a.label = 8;
                    case 8: return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Gets the response hash for a redirect request
     * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
     * @param hash
     */
    ClientApplication.prototype.getRedirectResponseHash = function (hash) {
        this.logger.verbose("getRedirectResponseHash called");
        // Get current location hash from window or cache.
        var isResponseHash = UrlString.hashContainsKnownProperties(hash);
        var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));
        if (isResponseHash) {
            this.logger.verbose("Hash contains known properties, returning response hash");
            return hash;
        }
        this.logger.verbose("Hash does not contain known properties, returning cached hash");
        return cachedHash;
    };
    /**
     * @param hash
     * @param interactionType
     */
    ClientApplication.prototype.validateAndExtractStateFromHash = function (hash, interactionType) {
        this.logger.verbose("validateAndExtractStateFromHash called");
        // Deserialize hash fragment response parameters.
        var serverParams = UrlString.getDeserializedHash(hash);
        if (!serverParams.state) {
            throw BrowserAuthError.createHashDoesNotContainStateError();
        }
        var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);
        if (!platformStateObj) {
            throw BrowserAuthError.createUnableToParseStateError();
        }
        if (platformStateObj.interactionType !== interactionType) {
            throw BrowserAuthError.createStateInteractionTypeMismatchError();
        }
        this.logger.verbose("Returning state from hash");
        return serverParams.state;
    };
    /**
     * Checks if hash exists and handles in window.
     * @param hash
     * @param state
     */
    ClientApplication.prototype.handleHash = function (hash, state) {
        return __awaiter$1(this, void 0, void 0, function () {
            var cachedRequest, serverTelemetryManager, currentAuthority, authClient, interactionHandler, e_1;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("handleHash called");
                        cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.handleRedirectPromise, cachedRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        currentAuthority = this.browserStorage.getCachedAuthority(state);
                        if (!currentAuthority) {
                            throw BrowserAuthError.createNoCachedAuthorityError();
                        }
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];
                    case 2:
                        authClient = _a.sent();
                        interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.browserCrypto);
                        return [4 /*yield*/, interactionHandler.handleCodeResponse(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_1 = _a.sent();
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect);
                        throw e_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */
    ClientApplication.prototype.acquireTokenRedirect = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            var isLoggedIn, validRequest, serverTelemetryManager, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_2;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Preflight request
                        this.preflightBrowserEnvironmentCheck(exports.InteractionType.Redirect);
                        this.logger.verbose("acquireTokenRedirect called");
                        isLoggedIn = this.getAllAccounts().length > 0;
                        if (isLoggedIn) {
                            this.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Redirect, request);
                        }
                        else {
                            this.emitEvent(exports.EventType.LOGIN_START, exports.InteractionType.Redirect, request);
                        }
                        validRequest = this.preflightInteractiveRequest(request, exports.InteractionType.Redirect);
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenRedirect, validRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                    case 2:
                        authCodeRequest = _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];
                    case 3:
                        authClient = _a.sent();
                        interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.browserCrypto);
                        return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                    case 4:
                        navigateUrl = _a.sent();
                        redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
                        // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                        return [2 /*return*/, interactionHandler.initiateAuthRequest(navigateUrl, {
                                navigationClient: this.navigationClient,
                                redirectTimeout: this.config.system.redirectNavigationTimeout,
                                redirectStartPage: redirectStartPage,
                                onRedirectNavigate: request.onRedirectNavigate
                            })];
                    case 5:
                        e_2 = _a.sent();
                        // If logged in, emit acquire token events
                        if (isLoggedIn) {
                            this.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Redirect, null, e_2);
                        }
                        else {
                            this.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Redirect, null, e_2);
                        }
                        serverTelemetryManager.cacheFailedRequest(e_2);
                        this.browserStorage.cleanRequestByState(validRequest.state);
                        throw e_2;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    // #endregion
    // #region Popup Flow
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.acquireTokenPopup = function (request) {
        var validRequest;
        try {
            this.preflightBrowserEnvironmentCheck(exports.InteractionType.Popup);
            this.logger.verbose("acquireTokenPopup called");
            validRequest = this.preflightInteractiveRequest(request, exports.InteractionType.Popup);
        }
        catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
        var popupName = PopupUtils.generatePopupName(this.config.auth.clientId, validRequest);
        // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
        if (this.config.system.asyncPopups) {
            this.logger.verbose("asyncPopups set to true, acquiring token");
            return this.acquireTokenPopupAsync(validRequest, popupName);
        }
        else {
            // asyncPopups flag is set to false. Opens popup before acquiring token.
            this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
            var popup = PopupUtils.openSizedPopup("about:blank", popupName);
            return this.acquireTokenPopupAsync(validRequest, popupName, popup);
        }
    };
    /**
     * Helper which obtains an access_token for your API via opening a popup window in the user's browser
     * @param validRequest
     * @param popupName
     * @param popup
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.acquireTokenPopupAsync = function (validRequest, popupName, popup) {
        return __awaiter$1(this, void 0, void 0, function () {
            var loggedInAccounts, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, state, result, isLoggingIn, e_3;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("acquireTokenPopupAsync called");
                        loggedInAccounts = this.getAllAccounts();
                        if (loggedInAccounts.length > 0) {
                            this.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Popup, validRequest);
                        }
                        else {
                            this.emitEvent(exports.EventType.LOGIN_START, exports.InteractionType.Popup, validRequest);
                        }
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenPopup, validRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                    case 2:
                        authCodeRequest = _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];
                    case 3:
                        authClient = _a.sent();
                        return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                    case 4:
                        navigateUrl = _a.sent();
                        interactionHandler = new PopupHandler(authClient, this.browserStorage, authCodeRequest);
                        popupParameters = {
                            popup: popup,
                            popupName: popupName
                        };
                        popupWindow = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);
                        this.emitEvent(exports.EventType.POPUP_OPENED, exports.InteractionType.Popup, { popupWindow: popupWindow }, null);
                        return [4 /*yield*/, interactionHandler.monitorPopupForHash(popupWindow)];
                    case 5:
                        hash = _a.sent();
                        state = this.validateAndExtractStateFromHash(hash, exports.InteractionType.Popup);
                        // Remove throttle if it exists
                        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest.authority, authCodeRequest.scopes);
                        return [4 /*yield*/, interactionHandler.handleCodeResponse(hash, state, authClient.authority, this.networkClient)];
                    case 6:
                        result = _a.sent();
                        isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;
                        if (isLoggingIn) {
                            this.emitEvent(exports.EventType.LOGIN_SUCCESS, exports.InteractionType.Popup, result);
                        }
                        else {
                            this.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Popup, result);
                        }
                        return [2 /*return*/, result];
                    case 7:
                        e_3 = _a.sent();
                        if (loggedInAccounts.length > 0) {
                            this.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Popup, null, e_3);
                        }
                        else {
                            this.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Popup, null, e_3);
                        }
                        if (popup) {
                            // Close the synchronous popup if an error is thrown before the window unload event is registered
                            popup.close();
                        }
                        serverTelemetryManager.cacheFailedRequest(e_3);
                        this.browserStorage.cleanRequestByState(validRequest.state);
                        throw e_3;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    // #endregion
    // #region Silent Flow
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.ssoSilent = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            var silentTokenResult, e_4;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preflightBrowserEnvironmentCheck(exports.InteractionType.Silent);
                        this.logger.verbose("ssoSilent called");
                        this.emitEvent(exports.EventType.SSO_SILENT_START, exports.InteractionType.Silent, request);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.acquireTokenByIframe(request, exports.ApiId.ssoSilent)];
                    case 2:
                        silentTokenResult = _a.sent();
                        this.emitEvent(exports.EventType.SSO_SILENT_SUCCESS, exports.InteractionType.Silent, silentTokenResult);
                        return [2 /*return*/, silentTokenResult];
                    case 3:
                        e_4 = _a.sent();
                        this.emitEvent(exports.EventType.SSO_SILENT_FAILURE, exports.InteractionType.Silent, null, e_4);
                        throw e_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. To be used for silent refresh token acquisition and renewal.
     * @param request
     * @param apiId - ApiId of the calling function. Used for telemetry.
     */
    ClientApplication.prototype.acquireTokenByIframe = function (request, apiId) {
        return __awaiter$1(this, void 0, void 0, function () {
            var silentRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, e_5;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("acquireTokenByIframe called");
                        // Check that we have some SSO data
                        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {
                            throw BrowserAuthError.createSilentSSOInsufficientInfoError();
                        }
                        // Check that prompt is set to none, throw error if it is set to anything else.
                        if (request.prompt && request.prompt !== PromptValue.NONE) {
                            throw BrowserAuthError.createSilentPromptValueError(request.prompt);
                        }
                        silentRequest = this.initializeAuthorizationRequest(__assign$1(__assign$1({}, request), { prompt: PromptValue.NONE }), exports.InteractionType.Silent);
                        serverTelemetryManager = this.initializeServerTelemetryManager(apiId, silentRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(silentRequest)];
                    case 2:
                        authCodeRequest = _a.sent();
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority)];
                    case 3:
                        authClient = _a.sent();
                        return [4 /*yield*/, authClient.getAuthCodeUrl(silentRequest)];
                    case 4:
                        navigateUrl = _a.sent();
                        return [4 /*yield*/, this.silentTokenHelper(navigateUrl, authCodeRequest, authClient)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6:
                        e_5 = _a.sent();
                        serverTelemetryManager.cacheFailedRequest(e_5);
                        this.browserStorage.cleanRequestByState(silentRequest.state);
                        throw e_5;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Use this function to obtain a token before every call to the API / resource provider
     *
     * MSAL return's a cached token when available
     * Or it send's a request to the STS to obtain a new token using a refresh token.
     *
     * @param {@link SilentRequest}
     *
     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    ClientApplication.prototype.acquireTokenByRefreshToken = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            var silentRequest, serverTelemetryManager, refreshTokenClient, e_6, isServerError, isInteractionRequiredError, isInvalidGrantError;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.emitEvent(exports.EventType.ACQUIRE_TOKEN_NETWORK_START, exports.InteractionType.Silent, request);
                        // block the reload if it occurred inside a hidden iframe
                        BrowserUtils.blockReloadInHiddenIframes();
                        silentRequest = __assign$1(__assign$1({}, request), this.initializeBaseRequest(request));
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 7]);
                        return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority)];
                    case 2:
                        refreshTokenClient = _a.sent();
                        return [4 /*yield*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest)];
                    case 3: 
                    // Send request to renew token. Auth module will throw errors if token cannot be renewed.
                    return [2 /*return*/, _a.sent()];
                    case 4:
                        e_6 = _a.sent();
                        serverTelemetryManager.cacheFailedRequest(e_6);
                        isServerError = e_6 instanceof ServerError;
                        isInteractionRequiredError = e_6 instanceof InteractionRequiredAuthError;
                        isInvalidGrantError = (e_6.errorCode === BrowserConstants.INVALID_GRANT_ERROR);
                        if (!(isServerError && isInvalidGrantError && !isInteractionRequiredError)) return [3 /*break*/, 6];
                        this.logger.verbose("Refresh token expired or invalid, attempting acquire token by iframe");
                        return [4 /*yield*/, this.acquireTokenByIframe(request, exports.ApiId.acquireTokenSilent_authCode)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: throw e_6;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Helper which acquires an authorization code silently using a hidden iframe from given url
     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
     * @param navigateUrl
     * @param userRequestScopes
     */
    ClientApplication.prototype.silentTokenHelper = function (navigateUrl, authCodeRequest, authClient) {
        return __awaiter$1(this, void 0, void 0, function () {
            var silentHandler, msalFrame, hash, state;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.config.system.navigateFrameWait);
                        return [4 /*yield*/, silentHandler.initiateAuthRequest(navigateUrl)];
                    case 1:
                        msalFrame = _a.sent();
                        return [4 /*yield*/, silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];
                    case 2:
                        hash = _a.sent();
                        state = this.validateAndExtractStateFromHash(hash, exports.InteractionType.Silent);
                        // Handle response from hash string
                        return [2 /*return*/, silentHandler.handleCodeResponse(hash, state, authClient.authority, this.networkClient)];
                }
            });
        });
    };
    // #endregion
    // #region Logout
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */
    ClientApplication.prototype.logout = function (logoutRequest) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.");
                return [2 /*return*/, this.logoutRedirect(logoutRequest)];
            });
        });
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */
    ClientApplication.prototype.logoutRedirect = function (logoutRequest) {
        return __awaiter$1(this, void 0, void 0, function () {
            var validLogoutRequest, serverTelemetryManager, authClient, logoutUri, navigationOptions, navigate, e_7;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preflightBrowserEnvironmentCheck(exports.InteractionType.Redirect);
                        this.logger.verbose("logoutRedirect called");
                        validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.logout, validLogoutRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 9, , 10]);
                        this.emitEvent(exports.EventType.LOGOUT_START, exports.InteractionType.Redirect, logoutRequest);
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];
                    case 2:
                        authClient = _a.sent();
                        logoutUri = authClient.getLogoutUri(validLogoutRequest);
                        if (!validLogoutRequest.account || AccountEntity.accountInfoIsEqual(validLogoutRequest.account, this.getActiveAccount(), false)) {
                            this.logger.verbose("Setting active account to null");
                            this.setActiveAccount(null);
                        }
                        navigationOptions = {
                            apiId: exports.ApiId.logout,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: false
                        };
                        this.emitEvent(exports.EventType.LOGOUT_SUCCESS, exports.InteractionType.Redirect, validLogoutRequest);
                        if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === "function")) return [3 /*break*/, 6];
                        navigate = logoutRequest.onRedirectNavigate(logoutUri);
                        if (!(navigate !== false)) return [3 /*break*/, 4];
                        this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                        return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                    case 4:
                        this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_7 = _a.sent();
                        serverTelemetryManager.cacheFailedRequest(e_7);
                        this.emitEvent(exports.EventType.LOGOUT_FAILURE, exports.InteractionType.Redirect, null, e_7);
                        throw e_7;
                    case 10:
                        this.emitEvent(exports.EventType.LOGOUT_END, exports.InteractionType.Redirect);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */
    ClientApplication.prototype.logoutPopup = function (logoutRequest) {
        var validLogoutRequest;
        try {
            this.preflightBrowserEnvironmentCheck(exports.InteractionType.Popup);
            this.logger.verbose("logoutPopup called");
            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
        }
        catch (e) {
            // Since this function is synchronous we need to reject
            return Promise.reject(e);
        }
        var popupName = PopupUtils.generateLogoutPopupName(this.config.auth.clientId, validLogoutRequest);
        var popup;
        // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
        if (this.config.system.asyncPopups) {
            this.logger.verbose("asyncPopups set to true");
        }
        else {
            // asyncPopups flag is set to false. Opens popup before logging out.
            this.logger.verbose("asyncPopup set to false, opening popup");
            popup = PopupUtils.openSizedPopup("about:blank", popupName);
        }
        var authority = logoutRequest && logoutRequest.authority;
        var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;
        return this.logoutPopupAsync(validLogoutRequest, popupName, authority, popup, mainWindowRedirectUri);
    };
    /**
     *
     * @param request
     * @param popupName
     * @param requestAuthority
     * @param popup
     */
    ClientApplication.prototype.logoutPopupAsync = function (validRequest, popupName, requestAuthority, popup, mainWindowRedirectUri) {
        return __awaiter$1(this, void 0, void 0, function () {
            var serverTelemetryManager, authClient, logoutUri, popupUtils, popupWindow, e_8, navigationOptions, absoluteUrl, e_9;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("logoutPopupAsync called");
                        this.emitEvent(exports.EventType.LOGOUT_START, exports.InteractionType.Popup, validRequest);
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.logoutPopup, validRequest.correlationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);
                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];
                    case 2:
                        authClient = _a.sent();
                        logoutUri = authClient.getLogoutUri(validRequest);
                        if (!validRequest.account || AccountEntity.accountInfoIsEqual(validRequest.account, this.getActiveAccount(), false)) {
                            this.logger.verbose("Setting active account to null");
                            this.setActiveAccount(null);
                        }
                        this.emitEvent(exports.EventType.LOGOUT_SUCCESS, exports.InteractionType.Popup, validRequest);
                        popupUtils = new PopupUtils(this.browserStorage, this.logger);
                        popupWindow = popupUtils.openPopup(logoutUri, popupName, popup);
                        this.emitEvent(exports.EventType.POPUP_OPENED, exports.InteractionType.Popup, { popupWindow: popupWindow }, null);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        // Don't care if this throws an error (User Cancelled)
                        return [4 /*yield*/, popupUtils.monitorPopupForSameOrigin(popupWindow)];
                    case 4:
                        // Don't care if this throws an error (User Cancelled)
                        _a.sent();
                        this.logger.verbose("Popup successfully redirected to postLogoutRedirectUri");
                        return [3 /*break*/, 6];
                    case 5:
                        e_8 = _a.sent();
                        this.logger.verbose("Error occurred while monitoring popup for same origin. Session on server may remain active. Error: " + e_8);
                        return [3 /*break*/, 6];
                    case 6:
                        popupUtils.cleanPopup(popupWindow);
                        if (mainWindowRedirectUri) {
                            navigationOptions = {
                                apiId: exports.ApiId.logoutPopup,
                                timeout: this.config.system.redirectNavigationTimeout,
                                noHistory: false
                            };
                            absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());
                            this.logger.verbose("Redirecting main window to url specified in the request");
                            this.logger.verbosePii("Redirecing main window to: " + absoluteUrl);
                            this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
                        }
                        else {
                            this.logger.verbose("No main window navigation requested");
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        e_9 = _a.sent();
                        if (popup) {
                            // Close the synchronous popup if an error is thrown before the window unload event is registered
                            popup.close();
                        }
                        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
                        this.emitEvent(exports.EventType.LOGOUT_FAILURE, exports.InteractionType.Popup, null, e_9);
                        serverTelemetryManager.cacheFailedRequest(e_9);
                        throw e_9;
                    case 8:
                        this.emitEvent(exports.EventType.LOGOUT_END, exports.InteractionType.Popup);
                        return [2 /*return*/];
                }
            });
        });
    };
    // #endregion
    // #region Account APIs
    /**
     * Returns all accounts that MSAL currently has data for.
     * (the account object is created at the time of successful login)
     * or empty array when no accounts are found
     * @returns Array of account objects in cache
     */
    ClientApplication.prototype.getAllAccounts = function () {
        this.logger.verbose("getAllAccounts called");
        return this.isBrowserEnvironment ? this.browserStorage.getAllAccounts() : [];
    };
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param userName
     * @returns The account object stored in MSAL
     */
    ClientApplication.prototype.getAccountByUsername = function (userName) {
        var allAccounts = this.getAllAccounts();
        if (!StringUtils.isEmpty(userName) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching username found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching username: " + userName);
            return allAccounts.filter(function (accountObj) { return accountObj.username.toLowerCase() === userName.toLowerCase(); })[0] || null;
        }
        else {
            this.logger.verbose("getAccountByUsername: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */
    ClientApplication.prototype.getAccountByHomeId = function (homeAccountId) {
        var allAccounts = this.getAllAccounts();
        if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching homeAccountId found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching homeAccountId: " + homeAccountId);
            return allAccounts.filter(function (accountObj) { return accountObj.homeAccountId === homeAccountId; })[0] || null;
        }
        else {
            this.logger.verbose("getAccountByHomeId: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */
    ClientApplication.prototype.getAccountByLocalId = function (localAccountId) {
        var allAccounts = this.getAllAccounts();
        if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching localAccountId found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching localAccountId: " + localAccountId);
            return allAccounts.filter(function (accountObj) { return accountObj.localAccountId === localAccountId; })[0] || null;
        }
        else {
            this.logger.verbose("getAccountByLocalId: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */
    ClientApplication.prototype.setActiveAccount = function (account) {
        if (account) {
            this.logger.verbose("setActiveAccount: Active account set");
            this.activeLocalAccountId = account.localAccountId;
        }
        else {
            this.logger.verbose("setActiveAccount: No account passed, active account not set");
            this.activeLocalAccountId = null;
        }
    };
    /**
     * Gets the currently active account
     */
    ClientApplication.prototype.getActiveAccount = function () {
        if (!this.activeLocalAccountId) {
            this.logger.verbose("getActiveAccount: No active account");
            return null;
        }
        return this.getAccountByLocalId(this.activeLocalAccountId);
    };
    // #endregion
    // #region Helpers
    /**
     *
     * Use to get the redirect uri configured in MSAL or null.
     * @param requestRedirectUri
     * @returns Redirect URL
     *
     */
    ClientApplication.prototype.getRedirectUri = function (requestRedirectUri) {
        this.logger.verbose("getRedirectUri called");
        var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();
        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());
    };
    /**
     * Use to get the redirectStartPage either from request or use current window
     * @param requestStartPage
     */
    ClientApplication.prototype.getRedirectStartPage = function (requestStartPage) {
        this.logger.verbose("getRedirectStartPage called");
        var redirectStartPage = requestStartPage || window.location.href;
        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());
    };
    /**
     * Used to get a discovered version of the default authority.
     * @param requestAuthority
     */
    ClientApplication.prototype.getDiscoveredAuthority = function (requestAuthority) {
        return __awaiter$1(this, void 0, void 0, function () {
            var authorityOptions;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("getDiscoveredAuthority called");
                        authorityOptions = {
                            protocolMode: this.config.auth.protocolMode,
                            knownAuthorities: this.config.auth.knownAuthorities,
                            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                            authorityMetadata: this.config.auth.authorityMetadata
                        };
                        if (!requestAuthority) return [3 /*break*/, 2];
                        this.logger.verbose("Creating discovered authority with request authority");
                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        this.logger.verbose("Creating discovered authority with configured authority");
                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Helper to check whether interaction is in progress.
     */
    ClientApplication.prototype.interactionInProgress = function () {
        // Check whether value in cache is present and equal to expected value
        return (this.browserStorage.getTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, true)) === BrowserConstants.INTERACTION_IN_PROGRESS_VALUE;
    };
    /**
     * Creates an Authorization Code Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */
    ClientApplication.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl) {
        return __awaiter$1(this, void 0, void 0, function () {
            var clientConfig;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("createAuthCodeClient called");
                        return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                    case 1:
                        clientConfig = _a.sent();
                        return [2 /*return*/, new AuthorizationCodeClient(clientConfig)];
                }
            });
        });
    };
    /**
     * Creates an Silent Flow Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */
    ClientApplication.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl) {
        return __awaiter$1(this, void 0, void 0, function () {
            var clientConfig;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("createSilentFlowClient called");
                        return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                    case 1:
                        clientConfig = _a.sent();
                        return [2 /*return*/, new SilentFlowClient(clientConfig)];
                }
            });
        });
    };
    /**
     * Creates a Refresh Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */
    ClientApplication.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl) {
        return __awaiter$1(this, void 0, void 0, function () {
            var clientConfig;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("createRefreshTokenClient called");
                        return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                    case 1:
                        clientConfig = _a.sent();
                        return [2 /*return*/, new RefreshTokenClient(clientConfig)];
                }
            });
        });
    };
    /**
     * Creates a Client Configuration object with the given request authority, or the default authority.
     * @param serverTelemetryManager
     * @param requestAuthority
     */
    ClientApplication.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority) {
        return __awaiter$1(this, void 0, void 0, function () {
            var discoveredAuthority;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.verbose("getClientConfiguration called");
                        return [4 /*yield*/, this.getDiscoveredAuthority(requestAuthority)];
                    case 1:
                        discoveredAuthority = _a.sent();
                        return [2 /*return*/, {
                                authOptions: {
                                    clientId: this.config.auth.clientId,
                                    authority: discoveredAuthority,
                                    clientCapabilities: this.config.auth.clientCapabilities
                                },
                                systemOptions: {
                                    tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds
                                },
                                loggerOptions: {
                                    loggerCallback: this.config.system.loggerOptions.loggerCallback,
                                    piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled
                                },
                                cryptoInterface: this.browserCrypto,
                                networkInterface: this.networkClient,
                                storageInterface: this.browserStorage,
                                serverTelemetryManager: serverTelemetryManager,
                                libraryInfo: {
                                    sku: BrowserConstants.MSAL_SKU,
                                    version: version,
                                    cpu: "",
                                    os: ""
                                }
                            }];
                }
            });
        });
    };
    /**
     * Helper to validate app environment before making a request.
     * @param request
     * @param interactionType
     */
    ClientApplication.prototype.preflightInteractiveRequest = function (request, interactionType) {
        this.logger.verbose("preflightInteractiveRequest called, validating app environment");
        // block the reload if it occurred inside a hidden iframe
        BrowserUtils.blockReloadInHiddenIframes();
        // Check if interaction is in progress. Throw error if true.
        if (this.interactionInProgress()) {
            throw BrowserAuthError.createInteractionInProgressError();
        }
        return this.initializeAuthorizationRequest(request, interactionType);
    };
    /**
     * Helper to validate app environment before making an auth request
     * * @param interactionType
     */
    ClientApplication.prototype.preflightBrowserEnvironmentCheck = function (interactionType) {
        this.logger.verbose("preflightBrowserEnvironmentCheck started");
        // Block request if not in browser environment
        BrowserUtils.blockNonBrowserEnvironment(this.isBrowserEnvironment);
        // Block redirects if in an iframe
        BrowserUtils.blockRedirectInIframe(interactionType, this.config.system.allowRedirectInIframe);
        // Block auth requests inside a hidden iframe
        BrowserUtils.blockReloadInHiddenIframes();
        // Block redirectUri opened in a popup from calling MSAL APIs
        BrowserUtils.blockAcquireTokenInPopups();
        // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
        if (interactionType === exports.InteractionType.Redirect &&
            this.config.cache.cacheLocation === exports.BrowserCacheLocation.MemoryStorage &&
            !this.config.cache.storeAuthStateInCookie) {
            throw BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError();
        }
    };
    /**
     * Initializer function for all request APIs
     * @param request
     */
    ClientApplication.prototype.initializeBaseRequest = function (request) {
        this.logger.verbose("Initializing BaseAuthRequest");
        var authority = request.authority || this.config.auth.authority;
        var scopes = __spread(((request && request.scopes) || []));
        var correlationId = (request && request.correlationId) || this.browserCrypto.createNewGuid();
        // Set authenticationScheme to BEARER if not explicitly set in the request
        if (!request.authenticationScheme) {
            request.authenticationScheme = exports.AuthenticationScheme.BEARER;
            this.logger.verbose("Authentication Scheme wasn't explicitly set in request, defaulting to \"Bearer\" request");
        }
        else {
            this.logger.verbose("Authentication Scheme set to \"" + request.authenticationScheme + "\" as configured in Auth request");
        }
        var validatedRequest = __assign$1(__assign$1({}, request), { correlationId: correlationId,
            authority: authority,
            scopes: scopes });
        return validatedRequest;
    };
    /**
     *
     * @param apiId
     * @param correlationId
     * @param forceRefresh
     */
    ClientApplication.prototype.initializeServerTelemetryManager = function (apiId, correlationId, forceRefresh) {
        this.logger.verbose("initializeServerTelemetryManager called");
        var telemetryPayload = {
            clientId: this.config.auth.clientId,
            correlationId: correlationId,
            apiId: apiId,
            forceRefresh: forceRefresh || false,
            wrapperSKU: this.wrapperSKU,
            wrapperVer: this.wrapperVer
        };
        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);
    };
    /**
     * Helper to initialize required request parameters for interactive APIs and ssoSilent()
     * @param request
     * @param interactionType
     */
    ClientApplication.prototype.initializeAuthorizationRequest = function (request, interactionType) {
        this.logger.verbose("initializeAuthorizationRequest called");
        var redirectUri = this.getRedirectUri(request.redirectUri);
        var browserState = {
            interactionType: interactionType
        };
        var state = ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || "", browserState);
        var validatedRequest = __assign$1(__assign$1({}, this.initializeBaseRequest(request)), { redirectUri: redirectUri, state: state, nonce: request.nonce || this.browserCrypto.createNewGuid(), responseMode: ResponseMode.FRAGMENT });
        var account = request.account || this.getActiveAccount();
        if (account) {
            this.logger.verbose("Setting validated request account");
            this.logger.verbosePii("Setting validated request account: " + account);
            validatedRequest.account = account;
        }
        // Check for ADAL SSO
        if (StringUtils.isEmpty(validatedRequest.loginHint)) {
            // Only check for adal token if no SSO params are being used
            var adalIdTokenString = this.browserStorage.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);
            if (adalIdTokenString) {
                var adalIdToken = new AuthToken(adalIdTokenString, this.browserCrypto);
                this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);
                if (adalIdToken.claims && adalIdToken.claims.upn) {
                    this.logger.verbose("No SSO params used and ADAL token retrieved, setting ADAL upn as loginHint");
                    validatedRequest.loginHint = adalIdToken.claims.upn;
                }
            }
        }
        this.browserStorage.updateCacheEntries(validatedRequest.state, validatedRequest.nonce, validatedRequest.authority);
        return validatedRequest;
    };
    /**
     * Generates an auth code request tied to the url request.
     * @param request
     */
    ClientApplication.prototype.initializeAuthorizationCodeRequest = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            var generatedPkceParams, authCodeRequest;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];
                    case 1:
                        generatedPkceParams = _a.sent();
                        authCodeRequest = __assign$1(__assign$1({}, request), { redirectUri: request.redirectUri, code: "", codeVerifier: generatedPkceParams.verifier });
                        request.codeChallenge = generatedPkceParams.challenge;
                        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;
                        return [2 /*return*/, authCodeRequest];
                }
            });
        });
    };
    /**
     * Initializer for the logout request.
     * @param logoutRequest
     */
    ClientApplication.prototype.initializeLogoutRequest = function (logoutRequest) {
        this.logger.verbose("initializeLogoutRequest called");
        // Check if interaction is in progress. Throw error if true.
        if (this.interactionInProgress()) {
            throw BrowserAuthError.createInteractionInProgressError();
        }
        var validLogoutRequest = __assign$1({ correlationId: this.browserCrypto.createNewGuid() }, logoutRequest);
        /*
         * Only set redirect uri if logout request isn't provided or the set uri isn't null.
         * Otherwise, use passed uri, config, or current page.
         */
        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {
            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request");
                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());
            }
            else if (this.config.auth.postLogoutRedirectUri === null) {
                this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect");
            }
            else if (this.config.auth.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to configured uri");
                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());
            }
            else {
                this.logger.verbose("Setting postLogoutRedirectUri to current page");
                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());
            }
        }
        else {
            this.logger.verbose("postLogoutRedirectUri passed as null, not settibng post logout redirect uri");
        }
        return validLogoutRequest;
    };
    /**
     * Emits events by calling callback with event message
     * @param eventType
     * @param interactionType
     * @param payload
     * @param error
     */
    ClientApplication.prototype.emitEvent = function (eventType, interactionType, payload, error) {
        var _this = this;
        if (this.isBrowserEnvironment) {
            var message_1 = {
                eventType: eventType,
                interactionType: interactionType || null,
                payload: payload || null,
                error: error || null,
                timestamp: Date.now()
            };
            this.logger.info("Emitting event: " + eventType);
            this.eventCallbacks.forEach(function (callback, callbackId) {
                _this.logger.verbose("Emitting event to callback " + callbackId + ": " + eventType);
                callback.apply(null, [message_1]);
            });
        }
    };
    /**
     * Adds event callbacks to array
     * @param callback
     */
    ClientApplication.prototype.addEventCallback = function (callback) {
        if (this.isBrowserEnvironment) {
            var callbackId = this.browserCrypto.createNewGuid();
            this.eventCallbacks.set(callbackId, callback);
            this.logger.verbose("Event callback registered with id: " + callbackId);
            return callbackId;
        }
        return null;
    };
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */
    ClientApplication.prototype.removeEventCallback = function (callbackId) {
        this.eventCallbacks.delete(callbackId);
        this.logger.verbose("Event callback " + callbackId + " removed.");
    };
    /**
     * Returns the logger instance
     */
    ClientApplication.prototype.getLogger = function () {
        return this.logger;
    };
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */
    ClientApplication.prototype.setLogger = function (logger) {
        this.logger = logger;
    };
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */
    ClientApplication.prototype.initializeWrapperLibrary = function (sku, version) {
        // Validate the SKU passed in is one we expect
        this.wrapperSKU = sku;
        this.wrapperVer = version;
    };
    /**
     * Sets navigation client
     * @param navigationClient
     */
    ClientApplication.prototype.setNavigationClient = function (navigationClient) {
        this.navigationClient = navigationClient;
    };
    return ClientApplication;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
 * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
 */
var PublicClientApplication = /** @class */ (function (_super) {
    __extends$1(PublicClientApplication, _super);
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration object for the MSAL PublicClientApplication instance
     */
    function PublicClientApplication(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */
    PublicClientApplication.prototype.loginRedirect = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                this.logger.verbose("loginRedirect called");
                return [2 /*return*/, this.acquireTokenRedirect(request || DEFAULT_REQUEST)];
            });
        });
    };
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */
    PublicClientApplication.prototype.loginPopup = function (request) {
        this.logger.verbose("loginPopup called");
        return this.acquireTokenPopup(request || DEFAULT_REQUEST);
    };
    /**
     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
     */
    PublicClientApplication.prototype.acquireTokenSilent = function (request) {
        return __awaiter$1(this, void 0, void 0, function () {
            var account, silentRequest, serverTelemetryManager, silentAuthClient, cachedToken, tokenRenewalResult, tokenRenewalError_1;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preflightBrowserEnvironmentCheck(exports.InteractionType.Silent);
                        this.logger.verbose("acquireTokenSilent called");
                        account = request.account || this.getActiveAccount();
                        if (!account) {
                            throw BrowserAuthError.createNoAccountError();
                        }
                        silentRequest = __assign$1(__assign$1(__assign$1({}, request), this.initializeBaseRequest(request)), { account: account, forceRefresh: request.forceRefresh || false });
                        this.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Silent, request);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 9]);
                        serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);
                        return [4 /*yield*/, this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority)];
                    case 2:
                        silentAuthClient = _a.sent();
                        return [4 /*yield*/, silentAuthClient.acquireCachedToken(silentRequest)];
                    case 3:
                        cachedToken = _a.sent();
                        this.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Silent, cachedToken);
                        return [2 /*return*/, cachedToken];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.acquireTokenByRefreshToken(silentRequest)];
                    case 6:
                        tokenRenewalResult = _a.sent();
                        this.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Silent, tokenRenewalResult);
                        return [2 /*return*/, tokenRenewalResult];
                    case 7:
                        tokenRenewalError_1 = _a.sent();
                        this.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Silent, null, tokenRenewalError_1);
                        throw tokenRenewalError_1;
                    case 8: return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return PublicClientApplication;
}(ClientApplication));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var stubbedPublicClientApplication = {
    acquireTokenPopup: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenRedirect: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenSilent: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    getAllAccounts: function () {
        return [];
    },
    getAccountByHomeId: function () {
        return null;
    },
    getAccountByUsername: function () {
        return null;
    },
    getAccountByLocalId: function () {
        return null;
    },
    handleRedirectPromise: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    loginPopup: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    loginRedirect: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logout: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logoutRedirect: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logoutPopup: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    ssoSilent: function () {
        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    addEventCallback: function () {
        return null;
    },
    removeEventCallback: function () {
        return;
    },
    getLogger: function () {
        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    },
    setLogger: function () {
        return;
    },
    setActiveAccount: function () {
        return;
    },
    getActiveAccount: function () {
        return null;
    },
    initializeWrapperLibrary: function () {
        return;
    },
    setNavigationClient: function () {
        return;
    }
};

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var EventMessageUtils = /** @class */ (function () {
    function EventMessageUtils() {
    }
    /**
     * Gets interaction status from event message
     * @param message
     */
    EventMessageUtils.getInteractionStatusFromEvent = function (message) {
        switch (message.eventType) {
            case exports.EventType.LOGIN_START:
                return exports.InteractionStatus.Login;
            case exports.EventType.SSO_SILENT_START:
                return exports.InteractionStatus.SsoSilent;
            case exports.EventType.ACQUIRE_TOKEN_START:
                if (message.interactionType === exports.InteractionType.Redirect || message.interactionType === exports.InteractionType.Popup) {
                    return exports.InteractionStatus.AcquireToken;
                }
                break;
            case exports.EventType.HANDLE_REDIRECT_START:
                return exports.InteractionStatus.HandleRedirect;
            case exports.EventType.LOGOUT_START:
                return exports.InteractionStatus.Logout;
            case exports.EventType.LOGIN_SUCCESS:
            case exports.EventType.SSO_SILENT_SUCCESS:
            case exports.EventType.HANDLE_REDIRECT_END:
            case exports.EventType.LOGIN_FAILURE:
            case exports.EventType.SSO_SILENT_FAILURE:
            case exports.EventType.LOGOUT_END:
                return exports.InteractionStatus.None;
            case exports.EventType.ACQUIRE_TOKEN_SUCCESS:
            case exports.EventType.ACQUIRE_TOKEN_FAILURE:
                if (message.interactionType === exports.InteractionType.Redirect || message.interactionType === exports.InteractionType.Popup) {
                    return exports.InteractionStatus.None;
                }
                break;
        }
        return null;
    };
    return EventMessageUtils;
}());

exports.AccountEntity = AccountEntity;
exports.AuthError = AuthError;
exports.AuthErrorMessage = AuthErrorMessage;
exports.BrowserAuthError = BrowserAuthError;
exports.BrowserAuthErrorMessage = BrowserAuthErrorMessage;
exports.BrowserConfigurationAuthError = BrowserConfigurationAuthError;
exports.BrowserConfigurationAuthErrorMessage = BrowserConfigurationAuthErrorMessage;
exports.BrowserUtils = BrowserUtils;
exports.EventMessageUtils = EventMessageUtils;
exports.InteractionRequiredAuthError = InteractionRequiredAuthError;
exports.Logger = Logger;
exports.NavigationClient = NavigationClient;
exports.PublicClientApplication = PublicClientApplication;
exports.StringUtils = StringUtils;
exports.UrlString = UrlString;
exports.stubbedPublicClientApplication = stubbedPublicClientApplication;

},{}],"3kFhw":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _auth = require('./auth');
_parcelHelpers.exportAll(_auth, exports);
var _webapi = require('./webapi');
_parcelHelpers.exportAll(_webapi, exports);

},{"./auth":"1m9wh","./webapi":"7dAS5","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1m9wh":[function(require,module,exports) {
var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "PCA", function () {
    return PCA;
  });
  _parcelHelpers.export(exports, "useRenderAfterLogin", function () {
    return useRenderAfterLogin;
  });
  var _azureMsalBrowser = require("@azure/msal-browser");
  var _azureMsalReact = require("@azure/msal-react");
  var _fluentuiReactLibButton = require("@fluentui/react/lib/Button");
  var _fluentuiReactLibStack = require("@fluentui/react/lib/Stack");
  var _fluentuiReactLibText = require("@fluentui/react/lib/Text");
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  const configuration = {
    auth: {
      clientId: 'c43d3729-2e9c-4254-bd68-fbbe4a45301b',
      redirectUri: 'http://localhost:1234'
    }
  };
  const PCA = new _azureMsalBrowser.PublicClientApplication(configuration);
  const useRenderAfterLogin = () => {
    var _a;
    const msalContext = _azureMsalReact.useMsal();
    const account = _azureMsalReact.useAccount((_a = msalContext.accounts[0]) !== null && _a !== void 0 ? _a : {});
    return Object.assign({
      renderAfterLogin: render => {
        if (msalContext.accounts.length > 0) {
          return render();
        } else if (msalContext.inProgress === "login") {
          return _reactDefault.default.createElement("span", null, "Login is currently in progress!");
        } else {
          return _reactDefault.default.createElement(_fluentuiReactLibStack.Stack, {
            horizontal: true
          }, _reactDefault.default.createElement(_fluentuiReactLibText.Text, null, "There are currently no users signed in!"), _reactDefault.default.createElement(_fluentuiReactLibButton.PrimaryButton, {
            text: "Login",
            onClick: () => msalContext.instance.loginPopup()
          }));
        }
      },
      account: account
    }, msalContext);
  };
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}

},{"@azure/msal-browser":"YsMQ8","@azure/msal-react":"5gJEu","@fluentui/react/lib/Button":"3XFof","@fluentui/react/lib/Stack":"4PdoP","@fluentui/react/lib/Text":"7IQ0G","react":"4g1R3","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP","../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"Q8h6l"}],"3XFof":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsButtonIndex = require('./components/Button/index');
_parcelHelpers.exportAll(_componentsButtonIndex, exports);

},{"./components/Button/index":"2Df1W","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2Df1W":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _BaseButton = require('./BaseButton');
_parcelHelpers.exportAll(_BaseButton, exports);
var _ButtonTypes = require('./Button.types');
_parcelHelpers.exportAll(_ButtonTypes, exports);
var _Button = require('./Button');
_parcelHelpers.exportAll(_Button, exports);
var _ActionButtonActionButton = require('./ActionButton/ActionButton');
_parcelHelpers.exportAll(_ActionButtonActionButton, exports);
var _CommandBarButtonCommandBarButton = require('./CommandBarButton/CommandBarButton');
_parcelHelpers.exportAll(_CommandBarButtonCommandBarButton, exports);
var _CommandButtonCommandButton = require('./CommandButton/CommandButton');
_parcelHelpers.exportAll(_CommandButtonCommandButton, exports);
var _CompoundButtonCompoundButton = require('./CompoundButton/CompoundButton');
_parcelHelpers.exportAll(_CompoundButtonCompoundButton, exports);
var _DefaultButtonDefaultButton = require('./DefaultButton/DefaultButton');
_parcelHelpers.exportAll(_DefaultButtonDefaultButton, exports);
var _MessageBarButtonMessageBarButton = require('./MessageBarButton/MessageBarButton');
_parcelHelpers.exportAll(_MessageBarButtonMessageBarButton, exports);
var _PrimaryButtonPrimaryButton = require('./PrimaryButton/PrimaryButton');
_parcelHelpers.exportAll(_PrimaryButtonPrimaryButton, exports);
var _IconButtonIconButton = require('./IconButton/IconButton');
_parcelHelpers.exportAll(_IconButtonIconButton, exports);
var _SplitButtonSplitButtonClassNames = require('./SplitButton/SplitButton.classNames');
_parcelHelpers.exportAll(_SplitButtonSplitButtonClassNames, exports);

},{"./BaseButton":"3GXNT","./Button.types":"pHSU6","./Button":"4mVoA","./ActionButton/ActionButton":"50wpx","./CommandBarButton/CommandBarButton":"6qwv2","./CommandButton/CommandButton":"4vTIs","./CompoundButton/CompoundButton":"6fyM7","./DefaultButton/DefaultButton":"4eUH0","./MessageBarButton/MessageBarButton":"2j4lL","./PrimaryButton/PrimaryButton":"4FOVZ","./IconButton/IconButton":"6kVOT","./SplitButton/SplitButton.classNames":"NiYg5","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3GXNT":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "BaseButton", function () {
  return BaseButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Icon = require('../../Icon');
var _commonDirectionalHint = require('../../common/DirectionalHint');
var _ContextualMenu = require('../../ContextualMenu');
var _BaseButtonClassNames = require('./BaseButton.classNames');
var _SplitButtonSplitButtonClassNames = require('./SplitButton/SplitButton.classNames');
var _KeytipData = require('../../KeytipData');
var TouchIdleDelay = 500;
/*ms*/
var COMPONENT_NAME = 'BaseButton';
/**
* {@docCategory Button}
*/
var BaseButton = /** @class*/
(function (_super) {
  _tslib.__extends(BaseButton, _super);
  function BaseButton(props) {
    var _this = _super.call(this, props) || this;
    _this._buttonElement = _react.createRef();
    _this._splitButtonContainer = _react.createRef();
    _this._mergedRef = _Utilities.createMergedRef();
    _this._renderedVisibleMenu = false;
    _this._getMemoizedMenuButtonKeytipProps = _Utilities.memoizeFunction(function (keytipProps) {
      return _tslib.__assign(_tslib.__assign({}, keytipProps), {
        hasMenu: true
      });
    });
    _this._onRenderIcon = function (buttonProps, defaultRender) {
      var iconProps = _this.props.iconProps;
      if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {
        var className = iconProps.className, imageProps = iconProps.imageProps, rest = _tslib.__rest(iconProps, ["className", "imageProps"]);
        // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon
        // do not have this prop.
        if (iconProps.styles) {
          return _react.createElement(_Icon.Icon, _tslib.__assign({
            className: _Utilities.css(_this._classNames.icon, className),
            imageProps: imageProps
          }, rest));
        }
        if (iconProps.iconName) {
          return _react.createElement(_Icon.FontIcon, _tslib.__assign({
            className: _Utilities.css(_this._classNames.icon, className)
          }, rest));
        }
        if (imageProps) {
          return _react.createElement(_Icon.ImageIcon, _tslib.__assign({
            className: _Utilities.css(_this._classNames.icon, className),
            imageProps: imageProps
          }, rest));
        }
      }
      return null;
    };
    _this._onRenderTextContents = function () {
      var _a = _this.props, text = _a.text, children = _a.children, // eslint-disable-next-line deprecation/deprecation
      _b = _a.secondaryText, // eslint-disable-next-line deprecation/deprecation
      secondaryText = _b === void 0 ? _this.props.description : _b, _c = _a.onRenderText, onRenderText = _c === void 0 ? _this._onRenderText : _c, _d = _a.onRenderDescription, onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;
      if (text || typeof children === 'string' || secondaryText) {
        return _react.createElement("span", {
          className: _this._classNames.textContainer
        }, onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription));
      }
      return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];
    };
    _this._onRenderText = function () {
      var text = _this.props.text;
      var children = _this.props.children;
      // For backwards compat, we should continue to take in the text content from children.
      if (text === undefined && typeof children === 'string') {
        text = children;
      }
      if (_this._hasText()) {
        return _react.createElement("span", {
          key: _this._labelId,
          className: _this._classNames.label,
          id: _this._labelId
        }, text);
      }
      return null;
    };
    _this._onRenderChildren = function () {
      var children = _this.props.children;
      // If children is just a string, either it or the text will be rendered via onRenderLabel
      // If children is another component, it will be rendered after text
      if (typeof children === 'string') {
        return null;
      }
      return children;
    };
    _this._onRenderDescription = function (props) {
      // eslint-disable-next-line deprecation/deprecation
      var _a = props.secondaryText, secondaryText = _a === void 0 ? _this.props.description : _a;
      // ms-Button-description is only shown when the button type is compound.
      // In other cases it will not be displayed.
      return secondaryText ? _react.createElement("span", {
        key: _this._descriptionId,
        className: _this._classNames.description,
        id: _this._descriptionId
      }, secondaryText) : null;
    };
    _this._onRenderAriaDescription = function () {
      var ariaDescription = _this.props.ariaDescription;
      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,
      // otherwise it will be assigned to descriptionSpan.
      return ariaDescription ? _react.createElement("span", {
        className: _this._classNames.screenReaderText,
        id: _this._ariaDescriptionId
      }, ariaDescription) : null;
    };
    _this._onRenderMenuIcon = function (props) {
      var menuIconProps = _this.props.menuIconProps;
      return _react.createElement(_Icon.FontIcon, _tslib.__assign({
        iconName: "ChevronDown"
      }, menuIconProps, {
        className: _this._classNames.menuIcon
      }));
    };
    _this._onRenderMenu = function (menuProps) {
      var persistMenu = _this.props.persistMenu;
      var menuHidden = _this.state.menuHidden;
      var MenuType = _this.props.menuAs || _ContextualMenu.ContextualMenu;
      // the accessible menu label (accessible name) has a relationship to the button.
      // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,
      // AND the button has text, we'll set the menu aria-labelledBy to the text element id.
      if (!menuProps.ariaLabel && !menuProps.labelElementId && _this._hasText()) {
        menuProps = _tslib.__assign(_tslib.__assign({}, menuProps), {
          labelElementId: _this._labelId
        });
      }
      return _react.createElement(MenuType, _tslib.__assign({
        id: _this._labelId + '-menu',
        directionalHint: _commonDirectionalHint.DirectionalHint.bottomLeftEdge
      }, menuProps, {
        shouldFocusOnContainer: _this._menuShouldFocusOnContainer,
        shouldFocusOnMount: _this._menuShouldFocusOnMount,
        hidden: persistMenu ? menuHidden : undefined,
        className: _Utilities.css('ms-BaseButton-menuhost', menuProps.className),
        target: _this._isSplitButton ? _this._splitButtonContainer.current : _this._buttonElement.current,
        onDismiss: _this._onDismissMenu
      }));
    };
    _this._onDismissMenu = function (ev) {
      var menuProps = _this.props.menuProps;
      if (menuProps && menuProps.onDismiss) {
        menuProps.onDismiss(ev);
      }
      if (!ev || !ev.defaultPrevented) {
        _this._dismissMenu();
      }
    };
    _this._dismissMenu = function () {
      _this._menuShouldFocusOnMount = undefined;
      _this._menuShouldFocusOnContainer = undefined;
      _this.setState({
        menuHidden: true
      });
    };
    _this._openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {
      if (shouldFocusOnMount === void 0) {
        shouldFocusOnMount = true;
      }
      if (_this.props.menuProps) {
        _this._menuShouldFocusOnContainer = shouldFocusOnContainer;
        _this._menuShouldFocusOnMount = shouldFocusOnMount;
        _this._renderedVisibleMenu = true;
        _this.setState({
          menuHidden: false
        });
      }
    };
    _this._onToggleMenu = function (shouldFocusOnContainer) {
      var shouldFocusOnMount = true;
      if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {
        shouldFocusOnMount = false;
      }
      _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();
    };
    _this._onSplitContainerFocusCapture = function (ev) {
      var container = _this._splitButtonContainer.current;
      // If the target is coming from the portal we do not need to set focus on the container.
      if (!container || ev.target && _Utilities.portalContainsElement(ev.target, container)) {
        return;
      }
      // We should never be able to focus the individual buttons in a split button. Focus
      // should always remain on the container.
      container.focus();
    };
    _this._onSplitButtonPrimaryClick = function (ev) {
      if (!_this.state.menuHidden) {
        _this._dismissMenu();
      }
      if (!_this._processingTouch && _this.props.onClick) {
        _this.props.onClick(ev);
      } else if (_this._processingTouch) {
        _this._onMenuClick(ev);
      }
    };
    _this._onKeyDown = function (ev) {
      // explicity cancelling event so click won't fire after this
      // eslint-disable-next-line deprecation/deprecation
      if (_this.props.disabled && (ev.which === _Utilities.KeyCodes.enter || ev.which === _Utilities.KeyCodes.space)) {
        ev.preventDefault();
        ev.stopPropagation();
      } else if (!_this.props.disabled) {
        if (_this.props.menuProps) {
          _this._onMenuKeyDown(ev);
        } else if (_this.props.onKeyDown !== undefined) {
          _this.props.onKeyDown(ev);
        }
      }
    };
    _this._onKeyUp = function (ev) {
      if (!_this.props.disabled && _this.props.onKeyUp !== undefined) {
        _this.props.onKeyUp(ev);
      }
    };
    _this._onKeyPress = function (ev) {
      if (!_this.props.disabled && _this.props.onKeyPress !== undefined) {
        _this.props.onKeyPress(ev);
      }
    };
    _this._onMouseUp = function (ev) {
      if (!_this.props.disabled && _this.props.onMouseUp !== undefined) {
        _this.props.onMouseUp(ev);
      }
    };
    _this._onMouseDown = function (ev) {
      if (!_this.props.disabled && _this.props.onMouseDown !== undefined) {
        _this.props.onMouseDown(ev);
      }
    };
    _this._onClick = function (ev) {
      if (!_this.props.disabled) {
        if (_this.props.menuProps) {
          _this._onMenuClick(ev);
        } else if (_this.props.onClick !== undefined) {
          _this.props.onClick(ev);
        }
      }
    };
    _this._onSplitButtonContainerKeyDown = function (ev) {
      // eslint-disable-next-line deprecation/deprecation
      if (ev.which === _Utilities.KeyCodes.enter || ev.which === _Utilities.KeyCodes.space) {
        if (_this._buttonElement.current) {
          _this._buttonElement.current.click();
          ev.preventDefault();
          ev.stopPropagation();
        }
      } else {
        _this._onMenuKeyDown(ev);
      }
    };
    _this._onMenuKeyDown = function (ev) {
      if (_this.props.disabled) {
        return;
      }
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(ev);
      }
      // eslint-disable-next-line deprecation/deprecation
      var isUp = ev.which === _Utilities.KeyCodes.up;
      // eslint-disable-next-line deprecation/deprecation
      var isDown = ev.which === _Utilities.KeyCodes.down;
      if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {
        var onMenuClick = _this.props.onMenuClick;
        if (onMenuClick) {
          onMenuClick(ev, _this.props);
        }
        _this._onToggleMenu(false);
        ev.preventDefault();
        ev.stopPropagation();
      }
      // eslint-disable-next-line deprecation/deprecation
      if (ev.which === _Utilities.KeyCodes.enter || ev.which === _Utilities.KeyCodes.space) {
        // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where
        // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic
        // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.
        _Utilities.setFocusVisibility(true, ev.target);
      }
      if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {
        // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items
        // We need to re-render the menu with shouldFocusOnMount as true.
        if (!_this.state.menuHidden && _this.props.menuProps) {
          var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== undefined ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;
          if (!currentShouldFocusOnMount) {
            ev.preventDefault();
            ev.stopPropagation();
            _this._menuShouldFocusOnMount = true;
            _this.forceUpdate();
          }
        }
      }
    };
    _this._onTouchStart = function () {
      if (_this._isSplitButton && _this._splitButtonContainer.current && !(('onpointerdown' in _this._splitButtonContainer.current))) {
        _this._handleTouchAndPointerEvent();
      }
    };
    _this._onMenuClick = function (ev) {
      var onMenuClick = _this.props.onMenuClick;
      if (onMenuClick) {
        onMenuClick(ev, _this.props);
      }
      if (!ev.defaultPrevented) {
        // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing
        // "Enter" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates
        // between a real click event and a keypress event (detail should be the number of mouse clicks).
        // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).
        // So we also check the pointerType property, which both Edge and IE set to "mouse" for real clicks
        // and "" for pressing "Enter" with Narrator on.
        var shouldFocusOnContainer = ev.nativeEvent.detail !== 0 || ev.nativeEvent.pointerType === 'mouse';
        _this._onToggleMenu(shouldFocusOnContainer);
        ev.preventDefault();
        ev.stopPropagation();
      }
    };
    _Utilities.initializeComponentRef(_this);
    _this._async = new _Utilities.Async(_this);
    _this._events = new _Utilities.EventGroup(_this);
    _Utilities.warnConditionallyRequiredProps(COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', _this.props.split);
    _Utilities.warnDeprecations(COMPONENT_NAME, props, {
      rootProps: undefined,
      description: 'secondaryText',
      toggled: 'checked'
    });
    _this._labelId = _Utilities.getId();
    _this._descriptionId = _Utilities.getId();
    _this._ariaDescriptionId = _Utilities.getId();
    _this.state = {
      menuHidden: true
    };
    return _this;
  }
  Object.defineProperty(BaseButton.prototype, "_isSplitButton", {
    get: function () {
      return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;
    },
    enumerable: false,
    configurable: true
  });
  BaseButton.prototype.render = function () {
    var _a;
    var _b = this.props, ariaDescription = _b.ariaDescription, ariaLabel = _b.ariaLabel, ariaHidden = _b.ariaHidden, className = _b.className, disabled = _b.disabled, allowDisabledFocus = _b.allowDisabledFocus, primaryDisabled = _b.primaryDisabled, // eslint-disable-next-line deprecation/deprecation
    _c = _b.secondaryText, // eslint-disable-next-line deprecation/deprecation
    secondaryText = _c === void 0 ? this.props.description : _c, href = _b.href, iconProps = _b.iconProps, menuIconProps = _b.menuIconProps, styles = _b.styles, checked = _b.checked, variantClassName = _b.variantClassName, theme = _b.theme, toggle = _b.toggle, getClassNames = _b.getClassNames, role = _b.role;
    var menuHidden = this.state.menuHidden;
    // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled
    var isPrimaryButtonDisabled = disabled || primaryDisabled;
    this._classNames = getClassNames ? getClassNames(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : _BaseButtonClassNames.getBaseButtonClassNames(theme, styles, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);
    var _d = this, _ariaDescriptionId = _d._ariaDescriptionId, _labelId = _d._labelId, _descriptionId = _d._descriptionId;
    // Anchor tag cannot be disabled hence in disabled state rendering
    // anchor button as normal button
    var renderAsAnchor = !isPrimaryButtonDisabled && !!href;
    var tag = renderAsAnchor ? 'a' : 'button';
    var nativeProps = _Utilities.getNativeProps(// eslint-disable-next-line deprecation/deprecation
    _Utilities.assign(renderAsAnchor ? {} : {
      type: 'button'
    }, this.props.rootProps, this.props), renderAsAnchor ? _Utilities.anchorProperties : _Utilities.buttonProperties, ['disabled']);
    // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props
    var resolvedAriaLabel = ariaLabel || nativeProps['aria-label'];
    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of
    // aria-describedby. Otherwise default to undefined so property does not appear in output.
    var ariaDescribedBy = undefined;
    if (ariaDescription) {
      ariaDescribedBy = _ariaDescriptionId;
    } else if (secondaryText && this.props.onRenderDescription !== _Utilities.nullRender) {
      // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy
      // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy
      ariaDescribedBy = _descriptionId;
    } else if (nativeProps['aria-describedby']) {
      ariaDescribedBy = nativeProps['aria-describedby'];
    }
    // If an explicit aria-labelledby is given, use that and we're done.
    // If any kind of description is given (which will end up as an aria-describedby attribute)
    // and no ariaLabel is specified, set the labelledby element.
    // Otherwise, the button is labeled implicitly by the descendent text on the button (if it exists).
    var ariaLabelledBy = undefined;
    if (nativeProps['aria-labelledby']) {
      ariaLabelledBy = nativeProps['aria-labelledby'];
    } else if (ariaDescribedBy && !resolvedAriaLabel) {
      ariaLabelledBy = this._hasText() ? _labelId : undefined;
    }
    var dataIsFocusable = this.props['data-is-focusable'] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;
    var isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';
    // if isCheckboxTypeRole, always return a checked value.
    // Otherwise only return checked value if toggle is set to true.
    // This is because role="checkbox" always needs to have an aria-checked value
    // but our checked prop only sets aria-pressed if we mark the button as a toggle="true"
    var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;
    var buttonProps = _Utilities.assign(nativeProps, (_a = {
      className: this._classNames.root,
      // eslint-disable-next-line deprecation/deprecation
      ref: this._mergedRef(this.props.elementRef, this._buttonElement),
      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,
      onKeyDown: this._onKeyDown,
      onKeyPress: this._onKeyPress,
      onKeyUp: this._onKeyUp,
      onMouseDown: this._onMouseDown,
      onMouseUp: this._onMouseUp,
      onClick: this._onClick,
      'aria-label': resolvedAriaLabel,
      'aria-labelledby': ariaLabelledBy,
      'aria-describedby': ariaDescribedBy,
      'aria-disabled': isPrimaryButtonDisabled,
      'data-is-focusable': dataIsFocusable
    }, // aria-pressed attribute should only be present for toggle buttons
    // aria-checked attribute should only be present for toggle buttons with checkbox type role
    _a[isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed'] = checkedOrPressedValue, _a));
    if (ariaHidden) {
      buttonProps['aria-hidden'] = true;
    }
    if (this._isSplitButton) {
      return this._onRenderSplitButtonContent(tag, buttonProps);
    } else if (this.props.menuProps) {
      var _e = this.props.menuProps.id, id = _e === void 0 ? this._labelId + "-menu" : _e;
      _Utilities.assign(buttonProps, {
        'aria-expanded': !menuHidden,
        'aria-controls': !menuHidden ? id : null,
        'aria-haspopup': true
      });
    }
    return this._onRenderContent(tag, buttonProps);
  };
  BaseButton.prototype.componentDidMount = function () {
    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the
    // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,
    // because React does not support Pointer events yet.
    if (this._isSplitButton && this._splitButtonContainer.current) {
      if (('onpointerdown' in this._splitButtonContainer.current)) {
        this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);
      }
      if (('onpointerup' in this._splitButtonContainer.current) && this.props.onPointerUp) {
        this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);
      }
    }
  };
  BaseButton.prototype.componentDidUpdate = function (prevProps, prevState) {
    // If Button's menu was closed, run onAfterMenuDismiss.
    if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {
      this.props.onAfterMenuDismiss();
    }
  };
  BaseButton.prototype.componentWillUnmount = function () {
    this._async.dispose();
    this._events.dispose();
  };
  BaseButton.prototype.focus = function () {
    if (this._isSplitButton && this._splitButtonContainer.current) {
      _Utilities.setFocusVisibility(true);
      this._splitButtonContainer.current.focus();
    } else if (this._buttonElement.current) {
      _Utilities.setFocusVisibility(true);
      this._buttonElement.current.focus();
    }
  };
  BaseButton.prototype.dismissMenu = function () {
    this._dismissMenu();
  };
  BaseButton.prototype.openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {
    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);
  };
  BaseButton.prototype._onRenderContent = function (tag, buttonProps) {
    var _this = this;
    var props = this.props;
    var Tag = tag;
    var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a = props.onRenderIcon, onRenderIcon = _a === void 0 ? this._onRenderIcon : _a, _b = props.onRenderAriaDescription, onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b, _c = props.onRenderChildren, onRenderChildren = _c === void 0 ? this._onRenderChildren : _c, // eslint-disable-next-line deprecation/deprecation
    _d = props.onRenderMenu, // eslint-disable-next-line deprecation/deprecation
    onRenderMenu = _d === void 0 ? this._onRenderMenu : _d, _e = props.onRenderMenuIcon, onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e, disabled = props.disabled;
    var keytipProps = props.keytipProps;
    if (keytipProps && menuProps) {
      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
    }
    var Button = function (keytipAttributes) {
      return _react.createElement(Tag, _tslib.__assign({}, buttonProps, keytipAttributes), _react.createElement("span", {
        className: _this._classNames.flexContainer,
        "data-automationid": "splitbuttonprimary"
      }, onRenderIcon(props, _this._onRenderIcon), _this._onRenderTextContents(), onRenderAriaDescription(props, _this._onRenderAriaDescription), onRenderChildren(props, _this._onRenderChildren), !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon), menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(menuProps, _this._onRenderMenu)));
    };
    var Content = keytipProps ? // If we're making a split button, we won't put the keytip here
    _react.createElement(_KeytipData.KeytipData, {
      keytipProps: !this._isSplitButton ? keytipProps : undefined,
      ariaDescribedBy: buttonProps['aria-describedby'],
      disabled: disabled
    }, function (keytipAttributes) {
      return Button(keytipAttributes);
    }) : Button();
    if (menuProps && menuProps.doNotLayer) {
      return _react.createElement(_react.Fragment, null, Content, this._shouldRenderMenu() && onRenderMenu(menuProps, this._onRenderMenu));
    }
    return _react.createElement(_react.Fragment, null, Content, _react.createElement(_Utilities.FocusRects, null));
  };
  /**
  * Method to help determine if the menu's component tree should
  * be rendered. It takes into account whether the menu is expanded,
  * whether it is a persisted menu and whether it has been shown to the user.
  */
  BaseButton.prototype._shouldRenderMenu = function () {
    var menuHidden = this.state.menuHidden;
    // eslint-disable-next-line deprecation/deprecation
    var _a = this.props, persistMenu = _a.persistMenu, renderPersistedMenuHiddenOnMount = _a.renderPersistedMenuHiddenOnMount;
    if (!menuHidden) {
      // Always should render a menu when it is expanded
      return true;
    } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {
      // _renderedVisibleMenu ensures that the first rendering of
      // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.
      return true;
    }
    return false;
  };
  BaseButton.prototype._hasText = function () {
    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText
    // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.
    // text to be undefined in order for props.children to be used as a fallback.
    // Purely a code maintainability/reuse issue, but logged as Issue #4979.
    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');
  };
  BaseButton.prototype._onRenderSplitButtonContent = function (tag, buttonProps) {
    var _this = this;
    var _a = this.props, _b = _a.styles, styles = _b === void 0 ? {} : _b, disabled = _a.disabled, allowDisabledFocus = _a.allowDisabledFocus, checked = _a.checked, getSplitButtonClassNames = _a.getSplitButtonClassNames, primaryDisabled = _a.primaryDisabled, menuProps = _a.menuProps, toggle = _a.toggle, role = _a.role, primaryActionButtonProps = _a.primaryActionButtonProps;
    var keytipProps = this.props.keytipProps;
    var menuHidden = this.state.menuHidden;
    var classNames = getSplitButtonClassNames ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles && _SplitButtonSplitButtonClassNames.getSplitButtonClassNames(styles, !!disabled, !menuHidden, !!checked, !!primaryDisabled);
    _Utilities.assign(buttonProps, {
      onClick: undefined,
      onPointerDown: undefined,
      onPointerUp: undefined,
      tabIndex: -1,
      'data-is-focusable': false
    });
    if (keytipProps && menuProps) {
      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
    }
    var containerProps = _Utilities.getNativeProps(buttonProps, [], ['disabled']);
    // Add additional props to apply on primary action button
    if (primaryActionButtonProps) {
      _Utilities.assign(buttonProps, primaryActionButtonProps);
    }
    var SplitButton = function (keytipAttributes) {
      return _react.createElement("div", _tslib.__assign({}, containerProps, {
        "data-ktp-target": keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined,
        role: role ? role : 'button',
        "aria-disabled": disabled,
        "aria-haspopup": true,
        "aria-expanded": !menuHidden,
        "aria-pressed": toggle ? !!checked : undefined,
        "aria-describedby": _Utilities.mergeAriaAttributeValues(buttonProps['aria-describedby'], keytipAttributes ? keytipAttributes['aria-describedby'] : undefined),
        className: classNames && classNames.splitButtonContainer,
        onKeyDown: _this._onSplitButtonContainerKeyDown,
        onTouchStart: _this._onTouchStart,
        ref: _this._splitButtonContainer,
        "data-is-focusable": true,
        onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : undefined,
        tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : undefined,
        "aria-roledescription": buttonProps['aria-roledescription'],
        onFocusCapture: _this._onSplitContainerFocusCapture
      }), _react.createElement("span", {
        style: {
          display: 'flex'
        }
      }, _this._onRenderContent(tag, buttonProps), _this._onRenderSplitButtonMenuButton(classNames, keytipAttributes), _this._onRenderSplitButtonDivider(classNames)));
    };
    return keytipProps ? _react.createElement(_KeytipData.KeytipData, {
      keytipProps: keytipProps,
      disabled: disabled
    }, function (keytipAttributes) {
      return SplitButton(keytipAttributes);
    }) : SplitButton();
  };
  BaseButton.prototype._onRenderSplitButtonDivider = function (classNames) {
    if (classNames && classNames.divider) {
      var onClick = function (ev) {
        ev.stopPropagation();
      };
      return _react.createElement("span", {
        className: classNames.divider,
        "aria-hidden": true,
        onClick: onClick
      });
    }
    return null;
  };
  BaseButton.prototype._onRenderSplitButtonMenuButton = function (classNames, keytipAttributes) {
    var _a = this.props, allowDisabledFocus = _a.allowDisabledFocus, checked = _a.checked, disabled = _a.disabled, splitButtonMenuProps = _a.splitButtonMenuProps, splitButtonAriaLabel = _a.splitButtonAriaLabel, primaryDisabled = _a.primaryDisabled;
    var menuHidden = this.state.menuHidden;
    var menuIconProps = this.props.menuIconProps;
    if (menuIconProps === undefined) {
      menuIconProps = {
        iconName: 'ChevronDown'
      };
    }
    var splitButtonProps = _tslib.__assign(_tslib.__assign({}, splitButtonMenuProps), {
      styles: classNames,
      checked: checked,
      disabled: disabled,
      allowDisabledFocus: allowDisabledFocus,
      onClick: this._onMenuClick,
      menuProps: undefined,
      iconProps: _tslib.__assign(_tslib.__assign({}, menuIconProps), {
        className: this._classNames.menuIcon
      }),
      ariaLabel: splitButtonAriaLabel,
      'aria-haspopup': true,
      'aria-expanded': !menuHidden,
      'data-is-focusable': false
    });
    // Add data-ktp-execute-target to the split button if the keytip is defined
    return _react.createElement(BaseButton, _tslib.__assign({}, splitButtonProps, {
      "data-ktp-execute-target": keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes,
      onMouseDown: this._onMouseDown,
      tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1
    }));
  };
  BaseButton.prototype._onPointerDown = function (ev) {
    var onPointerDown = this.props.onPointerDown;
    if (onPointerDown) {
      onPointerDown(ev);
    }
    if (ev.pointerType === 'touch') {
      this._handleTouchAndPointerEvent();
      ev.preventDefault();
      ev.stopImmediatePropagation();
    }
  };
  BaseButton.prototype._handleTouchAndPointerEvent = function () {
    var _this = this;
    // If we already have an existing timeout from a previous touch and pointer event
    // cancel that timeout so we can set a new one.
    if (this._lastTouchTimeoutId !== undefined) {
      this._async.clearTimeout(this._lastTouchTimeoutId);
      this._lastTouchTimeoutId = undefined;
    }
    this._processingTouch = true;
    this._lastTouchTimeoutId = this._async.setTimeout(function () {
      _this._processingTouch = false;
      _this._lastTouchTimeoutId = undefined;
      // Touch and pointer events don't focus the button naturally,
      // so adding an imperative focus call to guarantee this behavior.
      _this.focus();
    }, TouchIdleDelay);
  };
  /**
  * Returns if the user hits a valid keyboard key to open the menu
  * @param ev - the keyboard event
  * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.
  */
  BaseButton.prototype._isValidMenuOpenKey = function (ev) {
    if (this.props.menuTriggerKeyCode) {
      // eslint-disable-next-line deprecation/deprecation
      return ev.which === this.props.menuTriggerKeyCode;
    } else if (this.props.menuProps) {
      // eslint-disable-next-line deprecation/deprecation
      return ev.which === _Utilities.KeyCodes.down && (ev.altKey || ev.metaKey);
    }
    // Note: When enter is pressed, we will let the event continue to propagate
    // to trigger the onClick event on the button
    return false;
  };
  BaseButton.defaultProps = {
    baseClassName: 'ms-Button',
    styles: {},
    split: false
  };
  return BaseButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../../Icon":"7upjA","../../common/DirectionalHint":"6itO1","../../ContextualMenu":"4u2S3","./BaseButton.classNames":"35CbM","./SplitButton/SplitButton.classNames":"NiYg5","../../KeytipData":"1wTJH","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6ZIET":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"1439N":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./version');
var _fluentuiUtilities = require('@fluentui/utilities');
_parcelHelpers.exportAll(_fluentuiUtilities, exports);

},{"./version":"4GWvB","@fluentui/utilities":"2AuOe","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4GWvB":[function(require,module,exports) {
var _fluentuiSetVersion = require('@fluentui/set-version');
_fluentuiSetVersion.setVersion('@fluentui/react', '8.17.0');

},{"@fluentui/set-version":"12cIw"}],"12cIw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVersion = void 0;
var setVersion_1 = require("./setVersion");
Object.defineProperty(exports, "setVersion", { enumerable: true, get: function () { return setVersion_1.setVersion; } });
setVersion_1.setVersion('@fluentui/set-version', '6.0.0');

},{"./setVersion":"6FZ5I"}],"6FZ5I":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVersion = void 0;
// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -
// this cache is local to the module closure inside this bundle
var packagesCache = {};
// Cache access to window to avoid IE11 memory leak.
var _win = undefined;
try {
    _win = window;
}
catch (e) {
    /* no-op */
}
function setVersion(packageName, packageVersion) {
    if (typeof _win !== 'undefined') {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var packages = (_win.__packages__ = _win.__packages__ || {});
        // We allow either the global packages or local packages caches to invalidate so testing can
        // just clear the global to set this state
        if (!packages[packageName] || !packagesCache[packageName]) {
            packagesCache[packageName] = packageVersion;
            var versions = (packages[packageName] = packages[packageName] || []);
            versions.push(packageVersion);
        }
    }
}
exports.setVersion = setVersion;

},{}],"2AuOe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMergedRef = exports.setSSR = exports.IsFocusVisibleClassName = exports.setFocusVisibility = exports.omit = exports.values = exports.shallowCompare = exports.mapEnumByName = exports.filteredAssign = exports.assign = void 0;
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./Async"), exports);
tslib_1.__exportStar(require("./AutoScroll"), exports);
tslib_1.__exportStar(require("./BaseComponent"), exports);
tslib_1.__exportStar(require("./BaseComponent.types"), exports);
tslib_1.__exportStar(require("./DelayedRender"), exports);
tslib_1.__exportStar(require("./EventGroup"), exports);
tslib_1.__exportStar(require("./FabricPerformance"), exports);
tslib_1.__exportStar(require("./GlobalSettings"), exports);
tslib_1.__exportStar(require("./IClassNames"), exports);
tslib_1.__exportStar(require("./IComponentAs"), exports);
tslib_1.__exportStar(require("./IDisposable"), exports);
tslib_1.__exportStar(require("./Point"), exports);
tslib_1.__exportStar(require("./IRectangle"), exports);
tslib_1.__exportStar(require("./IRenderComponent"), exports);
tslib_1.__exportStar(require("./IRenderFunction"), exports);
tslib_1.__exportStar(require("./ISize"), exports);
tslib_1.__exportStar(require("./IStyleFunction"), exports);
tslib_1.__exportStar(require("./KeyCodes"), exports);
tslib_1.__exportStar(require("./Rectangle"), exports);
tslib_1.__exportStar(require("./appendFunction"), exports);
tslib_1.__exportStar(require("./aria"), exports);
tslib_1.__exportStar(require("./array"), exports);
tslib_1.__exportStar(require("./asAsync"), exports);
tslib_1.__exportStar(require("./assertNever"), exports);
tslib_1.__exportStar(require("./classNamesFunction"), exports);
tslib_1.__exportStar(require("./componentAs/composeComponentAs"), exports);
tslib_1.__exportStar(require("./controlled"), exports);
tslib_1.__exportStar(require("./createRef"), exports);
tslib_1.__exportStar(require("./css"), exports);
tslib_1.__exportStar(require("./customizations/Customizations"), exports);
tslib_1.__exportStar(require("./customizations/Customizer"), exports);
tslib_1.__exportStar(require("./customizations/Customizer.types"), exports);
tslib_1.__exportStar(require("./customizations/CustomizerContext"), exports);
tslib_1.__exportStar(require("./customizations/customizable"), exports);
tslib_1.__exportStar(require("./customizations/useCustomizationSettings"), exports);
tslib_1.__exportStar(require("./customizations/mergeCustomizations"), exports);
tslib_1.__exportStar(require("./customizations/mergeSettings"), exports);
tslib_1.__exportStar(require("./dom"), exports);
tslib_1.__exportStar(require("./extendComponent"), exports);
tslib_1.__exportStar(require("./focus"), exports);
tslib_1.__exportStar(require("./getId"), exports);
tslib_1.__exportStar(require("./getNativeElementProps"), exports);
tslib_1.__exportStar(require("./hoist"), exports);
tslib_1.__exportStar(require("./hoistStatics"), exports);
tslib_1.__exportStar(require("./initializeComponentRef"), exports);
tslib_1.__exportStar(require("./initializeFocusRects"), exports);
tslib_1.__exportStar(require("./useFocusRects"), exports);
tslib_1.__exportStar(require("./initials"), exports);
tslib_1.__exportStar(require("./keyboard"), exports);
tslib_1.__exportStar(require("./language"), exports);
tslib_1.__exportStar(require("./math"), exports);
tslib_1.__exportStar(require("./memoize"), exports);
tslib_1.__exportStar(require("./merge"), exports);
tslib_1.__exportStar(require("./mobileDetector"), exports);
tslib_1.__exportStar(require("./modalize"), exports);
var object_1 = require("./object");
Object.defineProperty(exports, "assign", { enumerable: true, get: function () { return object_1.assign; } });
Object.defineProperty(exports, "filteredAssign", { enumerable: true, get: function () { return object_1.filteredAssign; } });
Object.defineProperty(exports, "mapEnumByName", { enumerable: true, get: function () { return object_1.mapEnumByName; } });
Object.defineProperty(exports, "shallowCompare", { enumerable: true, get: function () { return object_1.shallowCompare; } });
Object.defineProperty(exports, "values", { enumerable: true, get: function () { return object_1.values; } });
Object.defineProperty(exports, "omit", { enumerable: true, get: function () { return object_1.omit; } });
tslib_1.__exportStar(require("./osDetector"), exports);
tslib_1.__exportStar(require("./overflow"), exports);
tslib_1.__exportStar(require("./properties"), exports);
tslib_1.__exportStar(require("./renderFunction/composeRenderFunction"), exports);
tslib_1.__exportStar(require("./resources"), exports);
tslib_1.__exportStar(require("./rtl"), exports);
tslib_1.__exportStar(require("./safeRequestAnimationFrame"), exports);
tslib_1.__exportStar(require("./safeSetTimeout"), exports);
tslib_1.__exportStar(require("./scroll"), exports);
tslib_1.__exportStar(require("./selection/index"), exports);
tslib_1.__exportStar(require("./string"), exports);
tslib_1.__exportStar(require("./styled"), exports);
tslib_1.__exportStar(require("./warn"), exports);
tslib_1.__exportStar(require("./ie11Detector"), exports);
tslib_1.__exportStar(require("./getPropsWithDefaults"), exports);
var setFocusVisibility_1 = require("./setFocusVisibility");
Object.defineProperty(exports, "setFocusVisibility", { enumerable: true, get: function () { return setFocusVisibility_1.setFocusVisibility; } });
Object.defineProperty(exports, "IsFocusVisibleClassName", { enumerable: true, get: function () { return setFocusVisibility_1.IsFocusVisibleClassName; } });
var setSSR_1 = require("./dom/setSSR");
Object.defineProperty(exports, "setSSR", { enumerable: true, get: function () { return setSSR_1.setSSR; } });
var createMergedRef_1 = require("./createMergedRef");
Object.defineProperty(exports, "createMergedRef", { enumerable: true, get: function () { return createMergedRef_1.createMergedRef; } });
require("./version");

},{"tslib":"2TEhm","./Async":"5jCXP","./AutoScroll":"1hUrT","./BaseComponent":"4Fchk","./BaseComponent.types":"1vISk","./DelayedRender":"7x4u5","./EventGroup":"5ndXb","./FabricPerformance":"6wm1Q","./GlobalSettings":"5Rky7","./IClassNames":"iabs5","./IComponentAs":"3nfTX","./IDisposable":"5eqrA","./Point":"5t2B1","./IRectangle":"6cE8U","./IRenderComponent":"6vbmF","./IRenderFunction":"59THz","./ISize":"5RcuN","./IStyleFunction":"2bQCV","./KeyCodes":"2o9o5","./Rectangle":"4SCWD","./appendFunction":"vxmw1","./aria":"5L625","./array":"4181P","./asAsync":"1xonN","./assertNever":"7Hqzr","./classNamesFunction":"5sp0P","./componentAs/composeComponentAs":"1QtXc","./controlled":"6YsSt","./createRef":"4myM0","./css":"6u2T0","./customizations/Customizations":"6ZbKh","./customizations/Customizer":"4ftIS","./customizations/Customizer.types":"3z7IM","./customizations/CustomizerContext":"1c5Vb","./customizations/customizable":"1dctY","./customizations/useCustomizationSettings":"1xYYi","./customizations/mergeCustomizations":"7iwms","./customizations/mergeSettings":"7w5t1","./dom":"7lNOY","./extendComponent":"48NcN","./focus":"uyXzm","./getId":"7Ml31","./getNativeElementProps":"5PXVd","./hoist":"718Sq","./hoistStatics":"7xFTH","./initializeComponentRef":"5yo6I","./initializeFocusRects":"5xkHg","./useFocusRects":"1z8oa","./initials":"5Tmf7","./keyboard":"6BBY7","./language":"2ptAt","./math":"3i9X8","./memoize":"6rBWo","./merge":"4zya0","./mobileDetector":"2janE","./modalize":"1CXeI","./object":"6Zj5j","./osDetector":"40S5X","./overflow":"4WEf0","./properties":"1RXBm","./renderFunction/composeRenderFunction":"3UnaV","./resources":"2ofu9","./rtl":"5mbLb","./safeRequestAnimationFrame":"4B4N2","./safeSetTimeout":"1Oxmn","./scroll":"1fDhq","./selection/index":"1XVP1","./string":"1xP7v","./styled":"2usNX","./warn":"6DykI","./ie11Detector":"3jpsq","./getPropsWithDefaults":"L7piO","./setFocusVisibility":"6Zfix","./dom/setSSR":"3Tsdf","./createMergedRef":"jHpNQ","./version":"45XfX"}],"2TEhm":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"5jCXP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Async = void 0;
var getWindow_1 = require("./dom/getWindow");
/**
 * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
 * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
 *
 * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
 * new instance of the class and remember to call dispose() during your code's dispose handler.
 *
 * @public
 */
var Async = /** @class */ (function () {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function Async(parent, onError) {
        this._timeoutIds = null;
        this._immediateIds = null;
        this._intervalIds = null;
        this._animationFrameIds = null;
        this._isDisposed = false;
        this._parent = parent || null;
        this._onErrorHandler = onError;
        this._noop = function () {
            /* do nothing */
        };
    }
    /**
     * Dispose function, clears all async operations.
     */
    Async.prototype.dispose = function () {
        var id;
        this._isDisposed = true;
        this._parent = null;
        // Clear timeouts.
        if (this._timeoutIds) {
            for (id in this._timeoutIds) {
                if (this._timeoutIds.hasOwnProperty(id)) {
                    this.clearTimeout(parseInt(id, 10));
                }
            }
            this._timeoutIds = null;
        }
        // Clear immediates.
        if (this._immediateIds) {
            for (id in this._immediateIds) {
                if (this._immediateIds.hasOwnProperty(id)) {
                    this.clearImmediate(parseInt(id, 10));
                }
            }
            this._immediateIds = null;
        }
        // Clear intervals.
        if (this._intervalIds) {
            for (id in this._intervalIds) {
                if (this._intervalIds.hasOwnProperty(id)) {
                    this.clearInterval(parseInt(id, 10));
                }
            }
            this._intervalIds = null;
        }
        // Clear animation frames.
        if (this._animationFrameIds) {
            for (id in this._animationFrameIds) {
                if (this._animationFrameIds.hasOwnProperty(id)) {
                    this.cancelAnimationFrame(parseInt(id, 10));
                }
            }
            this._animationFrameIds = null;
        }
    };
    /**
     * SetTimeout override, which will auto cancel the timeout during dispose.
     * @param callback - Callback to execute.
     * @param duration - Duration in milliseconds.
     * @returns The setTimeout id.
     */
    Async.prototype.setTimeout = function (callback, duration) {
        var _this = this;
        var timeoutId = 0;
        if (!this._isDisposed) {
            if (!this._timeoutIds) {
                this._timeoutIds = {};
            }
            timeoutId = setTimeout(function () {
                // Time to execute the timeout, enqueue it as a foreground task to be executed.
                try {
                    // Now delete the record and call the callback.
                    if (_this._timeoutIds) {
                        delete _this._timeoutIds[timeoutId];
                    }
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            }, duration);
            this._timeoutIds[timeoutId] = true;
        }
        return timeoutId;
    };
    /**
     * Clears the timeout.
     * @param id - Id to cancel.
     */
    Async.prototype.clearTimeout = function (id) {
        if (this._timeoutIds && this._timeoutIds[id]) {
            clearTimeout(id);
            delete this._timeoutIds[id];
        }
    };
    /**
     * SetImmediate override, which will auto cancel the immediate during dispose.
     * @param callback - Callback to execute.
     * @param targetElement - Optional target element to use for identifying the correct window.
     * @returns The setTimeout id.
     */
    Async.prototype.setImmediate = function (callback, targetElement) {
        var _this = this;
        var immediateId = 0;
        var win = getWindow_1.getWindow(targetElement);
        if (!this._isDisposed) {
            if (!this._immediateIds) {
                this._immediateIds = {};
            }
            var setImmediateCallback = function () {
                // Time to execute the timeout, enqueue it as a foreground task to be executed.
                try {
                    // Now delete the record and call the callback.
                    if (_this._immediateIds) {
                        delete _this._immediateIds[immediateId];
                    }
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            };
            immediateId = win.setTimeout(setImmediateCallback, 0);
            this._immediateIds[immediateId] = true;
        }
        return immediateId;
    };
    /**
     * Clears the immediate.
     * @param id - Id to cancel.
     * @param targetElement - Optional target element to use for identifying the correct window.
     */
    Async.prototype.clearImmediate = function (id, targetElement) {
        var win = getWindow_1.getWindow(targetElement);
        if (this._immediateIds && this._immediateIds[id]) {
            win.clearTimeout(id);
            delete this._immediateIds[id];
        }
    };
    /**
     * SetInterval override, which will auto cancel the timeout during dispose.
     * @param callback - Callback to execute.
     * @param duration - Duration in milliseconds.
     * @returns The setTimeout id.
     */
    Async.prototype.setInterval = function (callback, duration) {
        var _this = this;
        var intervalId = 0;
        if (!this._isDisposed) {
            if (!this._intervalIds) {
                this._intervalIds = {};
            }
            intervalId = setInterval(function () {
                // Time to execute the interval callback, enqueue it as a foreground task to be executed.
                try {
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            }, duration);
            this._intervalIds[intervalId] = true;
        }
        return intervalId;
    };
    /**
     * Clears the interval.
     * @param id - Id to cancel.
     */
    Async.prototype.clearInterval = function (id) {
        if (this._intervalIds && this._intervalIds[id]) {
            clearInterval(id);
            delete this._intervalIds[id];
        }
    };
    /**
     * Creates a function that, when executed, will only call the func function at most once per
     * every wait milliseconds. Provide an options object to indicate that func should be invoked
     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
     * function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of
     * the timeout only if the throttled function is invoked more than once during the wait timeout.
     *
     * @param func - The function to throttle.
     * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.
     * @param options - The options object.
     * @returns The new throttled function.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Async.prototype.throttle = function (func, wait, options) {
        var _this = this;
        if (this._isDisposed) {
            return this._noop;
        }
        var waitMS = wait || 0;
        var leading = true;
        var trailing = true;
        var lastExecuteTime = 0;
        var lastResult;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === 'boolean') {
            leading = options.leading;
        }
        if (options && typeof options.trailing === 'boolean') {
            trailing = options.trailing;
        }
        var callback = function (userCall) {
            var now = Date.now();
            var delta = now - lastExecuteTime;
            var waitLength = leading ? waitMS - delta : waitMS;
            if (delta >= waitMS && (!userCall || leading)) {
                lastExecuteTime = now;
                if (timeoutId) {
                    _this.clearTimeout(timeoutId);
                    timeoutId = null;
                }
                lastResult = func.apply(_this._parent, lastArgs);
            }
            else if (timeoutId === null && trailing) {
                timeoutId = _this.setTimeout(callback, waitLength);
            }
            return lastResult;
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var resultFunction = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            return callback(true);
        });
        return resultFunction;
    };
    /**
     * Creates a function that will delay the execution of func until after wait milliseconds have
     * elapsed since the last time it was invoked. Provide an options object to indicate that func
     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
     * to the debounced function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of
     * the timeout only if the debounced function is invoked more than once during the wait
     * timeout.
     *
     * @param func - The function to debounce.
     * @param wait - The number of milliseconds to delay.
     * @param options - The options object.
     * @returns The new debounced function.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Async.prototype.debounce = function (func, wait, options) {
        var _this = this;
        if (this._isDisposed) {
            var noOpFunction = (function () {
                /** Do nothing */
            });
            noOpFunction.cancel = function () {
                return;
            };
            noOpFunction.flush = (function () { return null; });
            noOpFunction.pending = function () { return false; };
            return noOpFunction;
        }
        var waitMS = wait || 0;
        var leading = false;
        var trailing = true;
        var maxWait = null;
        var lastCallTime = 0;
        var lastExecuteTime = Date.now();
        var lastResult;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === 'boolean') {
            leading = options.leading;
        }
        if (options && typeof options.trailing === 'boolean') {
            trailing = options.trailing;
        }
        if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {
            maxWait = options.maxWait;
        }
        var markExecuted = function (time) {
            if (timeoutId) {
                _this.clearTimeout(timeoutId);
                timeoutId = null;
            }
            lastExecuteTime = time;
        };
        var invokeFunction = function (time) {
            markExecuted(time);
            lastResult = func.apply(_this._parent, lastArgs);
        };
        var callback = function (userCall) {
            var now = Date.now();
            var executeImmediately = false;
            if (userCall) {
                if (leading && now - lastCallTime >= waitMS) {
                    executeImmediately = true;
                }
                lastCallTime = now;
            }
            var delta = now - lastCallTime;
            var waitLength = waitMS - delta;
            var maxWaitDelta = now - lastExecuteTime;
            var maxWaitExpired = false;
            if (maxWait !== null) {
                // maxWait only matters when there is a pending callback
                if (maxWaitDelta >= maxWait && timeoutId) {
                    maxWaitExpired = true;
                }
                else {
                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
                }
            }
            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
                invokeFunction(now);
            }
            else if ((timeoutId === null || !userCall) && trailing) {
                timeoutId = _this.setTimeout(callback, waitLength);
            }
            return lastResult;
        };
        var pending = function () {
            return !!timeoutId;
        };
        var cancel = function () {
            if (pending()) {
                // Mark the debounced function as having executed
                markExecuted(Date.now());
            }
        };
        var flush = function () {
            if (pending()) {
                invokeFunction(Date.now());
            }
            return lastResult;
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var resultFunction = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            return callback(true);
        });
        resultFunction.cancel = cancel;
        resultFunction.flush = flush;
        resultFunction.pending = pending;
        return resultFunction;
    };
    Async.prototype.requestAnimationFrame = function (callback, targetElement) {
        var _this = this;
        var animationFrameId = 0;
        var win = getWindow_1.getWindow(targetElement);
        if (!this._isDisposed) {
            if (!this._animationFrameIds) {
                this._animationFrameIds = {};
            }
            var animationFrameCallback = function () {
                try {
                    // Now delete the record and call the callback.
                    if (_this._animationFrameIds) {
                        delete _this._animationFrameIds[animationFrameId];
                    }
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            };
            animationFrameId = win.requestAnimationFrame
                ? win.requestAnimationFrame(animationFrameCallback)
                : win.setTimeout(animationFrameCallback, 0);
            this._animationFrameIds[animationFrameId] = true;
        }
        return animationFrameId;
    };
    Async.prototype.cancelAnimationFrame = function (id, targetElement) {
        var win = getWindow_1.getWindow(targetElement);
        if (this._animationFrameIds && this._animationFrameIds[id]) {
            win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);
            delete this._animationFrameIds[id];
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Async.prototype._logError = function (e) {
        if (this._onErrorHandler) {
            this._onErrorHandler(e);
        }
    };
    return Async;
}());
exports.Async = Async;

},{"./dom/getWindow":"5d0Wh"}],"5d0Wh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWindow = void 0;
var setSSR_1 = require("./setSSR");
var _window = undefined;
// Note: Accessing "window" in IE11 is somewhat expensive, and calling "typeof window"
// hits a memory leak, whereas aliasing it and calling "typeof _window" does not.
// Caching the window value at the file scope lets us minimize the impact.
try {
    _window = window;
}
catch (e) {
    /* no-op */
}
/**
 * Helper to get the window object. The helper will make sure to use a cached variable
 * of "window", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the
 * window object won't match the "global" window object, and for these scenarios, you should
 * pass in an element hosted within the popup.
 *
 * @public
 */
function getWindow(rootElement) {
    if (setSSR_1._isSSR || typeof _window === 'undefined') {
        return undefined;
    }
    else {
        var el = rootElement;
        return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;
    }
}
exports.getWindow = getWindow;

},{"./setSSR":"3Tsdf"}],"3Tsdf":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSSR = exports._isSSR = void 0;
exports._isSSR = false;
/**
 * Helper to set ssr mode to simulate no window object returned from getWindow helper.
 *
 * @public
 */
function setSSR(isEnabled) {
    exports._isSSR = isEnabled;
}
exports.setSSR = setSSR;

},{}],"1hUrT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoScroll = void 0;
var EventGroup_1 = require("./EventGroup");
var scroll_1 = require("./scroll");
var getRect_1 = require("./dom/getRect");
var SCROLL_ITERATION_DELAY = 16;
var SCROLL_GUTTER = 100;
var MAX_SCROLL_VELOCITY = 15;
/**
 * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container
 * up/down depending on how close the mouse is to the top/bottom of the container.
 *
 * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.
 *
 * @public
 * {@docCategory AutoScroll}
 */
var AutoScroll = /** @class */ (function () {
    function AutoScroll(element) {
        this._events = new EventGroup_1.EventGroup(this);
        this._scrollableParent = scroll_1.findScrollableParent(element);
        this._incrementScroll = this._incrementScroll.bind(this);
        this._scrollRect = getRect_1.getRect(this._scrollableParent);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this._scrollableParent === window) {
            this._scrollableParent = document.body;
        }
        if (this._scrollableParent) {
            this._events.on(window, 'mousemove', this._onMouseMove, true);
            this._events.on(window, 'touchmove', this._onTouchMove, true);
        }
    }
    AutoScroll.prototype.dispose = function () {
        this._events.dispose();
        this._stopScroll();
    };
    AutoScroll.prototype._onMouseMove = function (ev) {
        this._computeScrollVelocity(ev);
    };
    AutoScroll.prototype._onTouchMove = function (ev) {
        if (ev.touches.length > 0) {
            this._computeScrollVelocity(ev);
        }
    };
    AutoScroll.prototype._computeScrollVelocity = function (ev) {
        if (!this._scrollRect) {
            return;
        }
        var clientX;
        var clientY;
        if ('clientX' in ev) {
            clientX = ev.clientX;
            clientY = ev.clientY;
        }
        else {
            clientX = ev.touches[0].clientX;
            clientY = ev.touches[0].clientY;
        }
        var scrollRectTop = this._scrollRect.top;
        var scrollRectLeft = this._scrollRect.left;
        var scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;
        var scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;
        // variables to use for alternating scroll direction
        var scrollRect;
        var clientDirection;
        var scrollClient;
        // if either of these conditions are met we are scrolling vertically else horizontally
        if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {
            clientDirection = clientY;
            scrollRect = scrollRectTop;
            scrollClient = scrollClientBottom;
            this._isVerticalScroll = true;
        }
        else {
            clientDirection = clientX;
            scrollRect = scrollRectLeft;
            scrollClient = scrollClientRight;
            this._isVerticalScroll = false;
        }
        // calculate scroll velocity and direction
        if (clientDirection < scrollRect + SCROLL_GUTTER) {
            this._scrollVelocity = Math.max(-MAX_SCROLL_VELOCITY, -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER));
        }
        else if (clientDirection > scrollClient) {
            this._scrollVelocity = Math.min(MAX_SCROLL_VELOCITY, MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER));
        }
        else {
            this._scrollVelocity = 0;
        }
        if (this._scrollVelocity) {
            this._startScroll();
        }
        else {
            this._stopScroll();
        }
    };
    AutoScroll.prototype._startScroll = function () {
        if (!this._timeoutId) {
            this._incrementScroll();
        }
    };
    AutoScroll.prototype._incrementScroll = function () {
        if (this._scrollableParent) {
            if (this._isVerticalScroll) {
                this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);
            }
            else {
                this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);
            }
        }
        this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);
    };
    AutoScroll.prototype._stopScroll = function () {
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
            delete this._timeoutId;
        }
    };
    return AutoScroll;
}());
exports.AutoScroll = AutoScroll;

},{"./EventGroup":"5ndXb","./scroll":"1fDhq","./dom/getRect":"68DO0"}],"5ndXb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventGroup = void 0;
var object_1 = require("./object");
/** An instance of EventGroup allows anything with a handle to it to trigger events on it.
 *  If the target is an HTMLElement, the event will be attached to the element and can be
 *  triggered as usual (like clicking for onClick).
 *  The event can be triggered by calling EventGroup.raise() here. If the target is an
 *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
 *  handled here in EventGroup, and the handler is called in the context of the parent
 *  (which is passed in in the constructor).
 *
 * @public
 * {@docCategory EventGroup}
 */
var EventGroup = /** @class */ (function () {
    /** parent: the context in which events attached to non-HTMLElements are called */
    function EventGroup(parent) {
        this._id = EventGroup._uniqueId++;
        this._parent = parent;
        this._eventRecords = [];
    }
    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.
     *  Events raised here by default have bubbling set to false and cancelable set to true.
     *  This applies also to built-in events being raised manually here on HTMLElements,
     *  which may lead to unexpected behavior if it differs from the defaults.
     *
     */
    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
        var retVal;
        if (EventGroup._isElement(target)) {
            if (typeof document !== 'undefined' && document.createEvent) {
                var ev = document.createEvent('HTMLEvents');
                ev.initEvent(eventName, bubbleEvent || false, true);
                object_1.assign(ev, eventArgs);
                retVal = target.dispatchEvent(ev);
            }
            else if (typeof document !== 'undefined' && document.createEventObject) {
                // IE8
                var evObj = document.createEventObject(eventArgs);
                // cannot set cancelBubble on evObj, fireEvent will overwrite it
                target.fireEvent('on' + eventName, evObj);
            }
        }
        else {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore  -- FIXME: strictBindCallApply error - https://github.com/microsoft/fluentui/issues/17331
            while (target && retVal !== false) {
                var events = target.__events__;
                var eventRecords = events ? events[eventName] : null;
                if (eventRecords) {
                    for (var id in eventRecords) {
                        if (eventRecords.hasOwnProperty(id)) {
                            var eventRecordList = eventRecords[id];
                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                            // @ts-ignore  -- FIXME: strictBindCallApply error - https://github.com/microsoft/fluentui/issues/17331
                            for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
                                var record = eventRecordList[listIndex];
                                if (record.objectCallback) {
                                    retVal = record.objectCallback.call(record.parent, eventArgs);
                                }
                            }
                        }
                    }
                }
                // If the target has a parent, bubble the event up.
                target = bubbleEvent ? target.parent : null;
            }
        }
        return retVal;
    };
    EventGroup.isObserved = function (target, eventName) {
        var events = target && target.__events__;
        return !!events && !!events[eventName];
    };
    /** Check to see if the target has declared support of the given event. */
    EventGroup.isDeclared = function (target, eventName) {
        var declaredEvents = target && target.__declaredEvents;
        return !!declaredEvents && !!declaredEvents[eventName];
    };
    EventGroup.stopPropagation = function (event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        }
        else {
            // IE8
            event.cancelBubble = true;
        }
    };
    EventGroup._isElement = function (target) {
        return (!!target && (!!target.addEventListener || (typeof HTMLElement !== 'undefined' && target instanceof HTMLElement)));
    };
    EventGroup.prototype.dispose = function () {
        if (!this._isDisposed) {
            this._isDisposed = true;
            this.off();
            this._parent = null;
        }
    };
    /** On the target, attach a set of events, where the events object is a name to function mapping. */
    EventGroup.prototype.onAll = function (target, events, useCapture) {
        for (var eventName in events) {
            if (events.hasOwnProperty(eventName)) {
                this.on(target, eventName, events[eventName], useCapture);
            }
        }
    };
    /**
     * On the target, attach an event whose handler will be called in the context of the parent
     * of this instance of EventGroup.
     */
    EventGroup.prototype.on = function (target, eventName, callback, options) {
        var _this = this;
        if (eventName.indexOf(',') > -1) {
            var events = eventName.split(/[ ,]+/);
            for (var i = 0; i < events.length; i++) {
                this.on(target, events[i], callback, options);
            }
        }
        else {
            var parent_1 = this._parent;
            var eventRecord = {
                target: target,
                eventName: eventName,
                parent: parent_1,
                callback: callback,
                options: options,
            };
            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
            var events = (target.__events__ = target.__events__ || {});
            events[eventName] =
                events[eventName] ||
                    {
                        count: 0,
                    };
            events[eventName][this._id] = events[eventName][this._id] || [];
            events[eventName][this._id].push(eventRecord);
            events[eventName].count++;
            if (EventGroup._isElement(target)) {
                var processElementEvent = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (_this._isDisposed) {
                        return;
                    }
                    var result;
                    try {
                        result = callback.apply(parent_1, args);
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore  -- FIXME: strictBindCallApply error - https://github.com/microsoft/fluentui/issues/17331
                        if (result === false && args[0]) {
                            var e = args[0];
                            if (e.preventDefault) {
                                e.preventDefault();
                            }
                            if (e.stopPropagation) {
                                e.stopPropagation();
                            }
                            e.cancelBubble = true;
                        }
                    }
                    catch (e) {
                        // ignore
                    }
                    return result;
                };
                eventRecord.elementCallback = processElementEvent;
                if (target.addEventListener) {
                    target.addEventListener(eventName, processElementEvent, options);
                }
                else if (target.attachEvent) {
                    // IE8
                    target.attachEvent('on' + eventName, processElementEvent);
                }
            }
            else {
                var processObjectEvent = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (_this._isDisposed) {
                        return;
                    }
                    return callback.apply(parent_1, args);
                };
                eventRecord.objectCallback = processObjectEvent;
            }
            // Remember the record locally, so that it can be removed.
            this._eventRecords.push(eventRecord);
        }
    };
    EventGroup.prototype.off = function (target, eventName, callback, options) {
        for (var i = 0; i < this._eventRecords.length; i++) {
            var eventRecord = this._eventRecords[i];
            if ((!target || target === eventRecord.target) &&
                (!eventName || eventName === eventRecord.eventName) &&
                (!callback || callback === eventRecord.callback) &&
                (typeof options !== 'boolean' || options === eventRecord.options)) {
                var events = eventRecord.target.__events__;
                var targetArrayLookup = events[eventRecord.eventName];
                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
                // We may have already target's entries, so check for null.
                if (targetArray) {
                    if (targetArray.length === 1 || !callback) {
                        targetArrayLookup.count -= targetArray.length;
                        delete events[eventRecord.eventName][this._id];
                    }
                    else {
                        targetArrayLookup.count--;
                        targetArray.splice(targetArray.indexOf(eventRecord), 1);
                    }
                    if (!targetArrayLookup.count) {
                        delete events[eventRecord.eventName];
                    }
                }
                if (eventRecord.elementCallback) {
                    if (eventRecord.target.removeEventListener) {
                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);
                    }
                    else if (eventRecord.target.detachEvent) {
                        // IE8
                        eventRecord.target.detachEvent('on' + eventRecord.eventName, eventRecord.elementCallback);
                    }
                }
                this._eventRecords.splice(i--, 1);
            }
        }
    };
    /** Trigger the given event in the context of this instance of EventGroup. */
    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
    };
    /** Declare an event as being supported by this instance of EventGroup. */
    EventGroup.prototype.declare = function (event) {
        var declaredEvents = (this._parent.__declaredEvents = this._parent.__declaredEvents || {});
        if (typeof event === 'string') {
            declaredEvents[event] = true;
        }
        else {
            for (var i = 0; i < event.length; i++) {
                declaredEvents[event[i]] = true;
            }
        }
    };
    EventGroup._uniqueId = 0;
    return EventGroup;
}());
exports.EventGroup = EventGroup;

},{"./object":"6Zj5j"}],"6Zj5j":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.omit = exports.values = exports.mapEnumByName = exports.filteredAssign = exports.assign = exports.shallowCompare = void 0;
/**
 * Compares a to b and b to a.
 *
 * @public
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function shallowCompare(a, b) {
    for (var propName in a) {
        if (a.hasOwnProperty(propName)) {
            if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {
                return false;
            }
        }
    }
    for (var propName in b) {
        if (b.hasOwnProperty(propName)) {
            if (!a.hasOwnProperty(propName)) {
                return false;
            }
        }
    }
    return true;
}
exports.shallowCompare = shallowCompare;
/**
 * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more
 * objects as arguments and they will be merged sequentially into the target. Note that this will
 * shallow merge; it will not create new cloned values for target members.
 *
 * @public
 * @param target - Target object to merge following object arguments into.
 * @param args - One or more objects that will be mixed into the target in the order they are provided.
 * @returns Resulting merged target.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function assign(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return filteredAssign.apply(this, [null, target].concat(args));
}
exports.assign = assign;
/**
 * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter
 * the resulting merges. This allows for scenarios where you want to merge "everything except that one thing"
 * or "properties that start with data-". Note that this will shallow merge; it will not create new cloned
 * values for target members.
 *
 * @public
 * @param isAllowed - Callback to determine if the given propName is allowed in the result.
 * @param target - Target object to merge following object arguments into.
 * @param args - One or more objects that will be mixed into the target in the order they are provided.
 * @returns Resulting merged target.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function filteredAssign(isAllowed, target) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    target = target || {};
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var sourceObject = args_1[_a];
        if (sourceObject) {
            for (var propName in sourceObject) {
                if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {
                    target[propName] = sourceObject[propName];
                }
            }
        }
    }
    return target;
}
exports.filteredAssign = filteredAssign;
/**
 * Takes an enum and iterates over each value of the enum (as a string), running the callback on each,
 * returning a mapped array.
 * @param theEnum - Enum to iterate over
 * @param callback - The first parameter the name of the entry, and the second parameter is the value
 * of that entry, which is the value you'd normally use when using the enum (usually a number).
 */
function mapEnumByName(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
theEnum, callback) {
    // map<any> to satisfy compiler since it doesn't realize we strip out undefineds in the .filter() call
    return Object.keys(theEnum)
        .map(function (p) {
        // map on each property name as a string
        if (String(Number(p)) !== p) {
            // if the property is not just a number (because enums in TypeScript will map both ways)
            return callback(p, theEnum[p]);
        }
        return undefined;
    })
        .filter(function (v) { return !!v; }); // only return elements with values
}
exports.mapEnumByName = mapEnumByName;
/**
 * Get all values in an object dictionary
 *
 * @param obj - The dictionary to get values for
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function values(obj) {
    return Object.keys(obj).reduce(function (arr, key) {
        arr.push(obj[key]);
        return arr;
    }, []);
}
exports.values = values;
/**
 * Tiny helper to do the minimal amount of work in duplicating an object but omitting some
 * props. This ends up faster than using object ...rest or reduce to filter.
 *
 * This behaves very much like filteredAssign, but does not merge many objects together,
 * uses an exclusion object map, and avoids spreads all for optimal performance.
 *
 * See perf test for background:
 * https://jsperf.com/omit-vs-rest-vs-reduce/1
 *
 * @param obj - The object to clone
 * @param exclusions - The array of keys to exclude
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function omit(obj, exclusions) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var result = {};
    for (var key in obj) {
        if (exclusions.indexOf(key) === -1 && obj.hasOwnProperty(key)) {
            result[key] = obj[key];
        }
    }
    return result;
}
exports.omit = omit;

},{}],"1fDhq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findScrollableParent = exports.getScrollbarWidth = exports.enableBodyScroll = exports.disableBodyScroll = exports.allowOverscrollOnElement = exports.allowScrollOnElement = exports.DATA_IS_SCROLLABLE_ATTRIBUTE = void 0;
var getDocument_1 = require("./dom/getDocument");
var merge_styles_1 = require("@fluentui/merge-styles");
var getWindow_1 = require("./dom/getWindow");
var _scrollbarWidth;
var _bodyScrollDisabledCount = 0;
var DisabledScrollClassName = merge_styles_1.mergeStyles({
    overflow: 'hidden !important',
});
/**
 * Placing this attribute on scrollable divs optimizes detection to know
 * if the div is scrollable or not (given we can avoid expensive operations
 * like getComputedStyle.)
 *
 * @public
 */
exports.DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
/**
 * Allows the user to scroll within a element,
 * while preventing the user from scrolling the body
 */
var allowScrollOnElement = function (element, events) {
    if (!element) {
        return;
    }
    var _previousClientY = 0;
    var _element = null;
    // remember the clientY for future calls of _preventOverscrolling
    var _saveClientY = function (event) {
        if (event.targetTouches.length === 1) {
            _previousClientY = event.targetTouches[0].clientY;
        }
    };
    // prevent the body from scrolling when the user attempts
    // to scroll past the top or bottom of the element
    var _preventOverscrolling = function (event) {
        // only respond to a single-finger touch
        if (event.targetTouches.length !== 1) {
            return;
        }
        // prevent the body touchmove handler from firing
        // so that scrolling is allowed within the element
        event.stopPropagation();
        if (!_element) {
            return;
        }
        var clientY = event.targetTouches[0].clientY - _previousClientY;
        var scrollableParent = findScrollableParent(event.target);
        if (scrollableParent) {
            _element = scrollableParent;
        }
        // if the element is scrolled to the top,
        // prevent the user from scrolling up
        if (_element.scrollTop === 0 && clientY > 0) {
            event.preventDefault();
        }
        // if the element is scrolled to the bottom,
        // prevent the user from scrolling down
        if (_element.scrollHeight - Math.ceil(_element.scrollTop) <= _element.clientHeight && clientY < 0) {
            event.preventDefault();
        }
    };
    events.on(element, 'touchstart', _saveClientY, { passive: false });
    events.on(element, 'touchmove', _preventOverscrolling, { passive: false });
    _element = element;
};
exports.allowScrollOnElement = allowScrollOnElement;
/**
 * Same as allowScrollOnElement but does not prevent overscrolling.
 */
var allowOverscrollOnElement = function (element, events) {
    if (!element) {
        return;
    }
    var _allowElementScroll = function (event) {
        event.stopPropagation();
    };
    events.on(element, 'touchmove', _allowElementScroll, { passive: false });
};
exports.allowOverscrollOnElement = allowOverscrollOnElement;
var _disableIosBodyScroll = function (event) {
    event.preventDefault();
};
/**
 * Disables the body scrolling.
 *
 * @public
 */
function disableBodyScroll() {
    var doc = getDocument_1.getDocument();
    if (doc && doc.body && !_bodyScrollDisabledCount) {
        doc.body.classList.add(DisabledScrollClassName);
        doc.body.addEventListener('touchmove', _disableIosBodyScroll, { passive: false, capture: false });
    }
    _bodyScrollDisabledCount++;
}
exports.disableBodyScroll = disableBodyScroll;
/**
 * Enables the body scrolling.
 *
 * @public
 */
function enableBodyScroll() {
    if (_bodyScrollDisabledCount > 0) {
        var doc = getDocument_1.getDocument();
        if (doc && doc.body && _bodyScrollDisabledCount === 1) {
            doc.body.classList.remove(DisabledScrollClassName);
            doc.body.removeEventListener('touchmove', _disableIosBodyScroll);
        }
        _bodyScrollDisabledCount--;
    }
}
exports.enableBodyScroll = enableBodyScroll;
/**
 * Calculates the width of a scrollbar for the browser/os.
 *
 * @public
 */
function getScrollbarWidth() {
    if (_scrollbarWidth === undefined) {
        var scrollDiv = document.createElement('div');
        scrollDiv.style.setProperty('width', '100px');
        scrollDiv.style.setProperty('height', '100px');
        scrollDiv.style.setProperty('overflow', 'scroll');
        scrollDiv.style.setProperty('position', 'absolute');
        scrollDiv.style.setProperty('top', '-9999px');
        document.body.appendChild(scrollDiv);
        // Get the scrollbar width
        _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        // Delete the DIV
        document.body.removeChild(scrollDiv);
    }
    return _scrollbarWidth;
}
exports.getScrollbarWidth = getScrollbarWidth;
/**
 * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns
 * document.body.
 *
 * @public
 */
function findScrollableParent(startingElement) {
    var el = startingElement;
    var doc = getDocument_1.getDocument(startingElement);
    // First do a quick scan for the scrollable attribute.
    while (el && el !== doc.body) {
        if (el.getAttribute(exports.DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
            return el;
        }
        el = el.parentElement;
    }
    // If we haven't found it, the use the slower method: compute styles to evaluate if overflow is set.
    el = startingElement;
    while (el && el !== doc.body) {
        if (el.getAttribute(exports.DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {
            var computedStyles = getComputedStyle(el);
            var overflowY = computedStyles ? computedStyles.getPropertyValue('overflow-y') : '';
            if (overflowY && (overflowY === 'scroll' || overflowY === 'auto')) {
                return el;
            }
        }
        el = el.parentElement;
    }
    // Fall back to window scroll.
    if (!el || el === doc.body) {
        el = getWindow_1.getWindow(startingElement);
    }
    return el;
}
exports.findScrollableParent = findScrollableParent;

},{"./dom/getDocument":"70vZX","@fluentui/merge-styles":"366N8","./dom/getWindow":"5d0Wh"}],"70vZX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocument = void 0;
var setSSR_1 = require("./setSSR");
/**
 * Helper to get the document object. Note that in popup window cases, document
 * might be the wrong document, which is why we look at ownerDocument for the
 * truth. Also note that the SSR flag is used to test ssr scenarios even if
 * document is defined (from JSDOM for example.)
 *
 * @public
 */
function getDocument(rootElement) {
    if (setSSR_1._isSSR || typeof document === 'undefined') {
        return undefined;
    }
    else {
        var el = rootElement;
        return el && el.ownerDocument ? el.ownerDocument : document;
    }
}
exports.getDocument = getDocument;

},{"./setSSR":"3Tsdf"}],"366N8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setRTL = exports.keyframes = exports.fontFace = exports.concatStyleSetsWithProps = exports.concatStyleSets = exports.mergeCssSets = exports.mergeStyleSets = exports.mergeCss = exports.mergeStyles = void 0;
var tslib_1 = require("tslib");
var mergeStyles_1 = require("./mergeStyles");
Object.defineProperty(exports, "mergeStyles", { enumerable: true, get: function () { return mergeStyles_1.mergeStyles; } });
Object.defineProperty(exports, "mergeCss", { enumerable: true, get: function () { return mergeStyles_1.mergeCss; } });
var mergeStyleSets_1 = require("./mergeStyleSets");
Object.defineProperty(exports, "mergeStyleSets", { enumerable: true, get: function () { return mergeStyleSets_1.mergeStyleSets; } });
Object.defineProperty(exports, "mergeCssSets", { enumerable: true, get: function () { return mergeStyleSets_1.mergeCssSets; } });
var concatStyleSets_1 = require("./concatStyleSets");
Object.defineProperty(exports, "concatStyleSets", { enumerable: true, get: function () { return concatStyleSets_1.concatStyleSets; } });
var concatStyleSetsWithProps_1 = require("./concatStyleSetsWithProps");
Object.defineProperty(exports, "concatStyleSetsWithProps", { enumerable: true, get: function () { return concatStyleSetsWithProps_1.concatStyleSetsWithProps; } });
var fontFace_1 = require("./fontFace");
Object.defineProperty(exports, "fontFace", { enumerable: true, get: function () { return fontFace_1.fontFace; } });
var keyframes_1 = require("./keyframes");
Object.defineProperty(exports, "keyframes", { enumerable: true, get: function () { return keyframes_1.keyframes; } });
tslib_1.__exportStar(require("./Stylesheet"), exports);
var StyleOptionsState_1 = require("./StyleOptionsState");
Object.defineProperty(exports, "setRTL", { enumerable: true, get: function () { return StyleOptionsState_1.setRTL; } });
require("./version");

},{"tslib":"teFId","./mergeStyles":"7dEZP","./mergeStyleSets":"3LzKA","./concatStyleSets":"68KM7","./concatStyleSetsWithProps":"6UnfC","./fontFace":"1aq0J","./keyframes":"3hau8","./Stylesheet":"2FpgT","./StyleOptionsState":"7L3hz","./version":"7Ejte"}],"teFId":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"7dEZP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeCss = exports.mergeStyles = void 0;
var extractStyleParts_1 = require("./extractStyleParts");
var StyleOptionsState_1 = require("./StyleOptionsState");
var styleToClassName_1 = require("./styleToClassName");
/**
 * Concatenation helper, which can merge class names together. Skips over falsey values.
 *
 * @public
 */
function mergeStyles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return mergeCss(args, StyleOptionsState_1.getStyleOptions());
}
exports.mergeStyles = mergeStyles;
/**
 * Concatenation helper, which can merge class names together. Skips over falsey values.
 * Accepts a set of options that will be used when calculating styles.
 *
 * @public
 */
function mergeCss(args, options) {
    var styleArgs = args instanceof Array ? args : [args];
    var _a = extractStyleParts_1.extractStyleParts(styleArgs), classes = _a.classes, objects = _a.objects;
    if (objects.length) {
        classes.push(styleToClassName_1.styleToClassName(options || {}, objects));
    }
    return classes.join(' ');
}
exports.mergeCss = mergeCss;

},{"./extractStyleParts":"2lwv5","./StyleOptionsState":"7L3hz","./styleToClassName":"2HhtY"}],"2lwv5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractStyleParts = void 0;
var Stylesheet_1 = require("./Stylesheet");
/**
 * Separates the classes and style objects. Any classes that are pre-registered
 * args are auto expanded into objects.
 */
function extractStyleParts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var classes = [];
    var objects = [];
    var stylesheet = Stylesheet_1.Stylesheet.getInstance();
    function _processArgs(argsList) {
        for (var _i = 0, argsList_1 = argsList; _i < argsList_1.length; _i++) {
            var arg = argsList_1[_i];
            if (arg) {
                if (typeof arg === 'string') {
                    if (arg.indexOf(' ') >= 0) {
                        _processArgs(arg.split(' '));
                    }
                    else {
                        var translatedArgs = stylesheet.argsFromClassName(arg);
                        if (translatedArgs) {
                            _processArgs(translatedArgs);
                        }
                        else {
                            // Avoid adding the same class twice.
                            if (classes.indexOf(arg) === -1) {
                                classes.push(arg);
                            }
                        }
                    }
                }
                else if (Array.isArray(arg)) {
                    _processArgs(arg);
                }
                else if (typeof arg === 'object') {
                    objects.push(arg);
                }
            }
        }
    }
    _processArgs(args);
    return {
        classes: classes,
        objects: objects,
    };
}
exports.extractStyleParts = extractStyleParts;

},{"./Stylesheet":"2FpgT"}],"2FpgT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stylesheet = exports.InjectionMode = void 0;
var tslib_1 = require("tslib");
exports.InjectionMode = {
    /**
     * Avoids style injection, use getRules() to read the styles.
     */
    none: 0,
    /**
     * Inserts rules using the insertRule api.
     */
    insertNode: 1,
    /**
     * Appends rules using appendChild.
     */
    appendChild: 2,
};
var STYLESHEET_SETTING = '__stylesheet__';
/**
 * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node
 * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.
 */
var REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);
var _global = {};
// Grab window.
try {
    _global = window;
}
catch (_a) {
    /* leave as blank object */
}
var _stylesheet;
/**
 * Represents the state of styles registered in the page. Abstracts
 * the surface for adding styles to the stylesheet, exposes helpers
 * for reading the styles registered in server rendered scenarios.
 *
 * @public
 */
var Stylesheet = /** @class */ (function () {
    function Stylesheet(config) {
        this._rules = [];
        this._preservedRules = [];
        this._rulesToInsert = [];
        this._counter = 0;
        this._keyToClassName = {};
        this._onResetCallbacks = [];
        this._classNameToArgs = {};
        this._config = tslib_1.__assign({ injectionMode: exports.InjectionMode.insertNode, defaultPrefix: 'css', namespace: undefined, cspSettings: undefined }, config);
        this._keyToClassName = this._config.classNameCache || {};
    }
    /**
     * Gets the singleton instance.
     */
    Stylesheet.getInstance = function () {
        _stylesheet = _global[STYLESHEET_SETTING];
        if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {
            var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};
            _stylesheet = _global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);
        }
        return _stylesheet;
    };
    /**
     * Configures the stylesheet.
     */
    Stylesheet.prototype.setConfig = function (config) {
        this._config = tslib_1.__assign(tslib_1.__assign({}, this._config), config);
    };
    /**
     * Configures a reset callback.
     *
     * @param callback - A callback which will be called when the Stylesheet is reset.
     */
    Stylesheet.prototype.onReset = function (callback) {
        this._onResetCallbacks.push(callback);
    };
    /**
     * Generates a unique classname.
     *
     * @param displayName - Optional value to use as a prefix.
     */
    Stylesheet.prototype.getClassName = function (displayName) {
        var namespace = this._config.namespace;
        var prefix = displayName || this._config.defaultPrefix;
        return "" + (namespace ? namespace + '-' : '') + prefix + "-" + this._counter++;
    };
    /**
     * Used internally to cache information about a class which was
     * registered with the stylesheet.
     */
    Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {
        this._keyToClassName[key] = className;
        this._classNameToArgs[className] = {
            args: args,
            rules: rules,
        };
    };
    /**
     * Gets the appropriate classname given a key which was previously
     * registered using cacheClassName.
     */
    Stylesheet.prototype.classNameFromKey = function (key) {
        return this._keyToClassName[key];
    };
    /**
     * Gets all classnames cache with the stylesheet.
     */
    Stylesheet.prototype.getClassNameCache = function () {
        return this._keyToClassName;
    };
    /**
     * Gets the arguments associated with a given classname which was
     * previously registered using cacheClassName.
     */
    Stylesheet.prototype.argsFromClassName = function (className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.args;
    };
    /**
     * Gets the arguments associated with a given classname which was
     * previously registered using cacheClassName.
     */
    Stylesheet.prototype.insertedRulesFromClassName = function (className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.rules;
    };
    /**
     * Inserts a css rule into the stylesheet.
     * @param preserve - Preserves the rule beyond a reset boundary.
     */
    Stylesheet.prototype.insertRule = function (rule, preserve) {
        var injectionMode = this._config.injectionMode;
        var element = injectionMode !== exports.InjectionMode.none ? this._getStyleElement() : undefined;
        if (preserve) {
            this._preservedRules.push(rule);
        }
        if (element) {
            switch (this._config.injectionMode) {
                case exports.InjectionMode.insertNode:
                    var sheet = element.sheet;
                    try {
                        sheet.insertRule(rule, sheet.cssRules.length);
                    }
                    catch (e) {
                        // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)
                        // We need to swallow the exceptions for this scenario, otherwise we'd need to filter
                        // which could be slower and bulkier.
                    }
                    break;
                case exports.InjectionMode.appendChild:
                    element.appendChild(document.createTextNode(rule));
                    break;
            }
        }
        else {
            this._rules.push(rule);
        }
        if (this._config.onInsertRule) {
            this._config.onInsertRule(rule);
        }
    };
    /**
     * Gets all rules registered with the stylesheet; only valid when
     * using InsertionMode.none.
     */
    Stylesheet.prototype.getRules = function (includePreservedRules) {
        return ((includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join(''));
    };
    /**
     * Resets the internal state of the stylesheet. Only used in server
     * rendered scenarios where we're using InsertionMode.none.
     */
    Stylesheet.prototype.reset = function () {
        this._rules = [];
        this._rulesToInsert = [];
        this._counter = 0;
        this._classNameToArgs = {};
        this._keyToClassName = {};
        this._onResetCallbacks.forEach(function (callback) { return callback(); });
    };
    // Forces the regeneration of incoming styles without totally resetting the stylesheet.
    Stylesheet.prototype.resetKeys = function () {
        this._keyToClassName = {};
    };
    Stylesheet.prototype._getStyleElement = function () {
        var _this = this;
        if (!this._styleElement && typeof document !== 'undefined') {
            this._styleElement = this._createStyleElement();
            if (!REUSE_STYLE_NODE) {
                // Reset the style element on the next frame.
                window.requestAnimationFrame(function () {
                    _this._styleElement = undefined;
                });
            }
        }
        return this._styleElement;
    };
    Stylesheet.prototype._createStyleElement = function () {
        var head = document.head;
        var styleElement = document.createElement('style');
        styleElement.setAttribute('data-merge-styles', 'true');
        var cspSettings = this._config.cspSettings;
        if (cspSettings) {
            if (cspSettings.nonce) {
                styleElement.setAttribute('nonce', cspSettings.nonce);
            }
        }
        if (this._lastStyleElement) {
            // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.
            // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax
            head.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);
        }
        else {
            var placeholderStyleTag = this._findPlaceholderStyleTag();
            if (placeholderStyleTag) {
                head.insertBefore(styleElement, placeholderStyleTag.nextElementSibling);
            }
            else {
                head.insertBefore(styleElement, head.childNodes[0]);
            }
        }
        this._lastStyleElement = styleElement;
        return styleElement;
    };
    Stylesheet.prototype._findPlaceholderStyleTag = function () {
        var head = document.head;
        if (head) {
            return head.querySelector('style[data-merge-styles]');
        }
        return null;
    };
    return Stylesheet;
}());
exports.Stylesheet = Stylesheet;

},{"tslib":"teFId"}],"7L3hz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStyleOptions = exports.getRTL = exports.setRTL = void 0;
/**
 * Sets the current RTL value.
 */
function setRTL(isRTL) {
    if (_rtl !== isRTL) {
        _rtl = isRTL;
    }
}
exports.setRTL = setRTL;
/**
 * Gets the current RTL value.
 */
function getRTL() {
    if (_rtl === undefined) {
        _rtl =
            typeof document !== 'undefined' &&
                !!document.documentElement &&
                document.documentElement.getAttribute('dir') === 'rtl';
    }
    return _rtl;
}
exports.getRTL = getRTL;
// This has been split into 2 lines because it was working in Fabric due to the code being transpiled to es5, so this
// was converted to var while not working in Fluent that uses babel to transpile the code to be es6-like. Splitting the
// logic into two lines, however, allows it to work in both scenarios.
var _rtl;
_rtl = getRTL();
function getStyleOptions() {
    return {
        rtl: getRTL(),
    };
}
exports.getStyleOptions = getStyleOptions;

},{}],"2HhtY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.styleToClassName = exports.applyRegistration = exports.styleToRegistration = exports.serializeRuleEntries = void 0;
var tslib_1 = require("tslib");
var Stylesheet_1 = require("./Stylesheet");
var kebabRules_1 = require("./transforms/kebabRules");
var prefixRules_1 = require("./transforms/prefixRules");
var provideUnits_1 = require("./transforms/provideUnits");
var rtlifyRules_1 = require("./transforms/rtlifyRules");
var tokenizeWithParentheses_1 = require("./tokenizeWithParentheses");
var DISPLAY_NAME = 'displayName';
function getDisplayName(rules) {
    var rootStyle = rules && rules['&'];
    return rootStyle ? rootStyle.displayName : undefined;
}
var globalSelectorRegExp = /\:global\((.+?)\)/g;
/**
 * Finds comma separated selectors in a :global() e.g. ":global(.class1, .class2, .class3)"
 * and wraps them each in their own global ":global(.class1), :global(.class2), :global(.class3)"
 *
 * @param selectorWithGlobals The selector to process
 * @returns The updated selector
 */
function expandCommaSeparatedGlobals(selectorWithGlobals) {
    // We the selector does not have a :global() we can shortcut
    if (!globalSelectorRegExp.test(selectorWithGlobals)) {
        return selectorWithGlobals;
    }
    var replacementInfo = [];
    var findGlobal = /\:global\((.+?)\)/g;
    var match = null;
    // Create a result list for global selectors so we can replace them.
    while ((match = findGlobal.exec(selectorWithGlobals))) {
        // Only if the found selector is a comma separated list we'll process it.
        if (match[1].indexOf(',') > -1) {
            replacementInfo.push([
                match.index,
                match.index + match[0].length,
                // Wrap each of the found selectors in :global()
                match[1]
                    .split(',')
                    .map(function (v) { return ":global(" + v.trim() + ")"; })
                    .join(', '),
            ]);
        }
    }
    // Replace the found selectors with their wrapped variants in reverse order
    return replacementInfo
        .reverse()
        .reduce(function (selector, _a) {
        var matchIndex = _a[0], matchEndIndex = _a[1], replacement = _a[2];
        var prefix = selector.slice(0, matchIndex);
        var suffix = selector.slice(matchEndIndex);
        return prefix + replacement + suffix;
    }, selectorWithGlobals);
}
function expandSelector(newSelector, currentSelector) {
    if (newSelector.indexOf(':global(') >= 0) {
        return newSelector.replace(globalSelectorRegExp, '$1');
    }
    else if (newSelector.indexOf(':') === 0) {
        return currentSelector + newSelector;
    }
    else if (newSelector.indexOf('&') < 0) {
        return currentSelector + ' ' + newSelector;
    }
    return newSelector;
}
function extractSelector(currentSelector, rules, selector, value) {
    if (rules === void 0) { rules = { __order: [] }; }
    if (selector.indexOf('@') === 0) {
        selector = selector + '{' + currentSelector;
        extractRules([value], rules, selector);
    }
    else if (selector.indexOf(',') > -1) {
        expandCommaSeparatedGlobals(selector)
            .split(',')
            .map(function (s) { return s.trim(); })
            .forEach(function (separatedSelector) {
            return extractRules([value], rules, expandSelector(separatedSelector, currentSelector));
        });
    }
    else {
        extractRules([value], rules, expandSelector(selector, currentSelector));
    }
}
function extractRules(args, rules, currentSelector) {
    if (rules === void 0) { rules = { __order: [] }; }
    if (currentSelector === void 0) { currentSelector = '&'; }
    var stylesheet = Stylesheet_1.Stylesheet.getInstance();
    var currentRules = rules[currentSelector];
    if (!currentRules) {
        currentRules = {};
        rules[currentSelector] = currentRules;
        rules.__order.push(currentSelector);
    }
    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
        var arg = args_1[_i];
        // If the arg is a string, we need to look up the class map and merge.
        if (typeof arg === 'string') {
            var expandedRules = stylesheet.argsFromClassName(arg);
            if (expandedRules) {
                extractRules(expandedRules, rules, currentSelector);
            }
            // Else if the arg is an array, we need to recurse in.
        }
        else if (Array.isArray(arg)) {
            extractRules(arg, rules, currentSelector);
        }
        else {
            for (var prop in arg) {
                if (arg.hasOwnProperty(prop)) {
                    var propValue = arg[prop];
                    if (prop === 'selectors') {
                        // every child is a selector.
                        var selectors = arg.selectors;
                        for (var newSelector in selectors) {
                            if (selectors.hasOwnProperty(newSelector)) {
                                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);
                            }
                        }
                    }
                    else if (typeof propValue === 'object') {
                        // prop is a selector.
                        if (propValue !== null) {
                            extractSelector(currentSelector, rules, prop, propValue);
                        }
                    }
                    else {
                        if (propValue !== undefined) {
                            // Else, add the rule to the currentSelector.
                            if (prop === 'margin' || prop === 'padding') {
                                expandQuads(currentRules, prop, propValue);
                            }
                            else {
                                currentRules[prop] = propValue;
                            }
                        }
                    }
                }
            }
        }
    }
    return rules;
}
function expandQuads(currentRules, name, value) {
    var parts = typeof value === 'string' ? tokenizeWithParentheses_1.tokenizeWithParentheses(value) : [value];
    if (parts.length === 0) {
        parts.push(value);
    }
    if (parts[parts.length - 1] === '!important') {
        // Remove !important from parts, and append it to each part individually
        parts = parts.slice(0, -1).map(function (p) { return p + ' !important'; });
    }
    currentRules[name + 'Top'] = parts[0];
    currentRules[name + 'Right'] = parts[1] || parts[0];
    currentRules[name + 'Bottom'] = parts[2] || parts[0];
    currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];
}
function getKeyForRules(options, rules) {
    var serialized = [options.rtl ? 'rtl' : 'ltr'];
    var hasProps = false;
    for (var _i = 0, _a = rules.__order; _i < _a.length; _i++) {
        var selector = _a[_i];
        serialized.push(selector);
        var rulesForSelector = rules[selector];
        for (var propName in rulesForSelector) {
            if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {
                hasProps = true;
                serialized.push(propName, rulesForSelector[propName]);
            }
        }
    }
    return hasProps ? serialized.join('') : undefined;
}
function repeatString(target, count) {
    if (count <= 0) {
        return '';
    }
    if (count === 1) {
        return target;
    }
    return target + repeatString(target, count - 1);
}
function serializeRuleEntries(options, ruleEntries) {
    if (!ruleEntries) {
        return '';
    }
    var allEntries = [];
    for (var entry in ruleEntries) {
        if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {
            allEntries.push(entry, ruleEntries[entry]);
        }
    }
    // Apply transforms.
    for (var i = 0; i < allEntries.length; i += 2) {
        kebabRules_1.kebabRules(allEntries, i);
        provideUnits_1.provideUnits(allEntries, i);
        rtlifyRules_1.rtlifyRules(options, allEntries, i);
        prefixRules_1.prefixRules(allEntries, i);
    }
    // Apply punctuation.
    for (var i = 1; i < allEntries.length; i += 4) {
        allEntries.splice(i, 1, ':', allEntries[i], ';');
    }
    return allEntries.join('');
}
exports.serializeRuleEntries = serializeRuleEntries;
function styleToRegistration(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var rules = extractRules(args);
    var key = getKeyForRules(options, rules);
    if (key) {
        var stylesheet = Stylesheet_1.Stylesheet.getInstance();
        var registration = {
            className: stylesheet.classNameFromKey(key),
            key: key,
            args: args,
        };
        if (!registration.className) {
            registration.className = stylesheet.getClassName(getDisplayName(rules));
            var rulesToInsert = [];
            for (var _a = 0, _b = rules.__order; _a < _b.length; _a++) {
                var selector = _b[_a];
                rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));
            }
            registration.rulesToInsert = rulesToInsert;
        }
        return registration;
    }
    return undefined;
}
exports.styleToRegistration = styleToRegistration;
/**
 * Insert style to stylesheet.
 * @param registration Style registration.
 * @param specificityMultiplier Number of times classname selector is repeated in the css rule.
 * This is to increase css specificity in case it's needed. Default to 1.
 */
function applyRegistration(registration, specificityMultiplier) {
    if (specificityMultiplier === void 0) { specificityMultiplier = 1; }
    var stylesheet = Stylesheet_1.Stylesheet.getInstance();
    var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;
    if (rulesToInsert) {
        // rulesToInsert is an ordered array of selector/rule pairs.
        for (var i = 0; i < rulesToInsert.length; i += 2) {
            var rules = rulesToInsert[i + 1];
            if (rules) {
                var selector = rulesToInsert[i];
                selector = selector.replace(/&/g, repeatString("." + registration.className, specificityMultiplier));
                // Insert. Note if a media query, we must close the query with a final bracket.
                var processedRule = selector + "{" + rules + "}" + (selector.indexOf('@') === 0 ? '}' : '');
                stylesheet.insertRule(processedRule);
            }
        }
        stylesheet.cacheClassName(className, key, args, rulesToInsert);
    }
}
exports.applyRegistration = applyRegistration;
function styleToClassName(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var registration = styleToRegistration.apply(void 0, tslib_1.__spreadArrays([options], args));
    if (registration) {
        applyRegistration(registration, options.specificityMultiplier);
        return registration.className;
    }
    return '';
}
exports.styleToClassName = styleToClassName;

},{"tslib":"teFId","./Stylesheet":"2FpgT","./transforms/kebabRules":"1rSYK","./transforms/prefixRules":"3yqqy","./transforms/provideUnits":"5KK01","./transforms/rtlifyRules":"7LQyL","./tokenizeWithParentheses":"4QICW"}],"1rSYK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kebabRules = void 0;
var rules = {};
function kebabRules(rulePairs, index) {
    var rule = rulePairs[index];
    if (rule.charAt(0) !== '-') {
        rulePairs[index] = rules[rule] = rules[rule] || rule.replace(/([A-Z])/g, '-$1').toLowerCase();
    }
}
exports.kebabRules = kebabRules;

},{}],"3yqqy":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prefixRules = void 0;
var getVendorSettings_1 = require("../getVendorSettings");
var autoPrefixNames = {
    'user-select': 1,
};
function prefixRules(rulePairs, index) {
    var vendorSettings = getVendorSettings_1.getVendorSettings();
    var name = rulePairs[index];
    if (autoPrefixNames[name]) {
        var value = rulePairs[index + 1];
        if (autoPrefixNames[name]) {
            if (vendorSettings.isWebkit) {
                rulePairs.push('-webkit-' + name, value);
            }
            if (vendorSettings.isMoz) {
                rulePairs.push('-moz-' + name, value);
            }
            if (vendorSettings.isMs) {
                rulePairs.push('-ms-' + name, value);
            }
            if (vendorSettings.isOpera) {
                rulePairs.push('-o-' + name, value);
            }
        }
    }
}
exports.prefixRules = prefixRules;

},{"../getVendorSettings":"6JGNg"}],"6JGNg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVendorSettings = exports.getVendorSettings = void 0;
var _vendorSettings;
function getVendorSettings() {
    if (!_vendorSettings) {
        var doc = typeof document !== 'undefined' ? document : undefined;
        var nav = typeof navigator !== 'undefined' ? navigator : undefined;
        var userAgent = nav ? nav.userAgent.toLowerCase() : undefined;
        if (!doc) {
            _vendorSettings = {
                isWebkit: true,
                isMoz: true,
                isOpera: true,
                isMs: true,
            };
        }
        else {
            _vendorSettings = {
                isWebkit: !!(doc && 'WebkitAppearance' in doc.documentElement.style),
                isMoz: !!(userAgent && userAgent.indexOf('firefox') > -1),
                isOpera: !!(userAgent && userAgent.indexOf('opera') > -1),
                isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\/\d./i.test(navigator.userAgent))),
            };
        }
    }
    return _vendorSettings;
}
exports.getVendorSettings = getVendorSettings;
/**
 * Sets the vendor settings for prefixing and vendor specific operations.
 */
function setVendorSettings(vendorSettings) {
    _vendorSettings = vendorSettings;
}
exports.setVendorSettings = setVendorSettings;

},{}],"5KK01":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideUnits = void 0;
var NON_PIXEL_NUMBER_PROPS = [
    'column-count',
    'font-weight',
    'flex',
    'flex-grow',
    'flex-shrink',
    'fill-opacity',
    'opacity',
    'order',
    'z-index',
    'zoom',
];
function provideUnits(rulePairs, index) {
    var name = rulePairs[index];
    var value = rulePairs[index + 1];
    if (typeof value === 'number') {
        var isNonPixelProp = NON_PIXEL_NUMBER_PROPS.indexOf(name) > -1;
        var isVariableOrPrefixed = name.indexOf('--') > -1;
        var unit = isNonPixelProp || isVariableOrPrefixed ? '' : 'px';
        rulePairs[index + 1] = "" + value + unit;
    }
}
exports.provideUnits = provideUnits;

},{}],"7LQyL":[function(require,module,exports) {
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.rtlifyRules = void 0;
var LEFT = 'left';
var RIGHT = 'right';
var NO_FLIP = '@noflip';
var NAME_REPLACEMENTS = (_a = {},
    _a[LEFT] = RIGHT,
    _a[RIGHT] = LEFT,
    _a);
var VALUE_REPLACEMENTS = {
    'w-resize': 'e-resize',
    'sw-resize': 'se-resize',
    'nw-resize': 'ne-resize',
};
/**
 * RTLifies the rulePair in the array at the current index. This mutates the array for performance
 * reasons.
 */
function rtlifyRules(options, rulePairs, index) {
    if (options.rtl) {
        var name_1 = rulePairs[index];
        if (!name_1) {
            return;
        }
        var value = rulePairs[index + 1];
        if (typeof value === 'string' && value.indexOf(NO_FLIP) >= 0) {
            rulePairs[index + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, '');
        }
        else if (name_1.indexOf(LEFT) >= 0) {
            rulePairs[index] = name_1.replace(LEFT, RIGHT);
        }
        else if (name_1.indexOf(RIGHT) >= 0) {
            rulePairs[index] = name_1.replace(RIGHT, LEFT);
        }
        else if (String(value).indexOf(LEFT) >= 0) {
            rulePairs[index + 1] = value.replace(LEFT, RIGHT);
        }
        else if (String(value).indexOf(RIGHT) >= 0) {
            rulePairs[index + 1] = value.replace(RIGHT, LEFT);
        }
        else if (NAME_REPLACEMENTS[name_1]) {
            rulePairs[index] = NAME_REPLACEMENTS[name_1];
        }
        else if (VALUE_REPLACEMENTS[value]) {
            rulePairs[index + 1] = VALUE_REPLACEMENTS[value];
        }
        else {
            switch (name_1) {
                case 'margin':
                case 'padding':
                    rulePairs[index + 1] = flipQuad(value);
                    break;
                case 'box-shadow':
                    rulePairs[index + 1] = negateNum(value, 0);
                    break;
            }
        }
    }
}
exports.rtlifyRules = rtlifyRules;
/**
 * Given a string value in a space delimited format (e.g. "1 2 3 4"), negates a particular value.
 */
function negateNum(value, partIndex) {
    var parts = value.split(' ');
    var numberVal = parseInt(parts[partIndex], 10);
    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
    return parts.join(' ');
}
/**
 * Given a string quad, flips the left and right values.
 */
function flipQuad(value) {
    if (typeof value === 'string') {
        var parts = value.split(' ');
        if (parts.length === 4) {
            return parts[0] + " " + parts[3] + " " + parts[2] + " " + parts[1];
        }
    }
    return value;
}

},{}],"4QICW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenizeWithParentheses = void 0;
/**
 * Split a string into tokens separated by whitespace, except all text within parentheses
 * is treated as a single token (whitespace is ignored within parentheses).
 *
 * Unlike String.split(' '), multiple consecutive space characters are collapsed and
 * removed from the returned array (including leading and trailing spaces).
 *
 * For example:
 * `tokenizeWithParentheses("3px calc(var(--x) / 2) 9px    0 ")`
 *   => `["3px", "calc(var(--x) / 2)", "9px", "0"]`
 *
 * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.
 */
function tokenizeWithParentheses(value) {
    var parts = [];
    var partStart = 0;
    var parens = 0;
    for (var i = 0; i < value.length; i++) {
        switch (value[i]) {
            case '(':
                parens++;
                break;
            case ')':
                if (parens) {
                    parens--;
                }
                break;
            case '\t':
            case ' ':
                if (!parens) {
                    // Add the new part if it's not an empty string
                    if (i > partStart) {
                        parts.push(value.substring(partStart, i));
                    }
                    partStart = i + 1;
                }
                break;
        }
    }
    // Add the last part
    if (partStart < value.length) {
        parts.push(value.substring(partStart));
    }
    return parts;
}
exports.tokenizeWithParentheses = tokenizeWithParentheses;

},{}],"3LzKA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeCssSets = exports.mergeStyleSets = void 0;
var concatStyleSets_1 = require("./concatStyleSets");
var extractStyleParts_1 = require("./extractStyleParts");
var StyleOptionsState_1 = require("./StyleOptionsState");
var styleToClassName_1 = require("./styleToClassName");
/**
 * Takes in one or more style set objects, each consisting of a set of areas,
 * each which will produce a class name. Using this is analogous to calling
 * `mergeStyles` for each property in the object, but ensures we maintain the
 * set ordering when multiple style sets are merged.
 *
 * @param styleSets - One or more style sets to be merged.
 */
function mergeStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        styleSets[_i] = arguments[_i];
    }
    return mergeCssSets(styleSets, StyleOptionsState_1.getStyleOptions());
}
exports.mergeStyleSets = mergeStyleSets;
/**
 * Takes in one or more style set objects, each1consisting of a set of areas,
 * each which will produce a class name. Using this is analogous to calling
 * `mergeCss` for each property in the object, but ensures the
 * set ordering when multiple style sets are merged.
 *
 * @param styleSets - One or more style sets to be merged.
 * @param options - (optional) Options to use when creating rules.
 */
function mergeCssSets(styleSets, options) {
    var classNameSet = { subComponentStyles: {} };
    var styleSet = styleSets[0];
    if (!styleSet && styleSets.length <= 1) {
        return { subComponentStyles: {} };
    }
    var concatenatedStyleSet = concatStyleSets_1.concatStyleSets.apply(void 0, styleSets);
    var registrations = [];
    for (var styleSetArea in concatenatedStyleSet) {
        if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {
            if (styleSetArea === 'subComponentStyles') {
                classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};
                continue;
            }
            var styles = concatenatedStyleSet[styleSetArea];
            var _a = extractStyleParts_1.extractStyleParts(styles), classes = _a.classes, objects = _a.objects;
            if (objects === null || objects === void 0 ? void 0 : objects.length) {
                var registration = styleToClassName_1.styleToRegistration(options || {}, { displayName: styleSetArea }, objects);
                if (registration) {
                    registrations.push(registration);
                    classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');
                }
            }
            else {
                classNameSet[styleSetArea] = classes.join(' ');
            }
        }
    }
    for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {
        var registration = registrations_1[_i];
        if (registration) {
            styleToClassName_1.applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);
        }
    }
    return classNameSet;
}
exports.mergeCssSets = mergeCssSets;

},{"./concatStyleSets":"68KM7","./extractStyleParts":"2lwv5","./StyleOptionsState":"7L3hz","./styleToClassName":"2HhtY"}],"68KM7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatStyleSets = void 0;
var tslib_1 = require("tslib");
/**
 * Combine a set of styles together (but does not register css classes).
 * @param styleSets - One or more stylesets to be merged (each param can also be falsy).
 */
function concatStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        styleSets[_i] = arguments[_i];
    }
    if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {
        return styleSets[0];
    }
    var mergedSet = {};
    // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.
    var workingSubcomponentStyles = {};
    for (var _a = 0, styleSets_1 = styleSets; _a < styleSets_1.length; _a++) {
        var currentSet = styleSets_1[_a];
        if (currentSet) {
            for (var prop in currentSet) {
                if (currentSet.hasOwnProperty(prop)) {
                    if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {
                        // subcomponent styles - style functions or objects
                        var currentComponentStyles = currentSet.subComponentStyles;
                        for (var subCompProp in currentComponentStyles) {
                            if (currentComponentStyles.hasOwnProperty(subCompProp)) {
                                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);
                                }
                                else {
                                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];
                                }
                            }
                        }
                        continue;
                    }
                    // the as any casts below is a workaround for ts 2.8.
                    // todo: remove cast to any in ts 2.9.
                    var mergedValue = mergedSet[prop];
                    var currentValue = currentSet[prop];
                    if (mergedValue === undefined) {
                        mergedSet[prop] = currentValue;
                    }
                    else {
                        mergedSet[prop] = tslib_1.__spreadArrays((Array.isArray(mergedValue) ? mergedValue : [mergedValue]), (Array.isArray(currentValue) ? currentValue : [currentValue]));
                    }
                }
            }
        }
    }
    if (Object.keys(workingSubcomponentStyles).length > 0) {
        mergedSet.subComponentStyles = {};
        var mergedSubStyles = mergedSet.subComponentStyles;
        var _loop_1 = function (subCompProp) {
            if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                var workingSet_1 = workingSubcomponentStyles[subCompProp];
                mergedSubStyles[subCompProp] = function (styleProps) {
                    return concatStyleSets.apply(void 0, workingSet_1.map(function (styleFunctionOrObject) {
                        return typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;
                    }));
                };
            }
        };
        // now we process the subcomponent styles if there are any
        for (var subCompProp in workingSubcomponentStyles) {
            _loop_1(subCompProp);
        }
    }
    return mergedSet;
}
exports.concatStyleSets = concatStyleSets;

},{"tslib":"teFId"}],"6UnfC":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatStyleSetsWithProps = void 0;
var concatStyleSets_1 = require("./concatStyleSets");
/**
 * Concatenates style sets into one, but resolves functional sets using the given props.
 * @param styleProps - Props used to resolve functional sets.
 * @param allStyles - Style sets, which can be functions or objects.
 */
function concatStyleSetsWithProps(styleProps) {
    var allStyles = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        allStyles[_i - 1] = arguments[_i];
    }
    var result = [];
    for (var _a = 0, allStyles_1 = allStyles; _a < allStyles_1.length; _a++) {
        var styles = allStyles_1[_a];
        if (styles) {
            result.push(typeof styles === 'function' ? styles(styleProps) : styles);
        }
    }
    if (result.length === 1) {
        return result[0];
    }
    else if (result.length) {
        // cliffkoh: I cannot figure out how to avoid the cast to any here.
        // It is something to do with the use of Omit in IStyleSet.
        // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on
        // the official version).
        return concatStyleSets_1.concatStyleSets.apply(void 0, result);
    }
    return {};
}
exports.concatStyleSetsWithProps = concatStyleSetsWithProps;

},{"./concatStyleSets":"68KM7"}],"1aq0J":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fontFace = void 0;
var StyleOptionsState_1 = require("./StyleOptionsState");
var Stylesheet_1 = require("./Stylesheet");
var styleToClassName_1 = require("./styleToClassName");
/**
 * Registers a font face.
 * @public
 */
function fontFace(font) {
    Stylesheet_1.Stylesheet.getInstance().insertRule("@font-face{" + styleToClassName_1.serializeRuleEntries(StyleOptionsState_1.getStyleOptions(), font) + "}", true);
}
exports.fontFace = fontFace;

},{"./StyleOptionsState":"7L3hz","./Stylesheet":"2FpgT","./styleToClassName":"2HhtY"}],"3hau8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyframes = void 0;
var StyleOptionsState_1 = require("./StyleOptionsState");
var Stylesheet_1 = require("./Stylesheet");
var styleToClassName_1 = require("./styleToClassName");
/**
 * Registers keyframe definitions.
 *
 * @public
 */
function keyframes(timeline) {
    var stylesheet = Stylesheet_1.Stylesheet.getInstance();
    var name = stylesheet.getClassName();
    var rulesArray = [];
    for (var prop in timeline) {
        if (timeline.hasOwnProperty(prop)) {
            rulesArray.push(prop, '{', styleToClassName_1.serializeRuleEntries(StyleOptionsState_1.getStyleOptions(), timeline[prop]), '}');
        }
    }
    var rules = rulesArray.join('');
    stylesheet.insertRule("@keyframes " + name + "{" + rules + "}", true);
    stylesheet.cacheClassName(name, rules, [], ['keyframes', rules]);
    return name;
}
exports.keyframes = keyframes;

},{"./StyleOptionsState":"7L3hz","./Stylesheet":"2FpgT","./styleToClassName":"2HhtY"}],"7Ejte":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/merge-styles', '8.1.1');

},{"@fluentui/set-version":"12cIw"}],"68DO0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRect = void 0;
/**
 * Helper to get bounding client rect. Passing in window will get the window size.
 *
 * @public
 */
function getRect(element) {
    var rect;
    if (element) {
        if (element === window) {
            rect = {
                left: 0,
                top: 0,
                width: window.innerWidth,
                height: window.innerHeight,
                right: window.innerWidth,
                bottom: window.innerHeight,
            };
        }
        else if (element.getBoundingClientRect) {
            rect = element.getBoundingClientRect();
        }
    }
    return rect;
}
exports.getRect = getRect;

},{}],"4Fchk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nullRender = exports.BaseComponent = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var Async_1 = require("./Async");
var EventGroup_1 = require("./EventGroup");
var warnConditionallyRequiredProps_1 = require("./warn/warnConditionallyRequiredProps");
var warnMutuallyExclusive_1 = require("./warn/warnMutuallyExclusive");
var warnDeprecations_1 = require("./warn/warnDeprecations");
/**
 * BaseComponent class, which provides basic helpers for all components.
 *
 * @public
 * {@docCategory BaseComponent}
 *
 * @deprecated Do not use. We are moving away from class component.
 */
var BaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BaseComponent, _super);
    /**
     * BaseComponent constructor
     * @param props - The props for the component.
     * @param context - The context for the component.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function BaseComponent(props, context) {
        var _this = _super.call(this, props, context) || this;
        // eslint-disable-next-line deprecation/deprecation
        _makeAllSafe(_this, BaseComponent.prototype, [
            'componentDidMount',
            'shouldComponentUpdate',
            'getSnapshotBeforeUpdate',
            'render',
            'componentDidUpdate',
            'componentWillUnmount',
        ]);
        return _this;
    }
    /**
     * When the component receives props, make sure the componentRef is updated.
     */
    BaseComponent.prototype.componentDidUpdate = function (prevProps, prevState) {
        this._updateComponentRef(prevProps, this.props);
    };
    /**
     * When the component has mounted, update the componentRef.
     */
    BaseComponent.prototype.componentDidMount = function () {
        this._setComponentRef(this.props.componentRef, this);
    };
    /**
     * If we have disposables, dispose them automatically on unmount.
     */
    BaseComponent.prototype.componentWillUnmount = function () {
        this._setComponentRef(this.props.componentRef, null);
        if (this.__disposables) {
            for (var i = 0, len = this._disposables.length; i < len; i++) {
                var disposable = this.__disposables[i];
                if (disposable.dispose) {
                    disposable.dispose();
                }
            }
            this.__disposables = null;
        }
    };
    Object.defineProperty(BaseComponent.prototype, "className", {
        /**
         * Gets the object's class name.
         */
        get: function () {
            if (!this.__className) {
                var funcNameRegex = /function (.{1,})\(/;
                var results = funcNameRegex.exec(this.constructor.toString());
                this.__className = results && results.length > 1 ? results[1] : '';
            }
            return this.__className;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseComponent.prototype, "_disposables", {
        /**
         * Allows subclasses to push things to this._disposables to be auto disposed.
         */
        get: function () {
            if (!this.__disposables) {
                this.__disposables = [];
            }
            return this.__disposables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseComponent.prototype, "_async", {
        /**
         * Gets the async instance associated with the component, created on demand. The async instance gives
         * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
         * will be cleared/ignored automatically after unmounting. The helpers within the async object also
         * preserve the this pointer so that you don't need to "bind" the callbacks.
         */
        get: function () {
            if (!this.__async) {
                this.__async = new Async_1.Async(this);
                this._disposables.push(this.__async);
            }
            return this.__async;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseComponent.prototype, "_events", {
        /**
         * Gets the event group instance assocaited with the component, created on demand. The event instance
         * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
         * will be automatically disconnected after unmounting. The helpers within the events object also
         * preserve the this reference so that you don't need to "bind" the callbacks.
         */
        get: function () {
            if (!this.__events) {
                this.__events = new EventGroup_1.EventGroup(this);
                this._disposables.push(this.__events);
            }
            return this.__events;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Helper to return a memoized ref resolver function.
     * @param refName - Name of the member to assign the ref to.
     * @returns A function instance keyed from the given refname.
     * @deprecated Use `createRef` from React.createRef.
     */
    BaseComponent.prototype._resolveRef = function (refName) {
        var _this = this;
        if (!this.__resolves) {
            this.__resolves = {};
        }
        if (!this.__resolves[refName]) {
            this.__resolves[refName] = function (ref) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return (_this[refName] = ref);
            };
        }
        return this.__resolves[refName];
    };
    /**
     * Updates the componentRef (by calling it with "this" when necessary.)
     */
    BaseComponent.prototype._updateComponentRef = function (currentProps, newProps) {
        if (newProps === void 0) { newProps = {}; }
        // currentProps *should* always be defined, but verify that just in case a subclass is manually
        // calling a lifecycle method with no parameters (which has happened) or other odd usage.
        if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {
            this._setComponentRef(currentProps.componentRef, null);
            this._setComponentRef(newProps.componentRef, this);
        }
    };
    /**
     * Warns when a deprecated props are being used.
     *
     * @param deprecationMap - The map of deprecations, where key is the prop name and the value is
     * either null or a replacement prop name.
     */
    BaseComponent.prototype._warnDeprecations = function (deprecationMap) {
        warnDeprecations_1.warnDeprecations(this.className, this.props, deprecationMap);
    };
    /**
     * Warns when props which are mutually exclusive with each other are both used.
     *
     * @param mutuallyExclusiveMap - The map of mutually exclusive props.
     */
    BaseComponent.prototype._warnMutuallyExclusive = function (mutuallyExclusiveMap) {
        warnMutuallyExclusive_1.warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);
    };
    /**
     * Warns when props are required if a condition is met.
     *
     * @param requiredProps - The name of the props that are required when the condition is met.
     * @param conditionalPropName - The name of the prop that the condition is based on.
     * @param condition - Whether the condition is met.
     */
    BaseComponent.prototype._warnConditionallyRequiredProps = function (requiredProps, conditionalPropName, condition) {
        warnConditionallyRequiredProps_1.warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);
    };
    BaseComponent.prototype._setComponentRef = function (ref, value) {
        if (!this._skipComponentRefResolution && ref) {
            if (typeof ref === 'function') {
                ref(value);
            }
            if (typeof ref === 'object') {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                ref.current = value;
            }
        }
    };
    return BaseComponent;
}(React.Component));
exports.BaseComponent = BaseComponent;
/**
 * Helper to override a given method with a wrapper method that can try/catch the original, but also
 * ensures that the BaseComponent's methods are called before the subclass's. This ensures that
 * componentWillUnmount in the base is called and that things in the _disposables array are disposed.
 */
// eslint-disable-next-line deprecation/deprecation
function _makeAllSafe(obj, prototype, methodNames) {
    for (var i = 0, len = methodNames.length; i < len; i++) {
        _makeSafe(obj, prototype, methodNames[i]);
    }
}
// eslint-disable-next-line deprecation/deprecation
function _makeSafe(obj, prototype, methodName) {
    /* eslint-disable @typescript-eslint/no-explicit-any */
    var classMethod = obj[methodName];
    var prototypeMethod = prototype[methodName];
    if (classMethod || prototypeMethod) {
        obj[methodName] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            /* eslint-enable @typescript-eslint/no-explicit-any */
            var retVal;
            if (prototypeMethod) {
                retVal = prototypeMethod.apply(this, args);
            }
            if (classMethod !== prototypeMethod) {
                retVal = classMethod.apply(this, args);
            }
            return retVal;
        };
    }
}
/**
 * Simple constant function for returning null, used to render empty templates in JSX.
 *
 * @public
 */
function nullRender() {
    return null;
}
exports.nullRender = nullRender;

},{"tslib":"2TEhm","react":"4g1R3","./Async":"5jCXP","./EventGroup":"5ndXb","./warn/warnConditionallyRequiredProps":"zT0il","./warn/warnMutuallyExclusive":"3Rn0R","./warn/warnDeprecations":"4BLx7"}],"zT0il":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warnConditionallyRequiredProps = void 0;
var warn_1 = require("./warn");
/**
* Warns when props are required if a condition is met.
*
* @public
* @param componentName - The name of the component being used.
* @param props - The props passed into the component.
* @param requiredProps - The name of the props that are required when the condition is met.
* @param conditionalPropName - The name of the prop that the condition is based on.
* @param condition - Whether the condition is met.
*/
function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {
  if (condition === true && "development" !== 'production') {
    for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {
      var requiredPropName = requiredProps_1[_i];
      if (!((requiredPropName in props))) {
        warn_1.warn(componentName + " property '" + requiredPropName + "' is required when '" + conditionalPropName + "' is used.'");
      }
    }
  }
}
exports.warnConditionallyRequiredProps = warnConditionallyRequiredProps;

},{"./warn":"2bRpg"}],"2bRpg":[function(require,module,exports) {
"use strict";
/*eslint-disable no-console*/
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setWarningCallback = exports.warn = void 0;
var _warningCallback = undefined;
/**
* Sends a warning to console, if the api is present.
*
* @public
* @param message - Warning message.
*/
function warn(message) {
  if (_warningCallback && "development" !== 'production') {
    _warningCallback(message);
  } else if (console && console.warn) {
    console.warn(message);
  }
}
exports.warn = warn;
/**
* Configures the warning callback. Passing in undefined will reset it to use the default
* console.warn function.
*
* @public
* @param warningCallback - Callback to override the generated warnings.
*/
function setWarningCallback(warningCallback) {
  _warningCallback = warningCallback;
}
exports.setWarningCallback = setWarningCallback;

},{}],"3Rn0R":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warnMutuallyExclusive = void 0;
var warn_1 = require("./warn");
/**
* Warns when two props which are mutually exclusive are both being used.
*
* @public
* @param componentName - The name of the component being used.
* @param props - The props passed into the component.
* @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.
*/
function warnMutuallyExclusive(componentName, props, exclusiveMap) {
  if ("development" !== 'production') {
    for (var propName in exclusiveMap) {
      if (props && props[propName] !== undefined) {
        var propInExclusiveMapValue = exclusiveMap[propName];
        if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== undefined) {
          warn_1.warn(componentName + " property '" + propName + "' is mutually exclusive with '" + exclusiveMap[propName] + "'. " + "Use one or the other.");
        }
      }
    }
  }
}
exports.warnMutuallyExclusive = warnMutuallyExclusive;

},{"./warn":"2bRpg"}],"4BLx7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warnDeprecations = void 0;
var warn_1 = require("./warn");
/**
* Warns when a deprecated props are being used.
*
* @public
* @param componentName - The name of the component being used.
* @param props - The props passed into the component.
* @param deprecationMap - The map of deprecations, where key is the prop name and the value is
* either null or a replacement prop name.
*/
function warnDeprecations(componentName, props, deprecationMap) {
  if ("development" !== 'production') {
    for (var propName in deprecationMap) {
      if (props && (propName in props)) {
        var deprecationMessage = componentName + " property '" + propName + "' was used but has been deprecated.";
        var replacementPropName = deprecationMap[propName];
        if (replacementPropName) {
          deprecationMessage += " Use '" + replacementPropName + "' instead.";
        }
        warn_1.warn(deprecationMessage);
      }
    }
  }
}
exports.warnDeprecations = warnDeprecations;

},{"./warn":"2bRpg"}],"1vISk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"7x4u5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelayedRender = void 0;
var tslib_1 = require("tslib");
var React = require("react");
/**
 * Utility component for delaying the render of a child component after a given delay. This component
 * requires a single child component; don't pass in many components. Wrap multiple components in a DIV
 * if necessary.
 *
 * @public
 * {@docCategory DelayedRender}
 */
var DelayedRender = /** @class */ (function (_super) {
    tslib_1.__extends(DelayedRender, _super);
    function DelayedRender(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isRendered: false,
        };
        return _this;
    }
    DelayedRender.prototype.componentDidMount = function () {
        var _this = this;
        var delay = this.props.delay;
        this._timeoutId = window.setTimeout(function () {
            _this.setState({
                isRendered: true,
            });
        }, delay);
    };
    DelayedRender.prototype.componentWillUnmount = function () {
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
        }
    };
    DelayedRender.prototype.render = function () {
        return this.state.isRendered ? React.Children.only(this.props.children) : null;
    };
    DelayedRender.defaultProps = {
        delay: 0,
    };
    return DelayedRender;
}(React.Component));
exports.DelayedRender = DelayedRender;

},{"tslib":"2TEhm","react":"4g1R3"}],"6wm1Q":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FabricPerformance = void 0;
var now = function () {
    return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();
};
var RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes
/**
 * Performance helper class for measuring things.
 *
 * @public
 * {@docCategory FabricPerformance}
 */
var FabricPerformance = /** @class */ (function () {
    function FabricPerformance() {
    }
    /**
     * Measures execution time of the given syncronous function. If the same logic is executed multiple times,
     * each individual measurement will be collected as well the overall numbers.
     * @param name - The name of this measurement
     * @param func - The logic to be measured for execution time
     */
    FabricPerformance.measure = function (name, func) {
        if (FabricPerformance._timeoutId) {
            FabricPerformance.setPeriodicReset();
        }
        var start = now();
        func();
        var end = now();
        var measurement = FabricPerformance.summary[name] || {
            totalDuration: 0,
            count: 0,
            all: [],
        };
        var duration = end - start;
        measurement.totalDuration += duration;
        measurement.count++;
        measurement.all.push({
            duration: duration,
            timeStamp: end,
        });
        FabricPerformance.summary[name] = measurement;
    };
    FabricPerformance.reset = function () {
        FabricPerformance.summary = {};
        clearTimeout(FabricPerformance._timeoutId);
        FabricPerformance._timeoutId = NaN;
    };
    FabricPerformance.setPeriodicReset = function () {
        FabricPerformance._timeoutId = setTimeout(function () { return FabricPerformance.reset(); }, RESET_INTERVAL);
    };
    FabricPerformance.summary = {};
    return FabricPerformance;
}());
exports.FabricPerformance = FabricPerformance;

},{}],"5Rky7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalSettings = void 0;
var getWindow_1 = require("./dom/getWindow");
/**
 * Storing global state in local module variables has issues when more than one copy
 * if the module gets loaded on the page (due to a bundling error or simply by consuming
 * a prebundled script.)
 *
 * This file contains helpers to deal with the getting and setting local state, and allows
 * callers to get called back when it mutates.
 */
var GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';
var CALLBACK_STATE_PROP_NAME = '__callbacks__';
var _counter = 0;
/**
 * Global settings helper, which stores settings in the global (window) namespace.
 * If window is not provided, it will store settings in module scope. Provides a
 * way to observe changes as well when their values change.
 *
 * @public
 * {@docCategory GlobalSettings}
 */
var GlobalSettings = /** @class */ (function () {
    function GlobalSettings() {
    }
    GlobalSettings.getValue = function (key, defaultValue) {
        var globalSettings = _getGlobalSettings();
        if (globalSettings[key] === undefined) {
            globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;
        }
        return globalSettings[key];
    };
    GlobalSettings.setValue = function (key, value) {
        var globalSettings = _getGlobalSettings();
        var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];
        var oldValue = globalSettings[key];
        if (value !== oldValue) {
            globalSettings[key] = value;
            var changeDescription = {
                oldValue: oldValue,
                value: value,
                key: key,
            };
            for (var id in callbacks) {
                if (callbacks.hasOwnProperty(id)) {
                    callbacks[id](changeDescription);
                }
            }
        }
        return value;
    };
    GlobalSettings.addChangeListener = function (cb) {
        // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.
        // (It's faster to delete a key than it is to look up the index of an object and splice an array.)
        var id = cb.__id__;
        var callbacks = _getCallbacks();
        if (!id) {
            id = cb.__id__ = String(_counter++);
        }
        callbacks[id] = cb;
    };
    GlobalSettings.removeChangeListener = function (cb) {
        var callbacks = _getCallbacks();
        delete callbacks[cb.__id__];
    };
    return GlobalSettings;
}());
exports.GlobalSettings = GlobalSettings;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _getGlobalSettings() {
    var _a;
    var win = getWindow_1.getWindow();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var globalObj = win || {};
    if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {
        globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {},
            _a[CALLBACK_STATE_PROP_NAME] = {},
            _a);
    }
    return globalObj[GLOBAL_SETTINGS_PROP_NAME];
}
function _getCallbacks() {
    var globalSettings = _getGlobalSettings();
    return globalSettings[CALLBACK_STATE_PROP_NAME];
}

},{"./dom/getWindow":"5d0Wh"}],"iabs5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"3nfTX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"5eqrA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"5t2B1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"6cE8U":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"6vbmF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"59THz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"5RcuN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"2bQCV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"2o9o5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCodes = void 0;
/**
 * Simulated enum for keycodes. These will get inlined by uglify when used much like an enum
 *
 * @public
 * {@docCategory KeyCodes}
 */
exports.KeyCodes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    pauseBreak: 19,
    capslock: 20,
    escape: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    del: 46,
    zero: 48,
    one: 49,
    two: 50,
    three: 51,
    four: 52,
    five: 53,
    six: 54,
    seven: 55,
    eight: 56,
    nine: 57,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    leftWindow: 91,
    rightWindow: 92,
    select: 93,
    /* eslint-disable @typescript-eslint/naming-convention */
    zero_numpad: 96,
    one_numpad: 97,
    two_numpad: 98,
    three_numpad: 99,
    four_numpad: 100,
    five_numpad: 101,
    six_numpad: 102,
    seven_numpad: 103,
    eight_numpad: 104,
    nine_numpad: 105,
    /* eslint-enable @typescript-eslint/naming-convention */
    multiply: 106,
    add: 107,
    subtract: 109,
    decimalPoint: 110,
    divide: 111,
    f1: 112,
    f2: 113,
    f3: 114,
    f4: 115,
    f5: 116,
    f6: 117,
    f7: 118,
    f8: 119,
    f9: 120,
    f10: 121,
    f11: 122,
    f12: 123,
    numlock: 144,
    scrollLock: 145,
    semicolon: 186,
    equalSign: 187,
    comma: 188,
    dash: 189,
    period: 190,
    forwardSlash: 191,
    graveAccent: 192,
    openBracket: 219,
    backSlash: 220,
    closeBracket: 221,
    singleQuote: 222,
};

},{}],"4SCWD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rectangle = void 0;
/**
 * Rectangle helper class.
 *
 * @public
 * {@docCategory Rectangle}
 */
var Rectangle = /** @class */ (function () {
    function Rectangle(left, right, top, bottom) {
        if (left === void 0) { left = 0; }
        if (right === void 0) { right = 0; }
        if (top === void 0) { top = 0; }
        if (bottom === void 0) { bottom = 0; }
        this.top = top;
        this.bottom = bottom;
        this.left = left;
        this.right = right;
    }
    Object.defineProperty(Rectangle.prototype, "width", {
        /**
         * Calculated automatically by subtracting the right from left
         */
        get: function () {
            return this.right - this.left;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "height", {
        /**
         * Calculated automatically by subtracting the bottom from top.
         */
        get: function () {
            return this.bottom - this.top;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Tests if another rect is approximately equal to this rect (within 4 decimal places.)
     */
    Rectangle.prototype.equals = function (rect) {
        // Fixing to 4 decimal places because it allows enough precision and will handle cases when something
        // should be rounded, like .999999 should round to 1.
        return (parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) &&
            parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) &&
            parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) &&
            parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4)));
    };
    return Rectangle;
}());
exports.Rectangle = Rectangle;

},{}],"vxmw1":[function(require,module,exports) {
"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendFunction = void 0;
/**
 * Returns a single function which will call each of the given functions in the context of the
 * parent.
 */
function appendFunction(parent) {
    var functions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        functions[_i - 1] = arguments[_i];
    }
    if (functions.length < 2) {
        return functions[0];
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        functions.forEach(function (f) { return f && f.apply(parent, args); });
    };
}
exports.appendFunction = appendFunction;

},{}],"5L625":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeAriaAttributeValues = void 0;
/**
 * ARIA helper to concatenate attributes, returning undefined if all attributes
 * are undefined. (Empty strings are not a valid ARIA attribute value.)
 *
 * @param ariaAttributes - ARIA attributes to merge
 */
function mergeAriaAttributeValues() {
    var ariaAttributes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        ariaAttributes[_i] = arguments[_i];
    }
    var mergedAttribute = ariaAttributes
        .filter(function (arg) { return arg; })
        .join(' ')
        .trim();
    return mergedAttribute === '' ? undefined : mergedAttribute;
}
exports.mergeAriaAttributeValues = mergeAriaAttributeValues;

},{}],"4181P":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arraysEqual = exports.flatten = exports.addElementAtIndex = exports.replaceElement = exports.removeIndex = exports.toMatrix = exports.createArray = exports.find = exports.findIndex = void 0;
/**
 * Helper to find the index of an item within an array, using a callback to
 * determine the match.
 *
 * @public
 * @param array - Array to search.
 * @param cb - Callback which returns true on matches.
 * @param fromIndex - Optional index to start from (defaults to 0)
 */
function findIndex(array, cb, fromIndex) {
    if (fromIndex === void 0) { fromIndex = 0; }
    var index = -1;
    for (var i = fromIndex; array && i < array.length; i++) {
        if (cb(array[i], i)) {
            index = i;
            break;
        }
    }
    return index;
}
exports.findIndex = findIndex;
/**
 * Helper to find the first item within an array that satisfies the callback.
 * @param array - Array to search
 * @param cb - Callback which returns true on matches
 */
function find(array, cb) {
    var index = findIndex(array, cb);
    if (index < 0) {
        return undefined;
    }
    return array[index];
}
exports.find = find;
/**
 * Creates an array of a given size and helper method to populate.
 *
 * @public
 * @param size - Size of array.
 * @param getItem - Callback to populate given cell index.
 */
function createArray(size, getItem) {
    var array = [];
    for (var i = 0; i < size; i++) {
        array.push(getItem(i));
    }
    return array;
}
exports.createArray = createArray;
/**
 * Convert the given array to a matrix with columnCount number
 * of columns.
 *
 * @public
 * @param items - The array to convert
 * @param columnCount - The number of columns for the resulting matrix
 * @returns A matrix of items
 */
function toMatrix(items, columnCount) {
    return items.reduce(function (rows, currentValue, index) {
        if (index % columnCount === 0) {
            rows.push([currentValue]);
        }
        else {
            rows[rows.length - 1].push(currentValue);
        }
        return rows;
    }, []);
}
exports.toMatrix = toMatrix;
/**
 * Given an array, it returns a new array that does not contain the item at the given index.
 * @param array - The array to operate on
 * @param index - The index of the element to remove
 */
function removeIndex(array, index) {
    return array.filter(function (_, i) { return index !== i; });
}
exports.removeIndex = removeIndex;
/**
 * Given an array, this function returns a new array where the element at a given index has been replaced.
 * @param array - The array to operate on
 * @param newElement - The element that will be placed in the new array
 * @param index - The index of the element that should be replaced
 */
function replaceElement(array, newElement, index) {
    var copy = array.slice();
    copy[index] = newElement;
    return copy;
}
exports.replaceElement = replaceElement;
/**
 * Given an array, this function returns a new array where an element has been inserted at the given index.
 * @param array - The array to operate on
 * @param index - The index where an element should be inserted
 * @param itemToAdd - The element to insert
 */
function addElementAtIndex(array, index, itemToAdd) {
    var copy = array.slice();
    copy.splice(index, 0, itemToAdd);
    return copy;
}
exports.addElementAtIndex = addElementAtIndex;
/**
 * Given an array where each element is of type T or T[], flatten it into an array of T
 * @param array - The array where each element can optionally also be an array
 */
function flatten(array) {
    var result = [];
    array.forEach(function (item) { return (result = result.concat(item)); });
    return result;
}
exports.flatten = flatten;
/**
 * Returns a boolean indicating if the two given arrays are equal in length and values.
 *
 * @param array1 - First array to compare
 * @param array2 - Second array to compare
 * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.
 */
function arraysEqual(array1, array2) {
    if (array1.length !== array2.length) {
        return false;
    }
    for (var i = 0; i < array1.length; i++) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
exports.arraysEqual = arraysEqual;

},{}],"1xonN":[function(require,module,exports) {
"use strict";
/**
 * asAsync - a HOC for async loading components.
 *
 * Usage:
 *
 * const AsyncDialog = asAsync({
 *   load: () => import('Dialog').then(result => result.default),
 * });
 *
 * React.render(domElement, <AsyncDialog asyncPlaceholder={ () => <Spinner/> } { ...dialogProps } />);
 *
 * Note the `asyncPlaceholder` prop will be respected when rendering the async component and it hasn't
 * been loaded yet.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.asAsync = void 0;
var tslib_1 = require("tslib");
var React = require("react");
/**
 * If possible, use a WeakMap to maintain a cache of loaded components.
 * This can be used to synchronously render components that have already been loaded,
 * rather than having to wait for at least one async tick.
 */
var _syncModuleCache = typeof WeakMap !== 'undefined'
    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
        new WeakMap()
    : undefined;
/**
 * Produces a component which internally loads the target component before first mount.
 * The component passes all props through to the loaded component.
 *
 * This overload accepts a module with a default export for the component.
 */
function asAsync(options) {
    var Async = /** @class */ (function (_super) {
        tslib_1.__extends(Async, _super);
        function Async() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                Component: _syncModuleCache ? _syncModuleCache.get(options.load) : undefined,
            };
            return _this;
        }
        Async.prototype.render = function () {
            // Typescript issue: the rest can't be pulled without the any cast, as TypeScript fails with rest on generics.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var _a = this.props, forwardedRef = _a.forwardedRef, Placeholder = _a.asyncPlaceholder, rest = tslib_1.__rest(_a, ["forwardedRef", "asyncPlaceholder"]);
            var Component = this.state.Component;
            return Component ? (React.createElement(Component, tslib_1.__assign(tslib_1.__assign({}, rest), { ref: forwardedRef }))) : Placeholder ? (React.createElement(Placeholder, null)) : null;
        };
        Async.prototype.componentDidMount = function () {
            var _this = this;
            var Component = this.state.Component;
            if (!Component) {
                options
                    .load()
                    .then(function (LoadedComponent) {
                    if (LoadedComponent) {
                        // Cache component for future reference.
                        _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent);
                        // Set state.
                        _this.setState({
                            Component: LoadedComponent,
                        }, options.onLoad);
                    }
                })
                    .catch(options.onError);
            }
        };
        return Async;
    }(React.Component));
    return React.forwardRef(function (props, ref) { return React.createElement(Async, tslib_1.__assign({}, props, { forwardedRef: ref })); });
}
exports.asAsync = asAsync;

},{"tslib":"2TEhm","react":"4g1R3"}],"7Hqzr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNever = void 0;
/**
 * AssertNever is a utility function that can be used for exhaustiveness checks in switch statements.
 *
 * @public
 */
function assertNever(x) {
    throw new Error('Unexpected object: ' + x);
}
exports.assertNever = assertNever;

},{}],"5sp0P":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.classNamesFunction = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
var rtl_1 = require("./rtl");
var dom_1 = require("./dom");
var MAX_CACHE_COUNT = 50;
var DEFAULT_SPECIFICITY_MULTIPLIER = 5;
var _memoizedClassNames = 0;
var stylesheet = merge_styles_1.Stylesheet.getInstance();
if (stylesheet && stylesheet.onReset) {
    stylesheet.onReset(function () { return _memoizedClassNames++; });
}
// Note that because of the caching nature within the classNames memoization,
// I've disabled this rule to simply be able to work with any types.
/* eslint-disable @typescript-eslint/no-explicit-any */
// This represents a prop we attach to each Map to indicate the cached return value
// associated with the graph node.
var retVal = '__retval__';
/**
 * Creates a getClassNames function which calls getStyles given the props, and injects them
 * into mergeStyleSets.
 *
 * Note that the props you pass in on every render should be in the same order and
 * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating
 * these will cause extra recalcs to occur.
 */
function classNamesFunction(options) {
    // We build a trie where each node is a Map. The map entry key represents an argument
    // value, and the entry value is another node (Map). Each node has a `__retval__`
    // property which is used to hold the cached response.
    if (options === void 0) { options = {}; }
    // To derive the response, we can simply ensure the arguments are added or already
    // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise
    // we call the `getStyles` api to evaluate, cache on the property, and return that.
    var map = new Map();
    var styleCalcCount = 0;
    var getClassNamesCount = 0;
    var currentMemoizedClassNames = _memoizedClassNames;
    var getClassNames = function (styleFunctionOrObject, styleProps) {
        var _a;
        if (styleProps === void 0) { styleProps = {}; }
        // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.
        // If there is also no style overrides, we can skip merge styles completely and
        // simply return the result from the style funcion.
        if (options.useStaticStyles &&
            typeof styleFunctionOrObject === 'function' &&
            styleFunctionOrObject.__noStyleOverride__) {
            return styleFunctionOrObject(styleProps);
        }
        getClassNamesCount++;
        var current = map;
        var theme = styleProps.theme;
        var rtl = theme && theme.rtl !== undefined ? theme.rtl : rtl_1.getRTL();
        var disableCaching = options.disableCaching;
        // On reset of our stylesheet, reset memoized cache.
        if (currentMemoizedClassNames !== _memoizedClassNames) {
            currentMemoizedClassNames = _memoizedClassNames;
            map = new Map();
            styleCalcCount = 0;
        }
        if (!options.disableCaching) {
            current = _traverseMap(map, styleFunctionOrObject);
            current = _traverseMap(current, styleProps);
        }
        if (disableCaching || !current[retVal]) {
            if (styleFunctionOrObject === undefined) {
                current[retVal] = {};
            }
            else {
                current[retVal] = merge_styles_1.mergeCssSets([
                    (typeof styleFunctionOrObject === 'function'
                        ? styleFunctionOrObject(styleProps)
                        : styleFunctionOrObject),
                ], { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined });
            }
            if (!disableCaching) {
                styleCalcCount++;
            }
        }
        if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {
            var win = dom_1.getWindow();
            if ((_a = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a === void 0 ? void 0 : _a.enableClassNameCacheFullWarning) {
                // eslint-disable-next-line no-console
                console.warn("Styles are being recalculated too frequently. Cache miss rate is " + styleCalcCount + "/" + getClassNamesCount + ".");
                // eslint-disable-next-line no-console
                console.trace();
            }
            map.clear();
            styleCalcCount = 0;
            // Mutate the options passed in, that's all we can do.
            options.disableCaching = true;
        }
        // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to
        // cache the return value for this branch of the graph.
        return current[retVal];
    };
    return getClassNames;
}
exports.classNamesFunction = classNamesFunction;
function _traverseEdge(current, value) {
    value = _normalizeValue(value);
    if (!current.has(value)) {
        current.set(value, new Map());
    }
    return current.get(value);
}
function _traverseMap(current, inputs) {
    if (typeof inputs === 'function') {
        var cachedInputsFromStyled = inputs.__cachedInputs__;
        if (cachedInputsFromStyled) {
            // The styled helper will generate the styles function and will attach the cached
            // inputs (consisting of the default styles, customzied styles, and user provided styles.)
            // These should be used as cache keys for deriving the memoized value.
            for (var _i = 0, _a = inputs.__cachedInputs__; _i < _a.length; _i++) {
                var input = _a[_i];
                current = _traverseEdge(current, input);
            }
        }
        else {
            current = _traverseEdge(current, inputs);
        }
    }
    else if (typeof inputs === 'object') {
        for (var propName in inputs) {
            if (inputs.hasOwnProperty(propName)) {
                current = _traverseEdge(current, inputs[propName]);
            }
        }
    }
    return current;
}
function _normalizeValue(value) {
    switch (value) {
        case undefined:
            return '__undefined__';
        case null:
            return '__null__';
        default:
            return value;
    }
}

},{"@fluentui/merge-styles":"366N8","./rtl":"5mbLb","./dom":"7lNOY"}],"5mbLb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRTLSafeKeyCode = exports.setRTL = exports.getRTL = void 0;
var KeyCodes_1 = require("./KeyCodes");
var getDocument_1 = require("./dom/getDocument");
var sessionStorage_1 = require("./sessionStorage");
var merge_styles_1 = require("@fluentui/merge-styles");
var RTL_LOCAL_STORAGE_KEY = 'isRTL';
// Default to undefined so that we initialize on first read.
var _isRTL;
/**
 * Gets the rtl state of the page (returns true if in rtl.)
 */
function getRTL(theme) {
    if (theme === void 0) { theme = {}; }
    if (theme.rtl !== undefined) {
        return theme.rtl;
    }
    if (_isRTL === undefined) {
        // Fabric supports persisting the RTL setting between page refreshes via session storage
        var savedRTL = sessionStorage_1.getItem(RTL_LOCAL_STORAGE_KEY);
        if (savedRTL !== null) {
            _isRTL = savedRTL === '1';
            setRTL(_isRTL);
        }
        var doc = getDocument_1.getDocument();
        if (_isRTL === undefined && doc) {
            _isRTL = ((doc.body && doc.body.getAttribute('dir')) || doc.documentElement.getAttribute('dir')) === 'rtl';
            merge_styles_1.setRTL(_isRTL);
        }
    }
    return !!_isRTL;
}
exports.getRTL = getRTL;
/**
 * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
 */
function setRTL(isRTL, persistSetting) {
    if (persistSetting === void 0) { persistSetting = false; }
    var doc = getDocument_1.getDocument();
    if (doc) {
        doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
    }
    if (persistSetting) {
        sessionStorage_1.setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');
    }
    _isRTL = isRTL;
    merge_styles_1.setRTL(_isRTL);
}
exports.setRTL = setRTL;
/**
 * Returns the given key, but flips right/left arrows if necessary.
 */
function getRTLSafeKeyCode(key, theme) {
    if (theme === void 0) { theme = {}; }
    if (getRTL(theme)) {
        if (key === KeyCodes_1.KeyCodes.left) {
            key = KeyCodes_1.KeyCodes.right;
        }
        else if (key === KeyCodes_1.KeyCodes.right) {
            key = KeyCodes_1.KeyCodes.left;
        }
    }
    return key;
}
exports.getRTLSafeKeyCode = getRTLSafeKeyCode;

},{"./KeyCodes":"2o9o5","./dom/getDocument":"70vZX","./sessionStorage":"K5Kce","@fluentui/merge-styles":"366N8"}],"K5Kce":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setItem = exports.getItem = void 0;
var getWindow_1 = require("./dom/getWindow");
/**
 * Fetches an item from session storage without throwing an exception
 * @param key The key of the item to fetch from session storage
 */
function getItem(key) {
    var result = null;
    try {
        var win = getWindow_1.getWindow();
        result = win ? win.sessionStorage.getItem(key) : null;
    }
    catch (e) {
        /* Eat the exception */
    }
    return result;
}
exports.getItem = getItem;
/**
 * Inserts an item into session storage without throwing an exception
 * @param key The key of the item to add to session storage
 * @param data The data to put into session storage
 */
function setItem(key, data) {
    var _a;
    try {
        (_a = getWindow_1.getWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage.setItem(key, data);
    }
    catch (e) {
        /* Eat the exception */
    }
}
exports.setItem = setItem;

},{"./dom/getWindow":"5d0Wh"}],"7lNOY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./dom/IVirtualElement"), exports);
tslib_1.__exportStar(require("./dom/elementContains"), exports);
tslib_1.__exportStar(require("./dom/elementContainsAttribute"), exports);
tslib_1.__exportStar(require("./dom/findElementRecursive"), exports);
tslib_1.__exportStar(require("./dom/getChildren"), exports);
tslib_1.__exportStar(require("./dom/getDocument"), exports);
tslib_1.__exportStar(require("./dom/getParent"), exports);
tslib_1.__exportStar(require("./dom/getRect"), exports);
tslib_1.__exportStar(require("./dom/getVirtualParent"), exports);
tslib_1.__exportStar(require("./dom/getWindow"), exports);
tslib_1.__exportStar(require("./dom/isVirtualElement"), exports);
tslib_1.__exportStar(require("./dom/on"), exports);
tslib_1.__exportStar(require("./dom/portalContainsElement"), exports);
tslib_1.__exportStar(require("./dom/raiseClick"), exports);
tslib_1.__exportStar(require("./dom/setPortalAttribute"), exports);
tslib_1.__exportStar(require("./dom/setVirtualParent"), exports);

},{"tslib":"2TEhm","./dom/IVirtualElement":"6gszF","./dom/elementContains":"1Vkn7","./dom/elementContainsAttribute":"2crIH","./dom/findElementRecursive":"2Wnxs","./dom/getChildren":"1L87A","./dom/getDocument":"70vZX","./dom/getParent":"uGSAi","./dom/getRect":"68DO0","./dom/getVirtualParent":"2o2QP","./dom/getWindow":"5d0Wh","./dom/isVirtualElement":"5qvUW","./dom/on":"40A9U","./dom/portalContainsElement":"4hNBX","./dom/raiseClick":"34lVi","./dom/setPortalAttribute":"5vFEW","./dom/setVirtualParent":"ZPZfw"}],"6gszF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"1Vkn7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.elementContains = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "elementContains", { enumerable: true, get: function () { return dom_utilities_1.elementContains; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"1cLUx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./IVirtualElement"), exports);
tslib_1.__exportStar(require("./elementContains"), exports);
tslib_1.__exportStar(require("./elementContainsAttribute"), exports);
tslib_1.__exportStar(require("./findElementRecursive"), exports);
tslib_1.__exportStar(require("./getChildren"), exports);
tslib_1.__exportStar(require("./getParent"), exports);
tslib_1.__exportStar(require("./getVirtualParent"), exports);
tslib_1.__exportStar(require("./isVirtualElement"), exports);
tslib_1.__exportStar(require("./portalContainsElement"), exports);
tslib_1.__exportStar(require("./setPortalAttribute"), exports);
tslib_1.__exportStar(require("./setVirtualParent"), exports);
require("./version");

},{"tslib":"5B9ZI","./IVirtualElement":"5VBlc","./elementContains":"3Ml3f","./elementContainsAttribute":"5Ky2S","./findElementRecursive":"lRxLe","./getChildren":"1GIvi","./getParent":"5SsRy","./getVirtualParent":"4Pu7L","./isVirtualElement":"4xcPr","./portalContainsElement":"11Eym","./setPortalAttribute":"1CrA7","./setVirtualParent":"6Gyag","./version":"6BVGu"}],"5B9ZI":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"5VBlc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"3Ml3f":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.elementContains = void 0;
var getParent_1 = require("./getParent");
/**
 * Determines whether or not a parent element contains a given child element.
 * If `allowVirtualParents` is true, this method may return `true` if the child
 * has the parent in its virtual element hierarchy.
 *
 * @public
 */
function elementContains(parent, child, allowVirtualParents) {
    if (allowVirtualParents === void 0) { allowVirtualParents = true; }
    var isContained = false;
    if (parent && child) {
        if (allowVirtualParents) {
            if (parent === child) {
                isContained = true;
            }
            else {
                isContained = false;
                while (child) {
                    var nextParent = getParent_1.getParent(child);
                    if (nextParent === parent) {
                        isContained = true;
                        break;
                    }
                    child = nextParent;
                }
            }
        }
        else if (parent.contains) {
            isContained = parent.contains(child);
        }
    }
    return isContained;
}
exports.elementContains = elementContains;

},{"./getParent":"5SsRy"}],"5SsRy":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParent = void 0;
var getVirtualParent_1 = require("./getVirtualParent");
/**
 * Gets the element which is the parent of a given element.
 * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over
 * real DOM parent when present.
 *
 * @public
 */
function getParent(child, allowVirtualParents) {
    if (allowVirtualParents === void 0) { allowVirtualParents = true; }
    return (child &&
        ((allowVirtualParents && getVirtualParent_1.getVirtualParent(child)) || (child.parentNode && child.parentNode)));
}
exports.getParent = getParent;

},{"./getVirtualParent":"4Pu7L"}],"4Pu7L":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVirtualParent = void 0;
var isVirtualElement_1 = require("./isVirtualElement");
/**
 * Gets the virtual parent given the child element, if it exists.
 *
 * @public
 */
function getVirtualParent(child) {
    var parent;
    if (child && isVirtualElement_1.isVirtualElement(child)) {
        parent = child._virtual.parent;
    }
    return parent;
}
exports.getVirtualParent = getVirtualParent;

},{"./isVirtualElement":"4xcPr"}],"4xcPr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVirtualElement = void 0;
/**
 * Determines whether or not an element has the virtual hierarchy extension.
 *
 * @public
 */
function isVirtualElement(element) {
    return element && !!element._virtual;
}
exports.isVirtualElement = isVirtualElement;

},{}],"5Ky2S":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.elementContainsAttribute = void 0;
var findElementRecursive_1 = require("./findElementRecursive");
/**
 * Determines if an element, or any of its ancestors, contain the given attribute
 * @param element - element to start searching at
 * @param attribute - the attribute to search for
 * @returns the value of the first instance found
 */
function elementContainsAttribute(element, attribute) {
    var elementMatch = findElementRecursive_1.findElementRecursive(element, function (testElement) { return testElement.hasAttribute(attribute); });
    return elementMatch && elementMatch.getAttribute(attribute);
}
exports.elementContainsAttribute = elementContainsAttribute;

},{"./findElementRecursive":"lRxLe"}],"lRxLe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findElementRecursive = void 0;
var getParent_1 = require("./getParent");
/**
 * Finds the first parent element where the matchFunction returns true
 * @param element - element to start searching at
 * @param matchFunction - the function that determines if the element is a match
 * @returns the matched element or null no match was found
 */
function findElementRecursive(element, matchFunction) {
    if (!element || element === document.body) {
        return null;
    }
    return matchFunction(element) ? element : findElementRecursive(getParent_1.getParent(element), matchFunction);
}
exports.findElementRecursive = findElementRecursive;

},{"./getParent":"5SsRy"}],"1GIvi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChildren = void 0;
var isVirtualElement_1 = require("./isVirtualElement");
/**
 * Gets the elements which are child elements of the given element.
 * If `allowVirtualChildren` is `true`, this method enumerates virtual child elements
 * after the original children.
 * @param parent - The element to get the children of.
 * @param allowVirtualChildren - true if the method should enumerate virtual child elements.
 */
function getChildren(parent, allowVirtualChildren) {
    if (allowVirtualChildren === void 0) { allowVirtualChildren = true; }
    var children = [];
    if (parent) {
        for (var i = 0; i < parent.children.length; i++) {
            children.push(parent.children.item(i));
        }
        if (allowVirtualChildren && isVirtualElement_1.isVirtualElement(parent)) {
            children.push.apply(children, parent._virtual.children);
        }
    }
    return children;
}
exports.getChildren = getChildren;

},{"./isVirtualElement":"4xcPr"}],"11Eym":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.portalContainsElement = void 0;
var findElementRecursive_1 = require("./findElementRecursive");
var setPortalAttribute_1 = require("./setPortalAttribute");
/**
 * Determine whether a target is within a portal from perspective of root or optional parent.
 * This function only works against portal components that use the setPortalAttribute function.
 * If both parent and child are within the same portal this function will return false.
 * @param target - Element to query portal containment status of.
 * @param parent - Optional parent perspective. Search for containing portal stops at parent
 * (or root if parent is undefined or invalid.)
 */
function portalContainsElement(target, parent) {
    var elementMatch = findElementRecursive_1.findElementRecursive(target, function (testElement) { return parent === testElement || testElement.hasAttribute(setPortalAttribute_1.DATA_PORTAL_ATTRIBUTE); });
    return elementMatch !== null && elementMatch.hasAttribute(setPortalAttribute_1.DATA_PORTAL_ATTRIBUTE);
}
exports.portalContainsElement = portalContainsElement;

},{"./findElementRecursive":"lRxLe","./setPortalAttribute":"1CrA7"}],"1CrA7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPortalAttribute = exports.DATA_PORTAL_ATTRIBUTE = void 0;
exports.DATA_PORTAL_ATTRIBUTE = 'data-portal-element';
/**
 * Identify element as a portal by setting an attribute.
 * @param element - Element to mark as a portal.
 */
function setPortalAttribute(element) {
    element.setAttribute(exports.DATA_PORTAL_ATTRIBUTE, 'true');
}
exports.setPortalAttribute = setPortalAttribute;

},{}],"6Gyag":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVirtualParent = void 0;
/**
 * Sets the virtual parent of an element.
 * Pass `undefined` as the `parent` to clear the virtual parent.
 *
 * @public
 */
function setVirtualParent(child, parent) {
    var virtualChild = child;
    var virtualParent = parent;
    if (!virtualChild._virtual) {
        virtualChild._virtual = {
            children: [],
        };
    }
    var oldParent = virtualChild._virtual.parent;
    if (oldParent && oldParent !== parent) {
        // Remove the child from its old parent.
        var index = oldParent._virtual.children.indexOf(virtualChild);
        if (index > -1) {
            oldParent._virtual.children.splice(index, 1);
        }
    }
    virtualChild._virtual.parent = virtualParent || undefined;
    if (virtualParent) {
        if (!virtualParent._virtual) {
            virtualParent._virtual = {
                children: [],
            };
        }
        virtualParent._virtual.children.push(virtualChild);
    }
}
exports.setVirtualParent = setVirtualParent;

},{}],"6BVGu":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/dom-utilities', '2.1.1');

},{"@fluentui/set-version":"12cIw"}],"2crIH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.elementContainsAttribute = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "elementContainsAttribute", { enumerable: true, get: function () { return dom_utilities_1.elementContainsAttribute; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"2Wnxs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findElementRecursive = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "findElementRecursive", { enumerable: true, get: function () { return dom_utilities_1.findElementRecursive; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"1L87A":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChildren = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "getChildren", { enumerable: true, get: function () { return dom_utilities_1.getChildren; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"uGSAi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParent = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "getParent", { enumerable: true, get: function () { return dom_utilities_1.getParent; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"2o2QP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVirtualParent = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "getVirtualParent", { enumerable: true, get: function () { return dom_utilities_1.getVirtualParent; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"5qvUW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVirtualElement = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "isVirtualElement", { enumerable: true, get: function () { return dom_utilities_1.isVirtualElement; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"40A9U":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.on = void 0;
function on(element, eventName, callback, options) {
    element.addEventListener(eventName, callback, options);
    return function () { return element.removeEventListener(eventName, callback, options); };
}
exports.on = on;

},{}],"4hNBX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.portalContainsElement = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "portalContainsElement", { enumerable: true, get: function () { return dom_utilities_1.portalContainsElement; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"34lVi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.raiseClick = void 0;
/** Raises a click event. */
function raiseClick(target) {
    var event = createNewEvent('MouseEvents');
    event.initEvent('click', true, true);
    target.dispatchEvent(event);
}
exports.raiseClick = raiseClick;
function createNewEvent(eventName) {
    var event;
    if (typeof Event === 'function') {
        // Chrome, Opera, Firefox
        event = new Event(eventName);
    }
    else {
        // IE
        event = document.createEvent('Event');
        event.initEvent(eventName, true, true);
    }
    return event;
}

},{}],"5vFEW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPortalAttribute = exports.DATA_PORTAL_ATTRIBUTE = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "DATA_PORTAL_ATTRIBUTE", { enumerable: true, get: function () { return dom_utilities_1.DATA_PORTAL_ATTRIBUTE; } });
Object.defineProperty(exports, "setPortalAttribute", { enumerable: true, get: function () { return dom_utilities_1.setPortalAttribute; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"ZPZfw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVirtualParent = void 0;
var dom_utilities_1 = require("@fluentui/dom-utilities");
Object.defineProperty(exports, "setVirtualParent", { enumerable: true, get: function () { return dom_utilities_1.setVirtualParent; } });

},{"@fluentui/dom-utilities":"1cLUx"}],"1QtXc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeComponentAs = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var memoize_1 = require("../memoize");
function createComposedComponent(outer) {
    var Outer = outer;
    var outerMemoizer = memoize_1.createMemoizer(function (inner) {
        if (outer === inner) {
            throw new Error('Attempted to compose a component with itself.');
        }
        var Inner = inner;
        var innerMemoizer = memoize_1.createMemoizer(function (defaultRender) {
            var InnerWithDefaultRender = function (innerProps) {
                return React.createElement(Inner, tslib_1.__assign({}, innerProps, { defaultRender: defaultRender }));
            };
            return InnerWithDefaultRender;
        });
        var OuterWithDefaultRender = function (outerProps) {
            var defaultRender = outerProps.defaultRender;
            return React.createElement(Outer, tslib_1.__assign({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));
        };
        return OuterWithDefaultRender;
    });
    return outerMemoizer;
}
var componentAsMemoizer = memoize_1.createMemoizer(createComposedComponent);
/**
 * Composes two components which conform to the `IComponentAs` specification; that is, two
 * components which accept a `defaultRender` prop, which is a 'default' implementation of
 * a component which accepts the same overall props.
 *
 * @public
 */
function composeComponentAs(outer, inner) {
    return componentAsMemoizer(outer)(inner);
}
exports.composeComponentAs = composeComponentAs;

},{"tslib":"2TEhm","react":"4g1R3","../memoize":"6rBWo"}],"6rBWo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMemoizer = exports.memoizeFunction = exports.memoize = exports.resetMemoizations = exports.setMemoizeWeakMap = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
var _initializedStylesheetResets = false;
var _resetCounter = 0;
var _emptyObject = { empty: true };
var _dictionary = {};
var _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;
/**
 *  Test utility for providing a custom weakmap.
 *
 * @internal
 * */
function setMemoizeWeakMap(weakMap) {
    _weakMap = weakMap;
}
exports.setMemoizeWeakMap = setMemoizeWeakMap;
/**
 * Reset memoizations.
 */
function resetMemoizations() {
    _resetCounter++;
}
exports.resetMemoizations = resetMemoizations;
/**
 * Memoize decorator to be used on class methods. WARNING: the `this` reference
 * will be inaccessible within a memoized method, given that a cached method's `this`
 * would not be instance-specific.
 *
 * @public
 */
function memoize(_target, _key, descriptor) {
    // We bind to "null" to prevent people from inadvertently pulling values from "this",
    // rather than passing them in as input values which can be memoized.
    var fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));
    return {
        configurable: true,
        get: function () {
            return fn;
        },
    };
}
exports.memoize = memoize;
/**
 * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.
 * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise
 * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in
 * undefined for a value and relying on a default function will execute it the first time, but will not
 * re-evaluate subsequent times which may have been unexpected.
 *
 * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is
 * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard
 * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.
 *
 * @public
 * @param cb - The function to memoize.
 * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.
 * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.
 * If the flag is set to true, the callback result is recomputed every time till the callback result is
 * not undefined/null for the first time, and then the non-undefined/null version gets cached.
 * @returns A memoized version of the function.
 */
function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {
    if (maxCacheSize === void 0) { maxCacheSize = 100; }
    if (ignoreNullOrUndefinedResult === void 0) { ignoreNullOrUndefinedResult = false; }
    // Avoid breaking scenarios which don't have weak map.
    if (!_weakMap) {
        return cb;
    }
    if (!_initializedStylesheetResets) {
        var stylesheet = merge_styles_1.Stylesheet.getInstance();
        if (stylesheet && stylesheet.onReset) {
            merge_styles_1.Stylesheet.getInstance().onReset(resetMemoizations);
        }
        _initializedStylesheetResets = true;
    }
    var rootNode;
    var cacheSize = 0;
    var localResetCounter = _resetCounter;
    return function memoizedFunction() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var currentNode = rootNode;
        if (rootNode === undefined ||
            localResetCounter !== _resetCounter ||
            (maxCacheSize > 0 && cacheSize > maxCacheSize)) {
            rootNode = _createNode();
            cacheSize = 0;
            localResetCounter = _resetCounter;
        }
        currentNode = rootNode;
        // Traverse the tree until we find the match.
        for (var i = 0; i < args.length; i++) {
            var arg = _normalizeArg(args[i]);
            if (!currentNode.map.has(arg)) {
                currentNode.map.set(arg, _createNode());
            }
            currentNode = currentNode.map.get(arg);
        }
        if (!currentNode.hasOwnProperty('value')) {
            currentNode.value = cb.apply(void 0, args);
            cacheSize++;
        }
        if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {
            currentNode.value = cb.apply(void 0, args);
        }
        return currentNode.value;
    };
}
exports.memoizeFunction = memoizeFunction;
/**
 * Creates a memoizer for a single-value function, backed by a WeakMap.
 * With a WeakMap, the memoized values are only kept as long as the source objects,
 * ensuring that there is no memory leak.
 *
 * This function assumes that the input values passed to the wrapped function will be
 * `function` or `object` types. To memoize functions which accept other inputs, use
 * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.
 *
 * @public
 */
function createMemoizer(getValue) {
    if (!_weakMap) {
        // Without a `WeakMap` implementation, memoization is not possible.
        return getValue;
    }
    var cache = new _weakMap();
    function memoizedGetValue(input) {
        if (!input || (typeof input !== 'function' && typeof input !== 'object')) {
            // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.
            // All other inputs cannot be memoized against in this manner.
            return getValue(input);
        }
        if (cache.has(input)) {
            return cache.get(input);
        }
        var value = getValue(input);
        cache.set(input, value);
        return value;
    }
    return memoizedGetValue;
}
exports.createMemoizer = createMemoizer;
function _normalizeArg(val) {
    if (!val) {
        return _emptyObject;
    }
    else if (typeof val === 'object' || typeof val === 'function') {
        return val;
    }
    else if (!_dictionary[val]) {
        _dictionary[val] = { val: val };
    }
    return _dictionary[val];
}
function _createNode() {
    return {
        map: _weakMap ? new _weakMap() : null,
    };
}

},{"@fluentui/merge-styles":"366N8"}],"6YsSt":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isControlled = void 0;
/**
 * Determines whether a component is controlled.
 * @param props - Component props
 * @param valueProp - Prop containing the controlled value
 * @returns true if controlled, false if uncontrolled
 */
function isControlled(props, valueProp) {
    // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.
    // Mirror that behavior here (rather than checking for just undefined).
    return props[valueProp] !== undefined && props[valueProp] !== null;
}
exports.isControlled = isControlled;

},{}],"4myM0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"6u2T0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.css = void 0;
/**
 * Concatination helper, which can merge class names together. Skips over falsey values.
 *
 * @public
 */
function css() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var classes = [];
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var arg = args_1[_a];
        if (arg) {
            if (typeof arg === 'string') {
                classes.push(arg);
            }
            else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {
                classes.push(arg.toString());
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                for (var key in arg) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (arg[key]) {
                        classes.push(key);
                    }
                }
            }
        }
    }
    return classes.join(' ');
}
exports.css = css;

},{}],"6ZbKh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customizations = void 0;
var tslib_1 = require("tslib");
var GlobalSettings_1 = require("../GlobalSettings");
var CustomizationsGlobalKey = 'customizations';
var NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };
var _allSettings = GlobalSettings_1.GlobalSettings.getValue(CustomizationsGlobalKey, {
    settings: {},
    scopedSettings: {},
    inCustomizerContext: false,
});
var _events = [];
var Customizations = /** @class */ (function () {
    function Customizations() {
    }
    Customizations.reset = function () {
        _allSettings.settings = {};
        _allSettings.scopedSettings = {};
    };
    /** Apply global Customization settings.
     * @example Customizations.applySettings(\{ theme: \{...\} \});
     */
    Customizations.applySettings = function (settings) {
        _allSettings.settings = tslib_1.__assign(tslib_1.__assign({}, _allSettings.settings), settings);
        Customizations._raiseChange();
    };
    /** Apply Customizations to a particular named scope, like a component.
     * @example Customizations.applyScopedSettings('Nav', \{ styles: () =\> \{\} \});
     */
    Customizations.applyScopedSettings = function (scopeName, settings) {
        _allSettings.scopedSettings[scopeName] = tslib_1.__assign(tslib_1.__assign({}, _allSettings.scopedSettings[scopeName]), settings);
        Customizations._raiseChange();
    };
    Customizations.getSettings = function (properties, scopeName, localSettings) {
        if (localSettings === void 0) { localSettings = NO_CUSTOMIZATIONS; }
        var settings = {};
        var localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};
        var globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};
        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
            var property = properties_1[_i];
            settings[property] =
                localScopedSettings[property] ||
                    localSettings.settings[property] ||
                    globalScopedSettings[property] ||
                    _allSettings.settings[property];
        }
        return settings;
    };
    /** Used to run some code that sets Customizations without triggering an update until the end.
     * Useful for applying Customizations that don't affect anything currently rendered, or for
     * applying many customizations at once.
     * @param suppressUpdate - Do not raise the change event at the end, preventing all updates
     */
    Customizations.applyBatchedUpdates = function (code, suppressUpdate) {
        Customizations._suppressUpdates = true;
        try {
            code();
        }
        catch (_a) {
            /* do nothing */
        }
        Customizations._suppressUpdates = false;
        if (!suppressUpdate) {
            Customizations._raiseChange();
        }
    };
    Customizations.observe = function (onChange) {
        _events.push(onChange);
    };
    Customizations.unobserve = function (onChange) {
        _events = _events.filter(function (cb) { return cb !== onChange; });
    };
    Customizations._raiseChange = function () {
        if (!Customizations._suppressUpdates) {
            _events.forEach(function (cb) { return cb(); });
        }
    };
    return Customizations;
}());
exports.Customizations = Customizations;

},{"tslib":"2TEhm","../GlobalSettings":"5Rky7"}],"4ftIS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customizer = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var Customizations_1 = require("./Customizations");
var CustomizerContext_1 = require("./CustomizerContext");
var mergeCustomizations_1 = require("./mergeCustomizations");
/**
 * The Customizer component allows for default props to be mixed into components which
 * are decorated with the customizable() decorator, or use the styled HOC. This enables
 * injection scenarios like:
 *
 * 1. render svg icons instead of the icon font within all buttons
 * 2. inject a custom theme object into a component
 *
 * Props are provided via the settings prop which should be one of the following:
 * - A json map which contains 1 or more name/value pairs representing injectable props.
 * - A function that receives the current settings and returns the new ones that apply to the scope
 *
 * @public
 *
 * @deprecated This component is deprecated for purpose of applying theme to components
 * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.
 */
var Customizer = /** @class */ (function (_super) {
    tslib_1.__extends(Customizer, _super);
    function Customizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._onCustomizationChange = function () { return _this.forceUpdate(); };
        return _this;
    }
    Customizer.prototype.componentDidMount = function () {
        Customizations_1.Customizations.observe(this._onCustomizationChange);
    };
    Customizer.prototype.componentWillUnmount = function () {
        Customizations_1.Customizations.unobserve(this._onCustomizationChange);
    };
    Customizer.prototype.render = function () {
        var _this = this;
        var contextTransform = this.props.contextTransform;
        return (React.createElement(CustomizerContext_1.CustomizerContext.Consumer, null, function (parentContext) {
            var newContext = mergeCustomizations_1.mergeCustomizations(_this.props, parentContext);
            if (contextTransform) {
                newContext = contextTransform(newContext);
            }
            return React.createElement(CustomizerContext_1.CustomizerContext.Provider, { value: newContext }, _this.props.children);
        }));
    };
    return Customizer;
}(React.Component));
exports.Customizer = Customizer;

},{"tslib":"2TEhm","react":"4g1R3","./Customizations":"6ZbKh","./CustomizerContext":"1c5Vb","./mergeCustomizations":"7iwms"}],"1c5Vb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomizerContext = void 0;
var React = require("react");
exports.CustomizerContext = React.createContext({
    customizations: {
        inCustomizerContext: false,
        settings: {},
        scopedSettings: {},
    },
});

},{"react":"4g1R3"}],"7iwms":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeCustomizations = void 0;
var mergeSettings_1 = require("./mergeSettings");
/**
 * Merge props and customizations giving priority to props over context.
 * NOTE: This function will always perform multiple merge operations. Use with caution.
 * @param props - New settings to merge in.
 * @param parentContext - Context containing current settings.
 * @returns Merged customizations.
 */
function mergeCustomizations(props, parentContext) {
    var _a = (parentContext || {}).customizations, customizations = _a === void 0 ? { settings: {}, scopedSettings: {} } : _a;
    return {
        customizations: {
            settings: mergeSettings_1.mergeSettings(customizations.settings, props.settings),
            scopedSettings: mergeSettings_1.mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),
            inCustomizerContext: true,
        },
    };
}
exports.mergeCustomizations = mergeCustomizations;

},{"./mergeSettings":"7w5t1"}],"7w5t1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeScopedSettings = exports.mergeSettings = void 0;
var tslib_1 = require("tslib");
/**
 * Merge new and old settings, giving priority to new settings.
 * New settings is optional in which case oldSettings is returned as-is.
 * @param oldSettings - Old settings to fall back to.
 * @param newSettings - New settings that will be merged over oldSettings.
 * @returns Merged settings.
 */
function mergeSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) { oldSettings = {}; }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
}
exports.mergeSettings = mergeSettings;
function mergeScopedSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) { oldSettings = {}; }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
}
exports.mergeScopedSettings = mergeScopedSettings;
function _isSettingsFunction(settings) {
    return typeof settings === 'function';
}
function _settingsMergeWith(newSettings) {
    return function (settings) { return (newSettings ? tslib_1.__assign(tslib_1.__assign({}, settings), newSettings) : settings); };
}
function _scopedSettingsMergeWith(scopedSettingsFromProps) {
    if (scopedSettingsFromProps === void 0) { scopedSettingsFromProps = {}; }
    return function (oldScopedSettings) {
        var newScopedSettings = tslib_1.__assign({}, oldScopedSettings);
        for (var scopeName in scopedSettingsFromProps) {
            if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {
                newScopedSettings[scopeName] = tslib_1.__assign(tslib_1.__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);
            }
        }
        return newScopedSettings;
    };
}

},{"tslib":"2TEhm"}],"3z7IM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"1dctY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customizable = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var Customizations_1 = require("./Customizations");
var hoistStatics_1 = require("../hoistStatics");
var CustomizerContext_1 = require("./CustomizerContext");
var merge_styles_1 = require("@fluentui/merge-styles");
function customizable(scope, fields, concatStyles) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function customizableFactory(ComposedComponent) {
        var _a;
        var resultClass = (_a = /** @class */ (function (_super) {
                tslib_1.__extends(ComponentWithInjectedProps, _super);
                function ComponentWithInjectedProps(props) {
                    var _this = _super.call(this, props) || this;
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    _this._styleCache = {};
                    _this._onSettingChanged = _this._onSettingChanged.bind(_this);
                    return _this;
                }
                ComponentWithInjectedProps.prototype.componentDidMount = function () {
                    Customizations_1.Customizations.observe(this._onSettingChanged);
                };
                ComponentWithInjectedProps.prototype.componentWillUnmount = function () {
                    Customizations_1.Customizations.unobserve(this._onSettingChanged);
                };
                ComponentWithInjectedProps.prototype.render = function () {
                    var _this = this;
                    return (React.createElement(CustomizerContext_1.CustomizerContext.Consumer, null, function (context) {
                        var defaultProps = Customizations_1.Customizations.getSettings(fields, scope, context.customizations);
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        var componentProps = _this.props;
                        // If defaultProps.styles is a function, evaluate it before calling concatStyleSets
                        if (defaultProps.styles && typeof defaultProps.styles === 'function') {
                            defaultProps.styles = defaultProps.styles(tslib_1.__assign(tslib_1.__assign({}, defaultProps), componentProps));
                        }
                        // If concatStyles is true and custom styles have been defined compute those styles
                        if (concatStyles && defaultProps.styles) {
                            if (_this._styleCache.default !== defaultProps.styles ||
                                _this._styleCache.component !== componentProps.styles) {
                                var mergedStyles = merge_styles_1.concatStyleSets(defaultProps.styles, componentProps.styles);
                                _this._styleCache.default = defaultProps.styles;
                                _this._styleCache.component = componentProps.styles;
                                _this._styleCache.merged = mergedStyles;
                            }
                            return React.createElement(ComposedComponent, tslib_1.__assign({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));
                        }
                        return React.createElement(ComposedComponent, tslib_1.__assign({}, defaultProps, componentProps));
                    }));
                };
                ComponentWithInjectedProps.prototype._onSettingChanged = function () {
                    this.forceUpdate();
                };
                return ComponentWithInjectedProps;
            }(React.Component)),
            _a.displayName = 'Customized' + scope,
            _a);
        return hoistStatics_1.hoistStatics(ComposedComponent, resultClass);
    };
}
exports.customizable = customizable;

},{"tslib":"2TEhm","react":"4g1R3","./Customizations":"6ZbKh","../hoistStatics":"7xFTH","./CustomizerContext":"1c5Vb","@fluentui/merge-styles":"366N8"}],"7xFTH":[function(require,module,exports) {
"use strict";
/**
 * Allows you to hoist static functions in components.
 * Created for the purpose of fixing broken static functions in classes
 * that utilize decorators.
 *
 * @public
 * @param source - The object where the methods are hoisted from.
 * @param dest - The object to hoist the methods onto.
 * @returns The dest object with methods added
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hoistStatics = void 0;
function hoistStatics(source, dest) {
    for (var name_1 in source) {
        if (source.hasOwnProperty(name_1)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            dest[name_1] = source[name_1];
        }
    }
    return dest;
}
exports.hoistStatics = hoistStatics;

},{}],"1xYYi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCustomizationSettings = void 0;
var React = require("react");
var Customizations_1 = require("./Customizations");
var CustomizerContext_1 = require("./CustomizerContext");
/**
 * Hook to get Customizations settings from Customizations singleton or CustomizerContext.
 * It will trigger component state update on settings change observed.
 */
function useCustomizationSettings(properties, scopeName) {
    var forceUpdate = useForceUpdate();
    var customizations = React.useContext(CustomizerContext_1.CustomizerContext).customizations;
    var inCustomizerContext = customizations.inCustomizerContext;
    React.useEffect(function () {
        if (!inCustomizerContext) {
            Customizations_1.Customizations.observe(forceUpdate);
        }
        return function () {
            if (!inCustomizerContext) {
                Customizations_1.Customizations.unobserve(forceUpdate);
            }
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate
    }, [inCustomizerContext]);
    return Customizations_1.Customizations.getSettings(properties, scopeName, customizations);
}
exports.useCustomizationSettings = useCustomizationSettings;
function useForceUpdate() {
    var _a = React.useState(0), setValue = _a[1];
    return function () { return setValue(function (value) { return ++value; }); };
}

},{"react":"4g1R3","./Customizations":"6ZbKh","./CustomizerContext":"1c5Vb"}],"48NcN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendComponent = void 0;
var appendFunction_1 = require("./appendFunction");
/**
 * Extends a component's lifetime methods by appending new functions to the existing lifetime functions.
 */
function extendComponent(parent, methods) {
    for (var name_1 in methods) {
        if (methods.hasOwnProperty(name_1)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            parent[name_1] = appendFunction_1.appendFunction(parent, parent[name_1], methods[name_1]);
        }
    }
}
exports.extendComponent = extendComponent;

},{"./appendFunction":"vxmw1"}],"uyXzm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElementIndexPath = exports.getFocusableByIndexPath = exports.focusAsync = exports.shouldWrapFocus = exports.doesElementContainFocus = exports.isElementFocusSubZone = exports.isElementFocusZone = exports.isElementTabbable = exports.isElementVisible = exports.getNextElement = exports.getPreviousElement = exports.focusFirstChild = exports.getLastTabbable = exports.getFirstTabbable = exports.getLastFocusable = exports.getFirstFocusable = void 0;
var elementContainsAttribute_1 = require("./dom/elementContainsAttribute");
var elementContains_1 = require("./dom/elementContains");
var getParent_1 = require("./dom/getParent");
var getWindow_1 = require("./dom/getWindow");
var getDocument_1 = require("./dom/getDocument");
var IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';
var IS_VISIBLE_ATTRIBUTE = 'data-is-visible';
var FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';
var FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';
/**
 * Gets the first focusable element.
 *
 * @public
 */
function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getNextElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones);
}
exports.getFirstFocusable = getFirstFocusable;
/**
 * Gets the last focusable element.
 *
 * @public
 */
function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getPreviousElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones);
}
exports.getLastFocusable = getLastFocusable;
/**
 * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are
 * focusable elements that also have tabIndex != -1.)
 * @param rootElement - The parent element to search beneath.
 * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,
 * and iteration continues forward.  Typical use passes rootElement.firstChild.
 * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.
 * @param checkNode - Include currentElement in search when true. Defaults to true.
 * @public
 */
function getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {
    if (checkNode === void 0) { checkNode = true; }
    return getNextElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);
}
exports.getFirstTabbable = getFirstTabbable;
/**
 * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are
 * focusable elements that also have tabIndex != -1.)
 * @param rootElement - The parent element to search beneath.
 * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,
 * and iteration continues in reverse.  Typical use passes rootElement.lastChild.
 * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.
 * @param checkNode - Include currentElement in search when true. Defaults to true.
 * @public
 */
function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {
    if (checkNode === void 0) { checkNode = true; }
    return getPreviousElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);
}
exports.getLastTabbable = getLastTabbable;
/**
 * Attempts to focus the first focusable element that is a child or child's child of the rootElement.
 *
 * @public
 * @param rootElement - Element to start the search for a focusable child.
 * @returns True if focus was set, false if it was not.
 */
function focusFirstChild(rootElement) {
    var element = getNextElement(rootElement, rootElement, true, false, false, true);
    if (element) {
        focusAsync(element);
        return true;
    }
    return false;
}
exports.focusFirstChild = focusFirstChild;
/**
 * Traverse to find the previous element.
 * If tabbable is true, the element must have tabIndex != -1.
 *
 * @public
 */
function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {
    if (!currentElement || (!allowFocusRoot && currentElement === rootElement)) {
        return null;
    }
    var isCurrentElementVisible = isElementVisible(currentElement);
    // Check its children.
    if (traverseChildren &&
        isCurrentElementVisible &&
        (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
        var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (childMatch) {
            if ((tabbable && isElementTabbable(childMatch, true)) || !tabbable) {
                return childMatch;
            }
            var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
            if (childMatchSiblingMatch) {
                return childMatchSiblingMatch;
            }
            var childMatchParent = childMatch.parentElement;
            // At this point if we have not found any potential matches
            // start looking at the rest of the subtree under the currentParent.
            // NOTE: We do not want to recurse here because doing so could
            // cause elements to get skipped.
            while (childMatchParent && childMatchParent !== currentElement) {
                var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
                if (childMatchParentMatch) {
                    return childMatchParentMatch;
                }
                childMatchParent = childMatchParent.parentElement;
            }
        }
    }
    // Check the current node, if it's not the first traversal.
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
        return currentElement;
    }
    // Check its previous sibling.
    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
    if (siblingMatch) {
        return siblingMatch;
    }
    // Check its parent.
    if (!suppressParentTraversal) {
        return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
    }
    return null;
}
exports.getPreviousElement = getPreviousElement;
/**
 * Traverse to find the next focusable element.
 * If tabbable is true, the element must have tabIndex != -1.
 *
 * @public
 * @param checkNode - Include currentElement in search when true.
 */
function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable) {
    if (!currentElement || (currentElement === rootElement && suppressChildTraversal && !allowFocusRoot)) {
        return null;
    }
    var isCurrentElementVisible = isElementVisible(currentElement);
    // Check the current node, if it's not the first traversal.
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
        return currentElement;
    }
    // Check its children.
    if (!suppressChildTraversal &&
        isCurrentElementVisible &&
        (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
        var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (childMatch) {
            return childMatch;
        }
    }
    if (currentElement === rootElement) {
        return null;
    }
    // Check its sibling.
    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
    if (siblingMatch) {
        return siblingMatch;
    }
    if (!suppressParentTraversal) {
        return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
    }
    return null;
}
exports.getNextElement = getNextElement;
/**
 * Determines if an element is visible.
 *
 * @public
 */
function isElementVisible(element) {
    // If the element is not valid, return false.
    if (!element || !element.getAttribute) {
        return false;
    }
    var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);
    // If the element is explicitly marked with the visibility attribute, return that value as boolean.
    if (visibilityAttribute !== null && visibilityAttribute !== undefined) {
        return visibilityAttribute === 'true';
    }
    // Fallback to other methods of determining actual visibility.
    return (element.offsetHeight !== 0 ||
        element.offsetParent !== null ||
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        element.isVisible === true); // used as a workaround for testing.
}
exports.isElementVisible = isElementVisible;
/**
 * Determines if an element can receive focus programmatically or via a mouse click.
 * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,
 * meaning tabIndex != -1.
 *
 * @public
 */
function isElementTabbable(element, checkTabIndex) {
    // If this element is null or is disabled, it is not considered tabbable.
    if (!element || element.disabled) {
        return false;
    }
    var tabIndex = 0;
    var tabIndexAttributeValue = null;
    if (element && element.getAttribute) {
        tabIndexAttributeValue = element.getAttribute('tabIndex');
        if (tabIndexAttributeValue) {
            tabIndex = parseInt(tabIndexAttributeValue, 10);
        }
    }
    var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;
    var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;
    var result = !!element &&
        isFocusableAttribute !== 'false' &&
        (element.tagName === 'A' ||
            element.tagName === 'BUTTON' ||
            element.tagName === 'INPUT' ||
            element.tagName === 'TEXTAREA' ||
            element.tagName === 'SELECT' ||
            isFocusableAttribute === 'true' ||
            isTabIndexSet);
    return checkTabIndex ? tabIndex !== -1 && result : result;
}
exports.isElementTabbable = isElementTabbable;
/**
 * Determines if a given element is a focus zone.
 *
 * @public
 */
function isElementFocusZone(element) {
    return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));
}
exports.isElementFocusZone = isElementFocusZone;
/**
 * Determines if a given element is a focus sub zone.
 *
 * @public
 */
function isElementFocusSubZone(element) {
    return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');
}
exports.isElementFocusSubZone = isElementFocusSubZone;
/**
 * Determines if an element, or any of its children, contain focus.
 *
 * @public
 */
function doesElementContainFocus(element) {
    var document = getDocument_1.getDocument(element);
    var currentActiveElement = document && document.activeElement;
    if (currentActiveElement && elementContains_1.elementContains(element, currentActiveElement)) {
        return true;
    }
    return false;
}
exports.doesElementContainFocus = doesElementContainFocus;
/**
 * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap
 * @param element - element to start searching from
 * @param noWrapDataAttribute - the no wrap data attribute to match (either)
 * @returns true if focus should wrap, false otherwise
 */
function shouldWrapFocus(element, noWrapDataAttribute) {
    return elementContainsAttribute_1.elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;
}
exports.shouldWrapFocus = shouldWrapFocus;
var targetToFocusOnNextRepaint = undefined;
/**
 * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,
 * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,
 * only the latest called focusAsync element will actually be focused
 * @param element - The element to focus
 */
function focusAsync(element) {
    if (element) {
        // An element was already queued to be focused, so replace that one with the new element
        if (targetToFocusOnNextRepaint) {
            targetToFocusOnNextRepaint = element;
            return;
        }
        targetToFocusOnNextRepaint = element;
        var win = getWindow_1.getWindow(element);
        if (win) {
            // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe
            win.requestAnimationFrame(function () {
                targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
                // We are done focusing for this frame, so reset the queued focus element
                targetToFocusOnNextRepaint = undefined;
            });
        }
    }
}
exports.focusAsync = focusAsync;
/**
 * Finds the closest focusable element via an index path from a parent. See
 * `getElementIndexPath` for getting an index path from an element to a child.
 */
function getFocusableByIndexPath(parent, path) {
    var element = parent;
    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
        var index = path_1[_i];
        var nextChild = element.children[Math.min(index, element.children.length - 1)];
        if (!nextChild) {
            break;
        }
        element = nextChild;
    }
    element =
        isElementTabbable(element) && isElementVisible(element)
            ? element
            : getNextElement(parent, element, true) || getPreviousElement(parent, element);
    return element;
}
exports.getFocusableByIndexPath = getFocusableByIndexPath;
/**
 * Finds the element index path from a parent element to a child element.
 *
 * If you had this node structure: "A has children [B, C] and C has child D",
 * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.
 */
function getElementIndexPath(fromElement, toElement) {
    var path = [];
    while (toElement && fromElement && toElement !== fromElement) {
        var parent_1 = getParent_1.getParent(toElement, true);
        if (parent_1 === null) {
            return [];
        }
        path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));
        toElement = parent_1;
    }
    return path;
}
exports.getElementIndexPath = getElementIndexPath;

},{"./dom/elementContainsAttribute":"2crIH","./dom/elementContains":"1Vkn7","./dom/getParent":"uGSAi","./dom/getWindow":"5d0Wh","./dom/getDocument":"70vZX"}],"7Ml31":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetIds = exports.getId = void 0;
var getWindow_1 = require("./dom/getWindow");
var merge_styles_1 = require("@fluentui/merge-styles");
// Initialize global window id.
var CURRENT_ID_PROPERTY = '__currentId__';
var DEFAULT_ID_STRING = 'id__';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var _global = getWindow_1.getWindow() || {};
if (_global[CURRENT_ID_PROPERTY] === undefined) {
    _global[CURRENT_ID_PROPERTY] = 0;
}
var _initializedStylesheetResets = false;
/**
 * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)
 *
 * @public
 */
function getId(prefix) {
    if (!_initializedStylesheetResets) {
        // Configure ids to reset on stylesheet resets.
        var stylesheet = merge_styles_1.Stylesheet.getInstance();
        if (stylesheet && stylesheet.onReset) {
            stylesheet.onReset(resetIds);
        }
        _initializedStylesheetResets = true;
    }
    var index = _global[CURRENT_ID_PROPERTY]++;
    return (prefix === undefined ? DEFAULT_ID_STRING : prefix) + index;
}
exports.getId = getId;
/**
 * Resets id counter to an (optional) number.
 *
 * @public
 */
function resetIds(counter) {
    if (counter === void 0) { counter = 0; }
    _global[CURRENT_ID_PROPERTY] = counter;
}
exports.resetIds = resetIds;

},{"./dom/getWindow":"5d0Wh","@fluentui/merge-styles":"366N8"}],"5PXVd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeElementProps = void 0;
var properties_1 = require("./properties");
var nativeElementMap = {
    label: properties_1.labelProperties,
    audio: properties_1.audioProperties,
    video: properties_1.videoProperties,
    ol: properties_1.olProperties,
    li: properties_1.liProperties,
    a: properties_1.anchorProperties,
    button: properties_1.buttonProperties,
    input: properties_1.inputProperties,
    textarea: properties_1.textAreaProperties,
    select: properties_1.selectProperties,
    option: properties_1.optionProperties,
    table: properties_1.tableProperties,
    tr: properties_1.trProperties,
    th: properties_1.thProperties,
    td: properties_1.tdProperties,
    colGroup: properties_1.colGroupProperties,
    col: properties_1.colProperties,
    form: properties_1.formProperties,
    iframe: properties_1.iframeProperties,
    img: properties_1.imgProperties,
};
/**
 * Given an element tagname and user props, filters the props to only allowed props for the given
 * element type.
 * @param tagName - Tag name (e.g. "div")
 * @param props - Props object
 * @param excludedPropNames - List of props to disallow
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getNativeElementProps(tagName, props, excludedPropNames) {
    var allowedPropNames = (tagName && nativeElementMap[tagName]) || properties_1.htmlElementProperties;
    return properties_1.getNativeProps(props, allowedPropNames, excludedPropNames);
}
exports.getNativeElementProps = getNativeElementProps;

},{"./properties":"1RXBm"}],"1RXBm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeProps = exports.divProperties = exports.imageProperties = exports.imgProperties = exports.iframeProperties = exports.formProperties = exports.colProperties = exports.colGroupProperties = exports.tdProperties = exports.thProperties = exports.trProperties = exports.tableProperties = exports.optionProperties = exports.selectProperties = exports.textAreaProperties = exports.inputProperties = exports.buttonProperties = exports.anchorProperties = exports.liProperties = exports.olProperties = exports.videoProperties = exports.audioProperties = exports.labelProperties = exports.htmlElementProperties = exports.baseElementProperties = exports.baseElementEvents = void 0;
var toObjectMap = function () {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
    }
    var result = {};
    for (var _a = 0, items_1 = items; _a < items_1.length; _a++) {
        var item = items_1[_a];
        var keys = Array.isArray(item) ? item : Object.keys(item);
        for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
            var key = keys_1[_b];
            result[key] = 1;
        }
    }
    return result;
};
/**
 * An array of events that are allowed on every html element type.
 *
 * @public
 */
exports.baseElementEvents = toObjectMap([
    'onCopy',
    'onCut',
    'onPaste',
    'onCompositionEnd',
    'onCompositionStart',
    'onCompositionUpdate',
    'onFocus',
    'onFocusCapture',
    'onBlur',
    'onBlurCapture',
    'onChange',
    'onInput',
    'onSubmit',
    'onLoad',
    'onError',
    'onKeyDown',
    'onKeyDownCapture',
    'onKeyPress',
    'onKeyUp',
    'onAbort',
    'onCanPlay',
    'onCanPlayThrough',
    'onDurationChange',
    'onEmptied',
    'onEncrypted',
    'onEnded',
    'onLoadedData',
    'onLoadedMetadata',
    'onLoadStart',
    'onPause',
    'onPlay',
    'onPlaying',
    'onProgress',
    'onRateChange',
    'onSeeked',
    'onSeeking',
    'onStalled',
    'onSuspend',
    'onTimeUpdate',
    'onVolumeChange',
    'onWaiting',
    'onClick',
    'onClickCapture',
    'onContextMenu',
    'onDoubleClick',
    'onDrag',
    'onDragEnd',
    'onDragEnter',
    'onDragExit',
    'onDragLeave',
    'onDragOver',
    'onDragStart',
    'onDrop',
    'onMouseDown',
    'onMouseDownCapture',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onMouseOut',
    'onMouseOver',
    'onMouseUp',
    'onMouseUpCapture',
    'onSelect',
    'onTouchCancel',
    'onTouchEnd',
    'onTouchMove',
    'onTouchStart',
    'onScroll',
    'onWheel',
    'onPointerCancel',
    'onPointerDown',
    'onPointerEnter',
    'onPointerLeave',
    'onPointerMove',
    'onPointerOut',
    'onPointerOver',
    'onPointerUp',
    'onGotPointerCapture',
    'onLostPointerCapture',
]);
/**
 * An array of element attributes which are allowed on every html element type.
 *
 * @public
 */
exports.baseElementProperties = toObjectMap([
    'accessKey',
    'children',
    'className',
    'contentEditable',
    'dir',
    'draggable',
    'hidden',
    'htmlFor',
    'id',
    'lang',
    'ref',
    'role',
    'style',
    'tabIndex',
    'title',
    'translate',
    'spellCheck',
    'name',
]);
/**
 * An array of HTML element properties and events.
 *
 * @public
 */
exports.htmlElementProperties = toObjectMap(exports.baseElementProperties, exports.baseElementEvents);
/**
 * An array of LABEL tag properties and events.
 *
 * @public
 */
exports.labelProperties = toObjectMap(exports.htmlElementProperties, [
    'form',
]);
/**
 * An array of AUDIO tag properties and events.

 * @public
 */
exports.audioProperties = toObjectMap(exports.htmlElementProperties, [
    'height',
    'loop',
    'muted',
    'preload',
    'src',
    'width',
]);
/**
 * An array of VIDEO tag properties and events.
 *
 * @public
 */
exports.videoProperties = toObjectMap(exports.audioProperties, [
    'poster',
]);
/**
 * An array of OL tag properties and events.
 *
 * @public
 */
exports.olProperties = toObjectMap(exports.htmlElementProperties, [
    'start',
]);
/**
 * An array of LI tag properties and events.
 *
 * @public
 */
exports.liProperties = toObjectMap(exports.htmlElementProperties, [
    'value',
]);
/**
 * An array of A tag properties and events.
 *
 * @public
 */
exports.anchorProperties = toObjectMap(exports.htmlElementProperties, [
    'download',
    'href',
    'hrefLang',
    'media',
    'rel',
    'target',
    'type',
]);
/**
 * An array of BUTTON tag properties and events.
 *
 * @public
 */
exports.buttonProperties = toObjectMap(exports.htmlElementProperties, [
    'autoFocus',
    'disabled',
    'form',
    'formAction',
    'formEncType',
    'formMethod',
    'formNoValidate',
    'formTarget',
    'type',
    'value',
]);
/**
 * An array of INPUT tag properties and events.
 *
 * @public
 */
exports.inputProperties = toObjectMap(exports.buttonProperties, [
    'accept',
    'alt',
    'autoCapitalize',
    'autoComplete',
    'checked',
    'dirname',
    'form',
    'height',
    'inputMode',
    'list',
    'max',
    'maxLength',
    'min',
    'multiple',
    'pattern',
    'placeholder',
    'readOnly',
    'required',
    'src',
    'step',
    'size',
    'type',
    'value',
    'width',
]);
/**
 * An array of TEXTAREA tag properties and events.
 *
 * @public
 */
exports.textAreaProperties = toObjectMap(exports.buttonProperties, [
    'autoCapitalize',
    'cols',
    'dirname',
    'form',
    'maxLength',
    'placeholder',
    'readOnly',
    'required',
    'rows',
    'wrap',
]);
/**
 * An array of SELECT tag properties and events.
 *
 * @public
 */
exports.selectProperties = toObjectMap(exports.buttonProperties, [
    'form',
    'multiple',
    'required',
]);
exports.optionProperties = toObjectMap(exports.htmlElementProperties, [
    'selected',
    'value',
]);
/**
 * An array of TABLE tag properties and events.
 *
 * @public
 */
exports.tableProperties = toObjectMap(exports.htmlElementProperties, [
    'cellPadding',
    'cellSpacing',
]);
/**
 * An array of TR tag properties and events.
 *
 * @public
 */
exports.trProperties = exports.htmlElementProperties;
/**
 * An array of TH tag properties and events.
 *
 * @public
 */
exports.thProperties = toObjectMap(exports.htmlElementProperties, [
    'rowSpan',
    'scope',
]);
/**
 * An array of TD tag properties and events.
 *
 * @public
 */
exports.tdProperties = toObjectMap(exports.htmlElementProperties, [
    'colSpan',
    'headers',
    'rowSpan',
    'scope',
]);
exports.colGroupProperties = toObjectMap(exports.htmlElementProperties, [
    'span',
]);
exports.colProperties = toObjectMap(exports.htmlElementProperties, [
    'span',
]);
/**
 * An array of FORM tag properties and events.
 *
 * @public
 */
exports.formProperties = toObjectMap(exports.htmlElementProperties, [
    'acceptCharset',
    'action',
    'encType',
    'encType',
    'method',
    'noValidate',
    'target',
]);
/**
 * An array of IFRAME tag properties and events.
 *
 * @public
 */
exports.iframeProperties = toObjectMap(exports.htmlElementProperties, [
    'allow',
    'allowFullScreen',
    'allowPaymentRequest',
    'allowTransparency',
    'csp',
    'height',
    'importance',
    'referrerPolicy',
    'sandbox',
    'src',
    'srcDoc',
    'width',
]);
/**
 * An array of IMAGE tag properties and events.
 *
 * @public
 */
exports.imgProperties = toObjectMap(exports.htmlElementProperties, [
    'alt',
    'crossOrigin',
    'height',
    'src',
    'srcSet',
    'useMap',
    'width',
]);
/**
 * @deprecated Use imgProperties for img elements.
 */
exports.imageProperties = exports.imgProperties;
/**
 * An array of DIV tag properties and events.
 *
 * @public
 */
exports.divProperties = exports.htmlElementProperties;
/**
 * Gets native supported props for an html element provided the allowance set. Use one of the property
 * sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given
 * props set. Note that all data- and aria- prefixed attributes will be allowed.
 * NOTE: getNativeProps should always be applied first when adding props to a react component. The
 * non-native props should be applied second. This will prevent getNativeProps from overriding your custom props.
 * For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to
 * the component after an onClick function is added, then the getNativeProps onClick will override it.
 *
 * @public
 * @param props - The unfiltered input props
 * @param allowedPropsNames - The array or record of allowed prop names.
 * @returns The filtered props
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getNativeProps(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
props, allowedPropNames, excludedPropNames) {
    // It'd be great to properly type this while allowing 'aria-` and 'data-' attributes like TypeScript does for
    // JSX attributes, but that ability is hardcoded into the TS compiler with no analog in TypeScript typings.
    // Then we'd be able to enforce props extends native props (including aria- and data- attributes), and then
    // return native props.
    // We should be able to do this once this PR is merged: https://github.com/microsoft/TypeScript/pull/26797
    var isArray = Array.isArray(allowedPropNames);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var result = {};
    var keys = Object.keys(props);
    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var key = keys_2[_i];
        var isNativeProp = (!isArray && allowedPropNames[key]) ||
            (isArray && allowedPropNames.indexOf(key) >= 0) ||
            key.indexOf('data-') === 0 ||
            key.indexOf('aria-') === 0;
        if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            result[key] = props[key];
        }
    }
    return result;
}
exports.getNativeProps = getNativeProps;

},{}],"718Sq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unhoistMethods = exports.hoistMethods = void 0;
var REACT_LIFECYCLE_EXCLUSIONS = [
    'setState',
    'render',
    'componentWillMount',
    'UNSAFE_componentWillMount',
    'componentDidMount',
    'componentWillReceiveProps',
    'UNSAFE_componentWillReceiveProps',
    'shouldComponentUpdate',
    'componentWillUpdate',
    'getSnapshotBeforeUpdate',
    'UNSAFE_componentWillUpdate',
    'componentDidUpdate',
    'componentWillUnmount',
];
/**
 * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.
 *
 * @public
 * @param destination - The instance of the object to hoist the methods onto.
 * @param source - The instance of the object where the methods are hoisted from.
 * @param exclusions - (Optional) What methods to exclude from being hoisted.
 * @returns An array of names of methods that were hoisted.
 */
function hoistMethods(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
destination, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
source, exclusions) {
    if (exclusions === void 0) { exclusions = REACT_LIFECYCLE_EXCLUSIONS; }
    var hoisted = [];
    var _loop_1 = function (methodName) {
        if (typeof source[methodName] === 'function' &&
            destination[methodName] === undefined &&
            (!exclusions || exclusions.indexOf(methodName) === -1)) {
            hoisted.push(methodName);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            destination[methodName] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                source[methodName].apply(source, args);
            };
        }
    };
    for (var methodName in source) {
        _loop_1(methodName);
    }
    return hoisted;
}
exports.hoistMethods = hoistMethods;
/**
 * Provides a method for convenience to unhoist hoisted methods.
 *
 * @public
 * @param source - The source object upon which methods were hoisted.
 * @param methodNames - An array of method names to unhoist.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function unhoistMethods(source, methodNames) {
    methodNames.forEach(function (methodName) { return delete source[methodName]; });
}
exports.unhoistMethods = unhoistMethods;

},{}],"5yo6I":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeComponentRef = void 0;
var extendComponent_1 = require("./extendComponent");
/**
 * Helper to manage componentRef resolution. Internally appends logic to
 * lifetime methods to resolve componentRef to the passed in object.
 *
 * Usage: call initializeComponentRef(this) in the constructor,
 */
function initializeComponentRef(obj) {
    extendComponent_1.extendComponent(obj, {
        componentDidMount: _onMount,
        componentDidUpdate: _onUpdate,
        componentWillUnmount: _onUnmount,
    });
}
exports.initializeComponentRef = initializeComponentRef;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _onMount() {
    _setComponentRef(this.props.componentRef, this);
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _onUpdate(prevProps) {
    if (prevProps.componentRef !== this.props.componentRef) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        _setComponentRef(prevProps.componentRef, null);
        _setComponentRef(this.props.componentRef, this);
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _onUnmount() {
    _setComponentRef(this.props.componentRef, null);
}
function _setComponentRef(componentRef, value) {
    if (componentRef) {
        if (typeof componentRef === 'object') {
            componentRef.current = value;
        }
        else if (typeof componentRef === 'function') {
            componentRef(value);
        }
    }
}

},{"./extendComponent":"48NcN"}],"5xkHg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeFocusRects = void 0;
var getWindow_1 = require("./dom/getWindow");
var keyboard_1 = require("./keyboard");
var setFocusVisibility_1 = require("./setFocusVisibility");
/**
 * Initializes the logic which:
 *
 * 1. Subscribes keydown and mousedown events. (It will only do it once per window,
 *    so it's safe to call this method multiple times.)
 * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname
 *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.
 * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the
 *    document body, removes the 'ms-Fabric--isFocusVisible' classname.
 *
 * This logic allows components on the page to conditionally render focus treatments based on
 * the existence of global classnames, which simplifies logic overall.
 *
 * @param window - the window used to add the event listeners
 * @deprecated Use useFocusRects hook or FocusRects component instead.
 */
function initializeFocusRects(window) {
    var _a;
    var win = (window || getWindow_1.getWindow());
    if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {
        return;
    }
    if (!win.__hasInitializeFocusRects__) {
        win.__hasInitializeFocusRects__ = true;
        win.addEventListener('mousedown', _onMouseDown, true);
        win.addEventListener('pointerdown', _onPointerDown, true);
        win.addEventListener('keydown', _onKeyDown, true);
    }
}
exports.initializeFocusRects = initializeFocusRects;
function _onMouseDown(ev) {
    setFocusVisibility_1.setFocusVisibility(false, ev.target);
}
function _onPointerDown(ev) {
    if (ev.pointerType !== 'mouse') {
        setFocusVisibility_1.setFocusVisibility(false, ev.target);
    }
}
function _onKeyDown(ev) {
    // eslint-disable-next-line deprecation/deprecation
    keyboard_1.isDirectionalKeyCode(ev.which) && setFocusVisibility_1.setFocusVisibility(true, ev.target);
}

},{"./dom/getWindow":"5d0Wh","./keyboard":"6BBY7","./setFocusVisibility":"6Zfix"}],"6BBY7":[function(require,module,exports) {
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDirectionalKeyCode = exports.isDirectionalKeyCode = void 0;
var KeyCodes_1 = require("./KeyCodes");
var DirectionalKeyCodes = (_a = {},
    _a[KeyCodes_1.KeyCodes.up] = 1,
    _a[KeyCodes_1.KeyCodes.down] = 1,
    _a[KeyCodes_1.KeyCodes.left] = 1,
    _a[KeyCodes_1.KeyCodes.right] = 1,
    _a[KeyCodes_1.KeyCodes.home] = 1,
    _a[KeyCodes_1.KeyCodes.end] = 1,
    _a[KeyCodes_1.KeyCodes.tab] = 1,
    _a[KeyCodes_1.KeyCodes.pageUp] = 1,
    _a[KeyCodes_1.KeyCodes.pageDown] = 1,
    _a);
/**
 * Returns true if the keycode is a directional keyboard key.
 */
function isDirectionalKeyCode(which) {
    return !!DirectionalKeyCodes[which];
}
exports.isDirectionalKeyCode = isDirectionalKeyCode;
/**
 * Adds a keycode to the list of keys that, when pressed, should cause the focus outlines to be visible.
 * This can be used to add global shortcut keys that directionally move from section to section within
 * an app or between focus trap zones.
 */
function addDirectionalKeyCode(which) {
    DirectionalKeyCodes[which] = 1;
}
exports.addDirectionalKeyCode = addDirectionalKeyCode;

},{"./KeyCodes":"2o9o5"}],"6Zfix":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setFocusVisibility = exports.IsFocusHiddenClassName = exports.IsFocusVisibleClassName = void 0;
var getWindow_1 = require("./dom/getWindow");
exports.IsFocusVisibleClassName = 'ms-Fabric--isFocusVisible';
exports.IsFocusHiddenClassName = 'ms-Fabric--isFocusHidden';
/**
 * Sets the visibility of focus styling.
 *
 * By default, focus styles (the box surrounding a focused Button, for example) only show up when navigational
 * keypresses occur (through Tab, arrows, PgUp/PgDn, Home and End), and are hidden when mouse interactions occur.
 * This API provides an imperative way to turn them on/off.
 *
 * A use case might be when you have a keypress like ctrl-f6 navigate to a particular region on the page,
 * and want focus to show up.
 *
 * @param enabled - whether to remove or add focus
 * @param target - optional target
 */
function setFocusVisibility(enabled, target) {
    var win = target ? getWindow_1.getWindow(target) : getWindow_1.getWindow();
    if (win) {
        var classList = win.document.body.classList;
        classList.add(enabled ? exports.IsFocusVisibleClassName : exports.IsFocusHiddenClassName);
        classList.remove(enabled ? exports.IsFocusHiddenClassName : exports.IsFocusVisibleClassName);
    }
}
exports.setFocusVisibility = setFocusVisibility;

},{"./dom/getWindow":"5d0Wh"}],"1z8oa":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusRects = exports.useFocusRects = void 0;
var React = require("react");
var getWindow_1 = require("./dom/getWindow");
var keyboard_1 = require("./keyboard");
var setFocusVisibility_1 = require("./setFocusVisibility");
/**
 * Counter for mounted component that uses focus rectangle.
 * We want to cleanup the listners before last component that uses focus rectangle unmounts.
 */
var mountCounters = new WeakMap();
function setMountCounters(key, delta) {
    var newValue;
    var currValue = mountCounters.get(key);
    if (currValue) {
        newValue = currValue + delta;
    }
    else {
        newValue = 1;
    }
    mountCounters.set(key, newValue);
    return newValue;
}
/**
 * Initializes the logic which:
 *
 * 1. Subscribes keydown and mousedown events. (It will only do it once per window,
 *    so it's safe to call this method multiple times.)
 * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname
 *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.
 * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the
 *    document body, removes the 'ms-Fabric--isFocusVisible' classname.
 *
 * This logic allows components on the page to conditionally render focus treatments based on
 * the existence of global classnames, which simplifies logic overall.
 *
 * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.
 */
function useFocusRects(rootRef) {
    React.useEffect(function () {
        var _a;
        var win = getWindow_1.getWindow(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
        if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {
            return undefined;
        }
        var count = setMountCounters(win, 1);
        if (count <= 1) {
            win.addEventListener('mousedown', _onMouseDown, true);
            win.addEventListener('pointerdown', _onPointerDown, true);
            win.addEventListener('keydown', _onKeyDown, true);
        }
        return function () {
            var _a;
            if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {
                return;
            }
            count = setMountCounters(win, -1);
            if (count === 0) {
                win.removeEventListener('mousedown', _onMouseDown, true);
                win.removeEventListener('pointerdown', _onPointerDown, true);
                win.removeEventListener('keydown', _onKeyDown, true);
            }
        };
    }, [rootRef]);
}
exports.useFocusRects = useFocusRects;
/**
 * Function Component wrapper which enables calling `useFocusRects` hook.
 * Renders nothing.
 */
var FocusRects = function (props) {
    useFocusRects(props.rootRef);
    return null;
};
exports.FocusRects = FocusRects;
function _onMouseDown(ev) {
    setFocusVisibility_1.setFocusVisibility(false, ev.target);
}
function _onPointerDown(ev) {
    if (ev.pointerType !== 'mouse') {
        setFocusVisibility_1.setFocusVisibility(false, ev.target);
    }
}
function _onKeyDown(ev) {
    // eslint-disable-next-line deprecation/deprecation
    if (keyboard_1.isDirectionalKeyCode(ev.which)) {
        setFocusVisibility_1.setFocusVisibility(true, ev.target);
    }
}

},{"react":"4g1R3","./dom/getWindow":"5d0Wh","./keyboard":"6BBY7","./setFocusVisibility":"6Zfix"}],"5Tmf7":[function(require,module,exports) {
"use strict";
/**
 * Regular expressions matching characters to ignore when calculating the initials.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInitials = void 0;
/**
 * Regular expression matching characters within various types of enclosures, including the enclosures themselves
 *  so for example, (xyz) [xyz] {xyz} <xyz> all would be ignored
 */
var UNWANTED_ENCLOSURES_REGEX = /[\(\[\{\<][^\)\]\}\>]*[\)\]\}\>]/g;
/**
 * Regular expression matching special ASCII characters except space, plus some unicode special characters.
 * Applies after unwanted enclosures have been removed
 */
var UNWANTED_CHARS_REGEX = /[\0-\u001F\!-/:-@\[-`\{-\u00BF\u0250-\u036F\uD800-\uFFFF]/g;
/**
 * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed
 * and number has been trimmed for whitespaces
 */
var PHONENUMBER_REGEX = /^\d+[\d\s]*(:?ext|x|)\s*\d+$/i;
/** Regular expression matching one or more spaces. */
var MULTIPLE_WHITESPACES_REGEX = /\s+/g;
/**
 * Regular expression matching languages for which we currently don't support initials.
 * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.
 * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.
 * Japanese: Hiragana, Katakana.
 * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,
 *             CJK Unified Ideographs Extension B
 */
// eslint-disable-next-line @fluentui/max-len
var UNSUPPORTED_TEXT_REGEX = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF\u3040-\u309F\u30A0-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD869][\uDC00-\uDED6]/;
function getInitialsLatin(displayName, isRtl) {
    var initials = '';
    var splits = displayName.split(' ');
    if (splits.length === 2) {
        initials += splits[0].charAt(0).toUpperCase();
        initials += splits[1].charAt(0).toUpperCase();
    }
    else if (splits.length === 3) {
        initials += splits[0].charAt(0).toUpperCase();
        initials += splits[2].charAt(0).toUpperCase();
    }
    else if (splits.length !== 0) {
        initials += splits[0].charAt(0).toUpperCase();
    }
    if (isRtl && initials.length > 1) {
        return initials.charAt(1) + initials.charAt(0);
    }
    return initials;
}
function cleanupDisplayName(displayName) {
    displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');
    displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');
    displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');
    displayName = displayName.trim();
    return displayName;
}
/**
 * Get (up to 2 characters) initials based on display name of the persona.
 *
 * @public
 */
function getInitials(displayName, isRtl, allowPhoneInitials) {
    if (!displayName) {
        return '';
    }
    displayName = cleanupDisplayName(displayName);
    // For names containing CJK characters, and phone numbers, we don't display initials
    if (UNSUPPORTED_TEXT_REGEX.test(displayName) || (!allowPhoneInitials && PHONENUMBER_REGEX.test(displayName))) {
        return '';
    }
    return getInitialsLatin(displayName, isRtl);
}
exports.getInitials = getInitials;

},{}],"2ptAt":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLanguage = exports.getLanguage = void 0;
var getDocument_1 = require("./dom/getDocument");
var localStorage = require("./localStorage");
var sessionStorage = require("./sessionStorage");
// Default to undefined so that we initialize on first read.
var _language;
var STORAGE_KEY = 'language';
/**
 * Gets the language set for the page.
 * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.
 */
function getLanguage(persistenceType) {
    if (persistenceType === void 0) { persistenceType = 'sessionStorage'; }
    if (_language === undefined) {
        var doc = getDocument_1.getDocument();
        var savedLanguage = persistenceType === 'localStorage'
            ? localStorage.getItem(STORAGE_KEY)
            : persistenceType === 'sessionStorage'
                ? sessionStorage.getItem(STORAGE_KEY)
                : undefined;
        if (savedLanguage) {
            _language = savedLanguage;
        }
        if (_language === undefined && doc) {
            _language = doc.documentElement.getAttribute('lang');
        }
        if (_language === undefined) {
            _language = 'en';
        }
    }
    return _language;
}
exports.getLanguage = getLanguage;
function setLanguage(language, persistenceParam) {
    var doc = getDocument_1.getDocument();
    if (doc) {
        doc.documentElement.setAttribute('lang', language);
    }
    var persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'sessionStorage' : persistenceParam;
    if (persistenceType === 'localStorage') {
        localStorage.setItem(STORAGE_KEY, language);
    }
    else if (persistenceType === 'sessionStorage') {
        sessionStorage.setItem(STORAGE_KEY, language);
    }
    _language = language;
}
exports.setLanguage = setLanguage;

},{"./dom/getDocument":"70vZX","./localStorage":"7IalK","./sessionStorage":"K5Kce"}],"7IalK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setItem = exports.getItem = void 0;
var getWindow_1 = require("./dom/getWindow");
/**
 * Fetches an item from local storage without throwing an exception
 * @param key The key of the item to fetch from local storage
 */
function getItem(key) {
    var result = null;
    try {
        var win = getWindow_1.getWindow();
        result = win ? win.localStorage.getItem(key) : null;
    }
    catch (e) {
        /* Eat the exception */
    }
    return result;
}
exports.getItem = getItem;
/**
 * Inserts an item into local storage without throwing an exception
 * @param key The key of the item to add to local storage
 * @param data The data to put into local storage
 */
function setItem(key, data) {
    try {
        var win = getWindow_1.getWindow();
        win && win.localStorage.setItem(key, data);
    }
    catch (e) {
        /* Eat the exception */
    }
}
exports.setItem = setItem;

},{"./dom/getWindow":"5d0Wh"}],"3i9X8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.precisionRound = exports.calculatePrecision = exports.fitContentToBounds = exports.getDistanceBetweenPoints = void 0;
/**
 * Determines the distance between two points.
 *
 * @public
 */
/* eslint-disable deprecation/deprecation */
function getDistanceBetweenPoints(point1, point2) {
    var left1 = point1.left || point1.x || 0;
    var top1 = point1.top || point1.y || 0;
    var left2 = point2.left || point2.x || 0;
    var top2 = point2.top || point2.y || 0;
    /* eslint-enable deprecation/deprecation */
    var distance = Math.sqrt(Math.pow(left1 - left2, 2) + Math.pow(top1 - top2, 2));
    return distance;
}
exports.getDistanceBetweenPoints = getDistanceBetweenPoints;
/**
 * Produces a proportionally-scaled version of an input content size when fit to a bounding size.
 * Given a `contentSize` and a `boundsSize`, this function scales `contentSize` proportionally
 * using either `contain` or `cover` fit behaviors.
 * Use this function to pre-calculate the layout for the CSS `object-fit` and `background-fit` behaviors.
 * With `contain`, the output size must be the largest it can be while completely within the `boundsSize`.
 * With `cover`, the output size must be the smallest it can be while completely around the `boundsSize`.
 * By default, there is a `maxScale` value of 1, which prevents the `contentSize` from being scaled larger.
 *
 * @param options - the options for the bounds fit operation
 */
function fitContentToBounds(options) {
    var contentSize = options.contentSize, boundsSize = options.boundsSize, _a = options.mode, mode = _a === void 0 ? 'contain' : _a, _b = options.maxScale, maxScale = _b === void 0 ? 1 : _b;
    var contentAspectRatio = contentSize.width / contentSize.height;
    var boundsAspectRatio = boundsSize.width / boundsSize.height;
    var scale;
    if (mode === 'contain' ? contentAspectRatio > boundsAspectRatio : contentAspectRatio < boundsAspectRatio) {
        scale = boundsSize.width / contentSize.width;
    }
    else {
        scale = boundsSize.height / contentSize.height;
    }
    var finalScale = Math.min(maxScale, scale);
    return {
        width: contentSize.width * finalScale,
        height: contentSize.height * finalScale,
    };
}
exports.fitContentToBounds = fitContentToBounds;
/**
 * Calculates a number's precision based on the number of trailing
 * zeros if the number does not have a decimal indicated by a negative
 * precision. Otherwise, it calculates the number of digits after
 * the decimal point indicated by a positive precision.
 * @param value - the value to determine the precision of
 */
function calculatePrecision(value) {
    /**
     * Group 1:
     * [1-9]([0]+$) matches trailing zeros
     * Group 2:
     * \.([0-9]*) matches all digits after a decimal point.
     */
    var groups = /[1-9]([0]+$)|\.([0-9]*)/.exec(String(value));
    if (!groups) {
        return 0;
    }
    if (groups[1]) {
        return -groups[1].length;
    }
    if (groups[2]) {
        return groups[2].length;
    }
    return 0;
}
exports.calculatePrecision = calculatePrecision;
/**
 * Rounds a number to a certain level of precision. Accepts negative precision.
 * @param value - The value that is being rounded.
 * @param precision - The number of decimal places to round the number to
 */
function precisionRound(value, precision, base) {
    if (base === void 0) { base = 10; }
    var exp = Math.pow(base, precision);
    return Math.round(value * exp) / exp;
}
exports.precisionRound = precisionRound;

},{}],"4zya0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.merge = void 0;
/**
 * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged
 * together in the order provided. If an object creates a circular reference, it will assign the
 * original reference.
 */
function merge(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var arg = args_1[_a];
        _merge(target || {}, arg);
    }
    return target;
}
exports.merge = merge;
/**
 * The _merge helper iterates through all props on source and assigns them to target.
 * When the value is an object, we will create a deep clone of the object. However if
 * there is a circular reference, the value will not be deep cloned and will persist
 * the reference.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _merge(target, source, circularReferences) {
    if (circularReferences === void 0) { circularReferences = []; }
    circularReferences.push(source);
    for (var name_1 in source) {
        if (source.hasOwnProperty(name_1)) {
            if (name_1 !== '__proto__' && name_1 !== 'constructor' && name_1 !== 'prototype') {
                var value = source[name_1];
                if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                    var isCircularReference = circularReferences.indexOf(value) > -1;
                    target[name_1] = (isCircularReference
                        ? value
                        : _merge(target[name_1] || {}, value, circularReferences));
                }
                else {
                    target[name_1] = value;
                }
            }
        }
    }
    circularReferences.pop();
    return target;
}

},{}],"2janE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIOS = void 0;
/**
 * Returns true if and only if the user is on a iOS device.
 * Used to determine whether iOS-specific behavior should be applied.
 */
var isIOS = function () {
    if (!window || !window.navigator || !window.navigator.userAgent) {
        return false;
    }
    return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);
};
exports.isIOS = isIOS;

},{}],"1CXeI":[function(require,module,exports) {
"use strict";
/**
 * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements
 * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).
 * That way, all other elements on the page are hidden to the screen reader.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.modalize = void 0;
var getDocument_1 = require("./dom/getDocument");
/**
 * Call this on a target element to make it modal to screen readers.
 * Returns a function that undoes the changes it made.
 */
function modalize(target) {
    var _a;
    var affectedNodes = [];
    var targetDocument = getDocument_1.getDocument(target) || document;
    // start at target, then recurse and do the same for parent, until we reach <body>
    while (target !== targetDocument.body) {
        // grab all siblings of current element
        for (var _i = 0, _b = target.parentElement.children; _i < _b.length; _i++) {
            var sibling = _b[_i];
            // but ignore elements that are already aria-hidden
            if (sibling !== target && ((_a = sibling.getAttribute('aria-hidden')) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'true') {
                affectedNodes.push(sibling);
            }
        }
        if (!target.parentElement) {
            break;
        }
        target = target.parentElement;
    }
    // take all those elements and set aria-hidden=true on them
    affectedNodes.forEach(function (node) {
        node.setAttribute('aria-hidden', 'true');
    });
    return function () {
        unmodalize(affectedNodes);
        affectedNodes = []; // dispose
    };
}
exports.modalize = modalize;
/**
 * Undoes the changes that modalize() did.
 */
function unmodalize(affectedNodes) {
    affectedNodes.forEach(function (node) {
        // set instead of removing in case other components explicitly set aria-hidden and do =="true" or =="false"
        node.setAttribute('aria-hidden', 'false');
    });
}

},{"./dom/getDocument":"70vZX"}],"40S5X":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMac = void 0;
var getWindow_1 = require("./dom/getWindow");
var isMacResult;
/**
 * Returns true if the user is on a Mac. Caches the result value.
 * @param reset - Reset the cached result value (mainly for testing).
 */
function isMac(reset) {
    if (typeof isMacResult === 'undefined' || reset) {
        var win = getWindow_1.getWindow();
        var userAgent = win && win.navigator.userAgent;
        isMacResult = !!userAgent && userAgent.indexOf('Macintosh') !== -1;
    }
    return !!isMacResult;
}
exports.isMac = isMac;

},{"./dom/getWindow":"5d0Wh"}],"4WEf0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasOverflow = exports.hasVerticalOverflow = exports.hasHorizontalOverflow = void 0;
/**
 * Detects whether an element's content has horizontal overflow
 *
 * @public
 * @param element - Element to check for overflow
 * @returns True if element's content overflows
 */
function hasHorizontalOverflow(element) {
    return element.clientWidth < element.scrollWidth;
}
exports.hasHorizontalOverflow = hasHorizontalOverflow;
/**
 * Detects whether an element's content has vertical overflow
 *
 * @public
 * @param element - Element to check for overflow
 * @returns True if element's content overflows
 */
function hasVerticalOverflow(element) {
    return element.clientHeight < element.scrollHeight;
}
exports.hasVerticalOverflow = hasVerticalOverflow;
/**
 * Detects whether an element's content has overflow in any direction
 *
 * @public
 * @param element - Element to check for overflow
 * @returns True if element's content overflows
 */
function hasOverflow(element) {
    return hasHorizontalOverflow(element) || hasVerticalOverflow(element);
}
exports.hasOverflow = hasOverflow;

},{}],"3UnaV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeRenderFunction = void 0;
var memoize_1 = require("../memoize");
function createComposedRenderFunction(outer) {
    var outerMemoizer = memoize_1.createMemoizer(function (inner) {
        var innerMemoizer = memoize_1.createMemoizer(function (defaultRender) {
            return function (innerProps) {
                return inner(innerProps, defaultRender);
            };
        });
        return function (outerProps, defaultRender) {
            return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);
        };
    });
    return outerMemoizer;
}
var memoizer = memoize_1.createMemoizer(createComposedRenderFunction);
/**
 * Composes two 'render functions' to produce a final render function that renders
 * the outer function, passing the inner function as 'default render'. The inner function
 * is then passed the original 'default render' prop.
 * @public
 */
function composeRenderFunction(outer, inner) {
    return memoizer(outer)(inner);
}
exports.composeRenderFunction = composeRenderFunction;

},{"../memoize":"6rBWo"}],"2ofu9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setBaseUrl = exports.getResourceUrl = void 0;
var _baseUrl = '';
/**
 * @deprecated Unused as of version 8
 */
function getResourceUrl(url) {
    return _baseUrl + url;
}
exports.getResourceUrl = getResourceUrl;
/**
 * @deprecated Unused as of version 8
 */
function setBaseUrl(baseUrl) {
    _baseUrl = baseUrl;
}
exports.setBaseUrl = setBaseUrl;

},{}],"4B4N2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeRequestAnimationFrame = void 0;
var extendComponent_1 = require("./extendComponent");
/**
 * Generates a function to be attached to a React component, which can be called
 * as a replacement to RAF. In-flight async calls will be auto canceled if the component
 * is unmounting before the async code is executed, preventing bugs where code
 * accesses things within the component after being unmounted.
 */
var safeRequestAnimationFrame = function (component) {
    var activeTimeouts;
    return function (cb) {
        if (!activeTimeouts) {
            activeTimeouts = new Set();
            extendComponent_1.extendComponent(component, {
                componentWillUnmount: function () {
                    activeTimeouts.forEach(function (id) { return cancelAnimationFrame(id); });
                },
            });
        }
        var timeoutId = requestAnimationFrame(function () {
            activeTimeouts.delete(timeoutId);
            cb();
        });
        activeTimeouts.add(timeoutId);
    };
};
exports.safeRequestAnimationFrame = safeRequestAnimationFrame;

},{"./extendComponent":"48NcN"}],"1Oxmn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeSetTimeout = void 0;
var extendComponent_1 = require("./extendComponent");
/**
 * Generates a function to be attached to a React component, which can be called
 * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component
 * is unmounting before the async code is executed, preventing bugs where code
 * accesses things within the component after being unmounted.
 */
var safeSetTimeout = function (component) {
    var activeTimeouts;
    return function (cb, duration) {
        if (!activeTimeouts) {
            activeTimeouts = new Set();
            extendComponent_1.extendComponent(component, {
                componentWillUnmount: function () {
                    activeTimeouts.forEach(function (id) { return clearTimeout(id); });
                },
            });
        }
        var timeoutId = setTimeout(function () {
            activeTimeouts.delete(timeoutId);
            cb();
        }, duration);
        activeTimeouts.add(timeoutId);
    };
};
exports.safeSetTimeout = safeSetTimeout;

},{"./extendComponent":"48NcN"}],"1XVP1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./Selection.types"), exports);
tslib_1.__exportStar(require("./Selection"), exports);

},{"tslib":"2TEhm","./Selection.types":"0czrs","./Selection":"jI3SW"}],"0czrs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionDirection = exports.SelectionMode = exports.SELECTION_CHANGE = void 0;
exports.SELECTION_CHANGE = 'change';
/**
 * {@docCategory Selection}
 */
var SelectionMode;
(function (SelectionMode) {
    SelectionMode[SelectionMode["none"] = 0] = "none";
    SelectionMode[SelectionMode["single"] = 1] = "single";
    SelectionMode[SelectionMode["multiple"] = 2] = "multiple";
})(SelectionMode = exports.SelectionMode || (exports.SelectionMode = {}));
/**
 * {@docCategory Selection}
 */
var SelectionDirection;
(function (SelectionDirection) {
    SelectionDirection[SelectionDirection["horizontal"] = 0] = "horizontal";
    SelectionDirection[SelectionDirection["vertical"] = 1] = "vertical";
})(SelectionDirection = exports.SelectionDirection || (exports.SelectionDirection = {}));

},{}],"jI3SW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Selection = void 0;
var Selection_types_1 = require("./Selection.types");
var EventGroup_1 = require("../EventGroup");
/**
 * {@docCategory Selection}
 */
var Selection = /** @class */ (function () {
    /**
     * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options
     * object with a `getKey` implementation. Providing options is optional otherwise.
     * (At most one `options` object is accepted.)
     */
    function Selection() {
        var options = []; // Otherwise, arguments require options with `getKey`.
        for (var _i = 0 // Otherwise, arguments require options with `getKey`.
        ; _i < arguments.length // Otherwise, arguments require options with `getKey`.
        ; _i++ // Otherwise, arguments require options with `getKey`.
        ) {
            options[_i] = arguments[_i]; // Otherwise, arguments require options with `getKey`.
        }
        var _a = options[0] || {}, onSelectionChanged = _a.onSelectionChanged, getKey = _a.getKey, _b = _a.canSelectItem, canSelectItem = _b === void 0 ? function () { return true; } : _b, items = _a.items, _c = _a.selectionMode, selectionMode = _c === void 0 ? Selection_types_1.SelectionMode.multiple : _c;
        this.mode = selectionMode;
        this._getKey = getKey || defaultGetKey;
        this._changeEventSuppressionCount = 0;
        this._exemptedCount = 0;
        this._anchoredIndex = 0;
        this._unselectableCount = 0;
        this._onSelectionChanged = onSelectionChanged;
        this._canSelectItem = canSelectItem;
        this._isModal = false;
        this.setItems(items || [], true);
        this.count = this.getSelectedCount();
    }
    Selection.prototype.canSelectItem = function (item, index) {
        if (typeof index === 'number' && index < 0) {
            return false;
        }
        return this._canSelectItem(item, index);
    };
    Selection.prototype.getKey = function (item, index) {
        var key = this._getKey(item, index);
        return typeof key === 'number' || key ? "" + key : '';
    };
    Selection.prototype.setChangeEvents = function (isEnabled, suppressChange) {
        this._changeEventSuppressionCount += isEnabled ? -1 : 1;
        if (this._changeEventSuppressionCount === 0 && this._hasChanged) {
            this._hasChanged = false;
            if (!suppressChange) {
                this._change();
            }
        }
    };
    Selection.prototype.isModal = function () {
        return this._isModal;
    };
    Selection.prototype.setModal = function (isModal) {
        if (this._isModal !== isModal) {
            this.setChangeEvents(false);
            this._isModal = isModal;
            if (!isModal) {
                this.setAllSelected(false);
            }
            this._change();
            this.setChangeEvents(true);
        }
    };
    /**
     * Selection needs the items, call this method to set them. If the set
     * of items is the same, this will re-evaluate selection and index maps.
     * Otherwise, shouldClear should be set to true, so that selection is
     * cleared.
     */
    Selection.prototype.setItems = function (items, shouldClear) {
        if (shouldClear === void 0) { shouldClear = true; }
        var newKeyToIndexMap = {};
        var newUnselectableIndices = {};
        var hasSelectionChanged = false;
        this.setChangeEvents(false);
        // Reset the unselectable count.
        this._unselectableCount = 0;
        // Build lookup table for quick selection evaluation.
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (item) {
                var key = this.getKey(item, i);
                if (key) {
                    newKeyToIndexMap[key] = i;
                }
            }
            newUnselectableIndices[i] = item && !this.canSelectItem(item);
            if (newUnselectableIndices[i]) {
                this._unselectableCount++;
            }
        }
        if (shouldClear || items.length === 0) {
            this._setAllSelected(false, true);
        }
        // Check the exemption list for discrepencies.
        var newExemptedIndicies = {};
        var newExemptedCount = 0;
        for (var indexProperty in this._exemptedIndices) {
            if (this._exemptedIndices.hasOwnProperty(indexProperty)) {
                var index = Number(indexProperty);
                var item = this._items[index];
                var exemptKey = item ? this.getKey(item, Number(index)) : undefined;
                var newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;
                if (newIndex === undefined) {
                    // The item has likely been replaced or removed.
                    hasSelectionChanged = true;
                }
                else {
                    // We know the new index of the item. update the existing exemption table.
                    newExemptedIndicies[newIndex] = true;
                    newExemptedCount++;
                    hasSelectionChanged = hasSelectionChanged || newIndex !== index;
                }
            }
        }
        if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {
            // If everything was selected but the number of items has changed, selection has changed.
            hasSelectionChanged = true;
        }
        this._exemptedIndices = newExemptedIndicies;
        this._exemptedCount = newExemptedCount;
        this._keyToIndexMap = newKeyToIndexMap;
        this._unselectableIndices = newUnselectableIndices;
        this._items = items;
        this._selectedItems = null;
        if (hasSelectionChanged) {
            this._updateCount();
            this._change();
        }
        this.setChangeEvents(true);
    };
    Selection.prototype.getItems = function () {
        return this._items;
    };
    Selection.prototype.getSelection = function () {
        if (!this._selectedItems) {
            this._selectedItems = [];
            var items = this._items;
            if (items) {
                for (var i = 0; i < items.length; i++) {
                    if (this.isIndexSelected(i)) {
                        this._selectedItems.push(items[i]);
                    }
                }
            }
        }
        return this._selectedItems;
    };
    Selection.prototype.getSelectedCount = function () {
        return this._isAllSelected
            ? this._items.length - this._exemptedCount - this._unselectableCount
            : this._exemptedCount;
    };
    Selection.prototype.getSelectedIndices = function () {
        if (!this._selectedIndices) {
            this._selectedIndices = [];
            var items = this._items;
            if (items) {
                for (var i = 0; i < items.length; i++) {
                    if (this.isIndexSelected(i)) {
                        this._selectedIndices.push(i);
                    }
                }
            }
        }
        return this._selectedIndices;
    };
    Selection.prototype.isRangeSelected = function (fromIndex, count) {
        if (count === 0) {
            return false;
        }
        var endIndex = fromIndex + count;
        for (var i = fromIndex; i < endIndex; i++) {
            if (!this.isIndexSelected(i)) {
                return false;
            }
        }
        return true;
    };
    Selection.prototype.isAllSelected = function () {
        var selectableCount = this._items.length - this._unselectableCount;
        // In single mode, we can only have a max of 1 item.
        if (this.mode === Selection_types_1.SelectionMode.single) {
            selectableCount = Math.min(selectableCount, 1);
        }
        return ((this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||
            (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0));
    };
    Selection.prototype.isKeySelected = function (key) {
        var index = this._keyToIndexMap[key];
        return this.isIndexSelected(index);
    };
    Selection.prototype.isIndexSelected = function (index) {
        return !!((this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||
            (!this._isAllSelected && this._exemptedIndices[index]));
    };
    Selection.prototype.setAllSelected = function (isAllSelected) {
        if (isAllSelected && this.mode !== Selection_types_1.SelectionMode.multiple) {
            return;
        }
        var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;
        this.setChangeEvents(false);
        if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {
            this._exemptedIndices = {};
            if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {
                this._exemptedCount = 0;
                this._isAllSelected = isAllSelected;
                this._change();
            }
            this._updateCount();
        }
        this.setChangeEvents(true);
    };
    Selection.prototype.setKeySelected = function (key, isSelected, shouldAnchor) {
        var index = this._keyToIndexMap[key];
        if (index >= 0) {
            this.setIndexSelected(index, isSelected, shouldAnchor);
        }
    };
    Selection.prototype.setIndexSelected = function (index, isSelected, shouldAnchor) {
        if (this.mode === Selection_types_1.SelectionMode.none) {
            return;
        }
        // Clamp the index.
        index = Math.min(Math.max(0, index), this._items.length - 1);
        // No-op on out of bounds selections.
        if (index < 0 || index >= this._items.length) {
            return;
        }
        this.setChangeEvents(false);
        var isExempt = this._exemptedIndices[index];
        var canSelect = !this._unselectableIndices[index];
        if (canSelect) {
            if (isSelected && this.mode === Selection_types_1.SelectionMode.single) {
                // If this is single-select, the previous selection should be removed.
                this._setAllSelected(false, true);
            }
            // Determine if we need to remove the exemption.
            if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {
                delete this._exemptedIndices[index];
                this._exemptedCount--;
            }
            // Determine if we need to add the exemption.
            if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {
                this._exemptedIndices[index] = true;
                this._exemptedCount++;
            }
            if (shouldAnchor) {
                this._anchoredIndex = index;
            }
        }
        this._updateCount();
        this.setChangeEvents(true);
    };
    Selection.prototype.selectToKey = function (key, clearSelection) {
        this.selectToIndex(this._keyToIndexMap[key], clearSelection);
    };
    Selection.prototype.selectToIndex = function (index, clearSelection) {
        if (this.mode === Selection_types_1.SelectionMode.none) {
            return;
        }
        if (this.mode === Selection_types_1.SelectionMode.single) {
            this.setIndexSelected(index, true, true);
            return;
        }
        var anchorIndex = this._anchoredIndex || 0;
        var startIndex = Math.min(index, anchorIndex);
        var endIndex = Math.max(index, anchorIndex);
        this.setChangeEvents(false);
        if (clearSelection) {
            this._setAllSelected(false, true);
        }
        for (; startIndex <= endIndex; startIndex++) {
            this.setIndexSelected(startIndex, true, false);
        }
        this.setChangeEvents(true);
    };
    Selection.prototype.toggleAllSelected = function () {
        this.setAllSelected(!this.isAllSelected());
    };
    Selection.prototype.toggleKeySelected = function (key) {
        this.setKeySelected(key, !this.isKeySelected(key), true);
    };
    Selection.prototype.toggleIndexSelected = function (index) {
        this.setIndexSelected(index, !this.isIndexSelected(index), true);
    };
    Selection.prototype.toggleRangeSelected = function (fromIndex, count) {
        if (this.mode === Selection_types_1.SelectionMode.none) {
            return;
        }
        var isRangeSelected = this.isRangeSelected(fromIndex, count);
        var endIndex = fromIndex + count;
        if (this.mode === Selection_types_1.SelectionMode.single && count > 1) {
            return;
        }
        this.setChangeEvents(false);
        for (var i = fromIndex; i < endIndex; i++) {
            this.setIndexSelected(i, !isRangeSelected, false);
        }
        this.setChangeEvents(true);
    };
    Selection.prototype._updateCount = function (preserveModalState) {
        if (preserveModalState === void 0) { preserveModalState = false; }
        var count = this.getSelectedCount();
        if (count !== this.count) {
            this.count = count;
            this._change();
        }
        if (!this.count && !preserveModalState) {
            this.setModal(false);
        }
    };
    Selection.prototype._setAllSelected = function (isAllSelected, preserveModalState) {
        if (preserveModalState === void 0) { preserveModalState = false; }
        if (isAllSelected && this.mode !== Selection_types_1.SelectionMode.multiple) {
            return;
        }
        var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;
        this.setChangeEvents(false);
        if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {
            this._exemptedIndices = {};
            if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {
                this._exemptedCount = 0;
                this._isAllSelected = isAllSelected;
                this._change();
            }
            this._updateCount(preserveModalState);
        }
        this.setChangeEvents(true);
    };
    Selection.prototype._change = function () {
        if (this._changeEventSuppressionCount === 0) {
            this._selectedItems = null;
            this._selectedIndices = undefined;
            EventGroup_1.EventGroup.raise(this, Selection_types_1.SELECTION_CHANGE);
            if (this._onSelectionChanged) {
                this._onSelectionChanged();
            }
        }
        else {
            this._hasChanged = true;
        }
    };
    return Selection;
}());
exports.Selection = Selection;
function defaultGetKey(item, index) {
    // 0 may be used as a key
    var _a = (item || {}).key, key = _a === void 0 ? "" + index : _a;
    return key;
}

},{"./Selection.types":"0czrs","../EventGroup":"5ndXb"}],"1xP7v":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
// Regex that finds { and } so they can be removed on a lookup for string format
var FORMAT_ARGS_REGEX = /[\{\}]/g;
// Regex that finds {#} so it can be replaced by the arguments in string format
var FORMAT_REGEX = /\{\d+\}/g;
/**
 * String format method, used for scenarios where at runtime you
 * need to evaluate a formatted string given a tokenized string. This
 * usually only is needed in localization scenarios.

 * @example
 * ```tsx
 * "I love {0} every {1}".format("CXP")
 * ```
 * will result in a Debug Exception.
 *
 * @public
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function format(s) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    var args = values;
    // Callback match function
    function replaceFunc(match) {
        // looks up in the args
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var replacement = args[match.replace(FORMAT_ARGS_REGEX, '')];
        // catches undefined in nondebug and null in debug and nondebug
        if (replacement === null || replacement === undefined) {
            replacement = '';
        }
        return replacement;
    }
    return s.replace(FORMAT_REGEX, replaceFunc);
}
exports.format = format;

},{}],"2usNX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.styled = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var merge_styles_1 = require("@fluentui/merge-styles");
var useCustomizationSettings_1 = require("./customizations/useCustomizationSettings");
var DefaultFields = ['theme', 'styles'];
function styled(Component, baseStyles, getProps, customizable, pure) {
    customizable = customizable || { scope: '', fields: undefined };
    var scope = customizable.scope, _a = customizable.fields, fields = _a === void 0 ? DefaultFields : _a;
    var Wrapped = React.forwardRef(function (props, forwardedRef) {
        var styles = React.useRef();
        var settings = useCustomizationSettings_1.useCustomizationSettings(fields, scope);
        var customizedStyles = settings.styles, dir = settings.dir, rest = tslib_1.__rest(settings, ["styles", "dir"]);
        var additionalProps = getProps ? getProps(props) : undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var cache = (styles.current && styles.current.__cachedInputs__) || [];
        if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {
            // Using styled components as the Component arg will result in nested styling arrays.
            var concatenatedStyles = function (styleProps) {
                return merge_styles_1.concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);
            };
            // The __cachedInputs__ array is attached to the function and consumed by the
            // classNamesFunction as a list of keys to include for memoizing classnames.
            concatenatedStyles.__cachedInputs__ = [
                baseStyles,
                customizedStyles,
                props.styles,
            ];
            concatenatedStyles.__noStyleOverride__ =
                !customizedStyles && !props.styles;
            styles.current = concatenatedStyles;
        }
        return React.createElement(Component, tslib_1.__assign({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles.current }));
    });
    // Function.prototype.name is an ES6 feature, so the cast to any is required until we're
    // able to drop IE 11 support and compile with ES6 libs
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Wrapped.displayName = "Styled" + (Component.displayName || Component.name);
    // This preserves backwards compatibility.
    var pureComponent = pure ? React.memo(Wrapped) : Wrapped;
    // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.
    if (Wrapped.displayName) {
        pureComponent.displayName = Wrapped.displayName;
    }
    return pureComponent;
}
exports.styled = styled;

},{"tslib":"2TEhm","react":"4g1R3","@fluentui/merge-styles":"366N8","./customizations/useCustomizationSettings":"1xYYi"}],"6DykI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./warn/warn"), exports);
tslib_1.__exportStar(require("./warn/warnConditionallyRequiredProps"), exports);
tslib_1.__exportStar(require("./warn/warnControlledUsage"), exports);
tslib_1.__exportStar(require("./warn/warnDeprecations"), exports);
tslib_1.__exportStar(require("./warn/warnMutuallyExclusive"), exports);

},{"tslib":"2TEhm","./warn/warn":"2bRpg","./warn/warnConditionallyRequiredProps":"zT0il","./warn/warnControlledUsage":"SBui2","./warn/warnDeprecations":"4BLx7","./warn/warnMutuallyExclusive":"3Rn0R"}],"SBui2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warnControlledUsage = exports.resetControlledWarnings = void 0;
var warn_1 = require("./warn");
var controlled_1 = require("../controlled");
var warningsMap;
if ("development" !== 'production') {
  warningsMap = {
    valueOnChange: {},
    valueDefaultValue: {},
    controlledToUncontrolled: {},
    uncontrolledToControlled: {}
  };
}
/** Reset controlled usage warnings for testing purposes.*/
function resetControlledWarnings() {
  if ("development" !== 'production') {
    warningsMap.valueOnChange = {};
    warningsMap.valueDefaultValue = {};
    warningsMap.controlledToUncontrolled = {};
    warningsMap.uncontrolledToControlled = {};
  }
}
exports.resetControlledWarnings = resetControlledWarnings;
/**
* Check for and warn on the following error conditions with a form component:
* - A value prop is provided (indicated it's being used as controlled) without a change handler,
*    and the component is not read-only
* - Both the value and defaultValue props are provided
* - The component is attempting to switch between controlled and uncontrolled
*
* The messages mimic the warnings React gives for these error conditions on input elements.
* The warning will only be displayed once per component ID.
*/
function warnControlledUsage(params) {
  if ("development" !== 'production') {
    var componentId = params.componentId, componentName = params.componentName, defaultValueProp = params.defaultValueProp, props = params.props, oldProps = params.oldProps, onChangeProp = params.onChangeProp, readOnlyProp = params.readOnlyProp, valueProp = params.valueProp;
    // This warning logic closely follows what React does for native <input> elements.
    var oldIsControlled = oldProps ? controlled_1.isControlled(oldProps, valueProp) : undefined;
    var newIsControlled = controlled_1.isControlled(props, valueProp);
    if (newIsControlled) {
      // onChange (or readOnly) must be provided if value is provided
      var hasOnChange = !!props[onChangeProp];
      var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);
      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {
        warningsMap.valueOnChange[componentId] = true;
        warn_1.warn("Warning: You provided a '" + valueProp + "' prop to a " + componentName + " without an '" + onChangeProp + "' handler. " + ("This will render a read-only field. If the field should be mutable use '" + defaultValueProp + "'. ") + ("Otherwise, set '" + onChangeProp + "'" + (readOnlyProp ? " or '" + readOnlyProp + "'" : '') + "."));
      }
      // value and defaultValue are mutually exclusive
      var defaultValue = props[defaultValueProp];
      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {
        warningsMap.valueDefaultValue[componentId] = true;
        warn_1.warn("Warning: You provided both '" + valueProp + "' and '" + defaultValueProp + "' to a " + componentName + ". " + ("Form fields must be either controlled or uncontrolled (specify either the '" + valueProp + "' prop, ") + ("or the '" + defaultValueProp + "' prop, but not both). Decide between using a controlled or uncontrolled ") + (componentName + " and remove one of these props. More info: https://fb.me/react-controlled-components"));
      }
    }
    // Warn if switching between uncontrolled and controlled. (One difference between this implementation
    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)
    if (oldProps && newIsControlled !== oldIsControlled) {
      var oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';
      var newType = oldIsControlled ? 'uncontrolled' : 'controlled';
      var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;
      if (!warnMap[componentId]) {
        warnMap[componentId] = true;
        warn_1.warn("Warning: A component is changing " + oldType + " " + componentName + " to be " + newType + ". " + (componentName + "s should not switch from controlled to uncontrolled (or vice versa). ") + "Decide between using controlled or uncontrolled for the lifetime of the component. " + "More info: https://fb.me/react-controlled-components");
      }
    }
  }
}
exports.warnControlledUsage = warnControlledUsage;

},{"./warn":"2bRpg","../controlled":"6YsSt"}],"3jpsq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIE11 = void 0;
var getWindow_1 = require("./dom/getWindow");
var isIE11 = function () {
    var _a;
    var win = getWindow_1.getWindow();
    if (!((_a = win === null || win === void 0 ? void 0 : win.navigator) === null || _a === void 0 ? void 0 : _a.userAgent)) {
        return false;
    }
    return win.navigator.userAgent.indexOf('rv:11.0') > -1;
};
exports.isIE11 = isIE11;

},{"./dom/getWindow":"5d0Wh"}],"L7piO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropsWithDefaults = void 0;
var tslib_1 = require("tslib");
/**
 * Function to apply default values to a component props object. This function is intended for function components,
 * to maintain parity with the `defaultProps` feature of class components. It accounts for properties that are
 * specified, but undefined.
 * @param defaultProps- An object with default values for various properties
 * @param propsWithoutDefaults- The props object passed into the component
 */
function getPropsWithDefaults(defaultProps, propsWithoutDefaults) {
    var props = tslib_1.__assign({}, propsWithoutDefaults);
    for (var _i = 0, _a = Object.keys(defaultProps); _i < _a.length; _i++) {
        var key = _a[_i];
        if (props[key] === undefined) {
            props[key] = defaultProps[key];
        }
    }
    return props;
}
exports.getPropsWithDefaults = getPropsWithDefaults;

},{"tslib":"2TEhm"}],"jHpNQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMergedRef = void 0;
var array_1 = require("./array");
/**
 * Set up a ref resolver function given internal state managed for the ref.
 * @param local Set
 */
var createResolver = function (local) { return function (newValue) {
    for (var _i = 0, _a = local.refs; _i < _a.length; _i++) {
        var ref = _a[_i];
        if (typeof ref === 'function') {
            ref(newValue);
        }
        else if (ref) {
            // work around the immutability of the React.Ref type
            ref.current = newValue;
        }
    }
}; };
/**
 * Helper to merge refs from within class components.
 */
var createMergedRef = function (value) {
    var local = {
        refs: [],
    };
    return function () {
        var newRefs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newRefs[_i] = arguments[_i];
        }
        if (!local.resolver || !array_1.arraysEqual(local.refs, newRefs)) {
            local.resolver = createResolver(local);
        }
        local.refs = newRefs;
        return local.resolver;
    };
};
exports.createMergedRef = createMergedRef;

},{"./array":"4181P"}],"45XfX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/utilities', '8.1.1');

},{"@fluentui/set-version":"12cIw"}],"wxgmP":[function(require,module,exports) {
"use strict";

exports.interopDefault = function (a) {
  return a && a.__esModule ? a : {
    default: a
  };
};

exports.defineInteropFlag = function (a) {
  Object.defineProperty(a, '__esModule', {
    value: true
  });
};

exports.exportAll = function (source, dest) {
  Object.keys(source).forEach(function (key) {
    if (key === 'default' || key === '__esModule') {
      return;
    } // Skip duplicate re-exports when they have the same value.


    if (key in dest && dest[key] === source[key]) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function () {
        return source[key];
      }
    });
  });
  return dest;
};

exports.export = function (dest, destName, get) {
  Object.defineProperty(dest, destName, {
    enumerable: true,
    get: get
  });
};
},{}],"7upjA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsIconIndex = require('./components/Icon/index');
_parcelHelpers.exportAll(_componentsIconIndex, exports);

},{"./components/Icon/index":"4jCIi","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4jCIi":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Icon = require('./Icon');
_parcelHelpers.exportAll(_Icon, exports);
var _IconBase = require('./Icon.base');
_parcelHelpers.exportAll(_IconBase, exports);
var _IconTypes = require('./Icon.types');
_parcelHelpers.exportAll(_IconTypes, exports);
var _FontIcon = require('./FontIcon');
_parcelHelpers.exportAll(_FontIcon, exports);
var _ImageIcon = require('./ImageIcon');
_parcelHelpers.exportAll(_ImageIcon, exports);

},{"./Icon":"1jBEx","./Icon.base":"6ZGoU","./Icon.types":"1z59h","./FontIcon":"4iH0N","./ImageIcon":"5VnUn","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1jBEx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Icon", function () {
  return Icon;
});
var _Utilities = require('../../Utilities');
var _IconBase = require('./Icon.base');
var _IconStyles = require('./Icon.styles');
var Icon = _Utilities.styled(_IconBase.IconBase, _IconStyles.getStyles, undefined, {
  scope: 'Icon'
}, true);
Icon.displayName = 'Icon';

},{"../../Utilities":"1439N","./Icon.base":"6ZGoU","./Icon.styles":"2JUdI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6ZGoU":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "IconBase", function () {
  return IconBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _IconTypes = require('./Icon.types');
var _ImageImage = require('../Image/Image');
var _ImageImageTypes = require('../Image/Image.types');
var _Utilities = require('../../Utilities');
var _FontIcon = require('./FontIcon');
var getClassNames = _Utilities.classNamesFunction({
  // Icon is used a lot by other components.
  // It's likely to see expected cases which pass different className to the Icon.
  // Therefore setting a larger cache size.
  cacheSize: 100
});
var IconBase = /** @class*/
(function (_super) {
  _tslib.__extends(IconBase, _super);
  function IconBase(props) {
    var _this = _super.call(this, props) || this;
    _this._onImageLoadingStateChange = function (state) {
      if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {
        _this.props.imageProps.onLoadingStateChange(state);
      }
      if (state === _ImageImageTypes.ImageLoadState.error) {
        _this.setState({
          imageLoadError: true
        });
      }
    };
    _this.state = {
      imageLoadError: false
    };
    return _this;
  }
  IconBase.prototype.render = function () {
    var _a = this.props, children = _a.children, className = _a.className, styles = _a.styles, iconName = _a.iconName, imageErrorAs = _a.imageErrorAs, theme = _a.theme;
    var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;
    var isImage = // eslint-disable-next-line deprecation/deprecation
    !!this.props.imageProps || this.props.iconType === _IconTypes.IconType.image || this.props.iconType === _IconTypes.IconType.Image;
    var iconContent = _FontIcon.getIconContent(iconName) || ({});
    var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children;
    var classNames = getClassNames(styles, {
      theme: theme,
      className: className,
      iconClassName: iconClassName,
      isImage: isImage,
      isPlaceholder: isPlaceholder
    });
    var RootType = isImage ? 'span' : 'i';
    var nativeProps = _Utilities.getNativeProps(this.props, _Utilities.htmlElementProperties, ['aria-label']);
    var imageLoadError = this.state.imageLoadError;
    var imageProps = _tslib.__assign(_tslib.__assign({}, this.props.imageProps), {
      onLoadingStateChange: this._onImageLoadingStateChange
    });
    var ImageType = imageLoadError && imageErrorAs || _ImageImage.Image;
    // eslint-disable-next-line deprecation/deprecation
    var ariaLabel = this.props['aria-label'] || this.props.ariaLabel;
    var accessibleName = imageProps.alt || ariaLabel;
    var hasName = !!(accessibleName || this.props['aria-labelledby'] || imageProps['aria-label'] || imageProps['aria-labelledby']);
    var containerProps = hasName ? {
      role: isImage ? undefined : 'img',
      'aria-label': isImage ? undefined : accessibleName
    } : {
      'aria-hidden': true
    };
    return _react.createElement(RootType, _tslib.__assign({
      "data-icon-name": iconName
    }, containerProps, nativeProps, {
      className: classNames.root
    }), isImage ? _react.createElement(ImageType, _tslib.__assign({}, imageProps)) : children || iconContentChildren);
  };
  return IconBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","./Icon.types":"1z59h","../Image/Image":"BD79S","../Image/Image.types":"2kbsf","../../Utilities":"1439N","./FontIcon":"4iH0N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1z59h":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "IconType", function () {
  return IconType;
});
var IconType;
(function (IconType) {
  /**
  * Render using the fabric icon font.
  * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
  */
  IconType[IconType["default"] = 0] = "default";
  /**
  * Render using an image, where imageProps would be used.
  * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
  */
  IconType[IconType["image"] = 1] = "image";
  /**
  * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
  */
  IconType[IconType["Default"] = 100000] = "Default";
  /**
  * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`
  */
  IconType[IconType["Image"] = 100001] = "Image";
})(IconType || (IconType = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"BD79S":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Image", function () {
  return Image;
});
var _Utilities = require('../../Utilities');
var _ImageBase = require('./Image.base');
var _ImageStyles = require('./Image.styles');
var Image = _Utilities.styled(_ImageBase.ImageBase, _ImageStyles.getStyles, undefined, {
  scope: 'Image'
}, true);
Image.displayName = 'Image';

},{"../../Utilities":"1439N","./Image.base":"273J5","./Image.styles":"3cXWY","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"273J5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ImageBase", function () {
  return ImageBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _ImageTypes = require('./Image.types');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var getClassNames = _Utilities.classNamesFunction();
var SVG_REGEX = /\.svg$/i;
var KEY_PREFIX = 'fabricImage';
function useLoadState(props, imageElement) {
  var onLoadingStateChange = props.onLoadingStateChange, onLoad = props.onLoad, onError = props.onError, src = props.src;
  var _a = _react.useState(_ImageTypes.ImageLoadState.notLoaded), loadState = _a[0], setLoadState = _a[1];
  // eslint-disable-next-line no-restricted-properties
  _react.useLayoutEffect(function () {
    // If the src property changes, reset the load state
    // (does nothing if the load state is already notLoaded)
    setLoadState(_ImageTypes.ImageLoadState.notLoaded);
  }, [src]);
  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render
  _react.useEffect(function () {
    if (loadState === _ImageTypes.ImageLoadState.notLoaded) {
      // testing if naturalWidth and naturalHeight are greater than zero is better than checking
      // .complete, because .complete will also be set to true if the image breaks. However,
      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back
      // to checking .complete for these images.
      var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;
      if (isLoaded) {
        setLoadState(_ImageTypes.ImageLoadState.loaded);
      }
    }
  });
  _react.useEffect(function () {
    onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);
  }, [loadState]);
  var onImageLoaded = _react.useCallback(function (ev) {
    onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);
    if (src) {
      setLoadState(_ImageTypes.ImageLoadState.loaded);
    }
  }, [src, onLoad]);
  var onImageError = _react.useCallback(function (ev) {
    onError === null || onError === void 0 ? void 0 : onError(ev);
    setLoadState(_ImageTypes.ImageLoadState.error);
  }, [onError]);
  return [loadState, onImageLoaded, onImageError];
}
var ImageBase = _react.forwardRef(function (props, forwardedRef) {
  var frameElement = _react.useRef();
  var imageElement = _react.useRef();
  var _a = useLoadState(props, imageElement), loadState = _a[0], onImageLoaded = _a[1], onImageError = _a[2];
  var imageProps = _Utilities.getNativeProps(props, _Utilities.imgProperties, ['width', 'height']);
  var src = props.src, alt = props.alt, width = props.width, height = props.height, _b = props.shouldFadeIn, shouldFadeIn = _b === void 0 ? true : _b, shouldStartVisible = props.shouldStartVisible, className = props.className, imageFit = props.imageFit, role = props.role, maximizeFrame = props.maximizeFrame, styles = props.styles, theme = props.theme, loading = props.loading;
  var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);
  var classNames = getClassNames(styles, {
    theme: theme,
    className: className,
    width: width,
    height: height,
    maximizeFrame: maximizeFrame,
    shouldFadeIn: shouldFadeIn,
    shouldStartVisible: shouldStartVisible,
    isLoaded: loadState === _ImageTypes.ImageLoadState.loaded || loadState === _ImageTypes.ImageLoadState.notLoaded && props.shouldStartVisible,
    isLandscape: coverStyle === _ImageTypes.ImageCoverStyle.landscape,
    isCenter: imageFit === _ImageTypes.ImageFit.center,
    isCenterContain: imageFit === _ImageTypes.ImageFit.centerContain,
    isCenterCover: imageFit === _ImageTypes.ImageFit.centerCover,
    isContain: imageFit === _ImageTypes.ImageFit.contain,
    isCover: imageFit === _ImageTypes.ImageFit.cover,
    isNone: imageFit === _ImageTypes.ImageFit.none,
    isError: loadState === _ImageTypes.ImageLoadState.error,
    isNotImageFit: imageFit === undefined
  });
  // If image dimensions aren't specified, the natural size of the image is used.
  return _react.createElement("div", {
    className: classNames.root,
    style: {
      width: width,
      height: height
    },
    ref: frameElement
  }, _react.createElement("img", _tslib.__assign({}, imageProps, {
    onLoad: onImageLoaded,
    onError: onImageError,
    key: KEY_PREFIX + props.src || '',
    className: classNames.image,
    ref: _fluentuiReactHooks.useMergedRefs(imageElement, forwardedRef),
    src: src,
    alt: alt,
    role: role,
    loading: loading
  })));
});
ImageBase.displayName = 'ImageBase';
function useCoverStyle(props, loadState, imageElement, frameElement) {
  var previousLoadState = _react.useRef(loadState);
  var coverStyle = _react.useRef();
  if (coverStyle === undefined || previousLoadState.current === _ImageTypes.ImageLoadState.notLoaded && loadState === _ImageTypes.ImageLoadState.loaded) {
    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);
  }
  previousLoadState.current = loadState;
  return coverStyle.current;
}
function computeCoverStyle(props, loadState, imageElement, frameElement) {
  var imageFit = props.imageFit, width = props.width, height = props.height;
  // Do not compute cover style if it was already specified in props
  if (props.coverStyle !== undefined) {
    return props.coverStyle;
  } else if (loadState === _ImageTypes.ImageLoadState.loaded && (imageFit === _ImageTypes.ImageFit.cover || imageFit === _ImageTypes.ImageFit.contain || imageFit === _ImageTypes.ImageFit.centerContain || imageFit === _ImageTypes.ImageFit.centerCover) && imageElement.current && frameElement.current) {
    // Determine the desired ratio using the width and height props.
    // If those props aren't available, measure measure the frame.
    var desiredRatio = void 0;
    if (typeof width === 'number' && typeof height === 'number' && imageFit !== _ImageTypes.ImageFit.centerContain && imageFit !== _ImageTypes.ImageFit.centerCover) {
      desiredRatio = width / height;
    } else {
      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;
    }
    // Examine the source image to determine its original ratio.
    var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;
    // Should we crop from the top or the sides?
    if (naturalRatio > desiredRatio) {
      return _ImageTypes.ImageCoverStyle.landscape;
    }
  }
  return _ImageTypes.ImageCoverStyle.portrait;
}

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./Image.types":"2kbsf","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2kbsf":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ImageFit", function () {
  return ImageFit;
});
_parcelHelpers.export(exports, "ImageCoverStyle", function () {
  return ImageCoverStyle;
});
_parcelHelpers.export(exports, "ImageLoadState", function () {
  return ImageLoadState;
});
var ImageFit;
(function (ImageFit) {
  /**
  * The image is not scaled. The image is centered and cropped within the content box.
  */
  ImageFit[ImageFit["center"] = 0] = "center";
  /**
  * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will
  * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of
  * the frame will be empty depending on the difference in aspect ratio between the image and the frame.
  */
  ImageFit[ImageFit["contain"] = 1] = "contain";
  /**
  * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped
  * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.
  */
  ImageFit[ImageFit["cover"] = 2] = "cover";
  /**
  * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the
  * frame will have empty space.
  */
  ImageFit[ImageFit["none"] = 3] = "none";
  /**
  * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will
  * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,
  * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.
  */
  ImageFit[ImageFit["centerCover"] = 4] = "centerCover";
  /**
  * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will
  * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,
  * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.
  */
  ImageFit[ImageFit["centerContain"] = 5] = "centerContain";
})(ImageFit || (ImageFit = {}));
var ImageCoverStyle;
(function (ImageCoverStyle) {
  /**
  * The image will be shown at 100% height of container and the width will be scaled accordingly
  */
  ImageCoverStyle[ImageCoverStyle["landscape"] = 0] = "landscape";
  /**
  * The image will be shown at 100% width of container and the height will be scaled accordingly
  */
  ImageCoverStyle[ImageCoverStyle["portrait"] = 1] = "portrait";
})(ImageCoverStyle || (ImageCoverStyle = {}));
var ImageLoadState;
(function (ImageLoadState) {
  /**
  * The image has not yet been loaded, and there is no error yet.
  */
  ImageLoadState[ImageLoadState["notLoaded"] = 0] = "notLoaded";
  /**
  * The image has been loaded successfully.
  */
  ImageLoadState[ImageLoadState["loaded"] = 1] = "loaded";
  /**
  * An error has been encountered while loading the image.
  */
  ImageLoadState[ImageLoadState["error"] = 2] = "error";
  /**
  * @deprecated Not used. Use `onLoadingStateChange` and re-render the Image with a different src.
  */
  ImageLoadState[ImageLoadState["errorLoaded"] = 3] = "errorLoaded";
})(ImageLoadState || (ImageLoadState = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1pHwU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("./version");
tslib_1.__exportStar(require("./useAsync"), exports);
tslib_1.__exportStar(require("./useBoolean"), exports);
tslib_1.__exportStar(require("./useConst"), exports);
tslib_1.__exportStar(require("./useConstCallback"), exports);
tslib_1.__exportStar(require("./useControllableValue"), exports);
tslib_1.__exportStar(require("./useForceUpdate"), exports);
tslib_1.__exportStar(require("./useId"), exports);
tslib_1.__exportStar(require("./useMergedRefs"), exports);
tslib_1.__exportStar(require("./useMount"), exports);
tslib_1.__exportStar(require("./useMountSync"), exports);
tslib_1.__exportStar(require("./useOnEvent"), exports);
tslib_1.__exportStar(require("./usePrevious"), exports);
tslib_1.__exportStar(require("./useRefEffect"), exports);
tslib_1.__exportStar(require("./useSetInterval"), exports);
tslib_1.__exportStar(require("./useSetTimeout"), exports);
tslib_1.__exportStar(require("./useTarget"), exports);
tslib_1.__exportStar(require("./useUnmount"), exports);
tslib_1.__exportStar(require("./useWarnings"), exports);

},{"tslib":"75DFo","./version":"5xyzh","./useAsync":"1hKl1","./useBoolean":"4CZ2h","./useConst":"sYBtA","./useConstCallback":"x6Mpl","./useControllableValue":"3y5rt","./useForceUpdate":"2AmpK","./useId":"3shxn","./useMergedRefs":"1boUy","./useMount":"7qxPK","./useMountSync":"22x3d","./useOnEvent":"BFPp4","./usePrevious":"4TjU3","./useRefEffect":"8twp8","./useSetInterval":"79xjb","./useSetTimeout":"6NJS9","./useTarget":"3zlFF","./useUnmount":"1Z03s","./useWarnings":"3qhKd"}],"75DFo":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"5xyzh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/react-hooks', '8.2.1');

},{"@fluentui/set-version":"12cIw"}],"1hKl1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAsync = void 0;
var utilities_1 = require("@fluentui/utilities");
var React = require("react");
var useConst_1 = require("./useConst");
/**
 * Hook to provide an Async instance that is automatically cleaned up on dismount.
 */
function useAsync() {
    var async = useConst_1.useConst(function () { return new utilities_1.Async(); });
    // Function that returns a function in order to dispose the async instance on unmount
    React.useEffect(function () { return function () { return async.dispose(); }; }, [async]);
    return async;
}
exports.useAsync = useAsync;

},{"@fluentui/utilities":"2AuOe","react":"4g1R3","./useConst":"sYBtA"}],"sYBtA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConst = void 0;
var React = require("react");
/**
 * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to
 * always return the same value (and if the initializer is a function, only call it once).
 * This is similar to setting a private member in a class constructor.
 *
 * If the value should ever change based on dependencies, use `React.useMemo` instead.
 *
 * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,
 * only the value/function passed in the first time this is called is respected.
 * @returns The value. The identity of this value will always be the same.
 */
function useConst(initialValue) {
    // Use useRef to store the value because it's the least expensive built-in hook that works here
    // (we could also use `const [value] = React.useState(initialValue)` but that's more expensive
    // internally due to reducer handling which we don't need)
    var ref = React.useRef();
    if (ref.current === undefined) {
        // Box the value in an object so we can tell if it's initialized even if the initializer
        // returns/is undefined
        ref.current = {
            value: typeof initialValue === 'function' ? initialValue() : initialValue,
        };
    }
    return ref.current.value;
}
exports.useConst = useConst;

},{"react":"4g1R3"}],"4CZ2h":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBoolean = void 0;
var React = require("react");
var useConst_1 = require("./useConst");
/**
 * Hook to store a value and generate callbacks for setting the value to true or false.
 * The identity of the callbacks will always stay the same.
 *
 * @param initialState - Initial value
 * @returns Array with the current value and an object containing the updater callbacks.
 */
function useBoolean(initialState) {
    var _a = React.useState(initialState), value = _a[0], setValue = _a[1];
    var setTrue = useConst_1.useConst(function () { return function () {
        setValue(true);
    }; });
    var setFalse = useConst_1.useConst(function () { return function () {
        setValue(false);
    }; });
    var toggle = useConst_1.useConst(function () { return function () {
        setValue(function (currentValue) { return !currentValue; });
    }; });
    return [value, { setTrue: setTrue, setFalse: setFalse, toggle: toggle }];
}
exports.useBoolean = useBoolean;

},{"react":"4g1R3","./useConst":"sYBtA"}],"x6Mpl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConstCallback = void 0;
var React = require("react");
/**
 * @deprecated Deprecated due to potential for misuse (see package readme).
 * Use `React.useCallback` instead.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function useConstCallback(callback) {
    var ref = React.useRef();
    if (!ref.current) {
        ref.current = callback;
    }
    return ref.current;
}
exports.useConstCallback = useConstCallback;

},{"react":"4g1R3"}],"3y5rt":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useControllableValue = void 0;
var React = require("react");
var useConst_1 = require("./useConst");
function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {
    var _a = React.useState(defaultUncontrolledValue), value = _a[0], setValue = _a[1];
    var isControlled = useConst_1.useConst(controlledValue !== undefined);
    var currentValue = isControlled ? controlledValue : value;
    // Duplicate the current value and onChange in refs so they're accessible from
    // setValueOrCallOnChange without creating a new callback every time
    var valueRef = React.useRef(currentValue);
    var onChangeRef = React.useRef(onChange);
    React.useEffect(function () {
        valueRef.current = currentValue;
        onChangeRef.current = onChange;
    });
    // To match the behavior of the setter returned by React.useState, this callback's identity
    // should never change. This means it MUST NOT directly reference variables that can change.
    var setValueOrCallOnChange = useConst_1.useConst(function () { return function (update, ev) {
        // Assuming here that TValue is not a function, because a controllable value will typically
        // be something a user can enter as input
        var newValue = typeof update === 'function' ? update(valueRef.current) : update;
        if (onChangeRef.current) {
            onChangeRef.current(ev, newValue);
        }
        if (!isControlled) {
            setValue(newValue);
        }
    }; });
    return [currentValue, setValueOrCallOnChange];
}
exports.useControllableValue = useControllableValue;

},{"react":"4g1R3","./useConst":"sYBtA"}],"2AmpK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useForceUpdate = void 0;
var React = require("react");
var useConst_1 = require("./useConst");
/**
 * Hook to force update a function component by updating a dummy state.
 */
function useForceUpdate() {
    var _a = React.useState(0), setValue = _a[1];
    var forceUpdate = useConst_1.useConst(function () { return function () { return setValue(function (value) { return ++value; }); }; });
    return forceUpdate;
}
exports.useForceUpdate = useForceUpdate;

},{"react":"4g1R3","./useConst":"sYBtA"}],"3shxn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useId = void 0;
var React = require("react");
var getId_1 = require("@fluentui/utilities/lib-commonjs/getId");
/**
 * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).
 *
 * @param prefix - Optional prefix for the ID
 * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,
 *  without conditioning the hook call
 * @returns The ID
 */
function useId(prefix, providedId) {
    // getId should only be called once since it updates the global constant for the next ID value.
    // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)
    var ref = React.useRef(providedId);
    if (!ref.current) {
        ref.current = getId_1.getId(prefix);
    }
    return ref.current;
}
exports.useId = useId;

},{"react":"4g1R3","@fluentui/utilities/lib-commonjs/getId":"7Ml31"}],"1boUy":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMergedRefs = void 0;
var tslib_1 = require("tslib");
var React = require("react");
/**
 * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that
 * updates all provided refs
 * @param refs - Refs to collectively update with one ref value.
 * @returns A function with an attached "current" prop, so that it can be treated like a RefObject.
 */
function useMergedRefs() {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        refs[_i] = arguments[_i];
    }
    var mergedCallback = React.useCallback(function (value) {
        // Update the "current" prop hanging on the function.
        mergedCallback.current = value;
        for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {
            var ref = refs_1[_i];
            if (typeof ref === 'function') {
                ref(value);
            }
            else if (ref) {
                // work around the immutability of the React.Ref type
                ref.current = value;
            }
        }
    }, tslib_1.__spreadArrays(refs));
    return mergedCallback;
}
exports.useMergedRefs = useMergedRefs;

},{"tslib":"75DFo","react":"4g1R3"}],"7qxPK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMount = void 0;
var React = require("react");
/**
 * Hook which asynchronously executes a callback once the component has been mounted.
 *
 * @param callback - Function to call before mount.
 */
var useMount = function (callback) {
    var mountRef = React.useRef(callback);
    mountRef.current = callback;
    React.useEffect(function () {
        var _a;
        (_a = mountRef.current) === null || _a === void 0 ? void 0 : _a.call(mountRef);
    }, []);
};
exports.useMount = useMount;

},{"react":"4g1R3"}],"22x3d":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMountSync = void 0;
var React = require("react");
/**
 * Hook which synchronously executes a callback once the component has been mounted.
 *
 * `WARNING` This should only be used if you need to perform an action after the component has been mounted and
 * before the browser paints. useMountSync will trigger debug warnings in server-rendered scenarios and should be used
 * sparingly.
 *
 * @deprecated Consider to use React.useEffect() or React.useLayoutEffect() directly based on a use case
 *
 * @param callback - Function to call once the component has been mounted.
 */
var useMountSync = function (callback) {
    var mountRef = React.useRef(callback);
    mountRef.current = callback;
    // eslint-disable-next-line no-restricted-properties
    React.useLayoutEffect(function () {
        var _a;
        (_a = mountRef.current) === null || _a === void 0 ? void 0 : _a.call(mountRef);
    }, []);
};
exports.useMountSync = useMountSync;

},{"react":"4g1R3"}],"BFPp4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOnEvent = void 0;
var utilities_1 = require("@fluentui/utilities");
var React = require("react");
/**
 * Hook to attach an event handler on mount and handle cleanup.
 * @param element - Element (or ref to an element) to attach the event handler to
 * @param eventName - The event to attach a handler for
 * @param callback - The handler for the event
 * @param useCapture - Whether or not to attach the handler for the capture phase
 */
function useOnEvent(element, eventName, callback, useCapture) {
    // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders
    var callbackRef = React.useRef(callback);
    callbackRef.current = callback;
    React.useEffect(function () {
        var actualElement = element && 'current' in element ? element.current : element;
        if (!actualElement) {
            return;
        }
        var dispose = utilities_1.on(actualElement, eventName, function (ev) { return callbackRef.current(ev); }, useCapture);
        return dispose;
    }, [element, eventName, useCapture]);
}
exports.useOnEvent = useOnEvent;

},{"@fluentui/utilities":"2AuOe","react":"4g1R3"}],"4TjU3":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePrevious = void 0;
var react_1 = require("react");
/**
 * Hook keeping track of a given value from a previous execution of the component the Hook is used in.
 *
 * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)
 */
function usePrevious(value) {
    var ref = react_1.useRef();
    react_1.useEffect(function () {
        ref.current = value;
    });
    return ref.current;
}
exports.usePrevious = usePrevious;

},{"react":"4g1R3"}],"8twp8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRefEffect = void 0;
var React = require("react");
/**
 * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return
 * a cleanup function that'll be called before the value changes, and when the ref is unmounted.
 *
 * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see
 * https://github.com/facebook/react/issues/14387#issuecomment-503616820).
 *
 * Usage example:
 * ```ts
 * const myRef = useRefEffect<HTMLElement>(element => {
 *  ...
 *  return () => { ... cleanup ... };
 * });
 * ```
 * ```jsx
 * <div ref={myRef} />
 * ```
 *
 * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.
 * @param initial - (Optional) The initial value for the ref.
 *
 * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be
 * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.
 */
function useRefEffect(callback, initial) {
    if (initial === void 0) { initial = null; }
    var data = React.useRef({
        ref: Object.assign(function (value) {
            if (data.ref.current !== value) {
                if (data.cleanup) {
                    data.cleanup();
                    data.cleanup = undefined;
                }
                data.ref.current = value;
                if (value !== null) {
                    data.cleanup = data.callback(value);
                }
            }
        }, {
            current: initial,
        }),
        callback: callback,
    }).current;
    data.callback = callback;
    return data.ref;
}
exports.useRefEffect = useRefEffect;

},{"react":"4g1R3"}],"79xjb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSetInterval = void 0;
var React = require("react");
var useConst_1 = require("./useConst");
/**
 *  Returns a wrapper function for `setInterval` which automatically handles disposal.
 */
var useSetInterval = function () {
    var intervalIds = useConst_1.useConst({});
    React.useEffect(function () { return function () {
        for (var _i = 0, _a = Object.keys(intervalIds); _i < _a.length; _i++) {
            var id = _a[_i];
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            clearInterval(id);
        }
    }; }, 
    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that
    [intervalIds]);
    return useConst_1.useConst({
        setInterval: function (func, duration) {
            var id = setInterval(func, duration);
            intervalIds[id] = 1;
            return id;
        },
        clearInterval: function (id) {
            delete intervalIds[id];
            clearInterval(id);
        },
    });
};
exports.useSetInterval = useSetInterval;

},{"react":"4g1R3","./useConst":"sYBtA"}],"6NJS9":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSetTimeout = void 0;
var React = require("react");
var useConst_1 = require("./useConst");
/**
 *  Returns a wrapper function for `setTimeout` which automatically handles disposal.
 */
var useSetTimeout = function () {
    var timeoutIds = useConst_1.useConst({});
    // Cleanup function.
    React.useEffect(function () { return function () {
        for (var _i = 0, _a = Object.keys(timeoutIds); _i < _a.length; _i++) {
            var id = _a[_i];
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            clearTimeout(id);
        }
    }; }, 
    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that
    [timeoutIds]);
    // Return wrapper which will auto cleanup.
    return useConst_1.useConst({
        setTimeout: function (func, duration) {
            var id = setTimeout(func, duration);
            timeoutIds[id] = 1;
            return id;
        },
        clearTimeout: function (id) {
            delete timeoutIds[id];
            clearTimeout(id);
        },
    });
};
exports.useSetTimeout = useSetTimeout;

},{"react":"4g1R3","./useConst":"sYBtA"}],"3zlFF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTarget = void 0;
var utilities_1 = require("@fluentui/utilities");
var React = require("react");
var react_window_provider_1 = require("@fluentui/react-window-provider");
/**
 * Hook to calculate and cache the target element specified by the given target attribute,
 * as well as the target element's (or host element's) parent window
 * @param target- Target selector passed to the component as a property, describing the element that
 * the callout should target
 * @param hostElement- The callout's host element, used for determining the parent window.
 */
function useTarget(target, hostElement) {
    var previousTargetProp = React.useRef();
    var targetRef = React.useRef(null);
    /**
     * Stores an instance of Window, used to check
     * for server side rendering and if focus was lost.
     */
    var targetWindow = react_window_provider_1.useWindow();
    // If the target element changed, find the new one. If we are tracking
    // target with class name, always find element because we do not know if
    // fabric has rendered a new element and disposed the old element.
    if (!target || target !== previousTargetProp.current || typeof target === 'string') {
        var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
        if (target) {
            if (typeof target === 'string') {
                var currentDoc = utilities_1.getDocument(currentElement);
                targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
            }
            else if ('stopPropagation' in target) {
                targetRef.current = target;
            }
            else if ('getBoundingClientRect' in target) {
                targetRef.current = target;
            }
            else if ('current' in target) {
                targetRef.current = target.current;
            }
            else {
                targetRef.current = target;
            }
        }
        previousTargetProp.current = target;
    }
    return [targetRef, targetWindow];
}
exports.useTarget = useTarget;

},{"@fluentui/utilities":"2AuOe","react":"4g1R3","@fluentui/react-window-provider":"5qP7J"}],"5qP7J":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./WindowProvider"), exports);
require("./version");

},{"tslib":"12swi","./WindowProvider":"SlAP0","./version":"5VOol"}],"12swi":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"SlAP0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowProvider = exports.useDocument = exports.useWindow = exports.WindowContext = void 0;
var React = require("react");
/**
 * Context for providing the window.
 */
exports.WindowContext = React.createContext({
    window: typeof window === 'object' ? window : undefined,
});
/**
 * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.
 */
var useWindow = function () { return React.useContext(exports.WindowContext).window; };
exports.useWindow = useWindow;
/**
 * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.
 */
var useDocument = function () { var _a; return (_a = React.useContext(exports.WindowContext).window) === null || _a === void 0 ? void 0 : _a.document; };
exports.useDocument = useDocument;
/**
 * Component to provide the window object contextually. This is useful when rendering content to an element
 * contained within a child window or iframe element, where event handlers and styling must be projected
 * to an alternative window or document.
 */
var WindowProvider = function (props) {
    return React.createElement(exports.WindowContext.Provider, { value: props }, props.children);
};
exports.WindowProvider = WindowProvider;

},{"react":"4g1R3"}],"5VOol":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/react-window-provider', '2.1.1');

},{"@fluentui/set-version":"12cIw"}],"1Z03s":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUnmount = void 0;
var React = require("react");
/**
 * Hook which synchronously executes a callback when the component is about to unmount.
 *
 * @param callback - Function to call during unmount.
 */
var useUnmount = function (callback) {
    var unmountRef = React.useRef(callback);
    unmountRef.current = callback;
    React.useEffect(function () { return function () {
        var _a;
        (_a = unmountRef.current) === null || _a === void 0 ? void 0 : _a.call(unmountRef);
    }; }, []);
};
exports.useUnmount = useUnmount;

},{"react":"4g1R3"}],"3qhKd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWarnings = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var warn_1 = require("@fluentui/utilities/lib-commonjs/warn");
var usePrevious_1 = require("./usePrevious");
var useConst_1 = require("./useConst");
var warningId = 0;
/**
* Only in development mode, display console warnings when certain conditions are met.
* Note that all warnings except `controlledUsage` will only be shown on first render
* (new `controlledUsage` warnings may be shown later due to prop changes).
*/
function useWarnings(options) {
  if ("development" !== 'production') {
    var name_1 = options.name, props = options.props, _a = options.other, other = _a === void 0 ? [] : _a, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
    /*eslint-disable react-hooks/rules-of-hooks -- build-time conditional*/
    var hasWarnedRef = React.useRef(false);
    var componentId = useConst_1.useConst(function () {
      return "useWarnings_" + warningId++;
    });
    var oldProps = usePrevious_1.usePrevious(props);
    /*eslint-enable react-hooks/rules-of-hooks*/
    // Warn synchronously (not in useEffect) on first render to make debugging easier.
    if (!hasWarnedRef.current) {
      hasWarnedRef.current = true;
      for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
        var warning = other_1[_i];
        warn_1.warn(warning);
      }
      if (conditionallyRequired) {
        for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {
          var req = conditionallyRequired_1[_b];
          warn_1.warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
        }
      }
      deprecations && warn_1.warnDeprecations(name_1, props, deprecations);
      mutuallyExclusive && warn_1.warnMutuallyExclusive(name_1, props, mutuallyExclusive);
    }
    // Controlled usage warnings may be displayed on either first or subsequent renders due to
    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in
    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been
    // displayed for each component instance (so nothing will be displayed twice).
    controlledUsage && warn_1.warnControlledUsage(tslib_1.__assign(tslib_1.__assign({}, controlledUsage), {
      componentId: componentId,
      props: props,
      componentName: name_1,
      oldProps: oldProps
    }));
  }
}
exports.useWarnings = useWarnings;

},{"tslib":"75DFo","react":"4g1R3","@fluentui/utilities/lib-commonjs/warn":"6DykI","./usePrevious":"4TjU3","./useConst":"sYBtA"}],"3cXWY":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var GlobalClassNames = {
  root: 'ms-Image',
  rootMaximizeFrame: 'ms-Image--maximizeFrame',
  image: 'ms-Image-image',
  imageCenter: 'ms-Image-image--center',
  imageContain: 'ms-Image-image--contain',
  imageCover: 'ms-Image-image--cover',
  imageCenterContain: 'ms-Image-image--centerContain',
  imageCenterCover: 'ms-Image-image--centerCover',
  imageNone: 'ms-Image-image--none',
  imageLandscape: 'ms-Image-image--landscape',
  imagePortrait: 'ms-Image-image--portrait'
};
var getStyles = function (props) {
  var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var ImageFitStyles = {
    position: 'absolute',
    left: '50% /* @noflip */',
    top: '50%',
    transform: 'translate(-50%,-50%)'
  };
  // Cut the mustard using msMaxTouchPoints to detect IE11 which does not support CSS object-fit
  var window = _Utilities.getWindow();
  var supportsObjectFit = window !== undefined && window.navigator.msMaxTouchPoints === undefined;
  var fallbackObjectFitStyles = isContain && isLandscape || isCover && !isLandscape ? {
    width: '100%',
    height: 'auto'
  } : {
    width: 'auto',
    height: '100%'
  };
  return {
    root: [classNames.root, theme.fonts.medium, {
      overflow: 'hidden'
    }, maximizeFrame && [classNames.rootMaximizeFrame, {
      height: '100%',
      width: '100%'
    }], isLoaded && shouldFadeIn && !shouldStartVisible && _Styling.AnimationClassNames.fadeIn400, (isCenter || isContain || isCover || isCenterContain || isCenterCover) && ({
      position: 'relative'
    }), className],
    image: [classNames.image, {
      display: 'block',
      opacity: 0
    }, isLoaded && ['is-loaded', {
      opacity: 1
    }], isCenter && [classNames.imageCenter, ImageFitStyles], isContain && [classNames.imageContain, supportsObjectFit && ({
      width: '100%',
      height: '100%',
      objectFit: 'contain'
    }), !supportsObjectFit && fallbackObjectFitStyles, !supportsObjectFit && ImageFitStyles], isCover && [classNames.imageCover, supportsObjectFit && ({
      width: '100%',
      height: '100%',
      objectFit: 'cover'
    }), !supportsObjectFit && fallbackObjectFitStyles, !supportsObjectFit && ImageFitStyles], isCenterContain && [classNames.imageCenterContain, isLandscape && ({
      maxWidth: '100%'
    }), !isLandscape && ({
      maxHeight: '100%'
    }), ImageFitStyles], isCenterCover && [classNames.imageCenterCover, isLandscape && ({
      maxHeight: '100%'
    }), !isLandscape && ({
      maxWidth: '100%'
    }), ImageFitStyles], isNone && [classNames.imageNone, {
      width: 'auto',
      height: 'auto'
    }], isNotImageFit && [!!width && !height && ({
      height: 'auto',
      width: '100%'
    }), !width && !!height && ({
      height: '100%',
      width: 'auto'
    }), !!width && !!height && ({
      height: '100%',
      width: '100%'
    })], isLandscape && classNames.imageLandscape, !isLandscape && classNames.imagePortrait, !isLoaded && 'is-notLoaded', shouldFadeIn && 'is-fadeIn', isError && 'is-error']
  };
};

},{"../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5q33X":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./version');
var _fluentuiStyleUtilities = require('@fluentui/style-utilities');
_parcelHelpers.exportAll(_fluentuiStyleUtilities, exports);

},{"./version":"4GWvB","@fluentui/style-utilities":"J5I0J","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"J5I0J":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./classNames/index"), exports);
tslib_1.__exportStar(require("./styles/index"), exports);
tslib_1.__exportStar(require("./utilities/index"), exports);
tslib_1.__exportStar(require("./interfaces/index"), exports);
tslib_1.__exportStar(require("./MergeStyles"), exports);
require("./version");
// Ensure theme is initialized when this package is referenced.
var theme_1 = require("./styles/theme");
theme_1.initializeThemeInCustomizations();

},{"tslib":"5gvnt","./classNames/index":"4g8SC","./styles/index":"6CazK","./utilities/index":"22jFj","./interfaces/index":"3aZl2","./MergeStyles":"6KSip","./version":"2RP7r","./styles/theme":"IGepv"}],"5gvnt":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"4g8SC":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorClassNames = exports.FontClassNames = exports.AnimationClassNames = void 0;
var AnimationClassNames_1 = require("./AnimationClassNames");
Object.defineProperty(exports, "AnimationClassNames", { enumerable: true, get: function () { return AnimationClassNames_1.AnimationClassNames; } });
var FontClassNames_1 = require("./FontClassNames");
Object.defineProperty(exports, "FontClassNames", { enumerable: true, get: function () { return FontClassNames_1.FontClassNames; } });
var ColorClassNames_1 = require("./ColorClassNames");
Object.defineProperty(exports, "ColorClassNames", { enumerable: true, get: function () { return ColorClassNames_1.ColorClassNames; } });

},{"./AnimationClassNames":"19TDP","./FontClassNames":"4GnDr","./ColorClassNames":"3RrTr"}],"19TDP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationClassNames = void 0;
var index_1 = require("../utilities/index");
var index_2 = require("../styles/index");
/**
 * {@docCategory AnimationClassNames}
 */
exports.AnimationClassNames = index_1.buildClassMap(index_2.AnimationStyles);

},{"../utilities/index":"22jFj","../styles/index":"6CazK"}],"22jFj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIconClassName = exports.setIconOptions = exports.unregisterIcons = exports.registerIconAlias = exports.registerIcons = exports.getIcon = exports.buildClassMap = void 0;
var buildClassMap_1 = require("./buildClassMap");
Object.defineProperty(exports, "buildClassMap", { enumerable: true, get: function () { return buildClassMap_1.buildClassMap; } });
var icons_1 = require("./icons");
Object.defineProperty(exports, "getIcon", { enumerable: true, get: function () { return icons_1.getIcon; } });
Object.defineProperty(exports, "registerIcons", { enumerable: true, get: function () { return icons_1.registerIcons; } });
Object.defineProperty(exports, "registerIconAlias", { enumerable: true, get: function () { return icons_1.registerIconAlias; } });
Object.defineProperty(exports, "unregisterIcons", { enumerable: true, get: function () { return icons_1.unregisterIcons; } });
Object.defineProperty(exports, "setIconOptions", { enumerable: true, get: function () { return icons_1.setIconOptions; } });
var getIconClassName_1 = require("./getIconClassName");
Object.defineProperty(exports, "getIconClassName", { enumerable: true, get: function () { return getIconClassName_1.getIconClassName; } });

},{"./buildClassMap":"1tfcs","./icons":"5t5rE","./getIconClassName":"7rAVl"}],"1tfcs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildClassMap = void 0;
var MergeStyles_1 = require("../MergeStyles");
/**
 * Builds a class names object from a given map.
 *
 * @param styles - Map of unprocessed styles.
 * @returns Map of property name to class name.
 */
function buildClassMap(styles) {
    var classes = {};
    var _loop_1 = function (styleName) {
        if (styles.hasOwnProperty(styleName)) {
            var className_1;
            Object.defineProperty(classes, styleName, {
                get: function () {
                    if (className_1 === undefined) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        className_1 = MergeStyles_1.mergeStyles(styles[styleName]).toString();
                    }
                    return className_1;
                },
                enumerable: true,
                configurable: true,
            });
        }
    };
    for (var styleName in styles) {
        _loop_1(styleName);
    }
    return classes;
}
exports.buildClassMap = buildClassMap;

},{"../MergeStyles":"6KSip"}],"6KSip":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeStyles = exports.mergeStyleSets = exports.keyframes = exports.fontFace = exports.concatStyleSetsWithProps = exports.concatStyleSets = exports.Stylesheet = exports.InjectionMode = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
Object.defineProperty(exports, "InjectionMode", { enumerable: true, get: function () { return merge_styles_1.InjectionMode; } });
Object.defineProperty(exports, "Stylesheet", { enumerable: true, get: function () { return merge_styles_1.Stylesheet; } });
Object.defineProperty(exports, "concatStyleSets", { enumerable: true, get: function () { return merge_styles_1.concatStyleSets; } });
Object.defineProperty(exports, "concatStyleSetsWithProps", { enumerable: true, get: function () { return merge_styles_1.concatStyleSetsWithProps; } });
Object.defineProperty(exports, "fontFace", { enumerable: true, get: function () { return merge_styles_1.fontFace; } });
Object.defineProperty(exports, "keyframes", { enumerable: true, get: function () { return merge_styles_1.keyframes; } });
Object.defineProperty(exports, "mergeStyleSets", { enumerable: true, get: function () { return merge_styles_1.mergeStyleSets; } });
Object.defineProperty(exports, "mergeStyles", { enumerable: true, get: function () { return merge_styles_1.mergeStyles; } });

},{"@fluentui/merge-styles":"366N8"}],"5t5rE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setIconOptions = exports.getIcon = exports.registerIconAlias = exports.unregisterIcons = exports.registerIcons = void 0;
var tslib_1 = require("tslib");
var utilities_1 = require("@fluentui/utilities");
var merge_styles_1 = require("@fluentui/merge-styles");
var ICON_SETTING_NAME = 'icons';
var _iconSettings = utilities_1.GlobalSettings.getValue(ICON_SETTING_NAME, {
    __options: {
        disableWarnings: false,
        warnOnMissingIcons: true,
    },
    __remapped: {},
});
// Reset icon registration on stylesheet resets.
var stylesheet = merge_styles_1.Stylesheet.getInstance();
if (stylesheet && stylesheet.onReset) {
    stylesheet.onReset(function () {
        for (var name_1 in _iconSettings) {
            if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {
                _iconSettings[name_1].subset.className = undefined;
            }
        }
    });
}
/**
 * Normalizes an icon name for consistent mapping.
 * Current implementation is to convert the icon name to lower case.
 *
 * @param name - Icon name to normalize.
 * @returns {string} Normalized icon name to use for indexing and mapping.
 */
var normalizeIconName = function (name) { return name.toLowerCase(); };
/**
 * Registers a given subset of icons.
 *
 * @param iconSubset - the icon subset definition.
 */
function registerIcons(iconSubset, options) {
    var subset = tslib_1.__assign(tslib_1.__assign({}, iconSubset), { isRegistered: false, className: undefined });
    var icons = iconSubset.icons;
    // Grab options, optionally mix user provided ones on top.
    options = options ? tslib_1.__assign(tslib_1.__assign({}, _iconSettings.__options), options) : _iconSettings.__options;
    for (var iconName in icons) {
        if (icons.hasOwnProperty(iconName)) {
            var code = icons[iconName];
            var normalizedIconName = normalizeIconName(iconName);
            if (_iconSettings[normalizedIconName]) {
                _warnDuplicateIcon(iconName);
            }
            else {
                _iconSettings[normalizedIconName] = {
                    code: code,
                    subset: subset,
                };
            }
        }
    }
}
exports.registerIcons = registerIcons;
/**
 * Unregisters icons by name.
 *
 * @param iconNames - List of icons to unregister.
 */
function unregisterIcons(iconNames) {
    var options = _iconSettings.__options;
    var _loop_1 = function (iconName) {
        var normalizedIconName = normalizeIconName(iconName);
        if (_iconSettings[normalizedIconName]) {
            delete _iconSettings[normalizedIconName];
        }
        else {
            // Warn that we are trying to delete an icon that doesn't exist
            if (!options.disableWarnings) {
                utilities_1.warn("The icon \"" + iconName + "\" tried to unregister but was not registered.");
            }
        }
        // Delete any aliases for this iconName
        if (_iconSettings.__remapped[normalizedIconName]) {
            delete _iconSettings.__remapped[normalizedIconName];
        }
        // Delete any items that were an alias for this iconName
        Object.keys(_iconSettings.__remapped).forEach(function (key) {
            if (_iconSettings.__remapped[key] === normalizedIconName) {
                delete _iconSettings.__remapped[key];
            }
        });
    };
    for (var _i = 0, iconNames_1 = iconNames; _i < iconNames_1.length; _i++) {
        var iconName = iconNames_1[_i];
        _loop_1(iconName);
    }
}
exports.unregisterIcons = unregisterIcons;
/**
 * Remaps one icon name to another.
 */
function registerIconAlias(iconName, mappedToName) {
    _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);
}
exports.registerIconAlias = registerIconAlias;
/**
 * Gets an icon definition. If an icon is requested but the subset has yet to be registered,
 * it will get registered immediately.
 *
 * @public
 * @param name - Name of icon.
 */
function getIcon(name) {
    var icon = undefined;
    var options = _iconSettings.__options;
    name = name ? normalizeIconName(name) : '';
    name = _iconSettings.__remapped[name] || name;
    if (name) {
        icon = _iconSettings[name];
        if (icon) {
            var subset = icon.subset;
            if (subset && subset.fontFace) {
                if (!subset.isRegistered) {
                    merge_styles_1.fontFace(subset.fontFace);
                    subset.isRegistered = true;
                }
                if (!subset.className) {
                    subset.className = merge_styles_1.mergeStyles(subset.style, {
                        fontFamily: subset.fontFace.fontFamily,
                        fontWeight: subset.fontFace.fontWeight || 'normal',
                        fontStyle: subset.fontFace.fontStyle || 'normal',
                    });
                }
            }
        }
        else {
            // eslint-disable-next-line deprecation/deprecation
            if (!options.disableWarnings && options.warnOnMissingIcons) {
                utilities_1.warn("The icon \"" + name + "\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.");
            }
        }
    }
    return icon;
}
exports.getIcon = getIcon;
/**
 * Sets the icon options.
 *
 * @public
 */
function setIconOptions(options) {
    _iconSettings.__options = tslib_1.__assign(tslib_1.__assign({}, _iconSettings.__options), options);
}
exports.setIconOptions = setIconOptions;
var _missingIcons = [];
var _missingIconsTimer = undefined;
function _warnDuplicateIcon(iconName) {
    var options = _iconSettings.__options;
    var warningDelay = 2000;
    var maxIconsInMessage = 10;
    if (!options.disableWarnings) {
        _missingIcons.push(iconName);
        if (_missingIconsTimer === undefined) {
            _missingIconsTimer = setTimeout(function () {
                utilities_1.warn("Some icons were re-registered. Applications should only call registerIcons for any given " +
                    "icon once. Redefining what an icon is may have unintended consequences. Duplicates " +
                    "include: \n" +
                    _missingIcons.slice(0, maxIconsInMessage).join(', ') +
                    (_missingIcons.length > maxIconsInMessage ? " (+ " + (_missingIcons.length - maxIconsInMessage) + " more)" : ''));
                _missingIconsTimer = undefined;
                _missingIcons = [];
            }, warningDelay);
        }
    }
}

},{"tslib":"5gvnt","@fluentui/utilities":"2AuOe","@fluentui/merge-styles":"366N8"}],"7rAVl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIconClassName = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
var icons_1 = require("./icons");
var defaultIconStyles = {
    display: 'inline-block',
};
/**
 * Gets an icon classname. You should be able to add this classname to an I tag with no
 * additional classnames, and render the icon.
 *
 * @public
 */
function getIconClassName(name) {
    var className = '';
    var icon = icons_1.getIcon(name);
    if (icon) {
        className = merge_styles_1.mergeStyles(icon.subset.className, defaultIconStyles, {
            selectors: {
                '::before': {
                    content: "\"" + icon.code + "\"",
                },
            },
        });
    }
    return className;
}
exports.getIconClassName = getIconClassName;

},{"@fluentui/merge-styles":"366N8","./icons":"5t5rE"}],"6CazK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeOnThemeChangeCallback = exports.registerOnThemeChangeCallback = exports.createTheme = exports.loadTheme = exports.getTheme = exports.ThemeSettingName = exports.getGlobalClassNames = exports.PulsingBeaconAnimationStyles = exports.hiddenContentStyle = exports.createFontStyles = exports.IconFontSizes = exports.FontWeights = exports.FontSizes = exports.registerDefaultFontFaces = exports.DefaultFontStyles = exports.DefaultEffects = exports.DefaultPalette = exports.AnimationVariables = exports.AnimationStyles = void 0;
var tslib_1 = require("tslib");
var AnimationStyles_1 = require("./AnimationStyles");
Object.defineProperty(exports, "AnimationStyles", { enumerable: true, get: function () { return AnimationStyles_1.AnimationStyles; } });
Object.defineProperty(exports, "AnimationVariables", { enumerable: true, get: function () { return AnimationStyles_1.AnimationVariables; } });
var DefaultPalette_1 = require("./DefaultPalette");
Object.defineProperty(exports, "DefaultPalette", { enumerable: true, get: function () { return DefaultPalette_1.DefaultPalette; } });
var DefaultEffects_1 = require("./DefaultEffects");
Object.defineProperty(exports, "DefaultEffects", { enumerable: true, get: function () { return DefaultEffects_1.DefaultEffects; } });
var DefaultFontStyles_1 = require("./DefaultFontStyles");
Object.defineProperty(exports, "DefaultFontStyles", { enumerable: true, get: function () { return DefaultFontStyles_1.DefaultFontStyles; } });
Object.defineProperty(exports, "registerDefaultFontFaces", { enumerable: true, get: function () { return DefaultFontStyles_1.registerDefaultFontFaces; } });
var fonts_1 = require("./fonts");
Object.defineProperty(exports, "FontSizes", { enumerable: true, get: function () { return fonts_1.FontSizes; } });
Object.defineProperty(exports, "FontWeights", { enumerable: true, get: function () { return fonts_1.FontWeights; } });
Object.defineProperty(exports, "IconFontSizes", { enumerable: true, get: function () { return fonts_1.IconFontSizes; } });
Object.defineProperty(exports, "createFontStyles", { enumerable: true, get: function () { return fonts_1.createFontStyles; } });
tslib_1.__exportStar(require("./getFocusStyle"), exports);
var hiddenContentStyle_1 = require("./hiddenContentStyle");
Object.defineProperty(exports, "hiddenContentStyle", { enumerable: true, get: function () { return hiddenContentStyle_1.hiddenContentStyle; } });
var PulsingBeaconAnimationStyles_1 = require("./PulsingBeaconAnimationStyles");
Object.defineProperty(exports, "PulsingBeaconAnimationStyles", { enumerable: true, get: function () { return PulsingBeaconAnimationStyles_1.PulsingBeaconAnimationStyles; } });
var getGlobalClassNames_1 = require("./getGlobalClassNames");
Object.defineProperty(exports, "getGlobalClassNames", { enumerable: true, get: function () { return getGlobalClassNames_1.getGlobalClassNames; } });
tslib_1.__exportStar(require("./scheme"), exports);
var theme_1 = require("./theme");
Object.defineProperty(exports, "ThemeSettingName", { enumerable: true, get: function () { return theme_1.ThemeSettingName; } });
Object.defineProperty(exports, "getTheme", { enumerable: true, get: function () { return theme_1.getTheme; } });
Object.defineProperty(exports, "loadTheme", { enumerable: true, get: function () { return theme_1.loadTheme; } });
Object.defineProperty(exports, "createTheme", { enumerable: true, get: function () { return theme_1.createTheme; } });
Object.defineProperty(exports, "registerOnThemeChangeCallback", { enumerable: true, get: function () { return theme_1.registerOnThemeChangeCallback; } });
Object.defineProperty(exports, "removeOnThemeChangeCallback", { enumerable: true, get: function () { return theme_1.removeOnThemeChangeCallback; } });
tslib_1.__exportStar(require("./CommonStyles"), exports);
tslib_1.__exportStar(require("./GeneralStyles"), exports);
tslib_1.__exportStar(require("./getFadedOverflowStyle"), exports);
tslib_1.__exportStar(require("./getPlaceholderStyles"), exports);
tslib_1.__exportStar(require("./zIndexes"), exports);

},{"tslib":"5gvnt","./AnimationStyles":"2oTpc","./DefaultPalette":"2VkQX","./DefaultEffects":"6fu0f","./DefaultFontStyles":"lhwcf","./fonts":"3MvqF","./getFocusStyle":"3ez92","./hiddenContentStyle":"6xP0R","./PulsingBeaconAnimationStyles":"3Paqm","./getGlobalClassNames":"35slE","./scheme":"2Phsm","./theme":"IGepv","./CommonStyles":"4ZMtB","./GeneralStyles":"1eSSU","./getFadedOverflowStyle":"46AWC","./getPlaceholderStyles":"16Zk1","./zIndexes":"6X2Zo"}],"2oTpc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("@fluentui/theme/lib-commonjs/motion/AnimationStyles"), exports);

},{"tslib":"5gvnt","@fluentui/theme/lib-commonjs/motion/AnimationStyles":"HRCXT"}],"HRCXT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationStyles = exports.AnimationVariables = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
/* Register the keyframes */
var EASING_FUNCTION_1 = 'cubic-bezier(.1,.9,.2,1)';
var EASING_FUNCTION_2 = 'cubic-bezier(.1,.25,.75,.9)';
var DURATION_1 = '0.167s';
var DURATION_2 = '0.267s';
var DURATION_3 = '0.367s';
var DURATION_4 = '0.467s';
var FADE_IN = merge_styles_1.keyframes({
    from: { opacity: 0 },
    to: { opacity: 1 },
});
var FADE_OUT = merge_styles_1.keyframes({
    from: { opacity: 1 },
    to: { opacity: 0, visibility: 'hidden' },
});
var SLIDE_RIGHT_IN10 = _createSlideInX(-10);
var SLIDE_RIGHT_IN20 = _createSlideInX(-20);
var SLIDE_RIGHT_IN40 = _createSlideInX(-40);
var SLIDE_RIGHT_IN400 = _createSlideInX(-400);
var SLIDE_LEFT_IN10 = _createSlideInX(10);
var SLIDE_LEFT_IN20 = _createSlideInX(20);
var SLIDE_LEFT_IN40 = _createSlideInX(40);
var SLIDE_LEFT_IN400 = _createSlideInX(400);
var SLIDE_UP_IN10 = _createSlideInY(10);
var SLIDE_UP_IN20 = _createSlideInY(20);
var SLIDE_DOWN_IN10 = _createSlideInY(-10);
var SLIDE_DOWN_IN20 = _createSlideInY(-20);
var SLIDE_RIGHT_OUT10 = _createSlideOutX(10);
var SLIDE_RIGHT_OUT20 = _createSlideOutX(20);
var SLIDE_RIGHT_OUT40 = _createSlideOutX(40);
var SLIDE_RIGHT_OUT400 = _createSlideOutX(400);
var SLIDE_LEFT_OUT10 = _createSlideOutX(-10);
var SLIDE_LEFT_OUT20 = _createSlideOutX(-20);
var SLIDE_LEFT_OUT40 = _createSlideOutX(-40);
var SLIDE_LEFT_OUT400 = _createSlideOutX(-400);
var SLIDE_UP_OUT10 = _createSlideOutY(-10);
var SLIDE_UP_OUT20 = _createSlideOutY(-20);
var SLIDE_DOWN_OUT10 = _createSlideOutY(10);
var SLIDE_DOWN_OUT20 = _createSlideOutY(20);
var SCALE_UP100 = merge_styles_1.keyframes({
    from: { transform: 'scale3d(.98,.98,1)' },
    to: { transform: 'scale3d(1,1,1)' },
});
var SCALE_DOWN98 = merge_styles_1.keyframes({
    from: { transform: 'scale3d(1,1,1)' },
    to: { transform: 'scale3d(.98,.98,1)' },
});
var SCALE_DOWN100 = merge_styles_1.keyframes({
    from: { transform: 'scale3d(1.03,1.03,1)' },
    to: { transform: 'scale3d(1,1,1)' },
});
var SCALE_UP103 = merge_styles_1.keyframes({
    from: { transform: 'scale3d(1,1,1)' },
    to: { transform: 'scale3d(1.03,1.03,1)' },
});
var ROTATE90 = merge_styles_1.keyframes({
    from: { transform: 'rotateZ(0deg)' },
    to: { transform: 'rotateZ(90deg)' },
});
var ROTATE_N90 = merge_styles_1.keyframes({
    from: { transform: 'rotateZ(0deg)' },
    to: { transform: 'rotateZ(-90deg)' },
});
/**
 * Exporting raw duraction values and easing functions to be used in custom animations
 */
exports.AnimationVariables = {
    easeFunction1: EASING_FUNCTION_1,
    easeFunction2: EASING_FUNCTION_2,
    durationValue1: DURATION_1,
    durationValue2: DURATION_2,
    durationValue3: DURATION_3,
    durationValue4: DURATION_4,
};
/**
 * All Fabric standard animations, exposed as json objects referencing predefined
 * keyframes. These objects can be mixed in with other class definitions.
 */
exports.AnimationStyles = {
    slideRightIn10: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN10, DURATION_3, EASING_FUNCTION_1),
    slideRightIn20: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN20, DURATION_3, EASING_FUNCTION_1),
    slideRightIn40: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN40, DURATION_3, EASING_FUNCTION_1),
    slideRightIn400: _createAnimation(FADE_IN + "," + SLIDE_RIGHT_IN400, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn10: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN10, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn20: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN20, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn40: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN40, DURATION_3, EASING_FUNCTION_1),
    slideLeftIn400: _createAnimation(FADE_IN + "," + SLIDE_LEFT_IN400, DURATION_3, EASING_FUNCTION_1),
    slideUpIn10: _createAnimation(FADE_IN + "," + SLIDE_UP_IN10, DURATION_3, EASING_FUNCTION_1),
    slideUpIn20: _createAnimation(FADE_IN + "," + SLIDE_UP_IN20, DURATION_3, EASING_FUNCTION_1),
    slideDownIn10: _createAnimation(FADE_IN + "," + SLIDE_DOWN_IN10, DURATION_3, EASING_FUNCTION_1),
    slideDownIn20: _createAnimation(FADE_IN + "," + SLIDE_DOWN_IN20, DURATION_3, EASING_FUNCTION_1),
    slideRightOut10: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideRightOut20: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT20, DURATION_3, EASING_FUNCTION_1),
    slideRightOut40: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT40, DURATION_3, EASING_FUNCTION_1),
    slideRightOut400: _createAnimation(FADE_OUT + "," + SLIDE_RIGHT_OUT400, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut10: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut20: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT20, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut40: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT40, DURATION_3, EASING_FUNCTION_1),
    slideLeftOut400: _createAnimation(FADE_OUT + "," + SLIDE_LEFT_OUT400, DURATION_3, EASING_FUNCTION_1),
    slideUpOut10: _createAnimation(FADE_OUT + "," + SLIDE_UP_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideUpOut20: _createAnimation(FADE_OUT + "," + SLIDE_UP_OUT20, DURATION_3, EASING_FUNCTION_1),
    slideDownOut10: _createAnimation(FADE_OUT + "," + SLIDE_DOWN_OUT10, DURATION_3, EASING_FUNCTION_1),
    slideDownOut20: _createAnimation(FADE_OUT + "," + SLIDE_DOWN_OUT20, DURATION_3, EASING_FUNCTION_1),
    scaleUpIn100: _createAnimation(FADE_IN + "," + SCALE_UP100, DURATION_3, EASING_FUNCTION_1),
    scaleDownIn100: _createAnimation(FADE_IN + "," + SCALE_DOWN100, DURATION_3, EASING_FUNCTION_1),
    scaleUpOut103: _createAnimation(FADE_OUT + "," + SCALE_UP103, DURATION_1, EASING_FUNCTION_2),
    scaleDownOut98: _createAnimation(FADE_OUT + "," + SCALE_DOWN98, DURATION_1, EASING_FUNCTION_2),
    fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),
    fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),
    fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),
    fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),
    fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),
    fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),
    fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),
    fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),
    rotate90deg: _createAnimation(ROTATE90, '0.1s', EASING_FUNCTION_2),
    rotateN90deg: _createAnimation(ROTATE_N90, '0.1s', EASING_FUNCTION_2),
};
function _createAnimation(animationName, animationDuration, animationTimingFunction) {
    return {
        animationName: animationName,
        animationDuration: animationDuration,
        animationTimingFunction: animationTimingFunction,
        animationFillMode: 'both',
    };
}
function _createSlideInX(fromX) {
    return merge_styles_1.keyframes({
        from: { transform: "translate3d(" + fromX + "px,0,0)", pointerEvents: 'none' },
        to: { transform: "translate3d(0,0,0)", pointerEvents: 'auto' },
    });
}
function _createSlideInY(fromY) {
    return merge_styles_1.keyframes({
        from: { transform: "translate3d(0," + fromY + "px,0)", pointerEvents: 'none' },
        to: { transform: "translate3d(0,0,0)", pointerEvents: 'auto' },
    });
}
function _createSlideOutX(toX) {
    return merge_styles_1.keyframes({
        from: { transform: "translate3d(0,0,0)" },
        to: { transform: "translate3d(" + toX + "px,0,0)" },
    });
}
function _createSlideOutY(toY) {
    return merge_styles_1.keyframes({
        from: { transform: "translate3d(0,0,0)" },
        to: { transform: "translate3d(0," + toY + "px,0)" },
    });
}

},{"@fluentui/merge-styles":"366N8"}],"2VkQX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("@fluentui/theme/lib-commonjs/colors/DefaultPalette"), exports);

},{"tslib":"5gvnt","@fluentui/theme/lib-commonjs/colors/DefaultPalette":"3K39O"}],"3K39O":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPalette = void 0;
// When adding or removing a color, make sure you keep this consistent with IColorClassNames
// by adding the color variants.
exports.DefaultPalette = {
    themeDarker: '#004578',
    themeDark: '#005a9e',
    themeDarkAlt: '#106ebe',
    themePrimary: '#0078d4',
    themeSecondary: '#2b88d8',
    themeTertiary: '#71afe5',
    themeLight: '#c7e0f4',
    themeLighter: '#deecf9',
    themeLighterAlt: '#eff6fc',
    black: '#000000',
    blackTranslucent40: 'rgba(0,0,0,.4)',
    neutralDark: '#201f1e',
    neutralPrimary: '#323130',
    neutralPrimaryAlt: '#3b3a39',
    neutralSecondary: '#605e5c',
    neutralSecondaryAlt: '#8a8886',
    neutralTertiary: '#a19f9d',
    neutralTertiaryAlt: '#c8c6c4',
    neutralQuaternary: '#d2d0ce',
    neutralQuaternaryAlt: '#e1dfdd',
    neutralLight: '#edebe9',
    neutralLighter: '#f3f2f1',
    neutralLighterAlt: '#faf9f8',
    accent: '#0078d4',
    white: '#ffffff',
    whiteTranslucent40: 'rgba(255,255,255,.4)',
    yellowDark: '#d29200',
    yellow: '#ffb900',
    yellowLight: '#fff100',
    orange: '#d83b01',
    orangeLight: '#ea4300',
    orangeLighter: '#ff8c00',
    redDark: '#a4262c',
    red: '#e81123',
    magentaDark: '#5c005c',
    magenta: '#b4009e',
    magentaLight: '#e3008c',
    purpleDark: '#32145a',
    purple: '#5c2d91',
    purpleLight: '#b4a0ff',
    blueDark: '#002050',
    blueMid: '#00188f',
    blue: '#0078d4',
    blueLight: '#00bcf2',
    tealDark: '#004b50',
    teal: '#008272',
    tealLight: '#00b294',
    greenDark: '#004b1c',
    green: '#107c10',
    greenLight: '#bad80a',
};

},{}],"6fu0f":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("@fluentui/theme/lib-commonjs/effects/DefaultEffects"), exports);

},{"tslib":"5gvnt","@fluentui/theme/lib-commonjs/effects/DefaultEffects":"40L4W"}],"40L4W":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultEffects = void 0;
var FluentDepths_1 = require("./FluentDepths");
exports.DefaultEffects = {
    elevation4: FluentDepths_1.Depths.depth4,
    elevation8: FluentDepths_1.Depths.depth8,
    elevation16: FluentDepths_1.Depths.depth16,
    elevation64: FluentDepths_1.Depths.depth64,
    roundedCorner2: '2px',
    roundedCorner4: '4px',
    roundedCorner6: '6px',
};

},{"./FluentDepths":"7yvPz"}],"7yvPz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Depths = void 0;
var Depths;
(function (Depths) {
    Depths.depth0 = '0 0 0 0 transparent';
    Depths.depth4 = '0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)';
    Depths.depth8 = '0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)';
    Depths.depth16 = '0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)';
    Depths.depth64 = '0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)';
})(Depths = exports.Depths || (exports.Depths = {}));

},{}],"lhwcf":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("@fluentui/theme/lib-commonjs/fonts/DefaultFontStyles"), exports);

},{"tslib":"5gvnt","@fluentui/theme/lib-commonjs/fonts/DefaultFontStyles":"4jh1n"}],"4jh1n":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDefaultFontFaces = exports.DefaultFontStyles = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
var FluentFonts_1 = require("./FluentFonts");
var createFontStyles_1 = require("./createFontStyles");
var utilities_1 = require("@fluentui/utilities");
// Default urls.
var DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';
// Standard font styling.
exports.DefaultFontStyles = createFontStyles_1.createFontStyles(utilities_1.getLanguage());
function _registerFontFace(fontFamily, url, fontWeight, localFontName) {
    fontFamily = "'" + fontFamily + "'";
    var localFontSrc = localFontName !== undefined ? "local('" + localFontName + "')," : '';
    merge_styles_1.fontFace({
        fontFamily: fontFamily,
        src: localFontSrc + ("url('" + url + ".woff2') format('woff2'),") + ("url('" + url + ".woff') format('woff')"),
        fontWeight: fontWeight,
        fontStyle: 'normal',
        fontDisplay: 'swap',
    });
}
function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {
    if (cdnFontName === void 0) { cdnFontName = 'segoeui'; }
    var urlBase = baseUrl + "/" + cdnFolder + "/" + cdnFontName;
    _registerFontFace(fontFamily, urlBase + '-light', FluentFonts_1.FontWeights.light, localFontName && localFontName + ' Light');
    _registerFontFace(fontFamily, urlBase + '-semilight', FluentFonts_1.FontWeights.semilight, localFontName && localFontName + ' SemiLight');
    _registerFontFace(fontFamily, urlBase + '-regular', FluentFonts_1.FontWeights.regular, localFontName);
    _registerFontFace(fontFamily, urlBase + '-semibold', FluentFonts_1.FontWeights.semibold, localFontName && localFontName + ' SemiBold');
    _registerFontFace(fontFamily, urlBase + '-bold', FluentFonts_1.FontWeights.bold, localFontName && localFontName + ' Bold');
}
function registerDefaultFontFaces(baseUrl) {
    if (baseUrl) {
        var fontUrl = baseUrl + "/fonts";
        // Produce @font-face definitions for all supported web fonts.
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Thai, 'leelawadeeui-thai', 'leelawadeeui');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Arabic, 'segoeui-arabic');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Cyrillic, 'segoeui-cyrillic');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.EastEuropean, 'segoeui-easteuropean');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Greek, 'segoeui-greek');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Hebrew, 'segoeui-hebrew');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Vietnamese, 'segoeui-vietnamese');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.WestEuropean, 'segoeui-westeuropean', 'segoeui', 'Segoe UI');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontFamilies.Selawik, 'selawik', 'selawik');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Armenian, 'segoeui-armenian');
        _registerFontFaceSet(fontUrl, FluentFonts_1.LocalizedFontNames.Georgian, 'segoeui-georgian');
        // Leelawadee UI (Thai) does not have a 'light' weight, so we override
        // the font-face generated above to use the 'semilight' weight instead.
        _registerFontFace('Leelawadee UI Web', fontUrl + "/leelawadeeui-thai/leelawadeeui-semilight", FluentFonts_1.FontWeights.light);
        // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override
        // the font-face generated above to use the 'bold' weight instead.
        _registerFontFace('Leelawadee UI Web', fontUrl + "/leelawadeeui-thai/leelawadeeui-bold", FluentFonts_1.FontWeights.semibold);
    }
}
exports.registerDefaultFontFaces = registerDefaultFontFaces;
/**
 * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.
 */
function _getFontBaseUrl() {
    var _a, _b;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var fabricConfig = (_a = utilities_1.getWindow()) === null || _a === void 0 ? void 0 : _a.FabricConfig;
    return (_b = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b !== void 0 ? _b : DefaultBaseUrl;
}
/**
 * Register the font faces.
 */
registerDefaultFontFaces(_getFontBaseUrl());

},{"@fluentui/merge-styles":"366N8","./FluentFonts":"2R9u7","./createFontStyles":"1ATGh","@fluentui/utilities":"2AuOe"}],"2R9u7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconFontSizes = exports.FontWeights = exports.FontSizes = exports.LocalizedFontFamilies = exports.LocalizedFontNames = void 0;
// Font face names to be registered.
var LocalizedFontNames;
(function (LocalizedFontNames) {
    LocalizedFontNames.Arabic = 'Segoe UI Web (Arabic)';
    LocalizedFontNames.Cyrillic = 'Segoe UI Web (Cyrillic)';
    LocalizedFontNames.EastEuropean = 'Segoe UI Web (East European)';
    LocalizedFontNames.Greek = 'Segoe UI Web (Greek)';
    LocalizedFontNames.Hebrew = 'Segoe UI Web (Hebrew)';
    LocalizedFontNames.Thai = 'Leelawadee UI Web';
    LocalizedFontNames.Vietnamese = 'Segoe UI Web (Vietnamese)';
    LocalizedFontNames.WestEuropean = 'Segoe UI Web (West European)';
    LocalizedFontNames.Selawik = 'Selawik Web';
    LocalizedFontNames.Armenian = 'Segoe UI Web (Armenian)';
    LocalizedFontNames.Georgian = 'Segoe UI Web (Georgian)';
})(LocalizedFontNames = exports.LocalizedFontNames || (exports.LocalizedFontNames = {}));
// Font families with fallbacks, for the general regions.
var LocalizedFontFamilies;
(function (LocalizedFontFamilies) {
    LocalizedFontFamilies.Arabic = "'" + LocalizedFontNames.Arabic + "'";
    LocalizedFontFamilies.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
    LocalizedFontFamilies.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
    LocalizedFontFamilies.Cyrillic = "'" + LocalizedFontNames.Cyrillic + "'";
    LocalizedFontFamilies.EastEuropean = "'" + LocalizedFontNames.EastEuropean + "'";
    LocalizedFontFamilies.Greek = "'" + LocalizedFontNames.Greek + "'";
    LocalizedFontFamilies.Hebrew = "'" + LocalizedFontNames.Hebrew + "'";
    LocalizedFontFamilies.Hindi = "'Nirmala UI'";
    LocalizedFontFamilies.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
    LocalizedFontFamilies.Korean = "'Malgun Gothic', Gulim";
    LocalizedFontFamilies.Selawik = "'" + LocalizedFontNames.Selawik + "'";
    LocalizedFontFamilies.Thai = "'Leelawadee UI Web', 'Kmer UI'";
    LocalizedFontFamilies.Vietnamese = "'" + LocalizedFontNames.Vietnamese + "'";
    LocalizedFontFamilies.WestEuropean = "'" + LocalizedFontNames.WestEuropean + "'";
    LocalizedFontFamilies.Armenian = "'" + LocalizedFontNames.Armenian + "'";
    LocalizedFontFamilies.Georgian = "'" + LocalizedFontNames.Georgian + "'";
})(LocalizedFontFamilies = exports.LocalizedFontFamilies || (exports.LocalizedFontFamilies = {}));
// Standard font sizes.
var FontSizes;
(function (FontSizes) {
    FontSizes.size10 = '10px';
    FontSizes.size12 = '12px';
    FontSizes.size14 = '14px';
    FontSizes.size16 = '16px';
    FontSizes.size18 = '18px';
    FontSizes.size20 = '20px';
    FontSizes.size24 = '24px';
    FontSizes.size28 = '28px';
    FontSizes.size32 = '32px';
    FontSizes.size42 = '42px';
    FontSizes.size68 = '68px';
    FontSizes.mini = '10px';
    FontSizes.xSmall = '10px';
    FontSizes.small = '12px';
    FontSizes.smallPlus = '12px';
    FontSizes.medium = '14px';
    FontSizes.mediumPlus = '16px';
    FontSizes.icon = '16px';
    FontSizes.large = '18px';
    FontSizes.xLarge = '20px';
    FontSizes.xLargePlus = '24px';
    FontSizes.xxLarge = '28px';
    FontSizes.xxLargePlus = '32px';
    FontSizes.superLarge = '42px';
    FontSizes.mega = '68px';
})(FontSizes = exports.FontSizes || (exports.FontSizes = {}));
// Standard font weights.
var FontWeights;
(function (FontWeights) {
    FontWeights.light = 100;
    FontWeights.semilight = 300;
    FontWeights.regular = 400;
    FontWeights.semibold = 600;
    FontWeights.bold = 700;
})(FontWeights = exports.FontWeights || (exports.FontWeights = {}));
// Standard Icon Sizes.
var IconFontSizes;
(function (IconFontSizes) {
    IconFontSizes.xSmall = '10px';
    IconFontSizes.small = '12px';
    IconFontSizes.medium = '16px';
    IconFontSizes.large = '20px';
})(IconFontSizes = exports.IconFontSizes || (exports.IconFontSizes = {}));

},{}],"1ATGh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFontStyles = void 0;
var FluentFonts_1 = require("./FluentFonts");
// Fallback fonts, if specified system or web fonts are unavailable.
var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
// By default, we favor system fonts for the default.
// All localized fonts use a web font and never use the system font.
var defaultFontFamily = "'Segoe UI', '" + FluentFonts_1.LocalizedFontNames.WestEuropean + "'";
// Mapping of language prefix to to font family.
var LanguageToFontMap = {
    ar: FluentFonts_1.LocalizedFontFamilies.Arabic,
    bg: FluentFonts_1.LocalizedFontFamilies.Cyrillic,
    cs: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    el: FluentFonts_1.LocalizedFontFamilies.Greek,
    et: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    he: FluentFonts_1.LocalizedFontFamilies.Hebrew,
    hi: FluentFonts_1.LocalizedFontFamilies.Hindi,
    hr: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    hu: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    ja: FluentFonts_1.LocalizedFontFamilies.Japanese,
    kk: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    ko: FluentFonts_1.LocalizedFontFamilies.Korean,
    lt: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    lv: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    pl: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    ru: FluentFonts_1.LocalizedFontFamilies.Cyrillic,
    sk: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    'sr-latn': FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    th: FluentFonts_1.LocalizedFontFamilies.Thai,
    tr: FluentFonts_1.LocalizedFontFamilies.EastEuropean,
    uk: FluentFonts_1.LocalizedFontFamilies.Cyrillic,
    vi: FluentFonts_1.LocalizedFontFamilies.Vietnamese,
    'zh-hans': FluentFonts_1.LocalizedFontFamilies.ChineseSimplified,
    'zh-hant': FluentFonts_1.LocalizedFontFamilies.ChineseTraditional,
    hy: FluentFonts_1.LocalizedFontFamilies.Armenian,
    ka: FluentFonts_1.LocalizedFontFamilies.Georgian,
};
function _fontFamilyWithFallbacks(fontFamily) {
    return fontFamily + ", " + FontFamilyFallbacks;
}
/**
 * If there is a localized font for this language, return that.
 * Returns undefined if there is no localized font for that language.
 */
function _getLocalizedFontFamily(language) {
    for (var lang in LanguageToFontMap) {
        if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return LanguageToFontMap[lang];
        }
    }
    return defaultFontFamily;
}
function _createFont(size, weight, fontFamily) {
    return {
        fontFamily: fontFamily,
        MozOsxFontSmoothing: 'grayscale',
        WebkitFontSmoothing: 'antialiased',
        fontSize: size,
        fontWeight: weight,
    };
}
function createFontStyles(localeCode) {
    var localizedFont = _getLocalizedFontFamily(localeCode);
    var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
    var fontStyles = {
        tiny: _createFont(FluentFonts_1.FontSizes.mini, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        xSmall: _createFont(FluentFonts_1.FontSizes.xSmall, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        small: _createFont(FluentFonts_1.FontSizes.small, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        smallPlus: _createFont(FluentFonts_1.FontSizes.smallPlus, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        medium: _createFont(FluentFonts_1.FontSizes.medium, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        mediumPlus: _createFont(FluentFonts_1.FontSizes.mediumPlus, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        large: _createFont(FluentFonts_1.FontSizes.large, FluentFonts_1.FontWeights.regular, fontFamilyWithFallback),
        xLarge: _createFont(FluentFonts_1.FontSizes.xLarge, FluentFonts_1.FontWeights.semibold, fontFamilyWithFallback),
        xLargePlus: _createFont(FluentFonts_1.FontSizes.xLargePlus, FluentFonts_1.FontWeights.semibold, fontFamilyWithFallback),
        xxLarge: _createFont(FluentFonts_1.FontSizes.xxLarge, FluentFonts_1.FontWeights.semibold, fontFamilyWithFallback),
        xxLargePlus: _createFont(FluentFonts_1.FontSizes.xxLargePlus, FluentFonts_1.FontWeights.semibold, fontFamilyWithFallback),
        superLarge: _createFont(FluentFonts_1.FontSizes.superLarge, FluentFonts_1.FontWeights.semibold, fontFamilyWithFallback),
        mega: _createFont(FluentFonts_1.FontSizes.mega, FluentFonts_1.FontWeights.semibold, fontFamilyWithFallback),
    };
    return fontStyles;
}
exports.createFontStyles = createFontStyles;

},{"./FluentFonts":"2R9u7"}],"3MvqF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFontStyles = exports.IconFontSizes = exports.FontWeights = exports.FontSizes = exports.LocalizedFontFamilies = exports.LocalizedFontNames = void 0;
var index_1 = require("@fluentui/theme/lib-commonjs/fonts/index");
Object.defineProperty(exports, "LocalizedFontNames", { enumerable: true, get: function () { return index_1.LocalizedFontNames; } });
Object.defineProperty(exports, "LocalizedFontFamilies", { enumerable: true, get: function () { return index_1.LocalizedFontFamilies; } });
Object.defineProperty(exports, "FontSizes", { enumerable: true, get: function () { return index_1.FontSizes; } });
Object.defineProperty(exports, "FontWeights", { enumerable: true, get: function () { return index_1.FontWeights; } });
Object.defineProperty(exports, "IconFontSizes", { enumerable: true, get: function () { return index_1.IconFontSizes; } });
Object.defineProperty(exports, "createFontStyles", { enumerable: true, get: function () { return index_1.createFontStyles; } });

},{"@fluentui/theme/lib-commonjs/fonts/index":"541Up"}],"541Up":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDefaultFontFaces = exports.DefaultFontStyles = exports.createFontStyles = void 0;
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./FluentFonts"), exports);
var createFontStyles_1 = require("./createFontStyles");
Object.defineProperty(exports, "createFontStyles", { enumerable: true, get: function () { return createFontStyles_1.createFontStyles; } });
var DefaultFontStyles_1 = require("./DefaultFontStyles");
Object.defineProperty(exports, "DefaultFontStyles", { enumerable: true, get: function () { return DefaultFontStyles_1.DefaultFontStyles; } });
Object.defineProperty(exports, "registerDefaultFontFaces", { enumerable: true, get: function () { return DefaultFontStyles_1.registerDefaultFontFaces; } });

},{"tslib":"3wxVE","./FluentFonts":"2R9u7","./createFontStyles":"1ATGh","./DefaultFontStyles":"4jh1n"}],"3wxVE":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"3ez92":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInputFocusStyle = exports.getFocusOutlineStyle = exports.focusClear = exports.getFocusStyle = void 0;
var CommonStyles_1 = require("./CommonStyles");
var utilities_1 = require("@fluentui/utilities");
var zIndexes_1 = require("./zIndexes");
function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly) {
    if (typeof insetOrOptions === 'number' || !insetOrOptions) {
        return _getFocusStyleInternal(theme, {
            inset: insetOrOptions,
            position: position,
            highContrastStyle: highContrastStyle,
            borderColor: borderColor,
            outlineColor: outlineColor,
            isFocusedOnly: isFocusedOnly,
        });
    }
    else {
        return _getFocusStyleInternal(theme, insetOrOptions);
    }
}
exports.getFocusStyle = getFocusStyle;
function _getFocusStyleInternal(theme, options) {
    var _a, _b;
    if (options === void 0) { options = {}; }
    var _c = options.inset, inset = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e = options.position, position = _e === void 0 ? 'relative' : _e, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h;
    return {
        // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
        outline: 'transparent',
        // Requirement because pseudo-element is absolutely positioned.
        position: position,
        selectors: (_a = {
                // Clear the focus border in Firefox.
                // Reference: http://stackoverflow.com/a/199319/1436671
                '::-moz-focus-inner': {
                    border: '0',
                }
            },
            // When the element that uses this mixin is in a :focus state, add a pseudo-element to
            // create a border.
            _a["." + utilities_1.IsFocusVisibleClassName + " &" + (isFocusedOnly ? ':focus' : '') + ":after"] = {
                content: '""',
                position: 'absolute',
                left: inset + 1,
                top: inset + 1,
                bottom: inset + 1,
                right: inset + 1,
                border: width + "px solid " + borderColor,
                outline: width + "px solid " + outlineColor,
                zIndex: zIndexes_1.ZIndexes.FocusStyle,
                selectors: (_b = {},
                    _b[CommonStyles_1.HighContrastSelector] = highContrastStyle,
                    _b),
            },
            _a),
    };
}
/**
 * Generates style to clear browser specific focus styles.
 */
function focusClear() {
    return {
        selectors: {
            '&::-moz-focus-inner': {
                // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
                border: 0,
            },
            '&': {
                // Clear browser specific focus styles and use transparent as placeholder for focus style
                outline: 'transparent',
            },
        },
    };
}
exports.focusClear = focusClear;
/**
 * Generates a style which can be used to set a border on focus.
 *
 * @param theme - The theme object to use.
 * @param inset - The number of pixels to inset the border (default 0)
 * @param width - The border width in pixels (default 1)
 * @param color - Color of the outline (default `theme.palette.neutralSecondary`)
 * @returns The style object.
 */
function getFocusOutlineStyle(theme, inset, width, color) {
    var _a;
    if (inset === void 0) { inset = 0; }
    if (width === void 0) { width = 1; }
    return {
        selectors: (_a = {},
            _a[":global(" + utilities_1.IsFocusVisibleClassName + ") &:focus"] = {
                outline: width + " solid " + (color || theme.palette.neutralSecondary),
                outlineOffset: -inset + "px",
            },
            _a),
    };
}
exports.getFocusOutlineStyle = getFocusOutlineStyle;
/**
 * Generates text input border styles on focus.
 *
 * @param borderColor - Color of the border.
 * @param borderRadius - Radius of the border.
 * @param borderType - Type of the border.
 * @param borderPosition - Position of the border relative to the input element (default to -1
 * as it's the most common border width of the input element)
 * @returns The style object.
 */
var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {
    var _a, _b, _c;
    if (borderType === void 0) { borderType = 'border'; }
    if (borderPosition === void 0) { borderPosition = -1; }
    var isBorderBottom = borderType === 'borderBottom';
    return {
        borderColor: borderColor,
        selectors: {
            ':after': (_a = {
                    pointerEvents: 'none',
                    content: "''",
                    position: 'absolute',
                    left: isBorderBottom ? 0 : borderPosition,
                    top: borderPosition,
                    bottom: borderPosition,
                    right: isBorderBottom ? 0 : borderPosition
                },
                _a[borderType] = "2px solid " + borderColor,
                _a.borderRadius = borderRadius,
                _a.width = borderType === 'borderBottom' ? '100%' : undefined,
                _a.selectors = (_b = {},
                    _b[CommonStyles_1.HighContrastSelector] = (_c = {},
                        _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight',
                        _c),
                    _b),
                _a),
        },
    };
};
exports.getInputFocusStyle = getInputFocusStyle;

},{"./CommonStyles":"4ZMtB","@fluentui/utilities":"2AuOe","./zIndexes":"6X2Zo"}],"4ZMtB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEdgeChromiumNoHighContrastAdjustSelector = exports.getHighContrastNoAdjustStyle = exports.getScreenSelector = exports.ScreenWidthMinUhfMobile = exports.ScreenWidthMaxXXLarge = exports.ScreenWidthMaxXLarge = exports.ScreenWidthMaxLarge = exports.ScreenWidthMaxMedium = exports.ScreenWidthMaxSmall = exports.ScreenWidthMinXXXLarge = exports.ScreenWidthMinXXLarge = exports.ScreenWidthMinXLarge = exports.ScreenWidthMinLarge = exports.ScreenWidthMinMedium = exports.ScreenWidthMinSmall = exports.EdgeChromiumHighContrastSelector = exports.HighContrastSelectorBlack = exports.HighContrastSelectorWhite = exports.HighContrastSelector = void 0;
exports.HighContrastSelector = '@media screen and (-ms-high-contrast: active), (forced-colors: active)';
exports.HighContrastSelectorWhite = '@media screen and (-ms-high-contrast: black-on-white), (forced-colors: black-on-white)';
exports.HighContrastSelectorBlack = '@media screen and (-ms-high-contrast: white-on-black), (forced-colors: white-on-black)';
exports.EdgeChromiumHighContrastSelector = '@media screen and (forced-colors: active)';
exports.ScreenWidthMinSmall = 320;
exports.ScreenWidthMinMedium = 480;
exports.ScreenWidthMinLarge = 640;
exports.ScreenWidthMinXLarge = 1024;
exports.ScreenWidthMinXXLarge = 1366;
exports.ScreenWidthMinXXXLarge = 1920;
exports.ScreenWidthMaxSmall = exports.ScreenWidthMinMedium - 1;
exports.ScreenWidthMaxMedium = exports.ScreenWidthMinLarge - 1;
exports.ScreenWidthMaxLarge = exports.ScreenWidthMinXLarge - 1;
exports.ScreenWidthMaxXLarge = exports.ScreenWidthMinXXLarge - 1;
exports.ScreenWidthMaxXXLarge = exports.ScreenWidthMinXXXLarge - 1;
exports.ScreenWidthMinUhfMobile = 768;
function getScreenSelector(min, max) {
    var minSelector = typeof min === 'number' ? " and (min-width: " + min + "px)" : '';
    var maxSelector = typeof max === 'number' ? " and (max-width: " + max + "px)" : '';
    return "@media only screen" + minSelector + maxSelector;
}
exports.getScreenSelector = getScreenSelector;
/**
 * The style which turns off high contrast adjustment in browsers.
 */
function getHighContrastNoAdjustStyle() {
    return {
        forcedColorAdjust: 'none',
        MsHighContrastAdjust: 'none',
    };
}
exports.getHighContrastNoAdjustStyle = getHighContrastNoAdjustStyle;
/**
 * The style which turns off high contrast adjustment in (only) Edge Chromium browser.
 *  @deprecated Use `getHighContrastNoAdjustStyle`
 */
function getEdgeChromiumNoHighContrastAdjustSelector() {
    var _a;
    return _a = {},
        _a[exports.EdgeChromiumHighContrastSelector] = {
            forcedColorAdjust: 'none',
        },
        _a;
}
exports.getEdgeChromiumNoHighContrastAdjustSelector = getEdgeChromiumNoHighContrastAdjustSelector;

},{}],"6X2Zo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZIndexes = void 0;
var ZIndexes;
(function (ZIndexes) {
    ZIndexes.Nav = 1;
    /**
     * @deprecated Do not use
     */
    ZIndexes.ScrollablePane = 1;
    ZIndexes.FocusStyle = 1;
    ZIndexes.Coachmark = 1000;
    ZIndexes.Layer = 1000000;
    ZIndexes.KeytipLayer = 1000001;
})(ZIndexes = exports.ZIndexes || (exports.ZIndexes = {}));

},{}],"6xP0R":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hiddenContentStyle = void 0;
exports.hiddenContentStyle = {
    position: 'absolute',
    width: 1,
    height: 1,
    margin: -1,
    padding: 0,
    border: 0,
    overflow: 'hidden',
};

},{}],"3Paqm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PulsingBeaconAnimationStyles = void 0;
var tslib_1 = require("tslib");
var merge_styles_1 = require("@fluentui/merge-styles");
var DEFAULT_DURATION = '14s';
var DEFAULT_DELAY = '2s';
var DEFAULT_ITERATION_COUNT = '1';
function _continuousPulseStepOne(beaconColorOne, innerDimension) {
    return {
        borderColor: beaconColorOne,
        borderWidth: '0px',
        width: innerDimension,
        height: innerDimension,
    };
}
function _continuousPulseStepTwo(borderWidth) {
    return {
        opacity: 1,
        borderWidth: borderWidth,
    };
}
function _continuousPulseStepThree() {
    return {
        opacity: 1,
    };
}
function _continuousPulseStepFour(beaconColorTwo, outerDimension) {
    return {
        borderWidth: '0',
        width: outerDimension,
        height: outerDimension,
        opacity: 0,
        borderColor: beaconColorTwo,
    };
}
function _continuousPulseStepFive(beaconColorOne, innerDimension) {
    return tslib_1.__assign(tslib_1.__assign({}, _continuousPulseStepOne(beaconColorOne, innerDimension)), {
        opacity: 0,
    });
}
function _continuousPulseAnimationDouble(beaconColorOne, beaconColorTwo, innerDimension, outerDimension, borderWidth) {
    return merge_styles_1.keyframes({
        '0%': _continuousPulseStepOne(beaconColorOne, innerDimension),
        '1.42%': _continuousPulseStepTwo(borderWidth),
        '3.57%': _continuousPulseStepThree(),
        '7.14%': _continuousPulseStepFour(beaconColorTwo, outerDimension),
        '8%': _continuousPulseStepFive(beaconColorOne, innerDimension),
        '29.99%': _continuousPulseStepFive(beaconColorOne, innerDimension),
        '30%': _continuousPulseStepOne(beaconColorOne, innerDimension),
        '31.42%': _continuousPulseStepTwo(borderWidth),
        '33.57%': _continuousPulseStepThree(),
        '37.14%': _continuousPulseStepFour(beaconColorTwo, outerDimension),
        '38%': _continuousPulseStepFive(beaconColorOne, innerDimension),
        '79.42%': _continuousPulseStepFive(beaconColorOne, innerDimension),
        '79.43': _continuousPulseStepOne(beaconColorOne, innerDimension),
        '81.85': _continuousPulseStepTwo(borderWidth),
        '83.42': _continuousPulseStepThree(),
        '87%': _continuousPulseStepFour(beaconColorTwo, outerDimension),
        '100%': {},
    });
}
function _continuousPulseAnimationSingle(beaconColorOne, beaconColorTwo, innerDimension, outerDimension, borderWidth) {
    return merge_styles_1.keyframes({
        '0%': _continuousPulseStepOne(beaconColorOne, innerDimension),
        '14.2%': _continuousPulseStepTwo(borderWidth),
        '35.7%': _continuousPulseStepThree(),
        '71.4%': _continuousPulseStepFour(beaconColorTwo, outerDimension),
        '100%': {},
    });
}
function _createDefaultAnimation(animationName, delayLength) {
    return {
        animationName: animationName,
        animationIterationCount: DEFAULT_ITERATION_COUNT,
        animationDuration: DEFAULT_DURATION,
        animationDelay: delayLength || DEFAULT_DELAY,
    };
}
exports.PulsingBeaconAnimationStyles = {
    continuousPulseAnimationDouble: _continuousPulseAnimationDouble,
    continuousPulseAnimationSingle: _continuousPulseAnimationSingle,
    createDefaultAnimation: _createDefaultAnimation,
};

},{"tslib":"5gvnt","@fluentui/merge-styles":"366N8"}],"35slE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalClassNames = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
var utilities_1 = require("@fluentui/utilities");
/**
 * Internal memoized function which simply takes in the class map and the
 * disable boolean. These immutable values can be memoized.
 */
var _getGlobalClassNames = utilities_1.memoizeFunction(function (classNames, disableGlobalClassNames) {
    var styleSheet = merge_styles_1.Stylesheet.getInstance();
    if (disableGlobalClassNames) {
        // disable global classnames
        return Object.keys(classNames).reduce(function (acc, className) {
            acc[className] = styleSheet.getClassName(classNames[className]);
            return acc;
        }, {});
    }
    // use global classnames
    return classNames;
});
/**
 * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`
 * Note that calls to this function are memoized.
 *
 * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in
 * the same instance on each call to benefit from memoization.
 * @param theme - The theme to check the flag on
 * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.
 */
function getGlobalClassNames(classNames, theme, disableGlobalClassNames) {
    return _getGlobalClassNames(classNames, disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames);
}
exports.getGlobalClassNames = getGlobalClassNames;

},{"@fluentui/merge-styles":"366N8","@fluentui/utilities":"2AuOe"}],"2Phsm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThemedContext = void 0;
var utilities_1 = require("@fluentui/utilities");
/**
 * @internal
 * This function is still in experimental phase in support of Foundation experimental development.
 * Its API signature and existence are subject to change.
 *
 * Modify context to activate the specified scheme or theme. For schemes, look in context (if available) and fall back
 * to global Customizations. If both scheme and theme are specified, scheme will be looked up in theme. In this case,
 * scheme must be present in theme arg, otherwise new context will default to theme arg (there is no fallback to
 * settings to look up scheme.)
 *
 * @param context - Context in which to get schemed customizations.
 * @param scheme - Scheme to get customizations for from theme arg (if supplied) OR from context and global settings.
 * @param theme - Theme to merge into context.
 * @returns modified schemed context if scheme is valid and not already applied, unmodified context otherwise.
 */
function getThemedContext(context, scheme, theme) {
    var newContext = context;
    var newSettings;
    // Only fall back to context and customizations when theme arg is not provided.
    var schemeSource = theme || utilities_1.Customizations.getSettings(['theme'], undefined, context.customizations).theme;
    if (theme) {
        newSettings = { theme: theme };
    }
    var schemeTheme = scheme && schemeSource && schemeSource.schemes && schemeSource.schemes[scheme];
    // These first two checks are logically redundant but TS doesn't infer schemeSource.schemes is defined
    // when schemeTheme is defined.
    if (schemeSource && schemeTheme && schemeSource !== schemeTheme) {
        newSettings = { theme: schemeTheme };
        newSettings.theme.schemes = schemeSource.schemes;
    }
    if (newSettings) {
        newContext = {
            customizations: {
                settings: utilities_1.mergeSettings(context.customizations.settings, newSettings),
                scopedSettings: context.customizations.scopedSettings,
            },
        };
    }
    return newContext;
}
exports.getThemedContext = getThemedContext;

},{"@fluentui/utilities":"2AuOe"}],"IGepv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTheme = exports.removeOnThemeChangeCallback = exports.registerOnThemeChangeCallback = exports.getTheme = exports.initializeThemeInCustomizations = exports.ThemeSettingName = exports.createTheme = void 0;
var tslib_1 = require("tslib");
var utilities_1 = require("@fluentui/utilities");
var load_themed_styles_1 = require("@microsoft/load-themed-styles");
var createTheme_1 = require("@fluentui/theme/lib-commonjs/createTheme");
var createTheme_2 = require("@fluentui/theme/lib-commonjs/createTheme");
Object.defineProperty(exports, "createTheme", { enumerable: true, get: function () { return createTheme_2.createTheme; } });
var _theme = createTheme_1.createTheme({});
var _onThemeChangeCallbacks = [];
exports.ThemeSettingName = 'theme';
function initializeThemeInCustomizations() {
    var _a;
    var _b;
    if (!utilities_1.Customizations.getSettings([exports.ThemeSettingName]).theme) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var win = utilities_1.getWindow();
        if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.theme) {
            _theme = createTheme_1.createTheme(win.FabricConfig.theme);
        }
        // Set the default theme.
        utilities_1.Customizations.applySettings((_a = {}, _a[exports.ThemeSettingName] = _theme, _a));
    }
}
exports.initializeThemeInCustomizations = initializeThemeInCustomizations;
initializeThemeInCustomizations();
/**
 * Gets the theme object
 * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
 */
function getTheme(depComments) {
    if (depComments === void 0) { depComments = false; }
    if (depComments === true) {
        _theme = createTheme_1.createTheme({}, depComments);
    }
    return _theme;
}
exports.getTheme = getTheme;
/**
 * Registers a callback that gets called whenever the theme changes.
 * This should only be used when the component cannot automatically get theme changes through its state.
 * This will not register duplicate callbacks.
 */
function registerOnThemeChangeCallback(callback) {
    if (_onThemeChangeCallbacks.indexOf(callback) === -1) {
        _onThemeChangeCallbacks.push(callback);
    }
}
exports.registerOnThemeChangeCallback = registerOnThemeChangeCallback;
/**
 * See registerOnThemeChangeCallback().
 * Removes previously registered callbacks.
 */
function removeOnThemeChangeCallback(callback) {
    var i = _onThemeChangeCallbacks.indexOf(callback);
    if (i === -1) {
        return;
    }
    _onThemeChangeCallbacks.splice(i, 1);
}
exports.removeOnThemeChangeCallback = removeOnThemeChangeCallback;
/**
 * Applies the theme, while filling in missing slots.
 * @param theme - Partial theme object.
 * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
 */
function loadTheme(theme, depComments) {
    var _a;
    if (depComments === void 0) { depComments = false; }
    _theme = createTheme_1.createTheme(theme, depComments);
    // Invoke the legacy method of theming the page as well.
    load_themed_styles_1.loadTheme(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));
    utilities_1.Customizations.applySettings((_a = {}, _a[exports.ThemeSettingName] = _theme, _a));
    _onThemeChangeCallbacks.forEach(function (callback) {
        try {
            callback(_theme);
        }
        catch (e) {
            // don't let a bad callback break everything else
        }
    });
    return _theme;
}
exports.loadTheme = loadTheme;
/**
 * Loads font variables into a JSON object.
 * @param theme - The theme object
 */
function _loadFonts(theme) {
    var lines = {};
    for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {
        var fontName = _a[_i];
        var font = theme.fonts[fontName];
        for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {
            var propName = _c[_b];
            var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);
            var value = font[propName];
            if (propName === 'fontSize' && typeof value === 'number') {
                // if it's a number, convert it to px by default like our theming system does
                value = value + 'px';
            }
            lines[name_1] = value;
        }
    }
    return lines;
}

},{"tslib":"5gvnt","@fluentui/utilities":"2AuOe","@microsoft/load-themed-styles":"6q4LG","@fluentui/theme/lib-commonjs/createTheme":"7zWu6"}],"6q4LG":[function(require,module,exports) {
"use strict";
var global = arguments[3];
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __assign = this && this.__assign || (function () {
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  return __assign.apply(this, arguments);
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitStyles = exports.detokenize = exports.clearStyles = exports.loadTheme = exports.flush = exports.configureRunMode = exports.configureLoadStyles = exports.loadStyles = void 0;
// Store the theming state in __themeState__ global scope for reuse in the case of duplicate
// load-themed-styles hosted on the page.
var _root = typeof window === 'undefined' ? global : window;
// eslint-disable-line @typescript-eslint/no-explicit-any
// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).
var _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;
var _themeState = initializeThemeState();
/**
* Matches theming tokens. For example, "[theme: themeSlotName, default: #FFF]" (including the quotes).
*/
var _themeTokenRegex = /[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g;
var now = function () {
  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();
};
function measure(func) {
  var start = now();
  func();
  var end = now();
  _themeState.perf.duration += end - start;
}
/**
* initialize global state object
*/
function initializeThemeState() {
  var state = _root.__themeState__ || ({
    theme: undefined,
    lastStyleElement: undefined,
    registeredStyles: []
  });
  if (!state.runState) {
    state = __assign(__assign({}, state), {
      perf: {
        count: 0,
        duration: 0
      },
      runState: {
        flushTimer: 0,
        mode: 0,
        /*sync*/
        buffer: []
      }
    });
  }
  if (!state.registeredThemableStyles) {
    state = __assign(__assign({}, state), {
      registeredThemableStyles: []
    });
  }
  _root.__themeState__ = state;
  return state;
}
/**
* Loads a set of style text. If it is registered too early, we will register it when the window.load
* event is fired.
* @param {string | ThemableArray} styles Themable style text to register.
* @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.
*/
function loadStyles(styles, loadAsync) {
  if (loadAsync === void 0) {
    loadAsync = false;
  }
  measure(function () {
    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);
    var _a = _themeState.runState, mode = _a.mode, buffer = _a.buffer, flushTimer = _a.flushTimer;
    if (loadAsync || mode === 1) /*async*/
    {
      buffer.push(styleParts);
      if (!flushTimer) {
        _themeState.runState.flushTimer = asyncLoadStyles();
      }
    } else {
      applyThemableStyles(styleParts);
    }
  });
}
exports.loadStyles = loadStyles;
/**
* Allows for customizable loadStyles logic. e.g. for server side rendering application
* @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}
* a loadStyles callback that gets called when styles are loaded or reloaded
*/
function configureLoadStyles(loadStylesFn) {
  _themeState.loadStyles = loadStylesFn;
}
exports.configureLoadStyles = configureLoadStyles;
/**
* Configure run mode of load-themable-styles
* @param mode load-themable-styles run mode, async or sync
*/
function configureRunMode(mode) {
  _themeState.runState.mode = mode;
}
exports.configureRunMode = configureRunMode;
/**
* external code can call flush to synchronously force processing of currently buffered styles
*/
function flush() {
  measure(function () {
    var styleArrays = _themeState.runState.buffer.slice();
    _themeState.runState.buffer = [];
    var mergedStyleArray = [].concat.apply([], styleArrays);
    if (mergedStyleArray.length > 0) {
      applyThemableStyles(mergedStyleArray);
    }
  });
}
exports.flush = flush;
/**
* register async loadStyles
*/
function asyncLoadStyles() {
  return setTimeout(function () {
    _themeState.runState.flushTimer = 0;
    flush();
  }, 0);
}
/**
* Loads a set of style text. If it is registered too early, we will register it when the window.load event
* is fired.
* @param {string} styleText Style to register.
* @param {IStyleRecord} styleRecord Existing style record to re-apply.
*/
function applyThemableStyles(stylesArray, styleRecord) {
  if (_themeState.loadStyles) {
    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
  } else {
    registerStyles(stylesArray);
  }
}
/**
* Registers a set theme tokens to find and replace. If styles were already registered, they will be
* replaced.
* @param {theme} theme JSON object of theme tokens to values.
*/
function loadTheme(theme) {
  _themeState.theme = theme;
  // reload styles.
  reloadStyles();
}
exports.loadTheme = loadTheme;
/**
* Clear already registered style elements and style records in theme_State object
* @param option - specify which group of registered styles should be cleared.
* Default to be both themable and non-themable styles will be cleared
*/
function clearStyles(option) {
  if (option === void 0) {
    option = 3;
  }
  if (option === 3 || /*all*/
  option === 2) /*onlyNonThemable*/
  {
    clearStylesInternal(_themeState.registeredStyles);
    _themeState.registeredStyles = [];
  }
  if (option === 3 || /*all*/
  option === 1) /*onlyThemable*/
  {
    clearStylesInternal(_themeState.registeredThemableStyles);
    _themeState.registeredThemableStyles = [];
  }
}
exports.clearStyles = clearStyles;
function clearStylesInternal(records) {
  records.forEach(function (styleRecord) {
    var styleElement = styleRecord && styleRecord.styleElement;
    if (styleElement && styleElement.parentElement) {
      styleElement.parentElement.removeChild(styleElement);
    }
  });
}
/**
* Reloads styles.
*/
function reloadStyles() {
  if (_themeState.theme) {
    var themableStyles = [];
    for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {
      var styleRecord = _a[_i];
      themableStyles.push(styleRecord.themableStyle);
    }
    if (themableStyles.length > 0) {
      clearStyles(1);
      applyThemableStyles([].concat.apply([], themableStyles));
    }
  }
}
/**
* Find theme tokens and replaces them with provided theme values.
* @param {string} styles Tokenized styles to fix.
*/
function detokenize(styles) {
  if (styles) {
    styles = resolveThemableArray(splitStyles(styles)).styleString;
  }
  return styles;
}
exports.detokenize = detokenize;
/**
* Resolves ThemingInstruction objects in an array and joins the result into a string.
* @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
*/
function resolveThemableArray(splitStyleArray) {
  var theme = _themeState.theme;
  var themable = false;
  // Resolve the array of theming instructions to an array of strings.
  // Then join the array to produce the final CSS string.
  var resolvedArray = (splitStyleArray || []).map(function (currentValue) {
    var themeSlot = currentValue.theme;
    if (themeSlot) {
      themable = true;
      // A theming annotation. Resolve it.
      var themedValue = theme ? theme[themeSlot] : undefined;
      var defaultValue = currentValue.defaultValue || 'inherit';
      // Warn to console if we hit an unthemed value even when themes are provided, but only if "DEBUG" is true.
      // Allow the themedValue to be undefined to explicitly request the default value.
      if (theme && !themedValue && console && !((themeSlot in theme)) && typeof DEBUG !== 'undefined' && DEBUG) {
        console.warn("Theming value not provided for \"" + themeSlot + "\". Falling back to \"" + defaultValue + "\".");
      }
      return themedValue || defaultValue;
    } else {
      // A non-themable string. Preserve it.
      return currentValue.rawString;
    }
  });
  return {
    styleString: resolvedArray.join(''),
    themable: themable
  };
}
/**
* Split tokenized CSS into an array of strings and theme specification objects
* @param {string} styles Tokenized styles to split.
*/
function splitStyles(styles) {
  var result = [];
  if (styles) {
    var pos = 0;
    // Current position in styles.
    var tokenMatch = void 0;
    while (tokenMatch = _themeTokenRegex.exec(styles)) {
      var matchIndex = tokenMatch.index;
      if (matchIndex > pos) {
        result.push({
          rawString: styles.substring(pos, matchIndex)
        });
      }
      result.push({
        theme: tokenMatch[1],
        defaultValue: tokenMatch[2]
      });
      // index of the first character after the current match
      pos = _themeTokenRegex.lastIndex;
    }
    // Push the rest of the string after the last match.
    result.push({
      rawString: styles.substring(pos)
    });
  }
  return result;
}
exports.splitStyles = splitStyles;
/**
* Registers a set of style text. If it is registered too early, we will register it when the
* window.load event is fired.
* @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
* @param {IStyleRecord} styleRecord May specify a style Element to update.
*/
function registerStyles(styleArray) {
  if (typeof document === 'undefined') {
    return;
  }
  var head = document.getElementsByTagName('head')[0];
  var styleElement = document.createElement('style');
  var _a = resolveThemableArray(styleArray), styleString = _a.styleString, themable = _a.themable;
  styleElement.setAttribute('data-load-themed-styles', 'true');
  if (_styleNonce) {
    styleElement.setAttribute('nonce', _styleNonce);
  }
  styleElement.appendChild(document.createTextNode(styleString));
  _themeState.perf.count++;
  head.appendChild(styleElement);
  var ev = document.createEvent('HTMLEvents');
  ev.initEvent('styleinsert', true, /*bubbleEvent*/
  false);
  ev.args = {
    newStyle: styleElement
  };
  document.dispatchEvent(ev);
  var record = {
    styleElement: styleElement,
    themableStyle: styleArray
  };
  if (themable) {
    _themeState.registeredThemableStyles.push(record);
  } else {
    _themeState.registeredStyles.push(record);
  }
}

},{}],"7zWu6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTheme = void 0;
var index_1 = require("./colors/index");
var index_2 = require("./effects/index");
var index_3 = require("./fonts/index");
var mergeThemes_1 = require("./mergeThemes");
var index_4 = require("./spacing/index");
var makeSemanticColors_1 = require("./utilities/makeSemanticColors");
/**
 * Creates a custom theme definition.
 * @param theme - Partial theme object.
 * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
 */
function createTheme(theme, depComments) {
    if (theme === void 0) { theme = {}; }
    if (depComments === void 0) { depComments = false; }
    var isInverted = !!theme.isInverted;
    var baseTheme = {
        palette: index_1.DefaultPalette,
        effects: index_2.DefaultEffects,
        fonts: index_3.DefaultFontStyles,
        spacing: index_4.DefaultSpacing,
        isInverted: isInverted,
        disableGlobalClassNames: false,
        semanticColors: makeSemanticColors_1.makeSemanticColors(index_1.DefaultPalette, index_2.DefaultEffects, undefined, isInverted, depComments),
        rtl: undefined,
    };
    return mergeThemes_1.mergeThemes(baseTheme, theme);
}
exports.createTheme = createTheme;

},{"./colors/index":"7zrx2","./effects/index":"6tpLH","./fonts/index":"541Up","./mergeThemes":"7zFMS","./spacing/index":"4VERv","./utilities/makeSemanticColors":"2P2Cb"}],"7zrx2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPalette = void 0;
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./FluentColors"), exports);
var DefaultPalette_1 = require("./DefaultPalette");
Object.defineProperty(exports, "DefaultPalette", { enumerable: true, get: function () { return DefaultPalette_1.DefaultPalette; } });

},{"tslib":"3wxVE","./FluentColors":"7Fr9F","./DefaultPalette":"3K39O"}],"7Fr9F":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedColors = exports.NeutralColors = exports.CommunicationColors = void 0;
var CommunicationColors;
(function (CommunicationColors) {
    CommunicationColors.shade30 = '#004578';
    CommunicationColors.shade20 = '#005a9e';
    CommunicationColors.shade10 = '#106ebe';
    CommunicationColors.primary = '#0078d4';
    CommunicationColors.tint10 = '#2b88d8';
    CommunicationColors.tint20 = '#c7e0f4';
    CommunicationColors.tint30 = '#deecf9';
    CommunicationColors.tint40 = '#eff6fc';
})(CommunicationColors = exports.CommunicationColors || (exports.CommunicationColors = {}));
var NeutralColors;
(function (NeutralColors) {
    NeutralColors.black = '#000000';
    NeutralColors.gray220 = '#11100f';
    NeutralColors.gray210 = '#161514';
    NeutralColors.gray200 = '#1b1a19';
    NeutralColors.gray190 = '#201f1e';
    NeutralColors.gray180 = '#252423';
    NeutralColors.gray170 = '#292827';
    NeutralColors.gray160 = '#323130';
    NeutralColors.gray150 = '#3b3a39';
    NeutralColors.gray140 = '#484644';
    NeutralColors.gray130 = '#605e5c';
    NeutralColors.gray120 = '#797775';
    NeutralColors.gray110 = '#8a8886';
    NeutralColors.gray100 = '#979593';
    NeutralColors.gray90 = '#a19f9d';
    NeutralColors.gray80 = '#b3b0ad';
    NeutralColors.gray70 = '#bebbb8';
    NeutralColors.gray60 = '#c8c6c4';
    NeutralColors.gray50 = '#d2d0ce';
    NeutralColors.gray40 = '#e1dfdd';
    NeutralColors.gray30 = '#edebe9';
    NeutralColors.gray20 = '#f3f2f1';
    NeutralColors.gray10 = '#faf9f8';
    NeutralColors.white = '#ffffff';
})(NeutralColors = exports.NeutralColors || (exports.NeutralColors = {}));
var SharedColors;
(function (SharedColors) {
    SharedColors.pinkRed10 = '#750b1c';
    SharedColors.red20 = '#a4262c';
    SharedColors.red10 = '#d13438';
    SharedColors.redOrange20 = '#603d30';
    SharedColors.redOrange10 = '#da3b01';
    SharedColors.orange30 = '#8e562e';
    SharedColors.orange20 = '#ca5010';
    SharedColors.orange10 = '#ffaa44';
    SharedColors.yellow10 = '#fce100';
    SharedColors.orangeYellow20 = '#986f0b';
    SharedColors.orangeYellow10 = '#c19c00';
    SharedColors.yellowGreen10 = '#8cbd18';
    SharedColors.green20 = '#0b6a0b';
    SharedColors.green10 = '#498205';
    SharedColors.greenCyan10 = '#00ad56';
    SharedColors.cyan40 = '#005e50';
    SharedColors.cyan30 = '#005b70';
    SharedColors.cyan20 = '#038387';
    SharedColors.cyan10 = '#00b7c3';
    SharedColors.cyanBlue20 = '#004e8c';
    SharedColors.cyanBlue10 = '#0078d4';
    SharedColors.blue10 = '#4f6bed';
    SharedColors.blueMagenta40 = '#373277';
    SharedColors.blueMagenta30 = '#5c2e91';
    SharedColors.blueMagenta20 = '#8764b8';
    SharedColors.blueMagenta10 = '#8378de';
    SharedColors.magenta20 = '#881798';
    SharedColors.magenta10 = '#c239b3';
    SharedColors.magentaPink20 = '#9b0062';
    SharedColors.magentaPink10 = '#e3008c';
    SharedColors.gray40 = '#393939';
    SharedColors.gray30 = '#7a7574';
    SharedColors.gray20 = '#69797e';
    SharedColors.gray10 = '#a0aeb2';
})(SharedColors = exports.SharedColors || (exports.SharedColors = {}));

},{}],"6tpLH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Depths = exports.DefaultEffects = void 0;
var DefaultEffects_1 = require("./DefaultEffects");
Object.defineProperty(exports, "DefaultEffects", { enumerable: true, get: function () { return DefaultEffects_1.DefaultEffects; } });
var FluentDepths_1 = require("./FluentDepths");
Object.defineProperty(exports, "Depths", { enumerable: true, get: function () { return FluentDepths_1.Depths; } });

},{"./DefaultEffects":"40L4W","./FluentDepths":"7yvPz"}],"7zFMS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeThemes = void 0;
var utilities_1 = require("@fluentui/utilities");
var makeSemanticColors_1 = require("./utilities/makeSemanticColors");
/**
 * Merge a partial/full theme into a full theme and returns a merged full theme.
 */
function mergeThemes(theme, partialTheme) {
    var _a, _b, _c;
    if (partialTheme === void 0) { partialTheme = {}; }
    var mergedTheme = utilities_1.merge({}, theme, partialTheme, {
        semanticColors: makeSemanticColors_1.getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === undefined ? theme.isInverted : partialTheme.isInverted),
    });
    if (((_a = partialTheme.palette) === null || _a === void 0 ? void 0 : _a.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {
        mergedTheme.palette.accent = partialTheme.palette.themePrimary;
    }
    if (partialTheme.defaultFontStyle) {
        for (var _i = 0, _d = Object.keys(mergedTheme.fonts); _i < _d.length; _i++) {
            var fontStyle = _d[_i];
            mergedTheme.fonts[fontStyle] = utilities_1.merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c === void 0 ? void 0 : _c[fontStyle]);
        }
    }
    return mergedTheme;
}
exports.mergeThemes = mergeThemes;

},{"@fluentui/utilities":"2AuOe","./utilities/makeSemanticColors":"2P2Cb"}],"2P2Cb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSemanticColors = exports.makeSemanticColors = void 0;
var tslib_1 = require("tslib");
/** Generates all the semantic slot colors based on the theme so far
 * We'll use these as fallbacks for semantic slots that the passed in theme did not define.
 * The caller must still mix in the customized semantic slots at the end.
 */
function makeSemanticColors(p, e, s, isInverted, depComments) {
    if (depComments === void 0) { depComments = false; }
    var semanticColors = tslib_1.__assign({ primaryButtonBorder: 'transparent', errorText: !isInverted ? '#a4262c' : '#F1707B', messageText: !isInverted ? '#323130' : '#F3F2F1', messageLink: !isInverted ? '#005A9E' : '#6CB8F6', messageLinkHovered: !isInverted ? '#004578' : '#82C7FF', infoIcon: !isInverted ? '#605e5c' : '#C8C6C4', errorIcon: !isInverted ? '#A80000' : '#F1707B', blockingIcon: !isInverted ? '#FDE7E9' : '#442726', warningIcon: !isInverted ? '#797775' : '#C8C6C4', severeWarningIcon: !isInverted ? '#D83B01' : '#FCE100', successIcon: !isInverted ? '#107C10' : '#92C353', infoBackground: !isInverted ? '#f3f2f1' : '#323130', errorBackground: !isInverted ? '#FDE7E9' : '#442726', blockingBackground: !isInverted ? '#FDE7E9' : '#442726', warningBackground: !isInverted ? '#FFF4CE' : '#433519', severeWarningBackground: !isInverted ? '#FED9CC' : '#4F2A0F', successBackground: !isInverted ? '#DFF6DD' : '#393D1B', 
        // deprecated
        warningHighlight: !isInverted ? '#ffb900' : '#fff100', successText: !isInverted ? '#107C10' : '#92c353' }, s);
    var fullSemanticColors = getSemanticColors(p, e, semanticColors, isInverted);
    return _fixDeprecatedSlots(fullSemanticColors, depComments);
}
exports.makeSemanticColors = makeSemanticColors;
/**
 * Map partial platte and effects to partial semantic colors.
 */
function getSemanticColors(p, e, s, isInverted, depComments) {
    if (depComments === void 0) { depComments = false; }
    var result = {};
    // map palette
    var _a = p || {}, white = _a.white, black = _a.black, themePrimary = _a.themePrimary, themeDark = _a.themeDark, themeDarker = _a.themeDarker, themeDarkAlt = _a.themeDarkAlt, themeLighter = _a.themeLighter, neutralLight = _a.neutralLight, neutralLighter = _a.neutralLighter, neutralDark = _a.neutralDark, neutralQuaternary = _a.neutralQuaternary, neutralQuaternaryAlt = _a.neutralQuaternaryAlt, neutralPrimary = _a.neutralPrimary, neutralSecondary = _a.neutralSecondary, neutralSecondaryAlt = _a.neutralSecondaryAlt, neutralTertiary = _a.neutralTertiary, neutralTertiaryAlt = _a.neutralTertiaryAlt, neutralLighterAlt = _a.neutralLighterAlt, accent = _a.accent;
    if (white) {
        result.bodyBackground = white;
        result.bodyFrameBackground = white;
        result.accentButtonText = white;
        result.buttonBackground = white;
        result.primaryButtonText = white;
        result.primaryButtonTextHovered = white;
        result.primaryButtonTextPressed = white;
        result.inputBackground = white;
        result.inputForegroundChecked = white;
        result.listBackground = white;
        result.menuBackground = white;
        result.cardStandoutBackground = white;
    }
    if (black) {
        result.bodyTextChecked = black;
        result.buttonTextCheckedHovered = black;
    }
    if (themePrimary) {
        result.link = themePrimary;
        result.primaryButtonBackground = themePrimary;
        result.inputBackgroundChecked = themePrimary;
        result.inputIcon = themePrimary;
        result.inputFocusBorderAlt = themePrimary;
        result.menuIcon = themePrimary;
        result.menuHeader = themePrimary;
        result.accentButtonBackground = themePrimary;
    }
    if (themeDark) {
        result.primaryButtonBackgroundPressed = themeDark;
        result.inputBackgroundCheckedHovered = themeDark;
        result.inputIconHovered = themeDark;
    }
    if (themeDarker) {
        result.linkHovered = themeDarker;
    }
    if (themeDarkAlt) {
        result.primaryButtonBackgroundHovered = themeDarkAlt;
    }
    if (themeLighter) {
        result.inputPlaceholderBackgroundChecked = themeLighter;
    }
    if (neutralLight) {
        result.bodyBackgroundChecked = neutralLight;
        result.bodyFrameDivider = neutralLight;
        result.bodyDivider = neutralLight;
        result.variantBorder = neutralLight;
        result.buttonBackgroundCheckedHovered = neutralLight;
        result.buttonBackgroundPressed = neutralLight;
        result.listItemBackgroundChecked = neutralLight;
        result.listHeaderBackgroundPressed = neutralLight;
        result.menuItemBackgroundPressed = neutralLight;
        // eslint-disable-next-line deprecation/deprecation
        result.menuItemBackgroundChecked = neutralLight;
    }
    if (neutralLighter) {
        result.bodyBackgroundHovered = neutralLighter;
        result.buttonBackgroundHovered = neutralLighter;
        result.buttonBackgroundDisabled = neutralLighter;
        result.buttonBorderDisabled = neutralLighter;
        result.primaryButtonBackgroundDisabled = neutralLighter;
        result.disabledBackground = neutralLighter;
        result.listItemBackgroundHovered = neutralLighter;
        result.listHeaderBackgroundHovered = neutralLighter;
        result.menuItemBackgroundHovered = neutralLighter;
    }
    if (neutralQuaternary) {
        result.primaryButtonTextDisabled = neutralQuaternary;
        result.disabledSubtext = neutralQuaternary;
    }
    if (neutralQuaternaryAlt) {
        result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;
    }
    if (neutralTertiary) {
        result.disabledBodyText = neutralTertiary;
        result.variantBorderHovered = (s === null || s === void 0 ? void 0 : s.variantBorderHovered) || neutralTertiary;
        result.buttonTextDisabled = neutralTertiary;
        result.inputIconDisabled = neutralTertiary;
        result.disabledText = neutralTertiary;
    }
    if (neutralPrimary) {
        result.bodyText = neutralPrimary;
        result.actionLink = neutralPrimary;
        result.buttonText = neutralPrimary;
        result.inputBorderHovered = neutralPrimary;
        result.inputText = neutralPrimary;
        result.listText = neutralPrimary;
        result.menuItemText = neutralPrimary;
    }
    if (neutralLighterAlt) {
        result.bodyStandoutBackground = neutralLighterAlt;
        result.defaultStateBackground = neutralLighterAlt;
    }
    if (neutralDark) {
        result.actionLinkHovered = neutralDark;
        result.buttonTextHovered = neutralDark;
        result.buttonTextChecked = neutralDark;
        result.buttonTextPressed = neutralDark;
        result.inputTextHovered = neutralDark;
        result.menuItemTextHovered = neutralDark;
    }
    if (neutralSecondary) {
        result.bodySubtext = neutralSecondary;
        result.focusBorder = neutralSecondary;
        result.inputBorder = neutralSecondary;
        result.smallInputBorder = neutralSecondary;
        result.inputPlaceholderText = neutralSecondary;
    }
    if (neutralSecondaryAlt) {
        result.buttonBorder = neutralSecondaryAlt;
    }
    if (neutralTertiaryAlt) {
        result.disabledBodySubtext = neutralTertiaryAlt;
        result.disabledBorder = neutralTertiaryAlt;
        result.buttonBackgroundChecked = neutralTertiaryAlt;
        result.menuDivider = neutralTertiaryAlt;
    }
    if (accent) {
        result.accentButtonBackground = accent;
    }
    // map effects
    if (e === null || e === void 0 ? void 0 : e.elevation4) {
        result.cardShadow = e.elevation4;
    }
    if (!isInverted && (e === null || e === void 0 ? void 0 : e.elevation8)) {
        result.cardShadowHovered = e.elevation8;
    }
    else if (result.variantBorderHovered) {
        result.cardShadowHovered = '0 0 1px ' + result.variantBorderHovered;
    }
    result = tslib_1.__assign(tslib_1.__assign({}, result), s);
    return result;
}
exports.getSemanticColors = getSemanticColors;
function _fixDeprecatedSlots(s, depComments) {
    // Add @deprecated tag as comment if enabled
    var dep = '';
    if (depComments === true) {
        dep = ' /* @deprecated */';
    }
    /* eslint-disable deprecation/deprecation */
    s.listTextColor = s.listText + dep;
    s.menuItemBackgroundChecked += dep;
    s.warningHighlight += dep;
    s.warningText = s.messageText + dep;
    s.successText += dep;
    /* eslint-enable deprecation/deprecation */
    return s;
}

},{"tslib":"3wxVE"}],"4VERv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultSpacing = void 0;
var DefaultSpacing_1 = require("./DefaultSpacing");
Object.defineProperty(exports, "DefaultSpacing", { enumerable: true, get: function () { return DefaultSpacing_1.DefaultSpacing; } });

},{"./DefaultSpacing":"5qE1J"}],"5qE1J":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultSpacing = void 0;
exports.DefaultSpacing = {
    s2: '4px',
    s1: '8px',
    m: '16px',
    l1: '20px',
    l2: '32px',
};

},{}],"1eSSU":[function(require,module,exports) {
"use strict";
// This file mimics styles and mixins from _General.Mixins.scss
Object.defineProperty(exports, "__esModule", { value: true });
exports.noWrap = exports.normalize = void 0;
exports.normalize = {
    boxShadow: 'none',
    margin: 0,
    padding: 0,
    boxSizing: 'border-box',
};
exports.noWrap = {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
};

},{}],"46AWC":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFadedOverflowStyle = void 0;
var DEFAULT_HEIGHT = '50%';
var DEFAULT_WIDTH = 20;
/**
 * - Generates a style used to fade out an overflowing content by defining a style for an :after pseudo element.
 * - Apply it to the :after selector for all combination of states the parent of content might have (normal, hover,
 * selected, focus).
 * - Requires the target to have position set to relative and overflow set to hidden.
 *
 * @example
 * ```tsx
 * // Assuming the following DOM structure and the different background colors coming from
 * // the parent holding the content.
 * <div className={classNames.parent}>
 *   <span className={classNames.content}>Overflown Content</span>
 * </div>
 * ```
 * ```ts
 * // This is how the style set would look in Component.styles.ts
 * const { bodyBackground } = theme.semanticColors;
 * const { neutralLighter } = theme.palette;
 *
 * // The second argument of getFadedOverflowStyle function is a string representing a key of
 * // ISemanticColors or IPalette.
 *
 * const styles = {
 *   parent: [
 *     backgroundColor: bodyBackground,
 *     selectors: {
 *       '&:hover: {
 *         backgroundColor: neutralLighter
 *       },
 *       '$content:after': {
 *         ...getFadedOverflowStyle(theme, 'bodyBackground')
 *       },
 *       '&:hover $content:after': {
 *         ...getFadedOverflowStyle(theme, 'neutralLighter')
 *       }
 *     }
 *   ],
 *   content: [
 *     width: '100%',
 *     display: 'inline-block',
 *     position: 'relative',
 *     overflow: 'hidden'
 *   ]
 * }
 * ```
 * @param theme - The theme object to use.
 * @param color - The background color to fade out to. Accepts only keys of ISemanticColors or IPalette.
 * Defaults to 'bodyBackground'.
 * @param direction - The direction of the overflow. Defaults to horizontal.
 * @param width - The width of the fading overflow. Vertical direction defaults it to 100% vs 20px when horizontal.
 * @param height - The Height of the fading overflow. Vertical direction defaults it to 50% vs 100% when horizontal.
 * @returns The style object.
 */
function getFadedOverflowStyle(theme, color, direction, width, height) {
    if (color === void 0) { color = 'bodyBackground'; }
    if (direction === void 0) { direction = 'horizontal'; }
    if (width === void 0) { width = getDefaultValue('width', direction); }
    if (height === void 0) { height = getDefaultValue('height', direction); }
    // Get the color value string from the theme semanticColors or palette.
    var colorValue = theme.semanticColors[color] || theme.palette[color];
    // Get the red, green, blue values of the colorValue.
    var rgbColor = color2rgb(colorValue);
    // Apply opacity 0 to serve as a start color of the gradient.
    var rgba = "rgba(" + rgbColor.r + ", " + rgbColor.g + ", " + rgbColor.b + ", 0)";
    // Get the direction of the gradient. (mergeStyles takes care of RTL direction)
    var gradientDirection = direction === 'vertical' ? 'to bottom' : 'to right';
    return {
        content: '""',
        position: 'absolute',
        right: 0,
        bottom: 0,
        width: width,
        height: height,
        pointerEvents: 'none',
        backgroundImage: "linear-gradient(" + gradientDirection + ", " + rgba + " 0%, " + colorValue + " 100%)",
    };
}
exports.getFadedOverflowStyle = getFadedOverflowStyle;
// TODO consider moving this to a separate module along with some more color functions from OUFR/utilities.
/**
 * Helper function to convert a string hex color to an RGB object.
 *
 * @param colorValue - Color to be converted from hex to rgba.
 */
function color2rgb(colorValue) {
    if (colorValue[0] === '#') {
        // If it's a hex code
        return {
            r: parseInt(colorValue.slice(1, 3), 16),
            g: parseInt(colorValue.slice(3, 5), 16),
            b: parseInt(colorValue.slice(5, 7), 16),
        };
    }
    else if (colorValue.indexOf('rgba(') === 0) {
        // If it's an rgba color string
        colorValue = colorValue.match(/rgba\(([^)]+)\)/)[1];
        var parts = colorValue.split(/ *, */).map(Number);
        return {
            r: parts[0],
            g: parts[1],
            b: parts[2],
        };
    }
    // The only remaining possibility is transparent.
    return {
        r: 255,
        g: 255,
        b: 255,
    };
}
/**
 * Helper function to get the default values for parameters of main function.
 *
 * @param style - Which style to get the default value for.
 * @param direction - What direction to take into consideration.
 */
function getDefaultValue(style, direction) {
    if (style === 'width') {
        return direction === 'horizontal' ? DEFAULT_WIDTH : '100%';
    }
    else {
        return direction === 'vertical' ? DEFAULT_HEIGHT : '100%';
    }
}

},{}],"16Zk1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPlaceholderStyles = void 0;
/**
 * Generates placeholder style for each of the browsers supported by `@fluentui/react`.
 * @param styles - The style to use.
 * @returns The placeholder style object for each browser depending on the placeholder directive it uses.
 */
function getPlaceholderStyles(styles) {
    return {
        selectors: {
            '::placeholder': styles,
            ':-ms-input-placeholder': styles,
            '::-ms-input-placeholder': styles,
        },
    };
}
exports.getPlaceholderStyles = getPlaceholderStyles;

},{}],"4GnDr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontClassNames = void 0;
var buildClassMap_1 = require("../utilities/buildClassMap");
var DefaultFontStyles_1 = require("../styles/DefaultFontStyles");
/**
 * {@docCategory FontClassNames}
 */
exports.FontClassNames = buildClassMap_1.buildClassMap(DefaultFontStyles_1.DefaultFontStyles);

},{"../utilities/buildClassMap":"1tfcs","../styles/DefaultFontStyles":"lhwcf"}],"3RrTr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorClassNames = void 0;
var merge_styles_1 = require("@fluentui/merge-styles");
var DefaultPalette_1 = require("../styles/DefaultPalette");
var index_1 = require("../styles/index");
exports.ColorClassNames = {};
for (var colorName in DefaultPalette_1.DefaultPalette) {
    if (DefaultPalette_1.DefaultPalette.hasOwnProperty(colorName)) {
        // Foreground color
        _defineGetter(exports.ColorClassNames, colorName, '', false, 'color');
        // Hover color
        _defineGetter(exports.ColorClassNames, colorName, 'Hover', true, 'color');
        // Background color
        _defineGetter(exports.ColorClassNames, colorName, 'Background', false, 'background');
        // Background hover
        _defineGetter(exports.ColorClassNames, colorName, 'BackgroundHover', true, 'background');
        // Border color
        _defineGetter(exports.ColorClassNames, colorName, 'Border', false, 'borderColor');
        // Border hover color
        _defineGetter(exports.ColorClassNames, colorName, 'BorderHover', true, 'borderColor');
    }
}
/**
 * Defines a getter for the given class configuration.
 */
function _defineGetter(obj, colorName, suffix, isHover, cssProperty) {
    Object.defineProperty(obj, colorName + suffix, {
        get: function () {
            var _a;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var style = (_a = {}, _a[cssProperty] = index_1.getTheme().palette[colorName], _a);
            return merge_styles_1.mergeStyles(isHover ? { selectors: { ':hover': style } } : style).toString();
        },
        enumerable: true,
        configurable: true,
    });
}

},{"@fluentui/merge-styles":"366N8","../styles/DefaultPalette":"2VkQX","../styles/index":"6CazK"}],"3aZl2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"2RP7r":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/style-utilities', '8.1.1');

},{"@fluentui/set-version":"12cIw"}],"4iH0N":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getIconContent", function () {
  return getIconContent;
});
_parcelHelpers.export(exports, "FontIcon", function () {
  return FontIcon;
});
_parcelHelpers.export(exports, "getFontIcon", function () {
  return getFontIcon;
});
var _tslib = require("tslib");
var _react = require('react');
var _IconStyles = require('./Icon.styles');
var _Utilities = require('../../Utilities');
var _Styling = require('../../Styling');
var getIconContent = _Utilities.memoizeFunction(function (iconName) {
  var _a = _Styling.getIcon(iconName) || ({
    subset: {},
    code: undefined
  }), code = _a.code, subset = _a.subset;
  if (!code) {
    return null;
  }
  return {
    children: code,
    iconClassName: subset.className,
    fontFamily: subset.fontFace && subset.fontFace.fontFamily
  };
}, undefined, true);
var FontIcon = function (props) {
  var iconName = props.iconName, className = props.className, _a = props.style, style = _a === void 0 ? {} : _a;
  var iconContent = getIconContent(iconName) || ({});
  var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily;
  var nativeProps = _Utilities.getNativeProps(props, _Utilities.htmlElementProperties);
  var containerProps = props['aria-label'] || props['aria-labelledby'] || props.title ? {
    role: 'img'
  } : {
    'aria-hidden': true
  };
  return _react.createElement("i", _tslib.__assign({
    "data-icon-name": iconName
  }, containerProps, nativeProps, {
    className: _Utilities.css(_IconStyles.MS_ICON, _IconStyles.classNames.root, iconClassName, !iconName && _IconStyles.classNames.placeholder, className),
    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles
    // https://github.com/microsoft/fluentui/issues/10449
    style: _tslib.__assign({
      fontFamily: fontFamily
    }, style)
  }), children);
};
var getFontIcon = _Utilities.memoizeFunction(function (iconName, className, ariaLabel) {
  return FontIcon({
    iconName: iconName,
    className: className,
    'aria-label': ariaLabel
  });
});

},{"tslib":"6ZIET","react":"4g1R3","./Icon.styles":"2JUdI","../../Utilities":"1439N","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2JUdI":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "classNames", function () {
  return classNames;
});
_parcelHelpers.export(exports, "MS_ICON", function () {
  return MS_ICON;
});
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var classNames = _Styling.mergeStyleSets({
  root: {
    display: 'inline-block'
  },
  placeholder: ['ms-Icon-placeHolder', {
    width: '1em'
  }],
  image: ['ms-Icon-imageContainer', {
    overflow: 'hidden'
  }]
});
var MS_ICON = 'ms-Icon';
var getStyles = function (props) {
  var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles = props.styles;
  return {
    root: [isPlaceholder && classNames.placeholder, classNames.root, isImage && classNames.image, iconClassName, className, styles && styles.root, // eslint-disable-next-line deprecation/deprecation
    styles && styles.imageContainer]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5VnUn":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ImageIcon", function () {
  return ImageIcon;
});
var _tslib = require("tslib");
var _react = require('react');
var _ImageImage = require('../Image/Image');
var _Utilities = require('../../Utilities');
var _IconStyles = require('./Icon.styles');
var ImageIcon = function (props) {
  var className = props.className, imageProps = props.imageProps;
  var nativeProps = _Utilities.getNativeProps(props, _Utilities.htmlElementProperties, ['aria-label', 'aria-labelledby', 'title', 'aria-describedby']);
  var altText = imageProps.alt || props['aria-label'];
  var hasName = altText || props['aria-labelledby'] || props.title || imageProps['aria-label'] || imageProps['aria-labelledby'] || imageProps.title;
  // move naming or describing attributes from the container (where they are invalid) to the image
  var imageNameProps = {
    'aria-labelledby': props['aria-labelledby'],
    'aria-describedby': props['aria-describedby'],
    title: props.title
  };
  var containerProps = hasName ? {} : {
    'aria-hidden': true
  };
  return _react.createElement("div", _tslib.__assign({}, containerProps, nativeProps, {
    className: _Utilities.css(_IconStyles.MS_ICON, _IconStyles.classNames.root, _IconStyles.classNames.image, className)
  }), _react.createElement(_ImageImage.Image, _tslib.__assign({}, imageNameProps, imageProps, {
    alt: hasName ? altText : ''
  })));
};

},{"tslib":"6ZIET","react":"4g1R3","../Image/Image":"BD79S","../../Utilities":"1439N","./Icon.styles":"2JUdI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6itO1":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DirectionalHint", function () {
  return DirectionalHint;
});
var DirectionalHint = {
  /**
  * Appear above the target element, with the left edges of the callout and target aligning.
  */
  topLeftEdge: 0,
  /**
  * Appear above the target element, with the centers of the callout and target aligning.
  */
  topCenter: 1,
  /**
  * Appear above the target element, with the right edges of the callout and target aligning.
  */
  topRightEdge: 2,
  /**
  * Appear above the target element, aligning with the target element such that the callout tends toward
  * the center of the screen.
  */
  topAutoEdge: 3,
  /**
  * Appear below the target element, with the left edges of the callout and target aligning.
  */
  bottomLeftEdge: 4,
  /**
  * Appear below the target element, with the centers of the callout and target aligning.
  */
  bottomCenter: 5,
  /**
  * Appear below the target element, with the right edges of the callout and target aligning.
  */
  bottomRightEdge: 6,
  /**
  * Appear below the target element, aligning with the target element such that the callout tends toward
  * the center of the screen.
  */
  bottomAutoEdge: 7,
  /**
  * Appear to the left of the target element, with the top edges of the callout and target aligning.
  */
  leftTopEdge: 8,
  /**
  * Appear to the left of the target element, with the centers of the callout and target aligning.
  */
  leftCenter: 9,
  /**
  * Appear to the left of the target element, with the bottom edges of the callout and target aligning.
  */
  leftBottomEdge: 10,
  /**
  * Appear to the right of the target element, with the top edges of the callout and target aligning.
  */
  rightTopEdge: 11,
  /**
  * Appear to the right of the target element, with the centers of the callout and target aligning.
  */
  rightCenter: 12,
  /**
  * Appear to the right of the target element, with the bottom edges of the callout and target aligning.
  */
  rightBottomEdge: 13
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4u2S3":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsContextualMenuIndex = require('./components/ContextualMenu/index');
_parcelHelpers.exportAll(_componentsContextualMenuIndex, exports);

},{"./components/ContextualMenu/index":"5sGS9","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5sGS9":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getMenuItemStyles", function () {
  return _ContextualMenuCnstyles.getMenuItemStyles;
});
var _ContextualMenu = require('./ContextualMenu');
_parcelHelpers.exportAll(_ContextualMenu, exports);
var _ContextualMenuBase = require('./ContextualMenu.base');
_parcelHelpers.exportAll(_ContextualMenuBase, exports);
var _ContextualMenuTypes = require('./ContextualMenu.types');
_parcelHelpers.exportAll(_ContextualMenuTypes, exports);
var _ContextualMenuItem = require('./ContextualMenuItem');
_parcelHelpers.exportAll(_ContextualMenuItem, exports);
var _ContextualMenuItemBase = require('./ContextualMenuItem.base');
_parcelHelpers.exportAll(_ContextualMenuItemBase, exports);
var _ContextualMenuItemTypes = require('./ContextualMenuItem.types');
_parcelHelpers.exportAll(_ContextualMenuItemTypes, exports);
var _ContextualMenuCnstyles = require('./ContextualMenu.cnstyles');

},{"./ContextualMenu":"710Xr","./ContextualMenu.base":"26KJT","./ContextualMenu.types":"5Hfov","./ContextualMenuItem":"3ad74","./ContextualMenuItem.base":"Am3hi","./ContextualMenuItem.types":"6vNtb","./ContextualMenu.cnstyles":"596gU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"710Xr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenu", function () {
  return ContextualMenu;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _ContextualMenuBase = require('./ContextualMenu.base');
var _ContextualMenuStyles = require('./ContextualMenu.styles');
function onRenderSubMenu(subMenuProps) {
  return _react.createElement(LocalContextualMenu, _tslib.__assign({}, subMenuProps));
}
// This is to prevent cyclic import with ContextualMenu.base.tsx.
var LocalContextualMenu = _Utilities.styled(_ContextualMenuBase.ContextualMenuBase, _ContextualMenuStyles.getStyles, function () {
  return {
    onRenderSubMenu: onRenderSubMenu
  };
}, {
  scope: 'ContextualMenu'
});
var ContextualMenu = LocalContextualMenu;
ContextualMenu.displayName = 'ContextualMenu';

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./ContextualMenu.base":"26KJT","./ContextualMenu.styles":"60WEG","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"26KJT":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getSubmenuItems", function () {
  return getSubmenuItems;
});
_parcelHelpers.export(exports, "canAnyMenuItemsCheck", function () {
  return canAnyMenuItemsCheck;
});
_parcelHelpers.export(exports, "ContextualMenuBase", function () {
  return ContextualMenuBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _ContextualMenuTypes = require('./ContextualMenu.types');
var _commonDirectionalHint = require('../../common/DirectionalHint');
var _FocusZone = require('../../FocusZone');
var _Utilities = require('../../Utilities');
var _utilitiesContextualMenuIndex = require('../../utilities/contextualMenu/index');
var _Callout = require('../../Callout');
var _ContextualMenuItem = require('./ContextualMenuItem');
var _ContextualMenuItemWrapperIndex = require('./ContextualMenuItemWrapper/index');
var _Styling = require('../../Styling');
var _ContextualMenuClassNames = require('./ContextualMenu.classNames');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _ResponsiveMode = require('../../ResponsiveMode');
var _utilitiesMenuContextIndex = require('../../utilities/MenuContext/index');
var getClassNames = _Utilities.classNamesFunction();
var getContextualMenuItemClassNames = _Utilities.classNamesFunction();
// The default ContextualMenu properties have no items and beak, the default submenu direction is right and top.
var DEFAULT_PROPS = {
  items: [],
  shouldFocusOnMount: true,
  gapSpace: 0,
  directionalHint: _commonDirectionalHint.DirectionalHint.bottomAutoEdge,
  beakWidth: 16
};
function getSubmenuItems(item) {
  return item.subMenuProps ? item.subMenuProps.items : item.items;
}
function canAnyMenuItemsCheck(items) {
  return items.some(function (item) {
    if (item.canCheck) {
      return true;
    }
    // If the item is a section, check if any of the items in the section can check.
    if (item.sectionProps && item.sectionProps.items.some(function (submenuItem) {
      return submenuItem.canCheck === true;
    })) {
      return true;
    }
    return false;
  });
}
var NavigationIdleDelay = 250;
/*ms*/
var COMPONENT_NAME = 'ContextualMenu';
var _getMenuItemStylesFunction = _Utilities.memoizeFunction(function () {
  var styles = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    styles[_i] = arguments[_i];
  }
  return function (styleProps) {
    return _Styling.concatStyleSetsWithProps.apply(void 0, _tslib.__spreadArrays([styleProps, _ContextualMenuClassNames.getItemStyles], styles));
  };
});
function useVisibility(props, targetWindow) {
  var _a = props.hidden, hidden = _a === void 0 ? false : _a, onMenuDismissed = props.onMenuDismissed, onMenuOpened = props.onMenuOpened;
  var previousHidden = _fluentuiReactHooks.usePrevious(hidden);
  var onMenuOpenedRef = _react.useRef(onMenuOpened);
  var onMenuClosedRef = _react.useRef(onMenuDismissed);
  var propsRef = _react.useRef(props);
  onMenuOpenedRef.current = onMenuOpened;
  onMenuClosedRef.current = onMenuDismissed;
  propsRef.current = props;
  _react.useEffect(function () {
    var _a, _b;
    // Don't issue dismissed callbacks on initial mount
    if (hidden && previousHidden === false) {
      (_a = onMenuClosedRef.current) === null || _a === void 0 ? void 0 : _a.call(onMenuClosedRef, propsRef.current);
    } else if (!hidden && previousHidden !== false) {
      (_b = onMenuOpenedRef.current) === null || _b === void 0 ? void 0 : _b.call(onMenuOpenedRef, propsRef.current);
    }
  }, [hidden, previousHidden]);
  // Issue onDismissedCallback on unmount
  _react.useEffect(function () {
    return function () {
      var _a;
      return (_a = onMenuClosedRef.current) === null || _a === void 0 ? void 0 : _a.call(onMenuClosedRef, propsRef.current);
    };
  }, []);
}
function useSubMenuState(_a) {
  var hidden = _a.hidden;
  var _b = _react.useState(), expandedMenuItemKey = _b[0], setExpandedMenuItemKey = _b[1];
  var _c = _react.useState(), submenuTarget = _c[0], setSubmenuTarget = _c[1];
  /** True if the menu was expanded by mouse click OR hover (as opposed to by keyboard)*/
  var _d = _react.useState(), expandedByMouseClick = _d[0], setExpandedByMouseClick = _d[1];
  var closeSubMenu = _react.useCallback(function () {
    setExpandedByMouseClick(undefined);
    setExpandedMenuItemKey(undefined);
    setSubmenuTarget(undefined);
  }, []);
  var openSubMenu = _react.useCallback(function (_a, target, openedByMouseClick) {
    var submenuItemKey = _a.key;
    if (expandedMenuItemKey === submenuItemKey) {
      return;
    }
    target.focus();
    setExpandedByMouseClick(openedByMouseClick);
    setExpandedMenuItemKey(submenuItemKey);
    setSubmenuTarget(target);
  }, [expandedMenuItemKey]);
  _react.useEffect(function () {
    if (hidden) {
      closeSubMenu();
    }
  }, [hidden, closeSubMenu]);
  return [expandedMenuItemKey, submenuTarget, expandedByMouseClick, openSubMenu, closeSubMenu];
}
function useShouldUpdateFocusOnMouseMove(_a) {
  var delayUpdateFocusOnHover = _a.delayUpdateFocusOnHover, hidden = _a.hidden;
  var shouldUpdateFocusOnMouseEvent = _react.useRef(!delayUpdateFocusOnHover);
  var gotMouseMove = _react.useRef(false);
  _react.useEffect(function () {
    shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;
    gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;
  }, [delayUpdateFocusOnHover, hidden]);
  var onMenuFocusCapture = _react.useCallback(function () {
    if (delayUpdateFocusOnHover) {
      shouldUpdateFocusOnMouseEvent.current = true;
    }
  }, [delayUpdateFocusOnHover]);
  return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];
}
var ContextualMenuBase = _react.forwardRef(function (propsWithoutDefaults, forwardedRef) {
  var _a = _Utilities.getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults), ref = _a.ref, props = _tslib.__rest(_a, ["ref"]);
  var rootRef = _react.useRef(null);
  var hostElement = _fluentuiReactHooks.useMergedRefs(rootRef, forwardedRef);
  var _b = _fluentuiReactHooks.useTarget(props.target, hostElement), targetRef = _b[0], targetWindow = _b[1];
  var _c = useSubMenuState(props), expandedMenuItemKey = _c[0], submenuTarget = _c[1], expandedByMouseClick = _c[2], openSubMenu = _c[3], closeSubMenu = _c[4];
  var _d = useShouldUpdateFocusOnMouseMove(props), shouldUpdateFocusOnMouseEvent = _d[0], gotMouseMove = _d[1], onMenuFocusCapture = _d[2];
  var responsiveMode = _ResponsiveMode.useResponsiveMode(hostElement, props.responsiveMode);
  useVisibility(props, targetWindow);
  return _react.createElement(ContextualMenuInternal, _tslib.__assign({}, props, {
    hoisted: {
      hostElement: hostElement,
      targetRef: targetRef,
      targetWindow: targetWindow,
      expandedMenuItemKey: expandedMenuItemKey,
      submenuTarget: submenuTarget,
      expandedByMouseClick: expandedByMouseClick,
      openSubMenu: openSubMenu,
      closeSubMenu: closeSubMenu,
      shouldUpdateFocusOnMouseEvent: shouldUpdateFocusOnMouseEvent,
      gotMouseMove: gotMouseMove,
      onMenuFocusCapture: onMenuFocusCapture
    },
    responsiveMode: responsiveMode
  }));
});
ContextualMenuBase.displayName = 'ContextualMenuBase';
var ContextualMenuInternal = /** @class*/
(function (_super) {
  _tslib.__extends(ContextualMenuInternal, _super);
  function ContextualMenuInternal(props) {
    var _this = _super.call(this, props) || this;
    _this._mounted = false;
    _this.dismiss = function (ev, dismissAll) {
      var onDismiss = _this.props.onDismiss;
      if (onDismiss) {
        onDismiss(ev, dismissAll);
      }
    };
    _this._tryFocusPreviousActiveElement = function (options) {
      var _a, _b;
      if (_this.props.onRestoreFocus) {
        _this.props.onRestoreFocus(options);
      } else if (options && options.documentContainsFocus && _this._previousActiveElement) {
        // Make sure that the focus method actually exists
        // In some cases the object might exist but not be a real element.
        // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.
        (_b = (_a = _this._previousActiveElement).focus) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
    };
    _this._onRenderMenuList = function (menuListProps, defaultRender) {
      var indexCorrection = 0;
      var items = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks = menuListProps.hasCheckmarks, hasIcons = menuListProps.hasIcons;
      return _react.createElement("ul", {
        className: _this._classNames.list,
        onKeyDown: _this._onKeyDown,
        onKeyUp: _this._onKeyUp,
        role: 'presentation'
      }, items.map(function (item, index) {
        var menuItem = _this._renderMenuItem(item, index, indexCorrection, totalItemCount, hasCheckmarks, hasIcons);
        if (item.itemType !== _ContextualMenuTypes.ContextualMenuItemType.Divider && item.itemType !== _ContextualMenuTypes.ContextualMenuItemType.Header) {
          var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
          indexCorrection += indexIncrease;
        }
        return menuItem;
      }));
    };
    /**
    * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will
    * cause the menu items to always re-render because the component update is based on shallow comparison.
    */
    _this._renderMenuItem = function (item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {
      var _a;
      var renderedItems = [];
      var iconProps = item.iconProps || ({
        iconName: 'None'
      });
      var getItemClassNames = item.getItemClassNames, // eslint-disable-line deprecation/deprecation
      itemProps = item.itemProps;
      var styles = itemProps ? itemProps.styles : undefined;
      var expandedMenuItemKey = _this.props.hoisted.expandedMenuItemKey;
      // We only send a dividerClassName when the item to be rendered is a divider.
      // For all other cases, the default divider style is used.
      var dividerClassName = item.itemType === _ContextualMenuTypes.ContextualMenuItemType.Divider ? item.className : undefined;
      var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : '';
      // eslint-disable-next-line deprecation/deprecation
      var itemClassNames;
      // IContextualMenuItem#getItemClassNames for backwards compatibility
      // otherwise uses mergeStyles for class names.
      if (getItemClassNames) {
        itemClassNames = getItemClassNames(_this.props.theme, _utilitiesContextualMenuIndex.isItemDisabled(item), expandedMenuItemKey === item.key, !!_utilitiesContextualMenuIndex.getIsChecked(item), !!item.href, iconProps.iconName !== 'None', item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);
      } else {
        var itemStyleProps = {
          theme: _this.props.theme,
          disabled: _utilitiesContextualMenuIndex.isItemDisabled(item),
          expanded: expandedMenuItemKey === item.key,
          checked: !!_utilitiesContextualMenuIndex.getIsChecked(item),
          isAnchorLink: !!item.href,
          knownIcon: iconProps.iconName !== 'None',
          itemClassName: item.className,
          dividerClassName: dividerClassName,
          iconClassName: iconProps.className,
          subMenuClassName: subMenuIconClassName,
          primaryDisabled: item.primaryDisabled
        };
        // We need to generate default styles then override if styles are provided
        // since the ContextualMenu currently handles item classNames.
        itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.menuItem, styles), itemStyleProps);
      }
      // eslint-disable-next-line deprecation/deprecation
      if (item.text === '-' || item.name === '-') {
        item.itemType = _ContextualMenuTypes.ContextualMenuItemType.Divider;
      }
      switch (item.itemType) {
        case _ContextualMenuTypes.ContextualMenuItemType.Divider:
          renderedItems.push(_this._renderSeparator(index, itemClassNames));
          break;
        case _ContextualMenuTypes.ContextualMenuItemType.Header:
          renderedItems.push(_this._renderSeparator(index, itemClassNames));
          var headerItem = _this._renderHeaderMenuItem(item, itemClassNames, index, hasCheckmarks, hasIcons);
          renderedItems.push(_this._renderListItem(headerItem, item.key || index, itemClassNames, item.title));
          break;
        case _ContextualMenuTypes.ContextualMenuItemType.Section:
          renderedItems.push(_this._renderSectionItem(item, itemClassNames, index, hasCheckmarks, hasIcons));
          break;
        default:
          var menuItem = _this._renderNormalItem(item, itemClassNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);
          renderedItems.push(_this._renderListItem(menuItem, item.key || index, itemClassNames, item.title));
          break;
      }
      // Since multiple nodes *could* be rendered, wrap them all in a fragment with this item's key.
      // This ensures the reconciler handles multi-item output per-node correctly and does not re-mount content.
      return _react.createElement(_react.Fragment, {
        key: item.key
      }, renderedItems);
    };
    _this._defaultMenuItemRenderer = function (item) {
      var index = item.index, focusableElementIndex = item.focusableElementIndex, totalItemCount = item.totalItemCount, hasCheckmarks = item.hasCheckmarks, hasIcons = item.hasIcons;
      return _this._renderMenuItem(item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);
    };
    _this._onKeyDown = function (ev) {
      // Take note if we are processing an alt (option) or meta (command) keydown.
      // See comment in _shouldHandleKeyUp for reasoning.
      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);
      // On Mac, pressing escape dismisses all levels of native context menus
      // eslint-disable-next-line deprecation/deprecation
      var dismissAllMenus = ev.which === _Utilities.KeyCodes.escape && (_Utilities.isMac() || _Utilities.isIOS());
      return _this._keyHandler(ev, _this._shouldHandleKeyDown, dismissAllMenus);
    };
    _this._shouldHandleKeyDown = function (ev) {
      return (
        // eslint-disable-next-line deprecation/deprecation
        ev.which === _Utilities.KeyCodes.escape || _this._shouldCloseSubMenu(ev) || // eslint-disable-next-line deprecation/deprecation
        ev.which === _Utilities.KeyCodes.up && (ev.altKey || ev.metaKey)
      );
    };
    _this._onKeyUp = function (ev) {
      return _this._keyHandler(ev, _this._shouldHandleKeyUp, true);
    };
    /**
    * We close the menu on key up only if ALL of the following are true:
    * - Most recent key down was alt or meta (command)
    * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to
    *   expand/collapse the menu)
    * - We're not on a Mac (or iOS)
    *
    * This is because on Windows, pressing alt moves focus to the application menu bar or similar,
    * closing any open context menus. There is not a similar behavior on Macs.
    */
    _this._shouldHandleKeyUp = function (ev) {
      var keyPressIsAltOrMetaAlone = _this._lastKeyDownWasAltOrMeta && _this._isAltOrMeta(ev);
      _this._lastKeyDownWasAltOrMeta = false;
      return !!keyPressIsAltOrMetaAlone && !(_Utilities.isIOS() || _Utilities.isMac());
    };
    /**
    * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;
    * if so, stops event propagation and dismisses menu(s).
    * @param ev - The keyboard event.
    * @param shouldHandleKey - Returns whether we should handle this keyboard event.
    * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.
    * Only does anything if `shouldHandleKey` returns true.
    * @returns Whether the event was handled.
    */
    _this._keyHandler = function (ev, shouldHandleKey, dismissAllMenus) {
      var handled = false;
      if (shouldHandleKey(ev)) {
        _this.dismiss(ev, dismissAllMenus);
        ev.preventDefault();
        ev.stopPropagation();
        handled = true;
      }
      return handled;
    };
    /**
    * Checks if the submenu should be closed
    */
    _this._shouldCloseSubMenu = function (ev) {
      var submenuCloseKey = _Utilities.getRTL(_this.props.theme) ? _Utilities.KeyCodes.right : _Utilities.KeyCodes.left;
      // eslint-disable-next-line deprecation/deprecation
      if (ev.which !== submenuCloseKey || !_this.props.isSubMenu) {
        return false;
      }
      return _this._adjustedFocusZoneProps.direction === _FocusZone.FocusZoneDirection.vertical || !!_this._adjustedFocusZoneProps.checkForNoWrap && !_Utilities.shouldWrapFocus(ev.target, 'data-no-horizontal-wrap');
    };
    _this._onMenuKeyDown = function (ev) {
      // Mark as handled if onKeyDown returns true (for handling collapse cases)
      // or if we are attempting to expand a submenu
      var handled = _this._onKeyDown(ev);
      var hostElement = _this.props.hoisted.hostElement;
      if (handled || !hostElement.current) {
        return;
      }
      // If we have a modifier key being pressed, we do not want to move focus.
      // Otherwise, handle up and down keys.
      var hasModifier = !!(ev.altKey || ev.metaKey);
      // eslint-disable-next-line deprecation/deprecation
      var isUp = ev.which === _Utilities.KeyCodes.up;
      // eslint-disable-next-line deprecation/deprecation
      var isDown = ev.which === _Utilities.KeyCodes.down;
      if (!hasModifier && (isUp || isDown)) {
        var elementToFocus = isUp ? _Utilities.getLastFocusable(hostElement.current, hostElement.current.lastChild, true) : _Utilities.getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);
        if (elementToFocus) {
          elementToFocus.focus();
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    /**
    * Scroll handler for the callout to make sure the mouse events
    * for updating focus are not interacting during scroll
    */
    _this._onScroll = function () {
      if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {
        _this._async.clearTimeout(_this._scrollIdleTimeoutId);
        _this._scrollIdleTimeoutId = undefined;
      } else {
        _this._isScrollIdle = false;
      }
      _this._scrollIdleTimeoutId = _this._async.setTimeout(function () {
        _this._isScrollIdle = true;
      }, NavigationIdleDelay);
    };
    _this._onItemMouseEnterBase = function (item, ev, target) {
      if (_this._shouldIgnoreMouseEvent()) {
        return;
      }
      _this._updateFocusOnMouseEvent(item, ev, target);
    };
    _this._onItemMouseMoveBase = function (item, ev, target) {
      var targetElement = ev.currentTarget;
      var _a = _this.props.hoisted, shouldUpdateFocusOnMouseEvent = _a.shouldUpdateFocusOnMouseEvent, gotMouseMove = _a.gotMouseMove, targetWindow = _a.targetWindow;
      // Always do this check to make sure we record a mouseMove if needed (even if we are timed out)
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      } else {
        return;
      }
      if (!_this._isScrollIdle || _this._enterTimerId !== undefined || targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {
        return;
      }
      _this._updateFocusOnMouseEvent(item, ev, target);
    };
    _this._onMouseItemLeave = function (item, ev) {
      var _a;
      var _b = _this.props.hoisted, expandedMenuItemKey = _b.expandedMenuItemKey, hostElement = _b.hostElement;
      if (_this._shouldIgnoreMouseEvent()) {
        return;
      }
      if (_this._enterTimerId !== undefined) {
        _this._async.clearTimeout(_this._enterTimerId);
        _this._enterTimerId = undefined;
      }
      if (expandedMenuItemKey !== undefined) {
        return;
      }
      /**
      * IE11 focus() method forces parents to scroll to top of element.
      * Edge and IE expose a setActive() function for focusable divs that
      * sets the page focus but does not scroll the parent element.
      */
      if (hostElement.current.setActive) {
        try {
          hostElement.current.setActive();
        } catch (e) {}
      } else {
        (_a = hostElement.current) === null || _a === void 0 ? void 0 : _a.focus();
      }
    };
    _this._onItemMouseDown = function (item, ev) {
      if (item.onMouseDown) {
        item.onMouseDown(item, ev);
      }
    };
    _this._onItemClick = function (item, ev) {
      _this._onItemClickBase(item, ev, ev.currentTarget);
    };
    _this._onItemClickBase = function (item, ev, target) {
      var items = getSubmenuItems(item);
      var _a = _this.props.hoisted, expandedMenuItemKey = _a.expandedMenuItemKey, openSubMenu = _a.openSubMenu;
      // Cancel a async menu item hover timeout action from being taken and instead
      // just trigger the click event instead.
      _this._cancelSubMenuTimer();
      if (!_utilitiesContextualMenuIndex.hasSubmenu(item) && (!items || !items.length)) {
        // This is an item without a menu. Click it.
        _this._executeItemClick(item, ev);
      } else {
        if (item.key !== expandedMenuItemKey) {
          // This has a collapsed sub menu. Expand it.
          openSubMenu(item, target, // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing
          // "Enter" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates
          // between a real click event and a keypress event (detail should be the number of mouse clicks).
          // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).
          // So we also check the pointerType property, which both Edge and IE set to "mouse" for real clicks
          // and "" for pressing "Enter" with Narrator on.
          ev.nativeEvent.detail !== 0 || ev.nativeEvent.pointerType === 'mouse');
        }
      }
      ev.stopPropagation();
      ev.preventDefault();
    };
    _this._onAnchorClick = function (item, ev) {
      _this._executeItemClick(item, ev);
      ev.stopPropagation();
    };
    _this._executeItemClick = function (item, ev) {
      if (item.disabled || item.isDisabled) {
        return;
      }
      var dismiss = false;
      if (item.onClick) {
        dismiss = !!item.onClick(ev, item);
      } else if (_this.props.onItemClick) {
        dismiss = !!_this.props.onItemClick(ev, item);
      }
      if (dismiss || !ev.defaultPrevented) {
        _this.dismiss(ev, true);
      }
    };
    _this._onItemKeyDown = function (item, ev) {
      var openKey = _Utilities.getRTL(_this.props.theme) ? _Utilities.KeyCodes.left : _Utilities.KeyCodes.right;
      if (!item.disabled && (// eslint-disable-next-line deprecation/deprecation
      ev.which === openKey || ev.which === _Utilities.KeyCodes.enter || ev.which === _Utilities.KeyCodes.down && (ev.altKey || ev.metaKey))) {
        _this.props.hoisted.openSubMenu(item, ev.currentTarget, false);
        ev.preventDefault();
      }
    };
    // Cancel a async menu item hover timeout action from being taken and instead
    // do new upcoming behavior
    _this._cancelSubMenuTimer = function () {
      if (_this._enterTimerId !== undefined) {
        _this._async.clearTimeout(_this._enterTimerId);
        _this._enterTimerId = undefined;
      }
    };
    /**
    * This function is called ASYNCHRONOUSLY, and so there is a chance it is called
    * after the component is unmounted. The _mounted property is added to prevent
    * from calling setState() after unmount. Do NOT copy this pattern in synchronous
    * code.
    */
    _this._onSubMenuDismiss = function (ev, dismissAll) {
      if (dismissAll) {
        _this.dismiss(ev, dismissAll);
      } else if (_this._mounted) {
        _this.props.hoisted.closeSubMenu();
      }
    };
    _this._onPointerAndTouchEvent = function (ev) {
      _this._cancelSubMenuTimer();
    };
    _this._async = new _Utilities.Async(_this);
    _this._events = new _Utilities.EventGroup(_this);
    _Utilities.initializeComponentRef(_this);
    _Utilities.warnDeprecations(COMPONENT_NAME, props, {
      getMenuClassNames: 'styles'
    });
    _this.state = {
      contextualMenuItems: undefined,
      subMenuId: _Utilities.getId('ContextualMenu')
    };
    _this._id = props.id || _Utilities.getId('ContextualMenu');
    _this._isScrollIdle = true;
    return _this;
  }
  ContextualMenuInternal.prototype.shouldComponentUpdate = function (newProps, newState) {
    if (!newProps.shouldUpdateWhenHidden && this.props.hidden && newProps.hidden) {
      // Do not update when hidden.
      return false;
    }
    return !_Utilities.shallowCompare(this.props, newProps) || !_Utilities.shallowCompare(this.state, newState);
  };
  ContextualMenuInternal.prototype.getSnapshotBeforeUpdate = function (prevProps) {
    var hoisted = this.props.hoisted;
    if (this._isHidden(prevProps) !== this._isHidden(this.props)) {
      if (this._isHidden(this.props)) {
        this._onMenuClosed();
      } else {
        this._previousActiveElement = hoisted.targetWindow ? hoisted.targetWindow.document.activeElement : undefined;
      }
    }
    return null;
  };
  // Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.
  ContextualMenuInternal.prototype.componentDidMount = function () {
    var _a = this.props, hidden = _a.hidden, hoisted = _a.hoisted;
    if (!hidden) {
      this._previousActiveElement = hoisted.targetWindow ? hoisted.targetWindow.document.activeElement : undefined;
    }
    this._mounted = true;
  };
  // Invoked immediately before a component is unmounted from the DOM.
  ContextualMenuInternal.prototype.componentWillUnmount = function () {
    if (this.props.onMenuDismissed) {
      this.props.onMenuDismissed(this.props);
    }
    this._events.dispose();
    this._async.dispose();
    this._mounted = false;
  };
  ContextualMenuInternal.prototype.render = function () {
    var _this = this;
    var isBeakVisible = this.props.isBeakVisible;
    var _a = this.props, items = _a.items, labelElementId = _a.labelElementId, id = _a.id, className = _a.className, beakWidth = _a.beakWidth, directionalHint = _a.directionalHint, directionalHintForRTL = _a.directionalHintForRTL, alignTargetEdge = _a.alignTargetEdge, gapSpace = _a.gapSpace, coverTarget = _a.coverTarget, ariaLabel = _a.ariaLabel, doNotLayer = _a.doNotLayer, target = _a.target, bounds = _a.bounds, useTargetWidth = _a.useTargetWidth, useTargetAsMinWidth = _a.useTargetAsMinWidth, directionalHintFixed = _a.directionalHintFixed, shouldFocusOnMount = _a.shouldFocusOnMount, shouldFocusOnContainer = _a.shouldFocusOnContainer, title = _a.title, styles = _a.styles, theme = _a.theme, calloutProps = _a.calloutProps, _b = _a.onRenderSubMenu, onRenderSubMenu = _b === void 0 ? this._onRenderSubMenu : _b, _c = _a.onRenderMenuList, onRenderMenuList = _c === void 0 ? this._onRenderMenuList : _c, focusZoneProps = _a.focusZoneProps, // eslint-disable-next-line deprecation/deprecation
    getMenuClassNames = _a.getMenuClassNames, _d = _a.hoisted, expandedMenuItemKey = _d.expandedMenuItemKey, targetRef = _d.targetRef, onMenuFocusCapture = _d.onMenuFocusCapture, hostElement = _d.hostElement;
    this._classNames = getMenuClassNames ? getMenuClassNames(theme, className) : getClassNames(styles, {
      theme: theme,
      className: className
    });
    var hasIcons = itemsHaveIcons(items);
    function itemsHaveIcons(contextualMenuItems) {
      for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {
        var item = contextualMenuItems_1[_i];
        if (item.iconProps) {
          return true;
        }
        if (item.itemType === _ContextualMenuTypes.ContextualMenuItemType.Section && item.sectionProps && itemsHaveIcons(item.sectionProps.items)) {
          return true;
        }
      }
      return false;
    }
    this._adjustedFocusZoneProps = _tslib.__assign(_tslib.__assign({}, focusZoneProps), {
      className: this._classNames.root,
      isCircularNavigation: true,
      handleTabKey: _FocusZone.FocusZoneTabbableElements.all,
      direction: this._getFocusZoneDirection()
    });
    var hasCheckmarks = canAnyMenuItemsCheck(items);
    var submenuProps = expandedMenuItemKey && this.props.hidden !== true ? this._getSubmenuProps() : null;
    isBeakVisible = isBeakVisible === undefined ? this.props.responsiveMode <= _ResponsiveMode.ResponsiveMode.medium : isBeakVisible;
    /**
    * When useTargetWidth is true, get the width of the target element and apply it for the context menu container
    */
    var contextMenuStyle;
    var targetAsHtmlElement = targetRef.current;
    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {
      var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();
      var targetWidth = targetBoundingRect.width - 2;
      /*Accounts for 1px border*/
      if (useTargetWidth) {
        contextMenuStyle = {
          width: targetWidth
        };
      } else if (useTargetAsMinWidth) {
        contextMenuStyle = {
          minWidth: targetWidth
        };
      }
    }
    // The menu should only return if items were provided, if no items were provided then it should not appear.
    if (items && items.length > 0) {
      var totalItemCount_1 = 0;
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        if (item.itemType !== _ContextualMenuTypes.ContextualMenuItemType.Divider && item.itemType !== _ContextualMenuTypes.ContextualMenuItemType.Header) {
          var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
          totalItemCount_1 += itemCount;
        }
      }
      var calloutStyles_1 = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.callout : undefined;
      return _react.createElement(_utilitiesMenuContextIndex.MenuContext.Consumer, null, function (menuContext) {
        return _react.createElement(_Callout.Callout, _tslib.__assign({
          styles: calloutStyles_1,
          onRestoreFocus: _this._tryFocusPreviousActiveElement
        }, calloutProps, {
          target: target || menuContext.target,
          isBeakVisible: isBeakVisible,
          beakWidth: beakWidth,
          directionalHint: directionalHint,
          directionalHintForRTL: directionalHintForRTL,
          gapSpace: gapSpace,
          coverTarget: coverTarget,
          doNotLayer: doNotLayer,
          className: _Utilities.css('ms-ContextualMenu-Callout', calloutProps && calloutProps.className),
          setInitialFocus: shouldFocusOnMount,
          onDismiss: _this.props.onDismiss || menuContext.onDismiss,
          onScroll: _this._onScroll,
          bounds: bounds,
          directionalHintFixed: directionalHintFixed,
          alignTargetEdge: alignTargetEdge,
          hidden: _this.props.hidden || menuContext.hidden,
          ref: hostElement
        }), _react.createElement("div", {
          style: contextMenuStyle,
          id: id,
          className: _this._classNames.container,
          tabIndex: shouldFocusOnContainer ? 0 : -1,
          onKeyDown: _this._onMenuKeyDown,
          onKeyUp: _this._onKeyUp,
          onFocusCapture: onMenuFocusCapture,
          "aria-label": ariaLabel,
          "aria-labelledby": labelElementId,
          role: 'menu'
        }, title && _react.createElement("div", {
          className: _this._classNames.title
        }, " ", title, " "), items && items.length ? _this._renderFocusZone(onRenderMenuList({
          ariaLabel: ariaLabel,
          items: items,
          totalItemCount: totalItemCount_1,
          hasCheckmarks: hasCheckmarks,
          hasIcons: hasIcons,
          defaultMenuItemRenderer: _this._defaultMenuItemRenderer,
          labelElementId: labelElementId
        }, _this._onRenderMenuList)) : null, submenuProps && onRenderSubMenu(submenuProps, _this._onRenderSubMenu)));
      });
    } else {
      return null;
    }
  };
  ContextualMenuInternal.prototype._onMenuClosed = function () {
    var _a, _b;
    (_a = this._tryFocusPreviousActiveElement) === null || _a === void 0 ? void 0 : _a.call(this, {
      originalElement: this._previousActiveElement,
      containsFocus: true,
      documentContainsFocus: ((_b = _Utilities.getDocument()) === null || _b === void 0 ? void 0 : _b.hasFocus()) || false
    });
  };
  /**
  * Return whether the contextual menu is hidden.
  * Undefined value for hidden is equivalent to hidden being false.
  * @param props - Props for the component
  */
  ContextualMenuInternal.prototype._isHidden = function (props) {
    return !!props.hidden;
  };
  /**
  * Gets the focusZoneDirection by using the arrowDirection if specified,
  * the direction specified in the focusZoneProps, or defaults to FocusZoneDirection.vertical
  */
  ContextualMenuInternal.prototype._getFocusZoneDirection = function () {
    var focusZoneProps = this.props.focusZoneProps;
    return focusZoneProps && focusZoneProps.direction !== undefined ? focusZoneProps.direction : _FocusZone.FocusZoneDirection.vertical;
  };
  ContextualMenuInternal.prototype._onRenderSubMenu = function (subMenuProps, defaultRender) {
    throw Error('ContextualMenuBase: onRenderSubMenu callback is null or undefined. ' + 'Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.');
  };
  ContextualMenuInternal.prototype._renderFocusZone = function (children) {
    var _a = this.props.focusZoneAs, ChildrenRenderer = _a === void 0 ? _FocusZone.FocusZone : _a;
    return _react.createElement(ChildrenRenderer, _tslib.__assign({}, this._adjustedFocusZoneProps), children);
  };
  ContextualMenuInternal.prototype._renderSectionItem = function (sectionItem, // eslint-disable-next-line deprecation/deprecation
  menuClassNames, index, hasCheckmarks, hasIcons) {
    var _this = this;
    var sectionProps = sectionItem.sectionProps;
    if (!sectionProps) {
      return;
    }
    var headerItem;
    var groupProps;
    if (sectionProps.title) {
      // Since title is a user-facing string, it needs to be stripped of whitespace in order to build a valid element ID
      var id = this._id + sectionProps.title.replace(/\s/g, '');
      var headerContextualMenuItem = {
        key: "section-" + sectionProps.title + "-title",
        itemType: _ContextualMenuTypes.ContextualMenuItemType.Header,
        text: sectionProps.title,
        id: id
      };
      groupProps = {
        role: 'group',
        'aria-labelledby': id
      };
      headerItem = this._renderHeaderMenuItem(headerContextualMenuItem, menuClassNames, index, hasCheckmarks, hasIcons);
    }
    if (sectionProps.items && sectionProps.items.length > 0) {
      return _react.createElement("li", {
        role: "presentation",
        key: sectionProps.key || sectionItem.key || "section-" + index
      }, _react.createElement("div", _tslib.__assign({}, groupProps), _react.createElement("ul", {
        className: this._classNames.list,
        role: "presentation"
      }, sectionProps.topDivider && this._renderSeparator(index, menuClassNames, true, true), headerItem && this._renderListItem(headerItem, sectionItem.key || index, menuClassNames, sectionItem.title), sectionProps.items.map(function (contextualMenuItem, itemsIndex) {
        return _this._renderMenuItem(contextualMenuItem, itemsIndex, itemsIndex, sectionProps.items.length, hasCheckmarks, hasIcons);
      }), sectionProps.bottomDivider && this._renderSeparator(index, menuClassNames, false, true))));
    }
  };
  ContextualMenuInternal.prototype._renderListItem = function (content, key, classNames, // eslint-disable-line deprecation/deprecation
  title) {
    return _react.createElement("li", {
      role: "presentation",
      title: title,
      key: key,
      className: classNames.item
    }, content);
  };
  ContextualMenuInternal.prototype._renderSeparator = function (index, classNames, // eslint-disable-line deprecation/deprecation
  top, fromSection) {
    if (fromSection || index > 0) {
      return _react.createElement("li", {
        role: "separator",
        key: 'separator-' + index + (top === undefined ? '' : top ? '-top' : '-bottom'),
        className: classNames.divider,
        "aria-hidden": "true"
      });
    }
    return null;
  };
  ContextualMenuInternal.prototype._renderNormalItem = function (item, classNames, // eslint-disable-line deprecation/deprecation
  index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {
    if (item.onRender) {
      return item.onRender(_tslib.__assign({
        'aria-posinset': focusableElementIndex + 1,
        'aria-setsize': totalItemCount
      }, item), this.dismiss);
    }
    if (item.href) {
      return this._renderAnchorMenuItem(item, classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);
    }
    if (item.split && _utilitiesContextualMenuIndex.hasSubmenu(item)) {
      return this._renderSplitButton(item, classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);
    }
    return this._renderButtonItem(item, classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);
  };
  ContextualMenuInternal.prototype._renderHeaderMenuItem = function (item, // eslint-disable-next-line deprecation/deprecation
  classNames, index, hasCheckmarks, hasIcons) {
    var _a = this.props.contextualMenuItemAs, ChildrenRenderer = _a === void 0 ? _ContextualMenuItem.ContextualMenuItem : _a;
    var itemProps = item.itemProps, id = item.id;
    var divHtmlProperties = itemProps && _Utilities.getNativeProps(itemProps, _Utilities.divProperties);
    return (
      // eslint-disable-next-line deprecation/deprecation
      _react.createElement("div", _tslib.__assign({
        id: id,
        className: this._classNames.header
      }, divHtmlProperties, {
        style: item.style
      }), _react.createElement(ChildrenRenderer, _tslib.__assign({
        item: item,
        classNames: classNames,
        index: index,
        onCheckmarkClick: hasCheckmarks ? this._onItemClick : undefined,
        hasIcons: hasIcons
      }, itemProps)))
    );
  };
  ContextualMenuInternal.prototype._renderAnchorMenuItem = function (item, // eslint-disable-next-line deprecation/deprecation
  classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {
    var _a = this.props, contextualMenuItemAs = _a.contextualMenuItemAs, _b = _a.hoisted, expandedMenuItemKey = _b.expandedMenuItemKey, openSubMenu = _b.openSubMenu;
    return _react.createElement(_ContextualMenuItemWrapperIndex.ContextualMenuAnchor, {
      item: item,
      classNames: classNames,
      index: index,
      focusableElementIndex: focusableElementIndex,
      totalItemCount: totalItemCount,
      hasCheckmarks: hasCheckmarks,
      hasIcons: hasIcons,
      contextualMenuItemAs: contextualMenuItemAs,
      onItemMouseEnter: this._onItemMouseEnterBase,
      onItemMouseLeave: this._onMouseItemLeave,
      onItemMouseMove: this._onItemMouseMoveBase,
      onItemMouseDown: this._onItemMouseDown,
      executeItemClick: this._executeItemClick,
      onItemClick: this._onAnchorClick,
      onItemKeyDown: this._onItemKeyDown,
      expandedMenuItemKey: expandedMenuItemKey,
      openSubMenu: openSubMenu,
      dismissSubMenu: this._onSubMenuDismiss,
      dismissMenu: this.dismiss
    });
  };
  ContextualMenuInternal.prototype._renderButtonItem = function (item, // eslint-disable-next-line deprecation/deprecation
  classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {
    var _a = this.props, contextualMenuItemAs = _a.contextualMenuItemAs, _b = _a.hoisted, expandedMenuItemKey = _b.expandedMenuItemKey, openSubMenu = _b.openSubMenu;
    return _react.createElement(_ContextualMenuItemWrapperIndex.ContextualMenuButton, {
      item: item,
      classNames: classNames,
      index: index,
      focusableElementIndex: focusableElementIndex,
      totalItemCount: totalItemCount,
      hasCheckmarks: hasCheckmarks,
      hasIcons: hasIcons,
      contextualMenuItemAs: contextualMenuItemAs,
      onItemMouseEnter: this._onItemMouseEnterBase,
      onItemMouseLeave: this._onMouseItemLeave,
      onItemMouseMove: this._onItemMouseMoveBase,
      onItemMouseDown: this._onItemMouseDown,
      executeItemClick: this._executeItemClick,
      onItemClick: this._onItemClick,
      onItemClickBase: this._onItemClickBase,
      onItemKeyDown: this._onItemKeyDown,
      expandedMenuItemKey: expandedMenuItemKey,
      openSubMenu: openSubMenu,
      dismissSubMenu: this._onSubMenuDismiss,
      dismissMenu: this.dismiss
    });
  };
  ContextualMenuInternal.prototype._renderSplitButton = function (item, // eslint-disable-next-line deprecation/deprecation
  classNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {
    var _a = this.props, contextualMenuItemAs = _a.contextualMenuItemAs, _b = _a.hoisted, expandedMenuItemKey = _b.expandedMenuItemKey, openSubMenu = _b.openSubMenu;
    return _react.createElement(_ContextualMenuItemWrapperIndex.ContextualMenuSplitButton, {
      item: item,
      classNames: classNames,
      index: index,
      focusableElementIndex: focusableElementIndex,
      totalItemCount: totalItemCount,
      hasCheckmarks: hasCheckmarks,
      hasIcons: hasIcons,
      contextualMenuItemAs: contextualMenuItemAs,
      onItemMouseEnter: this._onItemMouseEnterBase,
      onItemMouseLeave: this._onMouseItemLeave,
      onItemMouseMove: this._onItemMouseMoveBase,
      onItemMouseDown: this._onItemMouseDown,
      executeItemClick: this._executeItemClick,
      onItemClick: this._onItemClick,
      onItemClickBase: this._onItemClickBase,
      onItemKeyDown: this._onItemKeyDown,
      openSubMenu: openSubMenu,
      dismissSubMenu: this._onSubMenuDismiss,
      dismissMenu: this.dismiss,
      expandedMenuItemKey: expandedMenuItemKey,
      onTap: this._onPointerAndTouchEvent
    });
  };
  /**
  * Returns true if the key for the event is alt (Mac option) or meta (Mac command).
  */
  ContextualMenuInternal.prototype._isAltOrMeta = function (ev) {
    // eslint-disable-next-line deprecation/deprecation
    return ev.which === _Utilities.KeyCodes.alt || ev.key === 'Meta';
  };
  ContextualMenuInternal.prototype._shouldIgnoreMouseEvent = function () {
    return !this._isScrollIdle || !this.props.hoisted.gotMouseMove.current;
  };
  /**
  * Handles updating focus when mouseEnter or mouseMove fire.
  * As part of updating focus, This function will also update
  * the expand/collapse state accordingly.
  */
  ContextualMenuInternal.prototype._updateFocusOnMouseEvent = function (item, ev, target) {
    var _this = this;
    var targetElement = target ? target : ev.currentTarget;
    var _a = this.props, _b = _a.subMenuHoverDelay, timeoutDuration = _b === void 0 ? NavigationIdleDelay : _b, _c = _a.hoisted, expandedMenuItemKey = _c.expandedMenuItemKey, openSubMenu = _c.openSubMenu;
    if (item.key === expandedMenuItemKey) {
      return;
    }
    if (this._enterTimerId !== undefined) {
      this._async.clearTimeout(this._enterTimerId);
      this._enterTimerId = undefined;
    }
    // If the menu is not expanded we can update focus without any delay
    if (expandedMenuItemKey === undefined) {
      targetElement.focus();
    }
    // Delay updating expanding/dismissing the submenu
    // and only set focus if we have not already done so
    if (_utilitiesContextualMenuIndex.hasSubmenu(item)) {
      ev.stopPropagation();
      this._enterTimerId = this._async.setTimeout(function () {
        targetElement.focus();
        openSubMenu(item, targetElement, true);
        _this._enterTimerId = undefined;
      }, timeoutDuration);
    } else {
      this._enterTimerId = this._async.setTimeout(function () {
        _this._onSubMenuDismiss(ev);
        targetElement.focus();
        _this._enterTimerId = undefined;
      }, timeoutDuration);
    }
  };
  ContextualMenuInternal.prototype._getSubmenuProps = function () {
    var _a = this.props.hoisted, submenuTarget = _a.submenuTarget, expandedMenuItemKey = _a.expandedMenuItemKey, expandedByMouseClick = _a.expandedByMouseClick;
    var item = this._findItemByKey(expandedMenuItemKey);
    var submenuProps = null;
    if (item) {
      submenuProps = {
        items: getSubmenuItems(item),
        target: submenuTarget,
        onDismiss: this._onSubMenuDismiss,
        isSubMenu: true,
        id: this.state.subMenuId,
        shouldFocusOnMount: true,
        shouldFocusOnContainer: expandedByMouseClick,
        directionalHint: _Utilities.getRTL(this.props.theme) ? _commonDirectionalHint.DirectionalHint.leftTopEdge : _commonDirectionalHint.DirectionalHint.rightTopEdge,
        className: this.props.className,
        gapSpace: 0,
        isBeakVisible: false
      };
      if (item.subMenuProps) {
        _Utilities.assign(submenuProps, item.subMenuProps);
      }
    }
    return submenuProps;
  };
  ContextualMenuInternal.prototype._findItemByKey = function (key) {
    var items = this.props.items;
    return this._findItemByKeyFromItems(key, items);
  };
  /**
  * Returns the item that matches a given key if any.
  * @param key - The key of the item to match
  * @param items - The items to look for the key
  */
  ContextualMenuInternal.prototype._findItemByKeyFromItems = function (key, items) {
    for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
      var item = items_2[_i];
      if (item.itemType === _ContextualMenuTypes.ContextualMenuItemType.Section && item.sectionProps) {
        var match = this._findItemByKeyFromItems(key, item.sectionProps.items);
        if (match) {
          return match;
        }
      } else if (item.key && item.key === key) {
        return item;
      }
    }
  };
  return ContextualMenuInternal;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","./ContextualMenu.types":"5Hfov","../../common/DirectionalHint":"6itO1","../../FocusZone":"1FMTL","../../Utilities":"1439N","../../utilities/contextualMenu/index":"6LyFR","../../Callout":"6tnBs","./ContextualMenuItem":"3ad74","./ContextualMenuItemWrapper/index":"6aMWB","../../Styling":"5q33X","./ContextualMenu.classNames":"45QvB","@fluentui/react-hooks":"1pHwU","../../ResponsiveMode":"2WtGI","../../utilities/MenuContext/index":"2DBO9","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5Hfov":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuItemType", function () {
  return ContextualMenuItemType;
});
_parcelHelpers.export(exports, "DirectionalHint", function () {
  return _commonDirectionalHint.DirectionalHint;
});
var _commonDirectionalHint = require('../../common/DirectionalHint');
var ContextualMenuItemType;
(function (ContextualMenuItemType) {
  ContextualMenuItemType[ContextualMenuItemType["Normal"] = 0] = "Normal";
  ContextualMenuItemType[ContextualMenuItemType["Divider"] = 1] = "Divider";
  ContextualMenuItemType[ContextualMenuItemType["Header"] = 2] = "Header";
  ContextualMenuItemType[ContextualMenuItemType["Section"] = 3] = "Section";
})(ContextualMenuItemType || (ContextualMenuItemType = {}));

},{"../../common/DirectionalHint":"6itO1","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1FMTL":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _fluentuiReactFocus = require('@fluentui/react-focus');
_parcelHelpers.exportAll(_fluentuiReactFocus, exports);

},{"@fluentui/react-focus":"tofQB","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"tofQB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("./version");
tslib_1.__exportStar(require("./components/FocusZone/index"), exports);

},{"tslib":"3xr0u","./version":"6DWjP","./components/FocusZone/index":"6qjmi"}],"3xr0u":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"6DWjP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/react-focus', '8.1.2');

},{"@fluentui/set-version":"12cIw"}],"6qjmi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./FocusZone"), exports);
tslib_1.__exportStar(require("./FocusZone.types"), exports);

},{"tslib":"3xr0u","./FocusZone":"2Iscc","./FocusZone.types":"6LHQt"}],"2Iscc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FocusZone = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var FocusZone_types_1 = require("./FocusZone.types");
var utilities_1 = require("@fluentui/utilities");
var merge_styles_1 = require("@fluentui/merge-styles");
var style_utilities_1 = require("@fluentui/style-utilities");
var IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';
var IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';
var FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';
var TABINDEX = 'tabindex';
var NO_VERTICAL_WRAP = 'data-no-vertical-wrap';
var NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';
var LARGE_DISTANCE_FROM_CENTER = 999999999;
var LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;
var focusZoneStyles;
var focusZoneClass = 'ms-FocusZone';
// Helper function that will return a class for when the root is focused
function getRootClass() {
  if (!focusZoneStyles) {
    focusZoneStyles = merge_styles_1.mergeStyles({
      selectors: {
        ':focus': {
          outline: 'none'
        }
      }
    }, focusZoneClass);
  }
  return focusZoneStyles;
}
var _allInstances = {};
var _outerZones = new Set();
var ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];
var ALLOW_VIRTUAL_ELEMENTS = false;
var FocusZone = /** @class*/
(function (_super) {
  tslib_1.__extends(FocusZone, _super);
  function FocusZone(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React.createRef();
    _this._mergedRef = utilities_1.createMergedRef();
    _this._onFocus = function (ev) {
      if (_this._portalContainsElement(ev.target)) {
        // If the event target is inside a portal do not process the event.
        return;
      }
      var _a = _this.props, onActiveElementChanged = _a.onActiveElementChanged, // eslint-disable-next-line deprecation/deprecation
      doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a.stopFocusPropagation, // eslint-disable-next-line deprecation/deprecation
      onFocusNotification = _a.onFocusNotification, onFocus = _a.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a.defaultTabbableElement;
      var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);
      var newActiveElement;
      if (isImmediateDescendant) {
        newActiveElement = ev.target;
      } else {
        var parentElement = ev.target;
        while (parentElement && parentElement !== _this._root.current) {
          if (utilities_1.isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {
            newActiveElement = parentElement;
            break;
          }
          parentElement = utilities_1.getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
        }
      }
      // If an inner focusable element should be focused when FocusZone container receives focus
      if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {
        var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === 'function' && defaultTabbableElement(_this._root.current);
        // try to focus defaultTabbable element
        if (maybeElementToFocus && utilities_1.isElementTabbable(maybeElementToFocus)) {
          newActiveElement = maybeElementToFocus;
          maybeElementToFocus.focus();
        } else {
          // force focus on first focusable element
          _this.focus(true);
          if (_this._activeElement) {
            // set to null as new active element was handled in method above
            newActiveElement = null;
          }
        }
      }
      var initialElementFocused = !_this._activeElement;
      // If the new active element is a child of this zone and received focus,
      // update alignment an immediate descendant
      if (newActiveElement && newActiveElement !== _this._activeElement) {
        if (isImmediateDescendant || initialElementFocused) {
          _this._setFocusAlignment(newActiveElement, true, true);
        }
        _this._activeElement = newActiveElement;
        if (initialElementFocused) {
          _this._updateTabIndexes();
        }
      }
      if (onActiveElementChanged) {
        onActiveElementChanged(_this._activeElement, ev);
      }
      if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {
        ev.stopPropagation();
      }
      if (onFocus) {
        onFocus(ev);
      } else if (onFocusNotification) {
        onFocusNotification();
      }
    };
    _this._onBlur = function () {
      _this._setParkedFocus(false);
    };
    _this._onMouseDown = function (ev) {
      if (_this._portalContainsElement(ev.target)) {
        // If the event target is inside a portal do not process the event.
        return;
      }
      var disabled = _this.props.disabled;
      if (disabled) {
        return;
      }
      var target = ev.target;
      var path = [];
      while (target && target !== _this._root.current) {
        path.push(target);
        target = utilities_1.getParent(target, ALLOW_VIRTUAL_ELEMENTS);
      }
      while (path.length) {
        target = path.pop();
        if (target && utilities_1.isElementTabbable(target)) {
          _this._setActiveElement(target, true);
        }
        if (utilities_1.isElementFocusZone(target)) {
          // Stop here since the focus zone will take care of its own children.
          break;
        }
      }
    };
    /**
    * Handle the keystrokes.
    */
    _this._onKeyDown = function (ev, theme) {
      if (_this._portalContainsElement(ev.target)) {
        // If the event target is inside a portal do not process the event.
        return;
      }
      // eslint-disable-next-line deprecation/deprecation
      var _a = _this.props, direction = _a.direction, disabled = _a.disabled, isInnerZoneKeystroke = _a.isInnerZoneKeystroke, pagingSupportDisabled = _a.pagingSupportDisabled, shouldEnterInnerZone = _a.shouldEnterInnerZone;
      if (disabled) {
        return;
      }
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(ev);
      }
      // If the default has been prevented, do not process keyboard events.
      if (ev.isDefaultPrevented()) {
        return;
      }
      if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {
        // If this element has focus, it is being controlled by a parent.
        // Ignore the keystroke.
        return;
      }
      if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {
        // Try to focus
        var innerZone = _this._getFirstInnerZone();
        if (innerZone) {
          if (!innerZone.focus(true)) {
            return;
          }
        } else if (utilities_1.isElementFocusSubZone(ev.target)) {
          if (!_this.focusElement(utilities_1.getNextElement(ev.target, ev.target.firstChild, true))) {
            return;
          }
        } else {
          return;
        }
      } else if (ev.altKey) {
        return;
      } else {
        // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props, deprecation/deprecation
        switch (ev.which) {
          case utilities_1.KeyCodes.space:
            if (_this._tryInvokeClickForFocusable(ev.target)) {
              break;
            }
            return;
          case utilities_1.KeyCodes.left:
            if (direction !== FocusZone_types_1.FocusZoneDirection.vertical) {
              _this._preventDefaultWhenHandled(ev);
              if (_this._moveFocusLeft(theme)) {
                break;
              }
            }
            return;
          case utilities_1.KeyCodes.right:
            if (direction !== FocusZone_types_1.FocusZoneDirection.vertical) {
              _this._preventDefaultWhenHandled(ev);
              if (_this._moveFocusRight(theme)) {
                break;
              }
            }
            return;
          case utilities_1.KeyCodes.up:
            if (direction !== FocusZone_types_1.FocusZoneDirection.horizontal) {
              _this._preventDefaultWhenHandled(ev);
              if (_this._moveFocusUp()) {
                break;
              }
            }
            return;
          case utilities_1.KeyCodes.down:
            if (direction !== FocusZone_types_1.FocusZoneDirection.horizontal) {
              _this._preventDefaultWhenHandled(ev);
              if (_this._moveFocusDown()) {
                break;
              }
            }
            return;
          case utilities_1.KeyCodes.pageDown:
            if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {
              break;
            }
            return;
          case utilities_1.KeyCodes.pageUp:
            if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {
              break;
            }
            return;
          case utilities_1.KeyCodes.tab:
            if (// eslint-disable-next-line deprecation/deprecation
            _this.props.allowTabKey || _this.props.handleTabKey === FocusZone_types_1.FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZone_types_1.FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)) {
              var focusChanged = false;
              _this._processingTabKey = true;
              if (direction === FocusZone_types_1.FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {
                focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();
              } else {
                var tabWithDirection = utilities_1.getRTL(theme) ? !ev.shiftKey : ev.shiftKey;
                focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);
              }
              _this._processingTabKey = false;
              if (focusChanged) {
                break;
              } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {
                _this._activeElement = null;
              }
            }
            return;
          case utilities_1.KeyCodes.home:
            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {
              return false;
            }
            var firstChild = _this._root.current && _this._root.current.firstChild;
            if (_this._root.current && firstChild && _this.focusElement(utilities_1.getNextElement(_this._root.current, firstChild, true))) {
              break;
            }
            return;
          case utilities_1.KeyCodes.end:
            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {
              return false;
            }
            var lastChild = _this._root.current && _this._root.current.lastChild;
            if (_this._root.current && _this.focusElement(utilities_1.getPreviousElement(_this._root.current, lastChild, true, true, true))) {
              break;
            }
            return;
          case utilities_1.KeyCodes.enter:
            if (_this._tryInvokeClickForFocusable(ev.target)) {
              break;
            }
            return;
          default:
            return;
        }
      }
      ev.preventDefault();
      ev.stopPropagation();
    };
    _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {
      // eslint-disable-next-line deprecation/deprecation
      var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;
      // ClientRect values can be floats that differ by very small fractions of a decimal.
      // If the difference between top and bottom are within a pixel then we should treat
      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,
      // but without Math.Floor they will be handled incorrectly.
      var targetRectTop = Math.floor(targetRect.top);
      var activeRectBottom = Math.floor(activeRect.bottom);
      var targetRectBottom = Math.floor(targetRect.bottom);
      var activeRectTop = Math.floor(activeRect.top);
      var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;
      var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;
      if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {
        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
          return 0;
        }
        return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
      }
      if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
      }
      return LARGE_DISTANCE_FROM_CENTER;
    };
    // Manage componentRef resolution.
    utilities_1.initializeComponentRef(_this);
    if ("development" !== 'production') {
      utilities_1.warnDeprecations('FocusZone', props, {
        rootProps: undefined,
        allowTabKey: 'handleTabKey',
        elementType: 'as',
        ariaDescribedBy: 'aria-describedby',
        ariaLabelledBy: 'aria-labelledby'
      });
    }
    _this._id = utilities_1.getId('FocusZone');
    _this._focusAlignment = {
      left: 0,
      top: 0
    };
    _this._processingTabKey = false;
    return _this;
  }
  /** Used for testing purposes only.*/
  FocusZone.getOuterZones = function () {
    return _outerZones.size;
  };
  /**
  * Handle global tab presses so that we can patch tabindexes on the fly.
  * HEADS UP: This must not be an arrow function in order to be referentially equal among instances
  * for ref counting to work correctly!
  */
  FocusZone._onKeyDownCapture = function (ev) {
    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props
    if (ev.which === utilities_1.KeyCodes.tab) {
      _outerZones.forEach(function (zone) {
        return zone._updateTabIndexes();
      });
    }
  };
  FocusZone.prototype.componentDidMount = function () {
    var root = this._root.current;
    _allInstances[this._id] = this;
    if (root) {
      this._windowElement = utilities_1.getWindow(root);
      var parentElement = utilities_1.getParent(root, ALLOW_VIRTUAL_ELEMENTS);
      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {
        if (utilities_1.isElementFocusZone(parentElement)) {
          this._isInnerZone = true;
          break;
        }
        parentElement = utilities_1.getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
      }
      if (!this._isInnerZone) {
        _outerZones.add(this);
        if (this._windowElement && _outerZones.size === 1) {
          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);
        }
      }
      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);
      // Assign initial tab indexes so that we can set initial focus as appropriate.
      this._updateTabIndexes();
      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {
        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);
      } else if (this.props.defaultActiveElement) {
        // eslint-disable-next-line deprecation/deprecation
        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);
      }
      if (this.props.shouldFocusOnMount) {
        this.focus();
      }
    }
  };
  FocusZone.prototype.componentDidUpdate = function () {
    var root = this._root.current;
    var doc = this._getDocument();
    if (doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || !this.props.preventFocusRestoration && doc.activeElement === root)) {
      // The element has been removed after the render, attempt to restore focus.
      var elementToFocus = utilities_1.getFocusableByIndexPath(root, this._lastIndexPath);
      if (elementToFocus) {
        this._setActiveElement(elementToFocus, true);
        elementToFocus.focus();
        this._setParkedFocus(false);
      } else {
        // We had a focus path to restore, but now that path is unresolvable. Park focus
        // on the container until we can try again.
        this._setParkedFocus(true);
      }
    }
  };
  FocusZone.prototype.componentWillUnmount = function () {
    delete _allInstances[this._id];
    if (!this._isInnerZone) {
      _outerZones.delete(this);
      // If this is the last outer zone, remove the keydown listener.
      if (this._windowElement && _outerZones.size === 0) {
        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);
      }
    }
    if (this._root.current) {
      this._root.current.removeEventListener('blur', this._onBlur, true);
    }
    this._activeElement = null;
    this._defaultFocusElement = null;
  };
  FocusZone.prototype.render = function () {
    var _this = this;
    // eslint-disable-next-line deprecation/deprecation
    var _a = this.props, tag = _a.as, elementType = _a.elementType, rootProps = _a.rootProps, ariaDescribedBy = _a.ariaDescribedBy, ariaLabelledBy = _a.ariaLabelledBy, className = _a.className;
    var divProps = utilities_1.getNativeProps(this.props, utilities_1.htmlElementProperties);
    var Tag = tag || elementType || 'div';
    // Note, right before rendering/reconciling proceeds, we need to record if focus
    // was in the zone before the update. This helper will track this and, if focus
    // was actually in the zone, what the index path to the element is at this time.
    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in
    // the case the element was removed.
    this._evaluateFocusBeforeRender();
    // Only support RTL defined in global theme, not contextual theme/RTL.
    var theme = style_utilities_1.getTheme();
    return React.createElement(Tag, tslib_1.__assign({
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy
    }, divProps, rootProps, {
      // Once the getClassName correctly memoizes inputs this should
      // be replaced so that className is passed to getRootClass and is included there so
      // the class names will always be in the same order.
      className: utilities_1.css(getRootClass(), className),
      // eslint-disable-next-line deprecation/deprecation
      ref: this._mergedRef(this.props.elementRef, this._root),
      "data-focuszone-id": this._id,
      // eslint-disable-next-line react/jsx-no-bind
      onKeyDown: function (ev) {
        return _this._onKeyDown(ev, theme);
      },
      onFocus: this._onFocus,
      onMouseDownCapture: this._onMouseDown
    }), this.props.children);
  };
  /**
  * Sets focus to the first tabbable item in the zone.
  * @param forceIntoFirstElement - If true, focus will be forced into the first element, even
  * if focus is already in the focus zone.
  * @returns True if focus could be set to an active element, false if no operation was taken.
  */
  FocusZone.prototype.focus = function (forceIntoFirstElement) {
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    if (this._root.current) {
      if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && this._isInnerZone) {
        var ownerZoneElement = this._getOwnerZone(this._root.current);
        if (ownerZoneElement !== this._root.current) {
          var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
          return !!ownerZone && ownerZone.focusElement(this._root.current);
        }
        return false;
      } else if (!forceIntoFirstElement && this._activeElement && utilities_1.elementContains(this._root.current, this._activeElement) && utilities_1.isElementTabbable(this._activeElement)) {
        this._activeElement.focus();
        return true;
      } else {
        var firstChild = this._root.current.firstChild;
        return this.focusElement(utilities_1.getNextElement(this._root.current, firstChild, true));
      }
    }
    return false;
  };
  /**
  * Sets focus to the last tabbable item in the zone.
  * @returns True if focus could be set to an active element, false if no operation was taken.
  */
  FocusZone.prototype.focusLast = function () {
    if (this._root.current) {
      var lastChild = this._root.current && this._root.current.lastChild;
      return this.focusElement(utilities_1.getPreviousElement(this._root.current, lastChild, true, true, true));
    }
    return false;
  };
  /**
  * Sets focus to a specific child element within the zone. This can be used in conjunction with
  * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct
  * location and then focus.)
  * @param element - The child element within the zone to focus.
  * @param forceAlignment - If true, focus alignment will be set according to the element provided.
  * @returns True if focus could be set to an active element, false if no operation was taken.
  */
  FocusZone.prototype.focusElement = function (element, forceAlignment) {
    // eslint-disable-next-line deprecation/deprecation
    var _a = this.props, onBeforeFocus = _a.onBeforeFocus, shouldReceiveFocus = _a.shouldReceiveFocus;
    if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {
      return false;
    }
    if (element) {
      // when we set focus to a specific child, we should recalculate the alignment depending on its position.
      this._setActiveElement(element, forceAlignment);
      if (this._activeElement) {
        this._activeElement.focus();
      }
      return true;
    }
    return false;
  };
  /**
  * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,
  * rather than a center based on the last horizontal motion.
  * @param point - the new reference point.
  */
  FocusZone.prototype.setFocusAlignment = function (point) {
    this._focusAlignment = point;
  };
  FocusZone.prototype._evaluateFocusBeforeRender = function () {
    var root = this._root.current;
    var doc = this._getDocument();
    if (doc) {
      var focusedElement = doc.activeElement;
      // Only update the index path if we are not parked on the root.
      if (focusedElement !== root) {
        var shouldRestoreFocus = utilities_1.elementContains(root, focusedElement, false);
        this._lastIndexPath = shouldRestoreFocus ? utilities_1.getElementIndexPath(root, focusedElement) : undefined;
      }
    }
  };
  /**
  * When focus is in the zone at render time but then all focusable elements are removed,
  * we "park" focus temporarily on the root. Once we update with focusable children, we restore
  * focus to the closest path from previous. If the user tabs away from the parked container,
  * we restore focusability to the pre-parked state.
  */
  FocusZone.prototype._setParkedFocus = function (isParked) {
    var root = this._root.current;
    if (root && this._isParked !== isParked) {
      this._isParked = isParked;
      if (isParked) {
        if (!this.props.allowFocusRoot) {
          this._parkedTabIndex = root.getAttribute('tabindex');
          root.setAttribute('tabindex', '-1');
        }
        root.focus();
      } else if (!this.props.allowFocusRoot) {
        if (this._parkedTabIndex) {
          root.setAttribute('tabindex', this._parkedTabIndex);
          this._parkedTabIndex = undefined;
        } else {
          root.removeAttribute('tabindex');
        }
      }
    }
  };
  FocusZone.prototype._setActiveElement = function (element, forceAlignment) {
    var previousActiveElement = this._activeElement;
    this._activeElement = element;
    if (previousActiveElement) {
      if (utilities_1.isElementFocusZone(previousActiveElement)) {
        this._updateTabIndexes(previousActiveElement);
      }
      previousActiveElement.tabIndex = -1;
    }
    if (this._activeElement) {
      if (!this._focusAlignment || forceAlignment) {
        this._setFocusAlignment(element, true, true);
      }
      this._activeElement.tabIndex = 0;
    }
  };
  FocusZone.prototype._preventDefaultWhenHandled = function (ev) {
    this.props.preventDefaultWhenHandled && ev.preventDefault();
  };
  /**
  * Walk up the dom try to find a focusable element.
  */
  FocusZone.prototype._tryInvokeClickForFocusable = function (target) {
    if (target === this._root.current || !this.props.shouldRaiseClicks) {
      return false;
    }
    do {
      if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
        return false;
      }
      if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {
        utilities_1.raiseClick(target);
        return true;
      }
      target = utilities_1.getParent(target, ALLOW_VIRTUAL_ELEMENTS);
    } while (target !== this._root.current);
    return false;
  };
  /**
  * Traverse to find first child zone.
  */
  FocusZone.prototype._getFirstInnerZone = function (rootElement) {
    rootElement = rootElement || this._activeElement || this._root.current;
    if (!rootElement) {
      return null;
    }
    if (utilities_1.isElementFocusZone(rootElement)) {
      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
    }
    var child = rootElement.firstElementChild;
    while (child) {
      if (utilities_1.isElementFocusZone(child)) {
        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
      }
      var match = this._getFirstInnerZone(child);
      if (match) {
        return match;
      }
      child = child.nextElementSibling;
    }
    return null;
  };
  FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {
    if (useDefaultWrap === void 0) {
      useDefaultWrap = true;
    }
    var element = this._activeElement;
    var candidateDistance = -1;
    var candidateElement = undefined;
    var changedFocus = false;
    var isBidirectional = this.props.direction === FocusZone_types_1.FocusZoneDirection.bidirectional;
    if (!element || !this._root.current) {
      return false;
    }
    if (this._isElementInput(element)) {
      if (!this._shouldInputLoseFocus(element, isForward)) {
        return false;
      }
    }
    var activeRect = isBidirectional ? element.getBoundingClientRect() : null;
    do {
      element = isForward ? utilities_1.getNextElement(this._root.current, element) : utilities_1.getPreviousElement(this._root.current, element);
      if (isBidirectional) {
        if (element) {
          var targetRect = element.getBoundingClientRect();
          var elementDistance = getDistanceFromCenter(activeRect, targetRect);
          if (elementDistance === -1 && candidateDistance === -1) {
            candidateElement = element;
            break;
          }
          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
            candidateDistance = elementDistance;
            candidateElement = element;
          }
          if (candidateDistance >= 0 && elementDistance < 0) {
            break;
          }
        }
      } else {
        candidateElement = element;
        break;
      }
    } while (element);
    // Focus the closest candidate
    if (candidateElement && candidateElement !== this._activeElement) {
      changedFocus = true;
      this.focusElement(candidateElement);
    } else if (this.props.isCircularNavigation && useDefaultWrap) {
      if (isForward) {
        return this.focusElement(utilities_1.getNextElement(this._root.current, this._root.current.firstElementChild, true));
      } else {
        return this.focusElement(utilities_1.getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
      }
    }
    return changedFocus;
  };
  FocusZone.prototype._moveFocusDown = function () {
    var _this = this;
    var targetTop = -1;
    // eslint-disable-next-line deprecation/deprecation
    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
    if (this._moveFocus(true, function (activeRect, targetRect) {
      var distance = -1;
      // ClientRect values can be floats that differ by very small fractions of a decimal.
      // If the difference between top and bottom are within a pixel then we should treat
      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,
      // but without Math.Floor they will be handled incorrectly.
      var targetRectTop = Math.floor(targetRect.top);
      var activeRectBottom = Math.floor(activeRect.bottom);
      if (targetRectTop < activeRectBottom) {
        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
        }
        return LARGE_DISTANCE_FROM_CENTER;
      }
      if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {
        targetTop = targetRectTop;
        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
          distance = 0;
        } else {
          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
        }
      }
      return distance;
    })) {
      this._setFocusAlignment(this._activeElement, false, true);
      return true;
    }
    return false;
  };
  FocusZone.prototype._moveFocusUp = function () {
    var _this = this;
    var targetTop = -1;
    // eslint-disable-next-line deprecation/deprecation
    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
    if (this._moveFocus(false, function (activeRect, targetRect) {
      var distance = -1;
      // ClientRect values can be floats that differ by very small fractions of a decimal.
      // If the difference between top and bottom are within a pixel then we should treat
      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,
      // but without Math.Floor they will be handled incorrectly.
      var targetRectBottom = Math.floor(targetRect.bottom);
      var targetRectTop = Math.floor(targetRect.top);
      var activeRectTop = Math.floor(activeRect.top);
      if (targetRectBottom > activeRectTop) {
        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
        }
        return LARGE_DISTANCE_FROM_CENTER;
      }
      if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {
        targetTop = targetRectTop;
        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
          distance = 0;
        } else {
          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
        }
      }
      return distance;
    })) {
      this._setFocusAlignment(this._activeElement, false, true);
      return true;
    }
    return false;
  };
  FocusZone.prototype._moveFocusLeft = function (theme) {
    var _this = this;
    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
    if (this._moveFocus(utilities_1.getRTL(theme), function (activeRect, targetRect) {
      var distance = -1;
      var topBottomComparison;
      if (utilities_1.getRTL(theme)) {
        // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.
        // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.
        // This is important, because we want to be comparing the top of the target rect
        // with the bottom of the active rect.
        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
      } else {
        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
      }
      if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZone_types_1.FocusZoneDirection.vertical) {
        distance = activeRect.right - targetRect.right;
      } else if (!shouldWrap) {
        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
      }
      return distance;
    }, undefined, /*ev*/
    shouldWrap)) {
      this._setFocusAlignment(this._activeElement, true, false);
      return true;
    }
    return false;
  };
  FocusZone.prototype._moveFocusRight = function (theme) {
    var _this = this;
    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
    if (this._moveFocus(!utilities_1.getRTL(theme), function (activeRect, targetRect) {
      var distance = -1;
      var topBottomComparison;
      if (utilities_1.getRTL(theme)) {
        // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.
        // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.
        // This is important, because we want to be comparing the bottom of the target rect
        // with the top of the active rect.
        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
      } else {
        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
      }
      if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZone_types_1.FocusZoneDirection.vertical) {
        distance = targetRect.left - activeRect.left;
      } else if (!shouldWrap) {
        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
      }
      return distance;
    }, undefined, /*ev*/
    shouldWrap)) {
      this._setFocusAlignment(this._activeElement, true, false);
      return true;
    }
    return false;
  };
  FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {
    if (useDefaultWrap === void 0) {
      useDefaultWrap = true;
    }
    var element = this._activeElement;
    if (!element || !this._root.current) {
      return false;
    }
    if (this._isElementInput(element)) {
      if (!this._shouldInputLoseFocus(element, isForward)) {
        return false;
      }
    }
    var scrollableParent = utilities_1.findScrollableParent(element);
    if (!scrollableParent) {
      return false;
    }
    var candidateDistance = -1;
    var candidateElement = undefined;
    var targetTop = -1;
    var targetBottom = -1;
    var pagesize = scrollableParent.clientHeight;
    var activeRect = element.getBoundingClientRect();
    do {
      element = isForward ? utilities_1.getNextElement(this._root.current, element) : utilities_1.getPreviousElement(this._root.current, element);
      if (element) {
        var targetRect = element.getBoundingClientRect();
        var targetRectTop = Math.floor(targetRect.top);
        var activeRectBottom = Math.floor(activeRect.bottom);
        var targetRectBottom = Math.floor(targetRect.bottom);
        var activeRectTop = Math.floor(activeRect.top);
        var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);
        var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;
        var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;
        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {
          break;
        }
        if (elementDistance > -1) {
          // for paging down
          if (isForward && targetRectTop > targetTop) {
            targetTop = targetRectTop;
            candidateDistance = elementDistance;
            candidateElement = element;
          } else if (!isForward && targetRectBottom < targetBottom) {
            // for paging up
            targetBottom = targetRectBottom;
            candidateDistance = elementDistance;
            candidateElement = element;
          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {
            candidateDistance = elementDistance;
            candidateElement = element;
          }
        }
      }
    } while (element);
    var changedFocus = false;
    // Focus the closest candidate
    if (candidateElement && candidateElement !== this._activeElement) {
      changedFocus = true;
      this.focusElement(candidateElement);
      this._setFocusAlignment(candidateElement, false, true);
    } else if (this.props.isCircularNavigation && useDefaultWrap) {
      if (isForward) {
        return this.focusElement(utilities_1.getNextElement(this._root.current, this._root.current.firstElementChild, true));
      }
      return this.focusElement(utilities_1.getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
    }
    return changedFocus;
  };
  FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {
    if (this.props.direction === FocusZone_types_1.FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {
      var rect = element.getBoundingClientRect();
      var left = rect.left + rect.width / 2;
      var top_1 = rect.top + rect.height / 2;
      if (!this._focusAlignment) {
        this._focusAlignment = {
          left: left,
          top: top_1
        };
      }
      if (isHorizontal) {
        this._focusAlignment.left = left;
      }
      if (isVertical) {
        this._focusAlignment.top = top_1;
      }
    }
  };
  FocusZone.prototype._isImmediateDescendantOfZone = function (element) {
    return this._getOwnerZone(element) === this._root.current;
  };
  FocusZone.prototype._getOwnerZone = function (element) {
    var parentElement = utilities_1.getParent(element, ALLOW_VIRTUAL_ELEMENTS);
    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {
      if (utilities_1.isElementFocusZone(parentElement)) {
        return parentElement;
      }
      parentElement = utilities_1.getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
    }
    return parentElement;
  };
  FocusZone.prototype._updateTabIndexes = function (element) {
    if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'function') {
      this._activeElement = this.props.defaultTabbableElement(this._root.current);
    }
    if (!element && this._root.current) {
      this._defaultFocusElement = null;
      element = this._root.current;
      if (this._activeElement && !utilities_1.elementContains(element, this._activeElement)) {
        this._activeElement = null;
      }
    }
    // If active element changes state to disabled, set it to null.
    // Otherwise, we lose keyboard accessibility to other elements in focus zone.
    if (this._activeElement && !utilities_1.isElementTabbable(this._activeElement)) {
      this._activeElement = null;
    }
    var childNodes = element && element.children;
    for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
      var child = childNodes[childIndex];
      if (!utilities_1.isElementFocusZone(child)) {
        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.
        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {
          child.setAttribute(TABINDEX, '-1');
        }
        if (utilities_1.isElementTabbable(child)) {
          if (this.props.disabled) {
            child.setAttribute(TABINDEX, '-1');
          } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
            this._defaultFocusElement = child;
            if (child.getAttribute(TABINDEX) !== '0') {
              child.setAttribute(TABINDEX, '0');
            }
          } else if (child.getAttribute(TABINDEX) !== '-1') {
            child.setAttribute(TABINDEX, '-1');
          }
        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {
          // Disgusting IE hack. Sad face.
          child.setAttribute('focusable', 'false');
        }
      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {
        if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
          this._defaultFocusElement = child;
          if (child.getAttribute(TABINDEX) !== '0') {
            child.setAttribute(TABINDEX, '0');
          }
        } else if (child.getAttribute(TABINDEX) !== '-1') {
          child.setAttribute(TABINDEX, '-1');
        }
      }
      this._updateTabIndexes(child);
    }
  };
  FocusZone.prototype._isContentEditableElement = function (element) {
    return element && element.getAttribute('contenteditable') === 'true';
  };
  FocusZone.prototype._isElementInput = function (element) {
    if (element && element.tagName && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {
      return true;
    }
    return false;
  };
  FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {
    // If a tab was used, we want to focus on the next element.
    if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {
      var selectionStart = element.selectionStart;
      var selectionEnd = element.selectionEnd;
      var isRangeSelected = selectionStart !== selectionEnd;
      var inputValue = element.value;
      var isReadonly = element.readOnly;
      // We shouldn't lose focus in the following cases:
      // 1. There is range selected.
      // 2. When selection start is larger than 0 and it is backward and not readOnly.
      // 3. when selection start is not the end of length, it is forward and not readOnly.
      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit
      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is
      // determined by calling the callback shouldInputLoseFocusOnArrowKey
      if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {
        return false;
      }
    }
    return true;
  };
  FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {
    return this.props.checkForNoWrap ? utilities_1.shouldWrapFocus(element, noWrapDataAttribute) : true;
  };
  /**
  * Returns true if the element is a descendant of the FocusZone through a React portal.
  */
  FocusZone.prototype._portalContainsElement = function (element) {
    return element && !!this._root.current && utilities_1.portalContainsElement(element, this._root.current);
  };
  FocusZone.prototype._getDocument = function () {
    return utilities_1.getDocument(this._root.current);
  };
  FocusZone.defaultProps = {
    isCircularNavigation: false,
    direction: FocusZone_types_1.FocusZoneDirection.bidirectional,
    shouldRaiseClicks: true
  };
  return FocusZone;
})(React.Component);
exports.FocusZone = FocusZone;

},{"tslib":"3xr0u","react":"4g1R3","./FocusZone.types":"6LHQt","@fluentui/utilities":"2AuOe","@fluentui/merge-styles":"366N8","@fluentui/style-utilities":"J5I0J"}],"6LHQt":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusZoneDirection = exports.FocusZoneTabbableElements = void 0;
/**
 * {@docCategory FocusZone}
 */
exports.FocusZoneTabbableElements = {
    /** Tabbing is not allowed */
    none: 0,
    /** All tabbing action is allowed */
    all: 1,
    /** Tabbing is allowed only on input elements */
    inputOnly: 2,
};
/**
 * {@docCategory FocusZone}
 */
var FocusZoneDirection;
(function (FocusZoneDirection) {
    /** Only react to up/down arrows. */
    FocusZoneDirection[FocusZoneDirection["vertical"] = 0] = "vertical";
    /** Only react to left/right arrows. */
    FocusZoneDirection[FocusZoneDirection["horizontal"] = 1] = "horizontal";
    /** React to all arrows. */
    FocusZoneDirection[FocusZoneDirection["bidirectional"] = 2] = "bidirectional";
    /**
     * React to all arrows. Navigate next item in DOM on right/down arrow keys and previous - left/up arrow keys.
     * Right and Left arrow keys are swapped in RTL mode.
     */
    FocusZoneDirection[FocusZoneDirection["domOrder"] = 3] = "domOrder";
})(FocusZoneDirection = exports.FocusZoneDirection || (exports.FocusZoneDirection = {}));

},{}],"6LyFR":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _contextualMenuUtility = require('./contextualMenuUtility');
_parcelHelpers.exportAll(_contextualMenuUtility, exports);

},{"./contextualMenuUtility":"6mjYl","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6mjYl":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getIsChecked", function () {
  return getIsChecked;
});
_parcelHelpers.export(exports, "hasSubmenu", function () {
  return hasSubmenu;
});
_parcelHelpers.export(exports, "isItemDisabled", function () {
  return isItemDisabled;
});
_parcelHelpers.export(exports, "getMenuItemAriaRole", function () {
  return getMenuItemAriaRole;
});
function getIsChecked(item) {
  if (item.canCheck) {
    return !!(item.isChecked || item.checked);
  }
  if (typeof item.isChecked === 'boolean') {
    return item.isChecked;
  }
  if (typeof item.checked === 'boolean') {
    return item.checked;
  }
  // Item is not checkable.
  return null;
}
function hasSubmenu(item) {
  return !!(item.subMenuProps || item.items);
}
function isItemDisabled(item) {
  return !!(item.isDisabled || item.disabled);
}
function getMenuItemAriaRole(item) {
  var isChecked = getIsChecked(item);
  var canCheck = isChecked !== null;
  return canCheck ? 'menuitemcheckbox' : 'menuitem';
}

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6tnBs":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsCalloutIndex = require('./components/Callout/index');
_parcelHelpers.exportAll(_componentsCalloutIndex, exports);

},{"./components/Callout/index":"40fXb","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"40fXb":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Callout = require('./Callout');
_parcelHelpers.exportAll(_Callout, exports);
var _CalloutTypes = require('./Callout.types');
_parcelHelpers.exportAll(_CalloutTypes, exports);
var _CalloutContent = require('./CalloutContent');
_parcelHelpers.exportAll(_CalloutContent, exports);
var _CalloutContentBase = require('./CalloutContent.base');
_parcelHelpers.exportAll(_CalloutContentBase, exports);
var _FocusTrapCallout = require('./FocusTrapCallout');
_parcelHelpers.exportAll(_FocusTrapCallout, exports);
var _FocusTrapCalloutTypes = require('./FocusTrapCallout.types');
_parcelHelpers.exportAll(_FocusTrapCalloutTypes, exports);
var _commonDirectionalHint = require('../../common/DirectionalHint');
_parcelHelpers.exportAll(_commonDirectionalHint, exports);

},{"./Callout":"55dti","./Callout.types":"41xGy","./CalloutContent":"5c81B","./CalloutContent.base":"3LIDW","./FocusTrapCallout":"71ZRk","./FocusTrapCallout.types":"4gb7E","../../common/DirectionalHint":"6itO1","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"55dti":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Callout", function () {
  return Callout;
});
var _tslib = require("tslib");
var _react = require('react');
var _CalloutContent = require('./CalloutContent');
var _Layer = require('../../Layer');
var Callout = _react.forwardRef(function (_a, forwardedRef) {
  var layerProps = _a.layerProps, doNotLayer = _a.doNotLayer, rest = _tslib.__rest(_a, ["layerProps", "doNotLayer"]);
  var content = _react.createElement(_CalloutContent.CalloutContent, _tslib.__assign({}, rest, {
    ref: forwardedRef
  }));
  return doNotLayer ? content : _react.createElement(_Layer.Layer, _tslib.__assign({}, layerProps), content);
});
Callout.displayName = 'Callout';

},{"tslib":"6ZIET","react":"4g1R3","./CalloutContent":"5c81B","../../Layer":"6Nb0d","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5c81B":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CalloutContent", function () {
  return CalloutContent;
});
var _Utilities = require('../../Utilities');
var _CalloutContentBase = require('./CalloutContent.base');
var _CalloutContentStyles = require('./CalloutContent.styles');
var CalloutContent = _Utilities.styled(_CalloutContentBase.CalloutContentBase, _CalloutContentStyles.getStyles, undefined, {
  scope: 'CalloutContent'
});

},{"../../Utilities":"1439N","./CalloutContent.base":"3LIDW","./CalloutContent.styles":"LXvZP","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3LIDW":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CalloutContentBase", function () {
  return CalloutContentBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _commonDirectionalHint = require('../../common/DirectionalHint');
var _Utilities = require('../../Utilities');
var _Positioning = require('../../Positioning');
var _Popup = require('../../Popup');
var _Styling = require('../../Styling');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _a;
var ANIMATIONS = (_a = {}, _a[_Positioning.RectangleEdge.top] = _Styling.AnimationClassNames.slideUpIn10, _a[_Positioning.RectangleEdge.bottom] = _Styling.AnimationClassNames.slideDownIn10, _a[_Positioning.RectangleEdge.left] = _Styling.AnimationClassNames.slideLeftIn10, _a[_Positioning.RectangleEdge.right] = _Styling.AnimationClassNames.slideRightIn10, _a);
var getClassNames = _Utilities.classNamesFunction({
  disableCaching: true
});
var BEAK_ORIGIN_POSITION = {
  top: 0,
  left: 0
};
// Microsoft Edge will overwrite inline styles if there is an animation pertaining to that style.
// To help ensure that edge will respect the offscreen style opacity
// filter needs to be added as an additional way to set opacity.
// Also set pointer-events: none so that the callout will not occlude the element it is
// going to be positioned against
var OFF_SCREEN_STYLE = {
  opacity: 0,
  filter: 'opacity(0)',
  pointerEvents: 'none'
};
// role and role description go hand-in-hand. Both would be included by spreading getNativeProps for a basic element
// This constant array can be used to filter these out of native props spread on callout root and apply them together on
// calloutMain (the Popup component within the callout)
var ARIA_ROLE_ATTRIBUTES = ['role', 'aria-roledescription'];
var DEFAULT_PROPS = {
  preventDismissOnLostFocus: false,
  preventDismissOnScroll: false,
  preventDismissOnResize: false,
  isBeakVisible: true,
  beakWidth: 16,
  gapSpace: 0,
  minPagePadding: 8,
  directionalHint: _commonDirectionalHint.DirectionalHint.bottomAutoEdge
};
/**
* Returns a function to lazily fetch the bounds of the target element for the callout
*/
function useBounds(_a, targetRef, targetWindow) {
  var bounds = _a.bounds, _b = _a.minPagePadding, minPagePadding = _b === void 0 ? DEFAULT_PROPS.minPagePadding : _b, target = _a.target;
  var cachedBounds = _react.useRef();
  var getBounds = _react.useCallback(function () {
    if (!cachedBounds.current) {
      var currentBounds = typeof bounds === 'function' ? targetWindow ? bounds(target, targetWindow) : undefined : bounds;
      if (!currentBounds && targetWindow) {
        currentBounds = _Positioning.getBoundsFromTargetWindow(targetRef.current, targetWindow);
        currentBounds = {
          top: currentBounds.top + minPagePadding,
          left: currentBounds.left + minPagePadding,
          right: currentBounds.right - minPagePadding,
          bottom: currentBounds.bottom - minPagePadding,
          width: currentBounds.width - minPagePadding * 2,
          height: currentBounds.height - minPagePadding * 2
        };
      }
      cachedBounds.current = currentBounds;
    }
    return cachedBounds.current;
  }, [bounds, minPagePadding, target, targetRef, targetWindow]);
  return getBounds;
}
/**
* Returns the maximum available height for the Callout to render into
*/
function useMaxHeight(_a, targetRef, getBounds) {
  var beakWidth = _a.beakWidth, coverTarget = _a.coverTarget, directionalHint = _a.directionalHint, directionalHintFixed = _a.directionalHintFixed, gapSpace = _a.gapSpace, isBeakVisible = _a.isBeakVisible, hidden = _a.hidden;
  var _b = _react.useState(), maxHeight = _b[0], setMaxHeight = _b[1];
  var async = _fluentuiReactHooks.useAsync();
  // Updating targetRef won't re-render the component, but it's recalculated (if needed) with every render
  // If it mutates, we want to re-run the effect
  var currentTarget = targetRef.current;
  _react.useEffect(function () {
    var _a;
    if (!maxHeight && !hidden) {
      if (directionalHintFixed && currentTarget) {
        // Since the callout cannot measure it's border size it must be taken into account here. Otherwise it will
        // overlap with the target.
        var totalGap_1 = (gapSpace !== null && gapSpace !== void 0 ? gapSpace : 0) + (isBeakVisible && beakWidth ? beakWidth : 0);
        async.requestAnimationFrame(function () {
          if (targetRef.current) {
            setMaxHeight(_Positioning.getMaxHeight(targetRef.current, directionalHint, totalGap_1, getBounds(), coverTarget));
          }
        });
      } else {
        setMaxHeight((_a = getBounds()) === null || _a === void 0 ? void 0 : _a.height);
      }
    } else if (hidden) {
      setMaxHeight(undefined);
    }
  }, [targetRef, currentTarget, gapSpace, beakWidth, getBounds, hidden, async, coverTarget, directionalHint, directionalHintFixed, isBeakVisible, maxHeight]);
  return maxHeight;
}
/**
* Returns the height offset of the callout element and updates it each frame to approach the configured finalHeight
*/
function useHeightOffset(_a, calloutElement) {
  var finalHeight = _a.finalHeight, hidden = _a.hidden;
  var _b = _react.useState(0), heightOffset = _b[0], setHeightOffset = _b[1];
  var async = _fluentuiReactHooks.useAsync();
  var setHeightOffsetTimer = _react.useRef();
  var setHeightOffsetEveryFrame = _react.useCallback(function () {
    if (calloutElement.current && finalHeight) {
      setHeightOffsetTimer.current = async.requestAnimationFrame(function () {
        var _a;
        var calloutMainElem = (_a = calloutElement.current) === null || _a === void 0 ? void 0 : _a.lastChild;
        if (!calloutMainElem) {
          return;
        }
        var cardScrollHeight = calloutMainElem.scrollHeight;
        var cardCurrHeight = calloutMainElem.offsetHeight;
        var scrollDiff = cardScrollHeight - cardCurrHeight;
        setHeightOffset(function (currentHeightOffset) {
          return currentHeightOffset + scrollDiff;
        });
        if (calloutMainElem.offsetHeight < finalHeight) {
          setHeightOffsetEveryFrame();
        } else {
          async.cancelAnimationFrame(setHeightOffsetTimer.current, calloutElement.current);
        }
      }, calloutElement.current);
    }
  }, [async, calloutElement, finalHeight]);
  _react.useEffect(function () {
    if (!hidden) {
      setHeightOffsetEveryFrame();
    }
  }, [finalHeight, hidden, setHeightOffsetEveryFrame]);
  return heightOffset;
}
/**
* Get the position information for the callout. If the callout does not fit in the given orientation,
* a new position is calculated for the next frame, up to 5 attempts
*/
function usePositions(props, hostElement, calloutElement, targetRef, getBounds) {
  var _a = _react.useState(), positions = _a[0], setPositions = _a[1];
  var positionAttempts = _react.useRef(0);
  var async = _fluentuiReactHooks.useAsync();
  var hidden = props.hidden, target = props.target, finalHeight = props.finalHeight, onPositioned = props.onPositioned, directionalHint = props.directionalHint;
  _react.useEffect(function () {
    if (!hidden) {
      var timerId_1 = async.requestAnimationFrame(function () {
        // If we expect a target element to position against, we need to wait until `targetRef.current`
        // is resolved. Otherwise we can try to position.
        var expectsTarget = !!target;
        if (hostElement.current && calloutElement.current && (!expectsTarget || targetRef.current)) {
          var currentProps = _tslib.__assign(_tslib.__assign({}, props), {
            target: targetRef.current,
            bounds: getBounds()
          });
          // If there is a finalHeight given then we assume that the user knows and will handle
          // additional positioning adjustments so we should call positionCard
          var newPositions = finalHeight ? _Positioning.positionCard(currentProps, hostElement.current, calloutElement.current, positions) : _Positioning.positionCallout(currentProps, hostElement.current, calloutElement.current, positions);
          // Set the new position only when the positions are not exists or one of the new callout positions
          // are different. The position should not change if the position is within 2 decimal places.
          if (!positions && newPositions || positions && newPositions && !arePositionsEqual(positions, newPositions) && positionAttempts.current < 5) {
            // We should not reposition the callout more than a few times, if it is then the content is likely resizing
            // and we should stop trying to reposition to prevent a stack overflow.
            positionAttempts.current++;
            setPositions(newPositions);
          } else if (positionAttempts.current > 0) {
            // Only call the onPositioned callback if the callout has been re-positioned at least once.
            positionAttempts.current = 0;
            onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned(positions);
          }
        }
      }, calloutElement.current);
      return function () {
        return async.cancelAnimationFrame(timerId_1);
      };
    }
  }, [hidden, directionalHint, async, calloutElement, hostElement, targetRef, finalHeight, getBounds, onPositioned, positions, props, target]);
  return positions;
}
/**
* Hook to set up behavior to automatically focus the callout when it appears, if indicated by props.
*/
function useAutoFocus(_a, positions, calloutElement) {
  var hidden = _a.hidden, setInitialFocus = _a.setInitialFocus;
  var async = _fluentuiReactHooks.useAsync();
  var hasPositions = !!positions;
  _react.useEffect(function () {
    if (!hidden && setInitialFocus && hasPositions && calloutElement.current) {
      var timerId_2 = async.requestAnimationFrame(function () {
        return _Utilities.focusFirstChild(calloutElement.current);
      }, calloutElement.current);
      return function () {
        return async.cancelAnimationFrame(timerId_2);
      };
    }
  }, [hidden, hasPositions, async, calloutElement, setInitialFocus]);
}
/**
* Hook to set up various handlers to dismiss the popup when it loses focus or the window scrolls or similar cases.
*/
function useDismissHandlers(_a, positions, hostElement, targetRef, targetWindow) {
  var hidden = _a.hidden, onDismiss = _a.onDismiss, // eslint-disable-next-line deprecation/deprecation
  preventDismissOnScroll = _a.preventDismissOnScroll, // eslint-disable-next-line deprecation/deprecation
  preventDismissOnResize = _a.preventDismissOnResize, // eslint-disable-next-line deprecation/deprecation
  preventDismissOnLostFocus = _a.preventDismissOnLostFocus, dismissOnTargetClick = _a.dismissOnTargetClick, shouldDismissOnWindowFocus = _a.shouldDismissOnWindowFocus, preventDismissOnEvent = _a.preventDismissOnEvent;
  var isMouseDownOnPopup = _react.useRef(false);
  var async = _fluentuiReactHooks.useAsync();
  var mouseDownHandlers = _fluentuiReactHooks.useConst([function () {
    isMouseDownOnPopup.current = true;
  }, function () {
    isMouseDownOnPopup.current = false;
  }]);
  var positionsExists = !!positions;
  _react.useEffect(function () {
    var dismissOnScroll = function (ev) {
      if (positionsExists && !preventDismissOnScroll) {
        dismissOnClickOrScroll(ev);
      }
    };
    var dismissOnResize = function (ev) {
      if (!preventDismissOnResize) {
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
      }
    };
    var dismissOnLostFocus = function (ev) {
      if (!preventDismissOnLostFocus) {
        dismissOnClickOrScroll(ev);
      }
    };
    var dismissOnClickOrScroll = function (ev) {
      var target = ev.target;
      var isEventTargetOutsideCallout = hostElement.current && !_Utilities.elementContains(hostElement.current, target);
      // If mouse is pressed down on callout but moved outside then released, don't dismiss the callout.
      if (isEventTargetOutsideCallout && isMouseDownOnPopup.current) {
        isMouseDownOnPopup.current = false;
        return;
      }
      if (!targetRef.current && isEventTargetOutsideCallout || ev.target !== targetWindow && isEventTargetOutsideCallout && (!targetRef.current || ('stopPropagation' in targetRef.current) || dismissOnTargetClick || target !== targetRef.current && !_Utilities.elementContains(targetRef.current, target))) {
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
      }
    };
    var dismissOnTargetWindowBlur = function (ev) {
      // Do nothing
      if (!shouldDismissOnWindowFocus) {
        return;
      }
      if ((preventDismissOnEvent && !preventDismissOnEvent(ev) || !preventDismissOnEvent && !preventDismissOnLostFocus) && !(targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.hasFocus()) && ev.relatedTarget === null) {
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
      }
    };
    // This is added so the callout will dismiss when the window is scrolled
    // but not when something inside the callout is scrolled. The delay seems
    // to be required to avoid React firing an async focus event in IE from
    // the target changing focus quickly prior to rendering the callout.
    var disposablesPromise = new Promise(function (resolve) {
      async.setTimeout(function () {
        if (!hidden && targetWindow) {
          var disposables_1 = [_Utilities.on(targetWindow, 'scroll', dismissOnScroll, true), _Utilities.on(targetWindow, 'resize', dismissOnResize, true), _Utilities.on(targetWindow.document.documentElement, 'focus', dismissOnLostFocus, true), _Utilities.on(targetWindow.document.documentElement, 'click', dismissOnLostFocus, true), _Utilities.on(targetWindow, 'blur', dismissOnTargetWindowBlur, true)];
          resolve(function () {
            disposables_1.forEach(function (dispose) {
              return dispose();
            });
          });
        }
      }, 0);
    });
    return function () {
      disposablesPromise.then(function (dispose) {
        return dispose();
      });
    };
  }, [hidden, async, hostElement, targetRef, targetWindow, onDismiss, shouldDismissOnWindowFocus, dismissOnTargetClick, preventDismissOnLostFocus, preventDismissOnResize, preventDismissOnScroll, positionsExists, preventDismissOnEvent]);
  return mouseDownHandlers;
}
var COMPONENT_NAME = 'CalloutContentBase';
var CalloutContentBase = _react.memo(_react.forwardRef(function (propsWithoutDefaults, forwardedRef) {
  var props = _Utilities.getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
  var styles = props.styles, style = props.style, ariaLabel = props.ariaLabel, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, className = props.className, isBeakVisible = props.isBeakVisible, children = props.children, beakWidth = props.beakWidth, calloutWidth = props.calloutWidth, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, finalHeight = props.finalHeight, _a = props.hideOverflow, hideOverflow = _a === void 0 ? !!finalHeight : _a, backgroundColor = props.backgroundColor, calloutMaxHeight = props.calloutMaxHeight, onScroll = props.onScroll, // eslint-disable-next-line deprecation/deprecation
  _b = props.shouldRestoreFocus, // eslint-disable-next-line deprecation/deprecation
  shouldRestoreFocus = _b === void 0 ? true : _b, target = props.target, hidden = props.hidden, onLayerMounted = props.onLayerMounted;
  var hostElement = _react.useRef(null);
  var calloutElement = _react.useRef(null);
  var rootRef = _fluentuiReactHooks.useMergedRefs(hostElement, forwardedRef);
  var _c = _fluentuiReactHooks.useTarget(props.target, calloutElement), targetRef = _c[0], targetWindow = _c[1];
  var getBounds = useBounds(props, targetRef, targetWindow);
  var maxHeight = useMaxHeight(props, targetRef, getBounds);
  var heightOffset = useHeightOffset(props, calloutElement);
  var positions = usePositions(props, hostElement, calloutElement, targetRef, getBounds);
  var _d = useDismissHandlers(props, positions, hostElement, targetRef, targetWindow), mouseDownOnPopup = _d[0], mouseUpOnPopup = _d[1];
  useAutoFocus(props, positions, calloutElement);
  _react.useEffect(function () {
    if (!hidden) {
      onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
    }
  }, [hidden]);
  // If there is no target window then we are likely in server side rendering and we should not render anything.
  if (!targetWindow) {
    return null;
  }
  var getContentMaxHeight = maxHeight ? maxHeight + heightOffset : undefined;
  var contentMaxHeight = calloutMaxHeight && getContentMaxHeight && calloutMaxHeight < getContentMaxHeight ? calloutMaxHeight : getContentMaxHeight;
  var overflowYHidden = hideOverflow;
  var beakVisible = isBeakVisible && !!target;
  var classNames = getClassNames(styles, {
    theme: props.theme,
    className: className,
    overflowYHidden: overflowYHidden,
    calloutWidth: calloutWidth,
    positions: positions,
    beakWidth: beakWidth,
    backgroundColor: backgroundColor,
    calloutMaxWidth: calloutMaxWidth,
    calloutMinWidth: calloutMinWidth
  });
  var overflowStyle = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, style), {
    maxHeight: contentMaxHeight
  }), overflowYHidden && ({
    overflowY: 'hidden'
  }));
  var visibilityStyle = props.hidden ? {
    visibility: 'hidden'
  } : undefined;
  // React.CSSProperties does not understand IRawStyle, so the inline animations will need to be cast as any for now.
  var content = _react.createElement("div", {
    ref: rootRef,
    className: classNames.container,
    style: visibilityStyle
  }, _react.createElement("div", _tslib.__assign({}, _Utilities.getNativeProps(props, _Utilities.divProperties, ARIA_ROLE_ATTRIBUTES), {
    className: _Utilities.css(classNames.root, positions && positions.targetEdge && ANIMATIONS[positions.targetEdge]),
    style: positions ? positions.elementPosition : OFF_SCREEN_STYLE,
    // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.
    // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
    tabIndex: -1,
    ref: calloutElement
  }), beakVisible && _react.createElement("div", {
    className: classNames.beak,
    style: getBeakPosition(positions)
  }), beakVisible && _react.createElement("div", {
    className: classNames.beakCurtain
  }), _react.createElement(_Popup.Popup, _tslib.__assign({}, _Utilities.getNativeProps(props, ARIA_ROLE_ATTRIBUTES), {
    ariaLabel: ariaLabel,
    onRestoreFocus: props.onRestoreFocus,
    ariaDescribedBy: ariaDescribedBy,
    ariaLabelledBy: ariaLabelledBy,
    className: classNames.calloutMain,
    onDismiss: props.onDismiss,
    onScroll: onScroll,
    shouldRestoreFocus: shouldRestoreFocus,
    style: overflowStyle,
    onMouseDown: mouseDownOnPopup,
    onMouseUp: mouseUpOnPopup
  }), children)));
  return content;
}), function (previousProps, nextProps) {
  if (!nextProps.shouldUpdateWhenHidden && previousProps.hidden && nextProps.hidden) {
    // Do not update when hidden.
    return true;
  }
  return _Utilities.shallowCompare(previousProps, nextProps);
});
CalloutContentBase.displayName = COMPONENT_NAME;
function getBeakPosition(positions) {
  var _a;
  var beakPositionStyle = _tslib.__assign({}, (_a = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _a === void 0 ? void 0 : _a.elementPosition);
  if (!beakPositionStyle.top && !beakPositionStyle.bottom && !beakPositionStyle.left && !beakPositionStyle.right) {
    beakPositionStyle.left = BEAK_ORIGIN_POSITION.left;
    beakPositionStyle.top = BEAK_ORIGIN_POSITION.top;
  }
  return beakPositionStyle;
}
function arePositionsEqual(positions, newPosition) {
  return comparePositions(positions.elementPosition, newPosition.elementPosition) && comparePositions(positions.beakPosition.elementPosition, newPosition.beakPosition.elementPosition);
}
function comparePositions(oldPositions, newPositions) {
  for (var key in newPositions) {
    if (newPositions.hasOwnProperty(key)) {
      var oldPositionEdge = oldPositions[key];
      var newPositionEdge = newPositions[key];
      if (oldPositionEdge !== undefined && newPositionEdge !== undefined) {
        if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {
          return false;
        }
      } else {
        return false;
      }
    }
  }
  return true;
}

},{"tslib":"6ZIET","react":"4g1R3","../../common/DirectionalHint":"6itO1","../../Utilities":"1439N","../../Positioning":"4ukri","../../Popup":"4NwKJ","../../Styling":"5q33X","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4ukri":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilitiesPositioningIndex = require('./utilities/positioning/index');
_parcelHelpers.exportAll(_utilitiesPositioningIndex, exports);

},{"./utilities/positioning/index":"2zr9h","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2zr9h":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getBoundsFromTargetWindow", function () {
  return _positioning.getBoundsFromTargetWindow;
});
_parcelHelpers.export(exports, "getMaxHeight", function () {
  return _positioning.getMaxHeight;
});
_parcelHelpers.export(exports, "getOppositeEdge", function () {
  return _positioning.getOppositeEdge;
});
_parcelHelpers.export(exports, "positionCallout", function () {
  return _positioning.positionCallout;
});
_parcelHelpers.export(exports, "positionCard", function () {
  return _positioning.positionCard;
});
_parcelHelpers.export(exports, "positionElement", function () {
  return _positioning.positionElement;
});
var _positioning = require('./positioning');
var _positioningTypes = require('./positioning.types');
_parcelHelpers.exportAll(_positioningTypes, exports);

},{"./positioning":"4rHxN","./positioning.types":"6duKP","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4rHxN":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "__positioningTestPackage", function () {
  return __positioningTestPackage;
});
_parcelHelpers.export(exports, "positionElement", function () {
  return positionElement;
});
_parcelHelpers.export(exports, "positionCallout", function () {
  return positionCallout;
});
_parcelHelpers.export(exports, "positionCard", function () {
  return positionCard;
});
_parcelHelpers.export(exports, "getMaxHeight", function () {
  return getMaxHeight;
});
_parcelHelpers.export(exports, "getOppositeEdge", function () {
  return getOppositeEdge;
});
_parcelHelpers.export(exports, "getBoundsFromTargetWindow", function () {
  return getBoundsFromTargetWindow;
});
var _tslib = require("tslib");
var _commonDirectionalHint = require('../../common/DirectionalHint');
var _Utilities = require('../../Utilities');
var _positioningTypes = require('./positioning.types');
var _a;
function _createPositionData(targetEdge, alignmentEdge, isAuto) {
  return {
    targetEdge: targetEdge,
    alignmentEdge: alignmentEdge,
    isAuto: isAuto
  };
}
// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target
var DirectionalDictionary = (_a = {}, _a[_commonDirectionalHint.DirectionalHint.topLeftEdge] = _createPositionData(_positioningTypes.RectangleEdge.top, _positioningTypes.RectangleEdge.left), _a[_commonDirectionalHint.DirectionalHint.topCenter] = _createPositionData(_positioningTypes.RectangleEdge.top), _a[_commonDirectionalHint.DirectionalHint.topRightEdge] = _createPositionData(_positioningTypes.RectangleEdge.top, _positioningTypes.RectangleEdge.right), _a[_commonDirectionalHint.DirectionalHint.topAutoEdge] = _createPositionData(_positioningTypes.RectangleEdge.top, undefined, true), _a[_commonDirectionalHint.DirectionalHint.bottomLeftEdge] = _createPositionData(_positioningTypes.RectangleEdge.bottom, _positioningTypes.RectangleEdge.left), _a[_commonDirectionalHint.DirectionalHint.bottomCenter] = _createPositionData(_positioningTypes.RectangleEdge.bottom), _a[_commonDirectionalHint.DirectionalHint.bottomRightEdge] = _createPositionData(_positioningTypes.RectangleEdge.bottom, _positioningTypes.RectangleEdge.right), _a[_commonDirectionalHint.DirectionalHint.bottomAutoEdge] = _createPositionData(_positioningTypes.RectangleEdge.bottom, undefined, true), _a[_commonDirectionalHint.DirectionalHint.leftTopEdge] = _createPositionData(_positioningTypes.RectangleEdge.left, _positioningTypes.RectangleEdge.top), _a[_commonDirectionalHint.DirectionalHint.leftCenter] = _createPositionData(_positioningTypes.RectangleEdge.left), _a[_commonDirectionalHint.DirectionalHint.leftBottomEdge] = _createPositionData(_positioningTypes.RectangleEdge.left, _positioningTypes.RectangleEdge.bottom), _a[_commonDirectionalHint.DirectionalHint.rightTopEdge] = _createPositionData(_positioningTypes.RectangleEdge.right, _positioningTypes.RectangleEdge.top), _a[_commonDirectionalHint.DirectionalHint.rightCenter] = _createPositionData(_positioningTypes.RectangleEdge.right), _a[_commonDirectionalHint.DirectionalHint.rightBottomEdge] = _createPositionData(_positioningTypes.RectangleEdge.right, _positioningTypes.RectangleEdge.bottom), _a);
function _isRectangleWithinBounds(rect, boundingRect) {
  if (rect.top < boundingRect.top) {
    return false;
  }
  if (rect.bottom > boundingRect.bottom) {
    return false;
  }
  if (rect.left < boundingRect.left) {
    return false;
  }
  if (rect.right > boundingRect.right) {
    return false;
  }
  return true;
}
/**
* Gets all of the edges of a rectangle that are outside of the given bounds.
* If there are no out of bounds edges it returns an empty array.
*/
function _getOutOfBoundsEdges(rect, boundingRect) {
  var outOfBounds = [];
  if (rect.top < boundingRect.top) {
    outOfBounds.push(_positioningTypes.RectangleEdge.top);
  }
  if (rect.bottom > boundingRect.bottom) {
    outOfBounds.push(_positioningTypes.RectangleEdge.bottom);
  }
  if (rect.left < boundingRect.left) {
    outOfBounds.push(_positioningTypes.RectangleEdge.left);
  }
  if (rect.right > boundingRect.right) {
    outOfBounds.push(_positioningTypes.RectangleEdge.right);
  }
  return outOfBounds;
}
function _getEdgeValue(rect, edge) {
  return rect[_positioningTypes.RectangleEdge[edge]];
}
function _setEdgeValue(rect, edge, value) {
  rect[_positioningTypes.RectangleEdge[edge]] = value;
  return rect;
}
/**
* Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as
* the itself already contains the other coordinate.
* For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.
*/
function _getCenterValue(rect, edge) {
  var edges = _getFlankingEdges(edge);
  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;
}
/**
* Flips the value depending on the edge.
* If the edge is a "positive" edge, Top or Left, then the value should stay as it is.
* If the edge is a "negative" edge, Bottom or Right, then the value should be flipped.
* This is to account for the fact that the coordinates are effectively reveserved in certain cases for the
* "negative" edges.
*
* For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:
* If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.
* If top edge 1 is less than edge 2 then it is out of bounds.
*/
function _getRelativeEdgeValue(edge, value) {
  if (edge > 0) {
    return value;
  } else {
    return value * -1;
  }
}
function _getRelativeRectEdgeValue(edge, rect) {
  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));
}
function _getRelativeEdgeDifference(rect, hostRect, edge) {
  var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);
  return _getRelativeEdgeValue(edge, edgeDifference);
}
/**
* Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.
* For example, if it's a bottom edge it will only change y coordinates.
*/
function _moveEdge(rect, edge, newValue) {
  var difference = _getEdgeValue(rect, edge) - newValue;
  rect = _setEdgeValue(rect, edge, newValue);
  rect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);
  return rect;
}
/**
* Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.
*/
function _alignEdges(rect, target, edge, gap) {
  if (gap === void 0) {
    gap = 0;
  }
  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));
}
/**
* Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.
* For instance if targetEdge is bottom, then the rects top will be moved to match it.
*/
function _alignOppositeEdges(rect, target, targetEdge, gap) {
  if (gap === void 0) {
    gap = 0;
  }
  var oppositeEdge = targetEdge * -1;
  var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);
  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);
}
/**
* Tests to see if the given edge is within the bounds of the given rectangle.
*/
function _isEdgeInBounds(rect, bounds, edge) {
  var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);
  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);
}
/**
* Attempts to move the rectangle through various sides of the target to find a place to fit.
* If no fit is found, the original position should be returned.
*/
function _flipToFit(rect, target, bounding, positionData, gap) {
  if (gap === void 0) {
    gap = 0;
  }
  var directions = [_positioningTypes.RectangleEdge.left, _positioningTypes.RectangleEdge.right, _positioningTypes.RectangleEdge.bottom, _positioningTypes.RectangleEdge.top];
  // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.
  if (_Utilities.getRTL()) {
    directions[0] *= -1;
    directions[1] *= -1;
  }
  var currentEstimate = rect;
  var currentEdge = positionData.targetEdge;
  var currentAlignment = positionData.alignmentEdge;
  // Keep switching sides until one is found with enough space.
  // If all sides don't fit then return the unmodified element.
  for (var i = 0; i < 4; i++) {
    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {
      directions.splice(directions.indexOf(currentEdge), 1);
      if (directions.length > 0) {
        if (directions.indexOf(currentEdge * -1) > -1) {
          currentEdge = currentEdge * -1;
        } else {
          currentAlignment = currentEdge;
          currentEdge = directions.slice(-1)[0];
        }
        currentEstimate = _estimatePosition(rect, target, {
          targetEdge: currentEdge,
          alignmentEdge: currentAlignment
        }, gap);
      }
    } else {
      return {
        elementRectangle: currentEstimate,
        targetEdge: currentEdge,
        alignmentEdge: currentAlignment
      };
    }
  }
  return {
    elementRectangle: rect,
    targetEdge: positionData.targetEdge,
    alignmentEdge: positionData.alignmentEdge
  };
}
/**
* Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges
* into position, when `alignTargetEdge` is specified.
*/
function _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {
  var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;
  var oppositeEdge = alignmentEdge * -1;
  var newEstimate = _estimatePosition(elementRectangle, target, {
    targetEdge: targetEdge,
    alignmentEdge: oppositeEdge
  }, gap, coverTarget);
  return {
    elementRectangle: newEstimate,
    targetEdge: targetEdge,
    alignmentEdge: oppositeEdge
  };
}
/**
* Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in
* then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.
*/
function _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
  if (gap === void 0) {
    gap = 0;
  }
  var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;
  var elementEstimate = {
    elementRectangle: element,
    targetEdge: positionData.targetEdge,
    alignmentEdge: alignmentEdge
  };
  if (!directionalHintFixed && !coverTarget) {
    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);
  }
  var outOfBounds = _getOutOfBoundsEdges(element, bounding);
  if (alignTargetEdge) {
    // The edge opposite to the alignment edge might be out of bounds.
    // Flip alignment to see if we can get it within bounds.
    if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {
      var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);
      if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {
        return flippedElementEstimate;
      } else {
        // If the flipped elements edges are still out of bounds, try nudging it.
        elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding);
      }
    }
  } else {
    elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding);
  }
  return elementEstimate;
}
/**
* Iterates through a list of out of bounds edges and tries to nudge and align them.
* @param outOfBoundsEdges - Array of edges that are out of bounds
* @param elementEstimate - The current element positioning estimate
* @param bounding - The current bounds
*/
function _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding) {
  for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {
    var direction = outOfBoundsEdges_1[_i];
    elementEstimate.elementRectangle = _alignEdges(elementEstimate.elementRectangle, bounding, direction);
  }
  return elementEstimate;
}
/**
* Moves the middle point on an edge to the point given.
* Only moves in one direction. For instance if a bottom edge is passed in, then
* the bottom edge will be moved in the x axis to match the point.
*/
function _centerEdgeToPoint(rect, edge, point) {
  var positiveEdge = _getFlankingEdges(edge).positiveEdge;
  var elementMiddle = _getCenterValue(rect, edge);
  var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);
  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);
}
/**
* Moves the element rectangle to be appropriately positioned relative to a given target.
* Does not flip or adjust the element.
*/
function _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {
  if (gap === void 0) {
    gap = 0;
  }
  var estimatedElementPosition;
  var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;
  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
  estimatedElementPosition = coverTarget ? _alignEdges(elementToPosition, target, targetEdge, gap) : _alignOppositeEdges(elementToPosition, target, targetEdge, gap);
  // if no alignment edge is provided it's supposed to be centered.
  if (!alignmentEdge) {
    var targetMiddlePoint = _getCenterValue(target, targetEdge);
    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);
  } else {
    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);
  }
  return estimatedElementPosition;
}
/**
* Returns the non-opposite edges of the target edge.
* For instance if bottom is passed in then left and right will be returned.
*/
function _getFlankingEdges(edge) {
  if (edge === _positioningTypes.RectangleEdge.top || edge === _positioningTypes.RectangleEdge.bottom) {
    return {
      positiveEdge: _positioningTypes.RectangleEdge.left,
      negativeEdge: _positioningTypes.RectangleEdge.right
    };
  } else {
    return {
      positiveEdge: _positioningTypes.RectangleEdge.top,
      negativeEdge: _positioningTypes.RectangleEdge.bottom
    };
  }
}
/**
* Retrieve the final value for the return edge of `elementRectangle`. If the `elementRectangle` is closer to one side
* of the bounds versus the other, the return edge is flipped to grow inward.
*/
function _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {
  if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {
    return returnEdge * -1;
  }
  return returnEdge;
}
/**
* Finalizes the element positon based on the hostElement. Only returns the
* rectangle values to position such that they are anchored to the target.
* This helps prevent resizing from looking very strange.
* For instance, if the target edge is top and aligned with the left side then
* the bottom and left values are returned so as the callou shrinks it shrinks towards that corner.
*/
function _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge) {
  var returnValue = {};
  var hostRect = _getRectangleFromElement(hostElement);
  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
  var elementEdgeString = _positioningTypes.RectangleEdge[elementEdge];
  var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;
  if (!doNotFinalizeReturnEdge) {
    returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);
  }
  returnValue[elementEdgeString] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);
  returnValue[_positioningTypes.RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);
  return returnValue;
}
// Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.
// We still want to position the beak based on it's midpoint which does not change. It will
// be at (beakwidth / 2, beakwidth / 2)
function _calculateActualBeakWidthInPixels(beakWidth) {
  return Math.sqrt(beakWidth * beakWidth * 2);
}
/**
* Returns the appropriate IPositionData based on the props altered for RTL.
* If directionalHintForRTL is passed in that is used if the page is RTL.
* If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be
* flipped (e.g. bottomLeftEdge would become bottomRightEdge).
*
* If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.
*/
function _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {
  if (directionalHint === void 0) {
    directionalHint = _commonDirectionalHint.DirectionalHint.bottomAutoEdge;
  }
  if (previousPositions) {
    return {
      alignmentEdge: previousPositions.alignmentEdge,
      isAuto: previousPositions.isAuto,
      targetEdge: previousPositions.targetEdge
    };
  }
  var positionInformation = _tslib.__assign({}, DirectionalDictionary[directionalHint]);
  if (_Utilities.getRTL()) {
    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.
    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {
      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;
    }
    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;
  }
  return positionInformation;
}
/**
* Get's the alignment data for the given information. This only really matters if the positioning is Auto.
* If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to
* the center of the page.
*/
function _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {
  if (positionData.isAuto) {
    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);
  }
  positionData.alignTargetEdge = alignTargetEdge;
  return positionData;
}
function getClosestEdge(targetEdge, target, boundingRect) {
  var targetCenter = _getCenterValue(target, targetEdge);
  var boundingCenter = _getCenterValue(boundingRect, targetEdge);
  var _a = _getFlankingEdges(targetEdge), positiveEdge = _a.positiveEdge, negativeEdge = _a.negativeEdge;
  if (targetCenter <= boundingCenter) {
    return positiveEdge;
  } else {
    return negativeEdge;
  }
}
function _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {
  var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);
  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {
    return {
      elementRectangle: estimatedElementPosition,
      targetEdge: positionData.targetEdge,
      alignmentEdge: positionData.alignmentEdge
    };
  } else {
    return _adjustFitWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);
  }
}
function _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {
  var targetEdge = elementPosition.targetEdge * -1;
  // The "host" element that we will use to help position the beak.
  var actualElement = new _Utilities.Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);
  var returnValue = {};
  var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);
  returnValue[_positioningTypes.RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);
  returnValue[_positioningTypes.RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);
  return {
    elementPosition: _tslib.__assign({}, returnValue),
    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),
    targetEdge: targetEdge
  };
}
function _positionBeak(beakWidth, elementPosition) {
  var target = elementPosition.targetRectangle;
  /**
  * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and
  * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,
  * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels
  * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.
  */
  var _a = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a.positiveEdge, negativeEdge = _a.negativeEdge;
  var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);
  var elementBounds = new _Utilities.Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);
  var beakPosition = new _Utilities.Rectangle(0, beakWidth, 0, beakWidth);
  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);
  beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));
  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {
    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);
  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {
    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);
  }
  return beakPosition;
}
function _getRectangleFromElement(element) {
  var clientRect = element.getBoundingClientRect();
  return new _Utilities.Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);
}
function _getRectangleFromIRect(rect) {
  return new _Utilities.Rectangle(rect.left, rect.right, rect.top, rect.bottom);
}
function _getTargetRect(bounds, target) {
  var targetRectangle;
  if (target) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!target.preventDefault) {
      var ev = target;
      targetRectangle = new _Utilities.Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);
    } else if (!!target.getBoundingClientRect) {
      targetRectangle = _getRectangleFromElement(target);
    } else {
      var rectOrPoint = target;
      // eslint-disable-next-line deprecation/deprecation
      var left = rectOrPoint.left || rectOrPoint.x;
      // eslint-disable-next-line deprecation/deprecation
      var top_1 = rectOrPoint.top || rectOrPoint.y;
      var right = rectOrPoint.right || left;
      var bottom = rectOrPoint.bottom || top_1;
      targetRectangle = new _Utilities.Rectangle(left, right, top_1, bottom);
    }
    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {
      var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);
      for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {
        var direction = outOfBounds_1[_i];
        targetRectangle[_positioningTypes.RectangleEdge[direction]] = bounds[_positioningTypes.RectangleEdge[direction]];
      }
    }
  } else {
    targetRectangle = new _Utilities.Rectangle(0, 0, 0, 0);
  }
  return targetRectangle;
}
/**
* If max height is less than zero it returns the bounds height instead.
*/
function _getMaxHeightFromTargetRectangle(targetRectangle, targetEdge, gapSpace, bounds, coverTarget) {
  var maxHeight = 0;
  var directionalHint = DirectionalDictionary[targetEdge];
  // If cover target is set, then the max height should be calculated using the opposite of the target edge since
  // that's the direction that the callout will expand in.
  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge
  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height
  // is (bottom of target) - (top of screen) - gapSpace.
  var target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;
  if (target === _positioningTypes.RectangleEdge.top) {
    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;
  } else if (target === _positioningTypes.RectangleEdge.bottom) {
    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;
  } else {
    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;
  }
  return maxHeight > 0 ? maxHeight : bounds.height;
}
function _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {
  var gap = props.gapSpace ? props.gapSpace : 0;
  var targetRect = _getTargetRect(boundingRect, props.target);
  var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);
  var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);
  return _tslib.__assign(_tslib.__assign({}, positionedElement), {
    targetRectangle: targetRect
  });
}
function _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {
  var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge);
  return {
    elementPosition: finalizedElement,
    targetEdge: positionedElement.targetEdge,
    alignmentEdge: positionedElement.alignmentEdge
  };
}
function _positionElement(props, hostElement, elementToPosition, previousPositions) {
  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new _Utilities.Rectangle(0, window.innerWidth - _Utilities.getScrollbarWidth(), 0, window.innerHeight);
  var positionedElement = _positionElementRelative(props, elementToPosition, boundingRect, previousPositions);
  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);
}
function _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {
  var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;
  var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);
  var positionProps = props;
  positionProps.gapSpace = gap;
  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new _Utilities.Rectangle(0, window.innerWidth - _Utilities.getScrollbarWidth(), 0, window.innerHeight);
  var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);
  var beakPositioned = _positionBeak(beakWidth, positionedElement);
  var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);
  return _tslib.__assign(_tslib.__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), {
    beakPosition: finalizedBeakPosition
  });
}
function _positionCard(props, hostElement, callout, previousPositions) {
  return _positionCallout(props, hostElement, callout, previousPositions, true);
}
var __positioningTestPackage = {
  _finalizePositionData: _finalizePositionData,
  _finalizeBeakPosition: _finalizeBeakPosition,
  _calculateActualBeakWidthInPixels: _calculateActualBeakWidthInPixels,
  _positionElementWithinBounds: _positionElementWithinBounds,
  _positionBeak: _positionBeak,
  _getPositionData: _getPositionData,
  _getMaxHeightFromTargetRectangle: _getMaxHeightFromTargetRectangle
};
function positionElement(props, hostElement, elementToPosition, previousPositions) {
  return _positionElement(props, hostElement, elementToPosition, previousPositions);
}
function positionCallout(props, hostElement, elementToPosition, previousPositions) {
  return _positionCallout(props, hostElement, elementToPosition, previousPositions);
}
function positionCard(props, hostElement, elementToPosition, previousPositions) {
  return _positionCard(props, hostElement, elementToPosition, previousPositions);
}
function getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget) {
  if (gapSpace === void 0) {
    gapSpace = 0;
  }
  var mouseTarget = target;
  var elementTarget = target;
  var rectOrPointTarget = target;
  var targetRect;
  var boundingRectangle = bounds ? _getRectangleFromIRect(bounds) : new _Utilities.Rectangle(0, window.innerWidth - _Utilities.getScrollbarWidth(), 0, window.innerHeight);
  // eslint-disable-next-line deprecation/deprecation
  var left = rectOrPointTarget.left || rectOrPointTarget.x;
  // eslint-disable-next-line deprecation/deprecation
  var top = rectOrPointTarget.top || rectOrPointTarget.y;
  var right = rectOrPointTarget.right || left;
  var bottom = rectOrPointTarget.bottom || top;
  // eslint-disable-next-line no-extra-boolean-cast -- may not actually be a MouseEvent
  if (!!mouseTarget.stopPropagation) {
    targetRect = new _Utilities.Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);
  } else if (left !== undefined && top !== undefined) {
    targetRect = new _Utilities.Rectangle(left, right, top, bottom);
  } else {
    targetRect = _getRectangleFromElement(elementTarget);
  }
  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);
}
function getOppositeEdge(edge) {
  return edge * -1;
}
function _getBoundsFromTargetWindow(target, targetWindow) {
  var segments = undefined;
  if (targetWindow.getWindowSegments) {
    segments = targetWindow.getWindowSegments();
  }
  // Identify if we're dealing with single screen scenarios.
  if (segments === undefined || segments.length <= 1) {
    return {
      top: 0,
      left: 0,
      right: targetWindow.innerWidth,
      bottom: targetWindow.innerHeight,
      width: targetWindow.innerWidth,
      height: targetWindow.innerHeight
    };
  }
  // Logic for determining dual screen scenarios.
  var x = 0;
  var y = 0;
  // If the target is an Element get coordinates for its center.
  if (target !== null && !!target.getBoundingClientRect) {
    var clientRect = target.getBoundingClientRect();
    x = (clientRect.left + clientRect.right) / 2;
    y = (clientRect.top + clientRect.bottom) / 2;
      // If the target is not null get x-axis and y-axis coordinates directly.
} else // If the target is not null get x-axis and y-axis coordinates directly.
  if (target !== null) {
    // eslint-disable-next-line deprecation/deprecation
    x = target.left || target.x;
    // eslint-disable-next-line deprecation/deprecation
    y = target.top || target.y;
  }
  var bounds = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: 0,
    height: 0
  };
  // Define which window segment are the coordinates in and calculate bounds based on that.
  for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
    var segment = segments_1[_i];
    if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {
      bounds = {
        top: segment.top,
        left: segment.left,
        right: segment.right,
        bottom: segment.bottom,
        width: segment.width,
        height: segment.height
      };
    }
  }
  return bounds;
}
function getBoundsFromTargetWindow(target, targetWindow) {
  return _getBoundsFromTargetWindow(target, targetWindow);
}

},{"tslib":"6ZIET","../../common/DirectionalHint":"6itO1","../../Utilities":"1439N","./positioning.types":"6duKP","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6duKP":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "RectangleEdge", function () {
  return RectangleEdge;
});
_parcelHelpers.export(exports, "Position", function () {
  return Position;
});
var RectangleEdge;
(function (RectangleEdge) {
  RectangleEdge[RectangleEdge["top"] = 1] = "top";
  RectangleEdge[RectangleEdge["bottom"] = -1] = "bottom";
  RectangleEdge[RectangleEdge["left"] = 2] = "left";
  RectangleEdge[RectangleEdge["right"] = -2] = "right";
})(RectangleEdge || (RectangleEdge = {}));
var Position;
(function (Position) {
  Position[Position["top"] = 0] = "top";
  Position[Position["bottom"] = 1] = "bottom";
  Position[Position["start"] = 2] = "start";
  Position[Position["end"] = 3] = "end";
})(Position || (Position = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4NwKJ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsPopupIndex = require('./components/Popup/index');
_parcelHelpers.exportAll(_componentsPopupIndex, exports);

},{"./components/Popup/index":"7kCU0","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7kCU0":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Popup = require('./Popup');
_parcelHelpers.exportAll(_Popup, exports);
var _PopupTypes = require('./Popup.types');
_parcelHelpers.exportAll(_PopupTypes, exports);

},{"./Popup":"4wh39","./Popup.types":"6sUAa","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4wh39":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Popup", function () {
  return Popup;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _fluentuiReactWindowProvider = require('@fluentui/react-window-provider');
function useScrollbarAsync(props, root) {
  var async = _fluentuiReactHooks.useAsync();
  var _a = _react.useState(false), needsVerticalScrollBarState = _a[0], setNeedsVerticalScrollBar = _a[1];
  _react.useEffect(function () {
    async.requestAnimationFrame(function () {
      var _a;
      // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.
      if (props.style && props.style.overflowY) {
        return;
      }
      var needsVerticalScrollBar = false;
      if (root && root.current && ((_a = root.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)) {
        // ClientHeight returns the client height of an element rounded to an
        // integer. On some browsers at different zoom levels this rounding
        // can generate different results for the root container and child even
        // though they are the same height. This causes us to show a scroll bar
        // when not needed. Ideally we would use BoundingClientRect().height
        // instead however seems that the API is 90% slower than using ClientHeight.
        // Therefore instead we will calculate the difference between heights and
        // allow for a 1px difference to still be considered ok and not show the
        // scroll bar.
        var rootHeight = root.current.clientHeight;
        var firstChildHeight = root.current.firstElementChild.clientHeight;
        if (rootHeight > 0 && firstChildHeight > rootHeight) {
          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;
        }
      }
      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {
        setNeedsVerticalScrollBar(needsVerticalScrollBar);
      }
    });
    return function () {
      return async.dispose();
    };
  });
  return needsVerticalScrollBarState;
}
function defaultFocusRestorer(options) {
  var originalElement = options.originalElement, containsFocus = options.containsFocus;
  if (originalElement && containsFocus && originalElement !== _Utilities.getWindow()) {
    // Make sure that the focus method actually exists
    // In some cases the object might exist but not be a real element.
    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.
    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.
    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)
    setTimeout(function () {
      var _a;
      (_a = originalElement.focus) === null || _a === void 0 ? void 0 : _a.call(originalElement);
    }, 0);
  }
}
function useRestoreFocus(props, root) {
  var _a = props.onRestoreFocus, onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;
  var originalFocusedElement = _react.useRef();
  var containsFocus = _react.useRef(false);
  _react.useEffect(function () {
    originalFocusedElement.current = _Utilities.getDocument().activeElement;
    if (_Utilities.doesElementContainFocus(root.current)) {
      containsFocus.current = true;
    }
    return function () {
      var _a;
      onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({
        originalElement: originalFocusedElement.current,
        containsFocus: containsFocus.current,
        documentContainsFocus: ((_a = _Utilities.getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false
      });
      // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown
      originalFocusedElement.current = undefined;
    };
  }, []);
  _fluentuiReactHooks.useOnEvent(root, 'focus', _react.useCallback(function () {
    containsFocus.current = true;
  }, []), true);
  _fluentuiReactHooks.useOnEvent(root, 'blur', _react.useCallback(function (ev) {
    /** The popup should update this._containsFocus when:
    * relatedTarget exists AND
    * the relatedTarget is not contained within the popup.
    * If the relatedTarget is within the popup, that means the popup still has focus
    * and focused moved from one element to another within the popup.
    * If relatedTarget is undefined or null that usually means that a
    * keyboard event occurred and focus didn't change
    */
    if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget)) {
      containsFocus.current = false;
    }
  }, []), true);
}
function useHideSiblingNodes(props) {
  var isModalOrPanel = props['aria-modal'];
  _react.useEffect(function () {
    var targetDocument = _Utilities.getDocument();
    if (isModalOrPanel && targetDocument) {
      var children = targetDocument.body.children;
      var nodesToHide_1 = [];
      for (var i = 0; i < children.length - 1; i++) {
        nodesToHide_1.push(children[i]);
      }
      nodesToHide_1 = nodesToHide_1.filter(function (child) {
        return child.tagName !== 'TEMPLATE' && child.tagName !== 'SCRIPT' && child.tagName !== 'STYLE' && !child.hasAttribute('aria-hidden');
      });
      nodesToHide_1.forEach(function (node) {
        return node.setAttribute('aria-hidden', 'true');
      });
      return function () {
        return nodesToHide_1.forEach(function (child) {
          return child.removeAttribute('aria-hidden');
        });
      };
    }
  }, [isModalOrPanel]);
}
var Popup = _react.forwardRef(function (props, forwardedRef) {
  // Default props
  // eslint-disable-next-line deprecation/deprecation
  props = _tslib.__assign({
    shouldRestoreFocus: true
  }, props);
  var root = _react.useRef();
  var mergedRootRef = _fluentuiReactHooks.useMergedRefs(root, forwardedRef);
  useHideSiblingNodes(props);
  useRestoreFocus(props, root);
  var role = props.role, className = props.className, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, style = props.style, children = props.children, onDismiss = props.onDismiss;
  var needsVerticalScrollBar = useScrollbarAsync(props, root);
  var onKeyDown = _react.useCallback(function (ev) {
    // eslint-disable-next-line deprecation/deprecation
    switch (ev.which) {
      case _Utilities.KeyCodes.escape:
        if (onDismiss) {
          onDismiss(ev);
          ev.preventDefault();
          ev.stopPropagation();
        }
        break;
    }
  }, [onDismiss]);
  var win = _fluentuiReactWindowProvider.useWindow();
  _fluentuiReactHooks.useOnEvent(win, 'keydown', onKeyDown);
  return _react.createElement("div", _tslib.__assign({
    ref: mergedRootRef
  }, _Utilities.getNativeProps(props, _Utilities.divProperties), {
    className: className,
    role: role,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    onKeyDown: onKeyDown,
    style: _tslib.__assign({
      overflowY: needsVerticalScrollBar ? 'scroll' : undefined,
      outline: 'none'
    }, style)
  }), children);
});

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","@fluentui/react-hooks":"1pHwU","@fluentui/react-window-provider":"5qP7J","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6sUAa":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"LXvZP":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
function getBeakStyle(beakWidth) {
  return {
    height: beakWidth,
    width: beakWidth
  };
}
var GlobalClassNames = {
  container: 'ms-Callout-container',
  root: 'ms-Callout',
  beak: 'ms-Callout-beak',
  beakCurtain: 'ms-Callout-beakCurtain',
  calloutMain: 'ms-Callout-main'
};
var getStyles = function (props) {
  var _a;
  var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var semanticColors = theme.semanticColors, effects = theme.effects;
  return {
    container: [classNames.container, {
      position: 'relative'
    }],
    root: [classNames.root, theme.fonts.medium, {
      position: 'absolute',
      boxSizing: 'border-box',
      borderRadius: effects.roundedCorner2,
      boxShadow: effects.elevation16,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        borderWidth: 1,
        borderStyle: 'solid',
        borderColor: 'WindowText'
      }, _a)
    }, _Styling.focusClear(), className, !!calloutWidth && ({
      width: calloutWidth
    }), !!calloutMaxWidth && ({
      maxWidth: calloutMaxWidth
    }), !!calloutMinWidth && ({
      minWidth: calloutMinWidth
    })],
    beak: [classNames.beak, {
      position: 'absolute',
      backgroundColor: semanticColors.menuBackground,
      boxShadow: 'inherit',
      border: 'inherit',
      boxSizing: 'border-box',
      transform: 'rotate(45deg)'
    }, getBeakStyle(beakWidth), backgroundColor && ({
      backgroundColor: backgroundColor
    })],
    beakCurtain: [classNames.beakCurtain, {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      backgroundColor: semanticColors.menuBackground,
      borderRadius: effects.roundedCorner2
    }],
    calloutMain: [classNames.calloutMain, {
      backgroundColor: semanticColors.menuBackground,
      overflowX: 'hidden',
      overflowY: 'auto',
      position: 'relative',
      borderRadius: effects.roundedCorner2
    }, overflowYHidden && ({
      overflowY: 'hidden'
    }), backgroundColor && ({
      backgroundColor: backgroundColor
    })]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6Nb0d":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./version');
var _componentsLayerIndex = require('./components/Layer/index');
_parcelHelpers.exportAll(_componentsLayerIndex, exports);

},{"./version":"4GWvB","./components/Layer/index":"5DVzS","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5DVzS":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Layer = require('./Layer');
_parcelHelpers.exportAll(_Layer, exports);
var _LayerBase = require('./Layer.base');
_parcelHelpers.exportAll(_LayerBase, exports);
var _LayerTypes = require('./Layer.types');
_parcelHelpers.exportAll(_LayerTypes, exports);
var _LayerHost = require('./LayerHost');
_parcelHelpers.exportAll(_LayerHost, exports);
var _LayerHostTypes = require('./LayerHost.types');
_parcelHelpers.exportAll(_LayerHostTypes, exports);

},{"./Layer":"6KKOR","./Layer.base":"vYuSX","./Layer.types":"1OWYN","./LayerHost":"i0oyw","./LayerHost.types":"1Zbbe","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6KKOR":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Layer", function () {
  return Layer;
});
var _Utilities = require('../../Utilities');
var _LayerBase = require('./Layer.base');
var _LayerStyles = require('./Layer.styles');
var Layer = _Utilities.styled(_LayerBase.LayerBase, _LayerStyles.getStyles, undefined, {
  scope: 'Layer',
  fields: ['hostId', 'theme', 'styles']
});

},{"../../Utilities":"1439N","./Layer.base":"vYuSX","./Layer.styles":"8iQkZ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"vYuSX":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LayerBase", function () {
  return LayerBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _reactDom = require('react-dom');
var _Fabric = require('../../Fabric');
var _Utilities = require('../../Utilities');
var _LayerNotification = require('./Layer.notification');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _WindowProvider = require('../../WindowProvider');
var getClassNames = _Utilities.classNamesFunction();
var LayerBase = _react.forwardRef(function (props, ref) {
  var _a = _react.useState(), layerElement = _a[0], setLayerElement = _a[1];
  var refLayerElement = _react.useRef(layerElement);
  refLayerElement.current = layerElement;
  var rootRef = _react.useRef(null);
  var mergedRef = _fluentuiReactHooks.useMergedRefs(rootRef, ref);
  var doc = _WindowProvider.useDocument();
  var eventBubblingEnabled = props.eventBubblingEnabled, styles = props.styles, theme = props.theme, className = props.className, children = props.children, hostId = props.hostId, _b = props.onLayerDidMount, onLayerDidMount = _b === void 0 ? function () {
    return undefined;
  } : _b, // eslint-disable-next-line deprecation/deprecation
  _c = props.onLayerMounted, // eslint-disable-next-line deprecation/deprecation
  onLayerMounted = _c === void 0 ? function () {
    return undefined;
  } : _c, onLayerWillUnmount = props.onLayerWillUnmount, insertFirst = props.insertFirst;
  var classNames = getClassNames(styles, {
    theme: theme,
    className: className,
    isNotHost: !hostId
  });
  // Returns the user provided hostId props element, the default target selector,
  // or undefined if document doesn't exist.
  var getHost = function () {
    if (!doc) {
      return undefined;
    }
    if (hostId) {
      return doc.getElementById(hostId);
    } else {
      var defaultHostSelector = _LayerNotification.getDefaultTarget();
      return defaultHostSelector ? doc.querySelector(defaultHostSelector) : doc.body;
    }
  };
  // Removes the current layer element's parentNode and runs onLayerWillUnmount prop if provided.
  var removeLayerElement = function () {
    onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
    var elem = refLayerElement.current;
    if (elem && elem.parentNode) {
      var parentNode = elem.parentNode;
      if (parentNode) {
        parentNode.removeChild(elem);
      }
    }
  };
  // If a doc or host exists, it will remove and update layer parentNodes.
  var createLayerElement = function () {
    var host = getHost();
    if (!doc || !host) {
      return;
    }
    // Remove and re-create any previous existing layer elements.
    removeLayerElement();
    var el = doc.createElement('div');
    el.className = classNames.root;
    _Utilities.setPortalAttribute(el);
    _Utilities.setVirtualParent(el, rootRef.current);
    insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
    setLayerElement(el);
    onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
    onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
  };
  // eslint-disable-next-line no-restricted-properties
  _react.useLayoutEffect(function () {
    createLayerElement();
    // Check if the user provided a hostId prop and register the layer with the ID.
    if (hostId) {
      _LayerNotification.registerLayer(hostId, createLayerElement);
    }
    return function () {
      removeLayerElement();
      if (hostId) {
        _LayerNotification.unregisterLayer(hostId, createLayerElement);
      }
    };
  }, [hostId]);
  useDebugWarnings(props);
  return _react.createElement("span", {
    className: "ms-layer",
    ref: mergedRef
  }, layerElement && _reactDom.createPortal(/*eslint-disable deprecation/deprecation*/
  _react.createElement(_Fabric.Fabric, _tslib.__assign({}, !eventBubblingEnabled && getFilteredEvents(), {
    className: classNames.content
  }), children), /*eslint-enable deprecation/deprecation*/
  layerElement));
});
LayerBase.displayName = 'LayerBase';
var filteredEventProps;
var onFilterEvent = function (ev) {
  // We should just be able to check ev.bubble here and only stop events that are bubbling up. However, even though
  // mouseenter and mouseleave do NOT bubble up, they are showing up as bubbling. Therefore we stop events based on
  // event name rather than ev.bubble.
  if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== 'mouseenter' && ev.type !== 'mouseleave' && ev.type !== 'touchstart' && ev.type !== 'touchend') {
    ev.stopPropagation();
  }
};
function getFilteredEvents() {
  if (!filteredEventProps) {
    filteredEventProps = {};
    ['onClick', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOver', 'onMouseOut', 'onMouseUp', 'onTouchMove', 'onTouchStart', 'onTouchCancel', 'onTouchEnd', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onFocus', 'onBlur', 'onChange', 'onInput', 'onInvalid', 'onSubmit'].forEach(function (name) {
      return filteredEventProps[name] = onFilterEvent;
    });
  }
  return filteredEventProps;
}
function useDebugWarnings(props) {
  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
    _fluentuiReactHooks.useWarnings({
      name: 'Layer',
      props: props,
      deprecations: {
        onLayerMounted: 'onLayerDidMount'
      }
    });
  }
}

},{"tslib":"6ZIET","react":"4g1R3","react-dom":"3FeWS","../../Fabric":"3nbt5","../../Utilities":"1439N","./Layer.notification":"2Vvel","@fluentui/react-hooks":"1pHwU","../../WindowProvider":"6pPxG","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3nbt5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsFabricIndex = require('./components/Fabric/index');
_parcelHelpers.exportAll(_componentsFabricIndex, exports);

},{"./components/Fabric/index":"scrzR","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"scrzR":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Fabric = require('./Fabric');
_parcelHelpers.exportAll(_Fabric, exports);
var _FabricBase = require('./Fabric.base');
_parcelHelpers.exportAll(_FabricBase, exports);
var _FabricTypes = require('./Fabric.types');
_parcelHelpers.exportAll(_FabricTypes, exports);

},{"./Fabric":"1OZS1","./Fabric.base":"3Aq1O","./Fabric.types":"LZ9FT","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1OZS1":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Fabric", function () {
  return Fabric;
});
var _Utilities = require('../../Utilities');
var _FabricBase = require('./Fabric.base');
var _FabricStyles = require('./Fabric.styles');
var Fabric = _Utilities.styled(_FabricBase.FabricBase, _FabricStyles.getStyles, undefined, {
  scope: 'Fabric'
});

},{"../../Utilities":"1439N","./Fabric.base":"3Aq1O","./Fabric.styles":"2w3eI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3Aq1O":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "FabricBase", function () {
  return FabricBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Styling = require('../../Styling');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var getClassNames = _Utilities.classNamesFunction();
var getFabricTheme = _Utilities.memoizeFunction(function (theme, isRTL) {
  return _Styling.createTheme(_tslib.__assign(_tslib.__assign({}, theme), {
    rtl: isRTL
  }));
});
var getDir = function (_a) {
  var theme = _a.theme, dir = _a.dir;
  var contextDir = _Utilities.getRTL(theme) ? 'rtl' : 'ltr';
  var pageDir = _Utilities.getRTL() ? 'rtl' : 'ltr';
  var componentDir = dir ? dir : contextDir;
  return {
    // If Fabric dir !== contextDir
    // Or If contextDir !== pageDir
    // Then we need to set dir of the Fabric root
    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
    // If dir !== contextDir || pageDir
    // then set contextual theme around content
    needsTheme: componentDir !== contextDir
  };
};
var FabricBase = _react.forwardRef(function (props, ref) {
  var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles = props.styles;
  var classNames = getClassNames(styles, {
    theme: theme,
    applyTheme: applyTheme,
    className: className
  });
  var rootElement = _react.useRef(null);
  useApplyThemeToBody(applyThemeToBody, classNames, rootElement);
  _Utilities.useFocusRects(rootElement);
  return _react.createElement(_react.Fragment, null, useRenderedContent(props, classNames, rootElement, ref));
});
FabricBase.displayName = 'FabricBase';
function useRenderedContent(props, _a, rootElement, ref) {
  var root = _a.root;
  var _b = props.as, Root = _b === void 0 ? 'div' : _b, dir = props.dir, theme = props.theme;
  var divProps = _Utilities.getNativeProps(props, _Utilities.divProperties, ['dir']);
  var _c = getDir(props), rootDir = _c.rootDir, needsTheme = _c.needsTheme;
  var renderedContent = _react.createElement(Root, _tslib.__assign({
    dir: rootDir
  }, divProps, {
    className: root,
    ref: _fluentuiReactHooks.useMergedRefs(rootElement, ref)
  }));
  // Create the contextual theme if component direction does not match parent direction.
  if (needsTheme) {
    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.
    renderedContent = // eslint-disable-next-line deprecation/deprecation
    _react.createElement(_Utilities.Customizer, {
      settings: {
        theme: getFabricTheme(theme, dir === 'rtl')
      }
    }, renderedContent);
  }
  return renderedContent;
}
function useApplyThemeToBody(applyThemeToBody, _a, rootElement) {
  var bodyThemed = _a.bodyThemed;
  _react.useEffect(function () {
    if (applyThemeToBody) {
      var currentDoc_1 = _Utilities.getDocument(rootElement.current);
      if (currentDoc_1) {
        currentDoc_1.body.classList.add(bodyThemed);
        return function () {
          currentDoc_1.body.classList.remove(bodyThemed);
        };
      }
    }
  }, [bodyThemed, applyThemeToBody, rootElement]);
  return rootElement;
}

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../../Styling":"5q33X","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2w3eI":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var inheritFont = {
  fontFamily: 'inherit'
};
var GlobalClassNames = {
  root: 'ms-Fabric',
  bodyThemed: 'ms-Fabric-bodyThemed'
};
var getStyles = function (props) {
  var theme = props.theme, className = props.className, applyTheme = props.applyTheme;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, theme.fonts.medium, {
      color: theme.palette.neutralPrimary,
      selectors: {
        '& button': inheritFont,
        '& input': inheritFont,
        '& textarea': inheritFont
      }
    }, // apply theme to only if applyTheme is true
    applyTheme && ({
      color: theme.semanticColors.bodyText,
      backgroundColor: theme.semanticColors.bodyBackground
    }), className],
    bodyThemed: [{
      backgroundColor: theme.semanticColors.bodyBackground
    }]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"LZ9FT":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2Vvel":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "registerLayer", function () {
  return registerLayer;
});
_parcelHelpers.export(exports, "unregisterLayer", function () {
  return unregisterLayer;
});
_parcelHelpers.export(exports, "notifyHostChanged", function () {
  return notifyHostChanged;
});
_parcelHelpers.export(exports, "setDefaultTarget", function () {
  return setDefaultTarget;
});
_parcelHelpers.export(exports, "getDefaultTarget", function () {
  return getDefaultTarget;
});
var _layersByHostId = {};
var _defaultHostSelector;
function registerLayer(hostId, callback) {
  if (!_layersByHostId[hostId]) {
    _layersByHostId[hostId] = [];
  }
  _layersByHostId[hostId].push(callback);
}
function unregisterLayer(hostId, callback) {
  if (_layersByHostId[hostId]) {
    var idx = _layersByHostId[hostId].indexOf(callback);
    if (idx >= 0) {
      _layersByHostId[hostId].splice(idx, 1);
      if (_layersByHostId[hostId].length === 0) {
        delete _layersByHostId[hostId];
      }
    }
  }
}
function notifyHostChanged(id) {
  if (_layersByHostId[id]) {
    _layersByHostId[id].forEach(function (callback) {
      return callback();
    });
  }
}
function setDefaultTarget(selector) {
  _defaultHostSelector = selector;
}
function getDefaultTarget() {
  return _defaultHostSelector;
}

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6pPxG":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./version');
var _fluentuiReactWindowProvider = require('@fluentui/react-window-provider');
_parcelHelpers.exportAll(_fluentuiReactWindowProvider, exports);

},{"./version":"4GWvB","@fluentui/react-window-provider":"5qP7J","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"8iQkZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var GlobalClassNames = {
  root: 'ms-Layer',
  rootNoHost: 'ms-Layer--fixed',
  content: 'ms-Layer-content'
};
var getStyles = function (props) {
  var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, theme.fonts.medium, isNotHost && [classNames.rootNoHost, {
      position: 'fixed',
      zIndex: _Styling.ZIndexes.Layer,
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      visibility: 'hidden'
    }], className],
    content: [classNames.content, {
      visibility: 'visible'
    }]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1OWYN":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"i0oyw":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LayerHost", function () {
  return LayerHost;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _LayerNotification = require('./Layer.notification');
var LayerHost = function (props) {
  var id = props.id, className = props.className;
  _react.useEffect(function () {
    _LayerNotification.notifyHostChanged(id);
  }, []);
  useUnmount(function () {
    _LayerNotification.notifyHostChanged(id);
  });
  return _react.createElement("div", _tslib.__assign({}, props, {
    className: _Utilities.css('ms-LayerHost', className)
  }));
};
var useUnmount = function (unmountFunction) {
  var unmountRef = _react.useRef(unmountFunction);
  unmountRef.current = unmountFunction;
  _react.useEffect(function () {
    return function () {
      if (unmountRef.current) {
        unmountRef.current();
      }
    };
  }, []);
};

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./Layer.notification":"2Vvel","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1Zbbe":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"41xGy":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"71ZRk":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "FocusTrapCallout", function () {
  return FocusTrapCallout;
});
var _tslib = require("tslib");
var _react = require('react');
var _Callout = require('./Callout');
var _FocusTrapZone = require('../../FocusTrapZone');
var FocusTrapCallout = function (props) {
  return _react.createElement(_Callout.Callout, _tslib.__assign({}, props), _react.createElement(_FocusTrapZone.FocusTrapZone, _tslib.__assign({
    disabled: props.hidden
  }, props.focusTrapProps), props.children));
};

},{"tslib":"6ZIET","react":"4g1R3","./Callout":"55dti","../../FocusTrapZone":"2s8OO","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2s8OO":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsFocusTrapZoneIndex = require('./components/FocusTrapZone/index');
_parcelHelpers.exportAll(_componentsFocusTrapZoneIndex, exports);

},{"./components/FocusTrapZone/index":"5erHq","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5erHq":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _FocusTrapZone = require('./FocusTrapZone');
_parcelHelpers.exportAll(_FocusTrapZone, exports);
var _FocusTrapZoneTypes = require('./FocusTrapZone.types');
_parcelHelpers.exportAll(_FocusTrapZoneTypes, exports);

},{"./FocusTrapZone":"3dOXC","./FocusTrapZone.types":"v6aqM","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3dOXC":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "FocusTrapZone", function () {
  return FocusTrapZone;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _WindowProvider = require('../../WindowProvider');
var COMPONENT_NAME = 'FocusTrapZone';
var useComponentRef = function (componentRef, previouslyFocusedElement, focus) {
  _react.useImperativeHandle(componentRef, function () {
    return {
      get previouslyFocusedElement() {
        return previouslyFocusedElement;
      },
      focus: focus
    };
  }, [previouslyFocusedElement, focus]);
};
var FocusTrapZone = _react.forwardRef(function (props, ref) {
  var root = _react.useRef(null);
  var firstBumper = _react.useRef(null);
  var lastBumper = _react.useRef(null);
  var mergedRootRef = _fluentuiReactHooks.useMergedRefs(root, ref);
  var id = _fluentuiReactHooks.useId(undefined, props.id);
  var doc = _WindowProvider.useDocument();
  var divProps = _Utilities.getNativeProps(props, _Utilities.divProperties);
  var internalState = _fluentuiReactHooks.useConst(function () {
    return {
      previouslyFocusedElementOutsideTrapZone: undefined,
      previouslyFocusedElementInTrapZone: undefined,
      disposeFocusHandler: undefined,
      disposeClickHandler: undefined,
      hasFocus: false,
      unmodalize: undefined
    };
  });
  var ariaLabelledBy = props.ariaLabelledBy, className = props.className, children = props.children, componentRef = props.componentRef, disabled = props.disabled, _a = props.disableFirstFocus, disableFirstFocus = _a === void 0 ? false : _a, _b = props.disabled, currentDisabledValue = _b === void 0 ? false : _b, elementToFocusOnDismiss = props.elementToFocusOnDismiss, _c = props.forceFocusInsideTrap, forceFocusInsideTrap = _c === void 0 ? true : _c, focusPreviouslyFocusedInnerElement = props.focusPreviouslyFocusedInnerElement, firstFocusableSelector = props.firstFocusableSelector, ignoreExternalFocusing = props.ignoreExternalFocusing, _d = props.isClickableOutsideFocusTrap, isClickableOutsideFocusTrap = _d === void 0 ? false : _d, onFocus = props.onFocus, onBlur = props.onBlur, onFocusCapture = props.onFocusCapture, onBlurCapture = props.onBlurCapture, enableAriaHiddenSiblings = props.enableAriaHiddenSiblings;
  var bumperProps = {
    'aria-hidden': true,
    style: {
      pointerEvents: 'none',
      position: 'fixed'
    },
    tabIndex: disabled ? -1 : 0,
    'data-is-visible': true
  };
  var focus = _react.useCallback(function () {
    if (focusPreviouslyFocusedInnerElement && internalState.previouslyFocusedElementInTrapZone && _Utilities.elementContains(root.current, internalState.previouslyFocusedElementInTrapZone)) {
      // focus on the last item that had focus in the zone before we left the zone
      _Utilities.focusAsync(internalState.previouslyFocusedElementInTrapZone);
      return;
    }
    var focusSelector = typeof firstFocusableSelector === 'string' ? firstFocusableSelector : firstFocusableSelector && firstFocusableSelector();
    var firstFocusableChild = null;
    if (root.current) {
      if (focusSelector) {
        firstFocusableChild = root.current.querySelector('.' + focusSelector);
      }
      // Fall back to first element if query selector did not match any elements.
      if (!firstFocusableChild) {
        firstFocusableChild = _Utilities.getNextElement(root.current, root.current.firstChild, false, false, false, true);
      }
    }
    if (firstFocusableChild) {
      _Utilities.focusAsync(firstFocusableChild);
    }
  }, [firstFocusableSelector, focusPreviouslyFocusedInnerElement, internalState]);
  var onBumperFocus = _react.useCallback(function (isFirstBumper) {
    if (disabled) {
      return;
    }
    var currentBumper = isFirstBumper === internalState.hasFocus ? lastBumper.current : firstBumper.current;
    if (root.current) {
      var nextFocusable = isFirstBumper === internalState.hasFocus ? _Utilities.getLastTabbable(root.current, currentBumper, true, false) : _Utilities.getFirstTabbable(root.current, currentBumper, true, false);
      if (nextFocusable) {
        if (nextFocusable === firstBumper.current || nextFocusable === lastBumper.current) {
          // This can happen when FTZ contains no tabbable elements.
          // focus will take care of finding a focusable element in FTZ.
          focus();
        } else {
          nextFocusable.focus();
        }
      }
    }
  }, [disabled, focus, internalState]);
  var onRootBlurCapture = _react.useCallback(function (ev) {
    onBlurCapture === null || onBlurCapture === void 0 ? void 0 : onBlurCapture(ev);
    var relatedTarget = ev.relatedTarget;
    if (ev.relatedTarget === null) {
      // In IE11, due to lack of support, event.relatedTarget is always
      // null making every onBlur call to be "outside" of the ComboBox
      // even when it's not. Using document.activeElement is another way
      // for us to be able to get what the relatedTarget without relying
      // on the event
      relatedTarget = doc.activeElement;
    }
    if (!_Utilities.elementContains(root.current, relatedTarget)) {
      internalState.hasFocus = false;
    }
  }, [doc, internalState, onBlurCapture]);
  var onRootFocusCapture = _react.useCallback(function (ev) {
    onFocusCapture === null || onFocusCapture === void 0 ? void 0 : onFocusCapture(ev);
    if (ev.target === firstBumper.current) {
      onBumperFocus(true);
    } else if (ev.target === lastBumper.current) {
      onBumperFocus(false);
    }
    internalState.hasFocus = true;
    if (ev.target !== ev.currentTarget && !(ev.target === firstBumper.current || ev.target === lastBumper.current)) {
      // every time focus changes within the trap zone, remember the focused element so that
      // it can be restored if focus leaves the pane and returns via keystroke (i.e. via a call to this.focus(true))
      internalState.previouslyFocusedElementInTrapZone = ev.target;
    }
  }, [onFocusCapture, internalState, onBumperFocus]);
  var returnFocusToInitiator = _react.useCallback(function () {
    FocusTrapZone.focusStack = FocusTrapZone.focusStack.filter(function (value) {
      return id !== value;
    });
    if (doc) {
      var activeElement = doc.activeElement;
      if (!ignoreExternalFocusing && internalState.previouslyFocusedElementOutsideTrapZone && typeof internalState.previouslyFocusedElementOutsideTrapZone.focus === 'function' && (_Utilities.elementContains(root.current, activeElement) || activeElement === doc.body)) {
        if (!(internalState.previouslyFocusedElementOutsideTrapZone === firstBumper.current || internalState.previouslyFocusedElementOutsideTrapZone === lastBumper.current)) {
          _Utilities.focusAsync(internalState.previouslyFocusedElementOutsideTrapZone);
        }
      }
    }
  }, [doc, id, ignoreExternalFocusing, internalState]);
  var forceFocusInTrap = _react.useCallback(function (ev) {
    if (disabled) {
      return;
    }
    if (FocusTrapZone.focusStack.length && id === FocusTrapZone.focusStack[FocusTrapZone.focusStack.length - 1]) {
      var focusedElement = ev.target;
      if (!_Utilities.elementContains(root.current, focusedElement)) {
        focus();
        internalState.hasFocus = true;
        // set focus here since we stop event propagation
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  }, [disabled, id, focus, internalState]);
  var forceClickInTrap = _react.useCallback(function (ev) {
    if (disabled) {
      return;
    }
    if (FocusTrapZone.focusStack.length && id === FocusTrapZone.focusStack[FocusTrapZone.focusStack.length - 1]) {
      var clickedElement = ev.target;
      if (clickedElement && !_Utilities.elementContains(root.current, clickedElement)) {
        focus();
        internalState.hasFocus = true;
        // set focus here since we stop event propagation
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  }, [disabled, id, focus, internalState]);
  var updateEventHandlers = _react.useCallback(function () {
    if (forceFocusInsideTrap && !internalState.disposeFocusHandler) {
      internalState.disposeFocusHandler = _Utilities.on(window, 'focus', forceFocusInTrap, true);
    } else if (!forceFocusInsideTrap && internalState.disposeFocusHandler) {
      internalState.disposeFocusHandler();
      internalState.disposeFocusHandler = undefined;
    }
    if (!isClickableOutsideFocusTrap && !internalState.disposeClickHandler) {
      internalState.disposeClickHandler = _Utilities.on(window, 'click', forceClickInTrap, true);
    } else if (isClickableOutsideFocusTrap && internalState.disposeClickHandler) {
      internalState.disposeClickHandler();
      internalState.disposeClickHandler = undefined;
    }
  }, [forceClickInTrap, forceFocusInTrap, forceFocusInsideTrap, isClickableOutsideFocusTrap, internalState]);
  // Updates eventHandlers and cleans up focusStack when the component unmounts.
  _react.useEffect(function () {
    var parentRoot = root.current;
    updateEventHandlers();
    return function () {
      // don't handle return focus unless forceFocusInsideTrap is true or focus is still within FocusTrapZone
      if (!disabled || forceFocusInsideTrap || !_Utilities.elementContains(parentRoot, doc === null || doc === void 0 ? void 0 : doc.activeElement)) {
        returnFocusToInitiator();
      }
    };
  }, [updateEventHandlers]);
  // Updates focusStack and the previouslyFocusedElementOutsideTrapZone on prop change.
  _react.useEffect(function () {
    var newForceFocusInsideTrap = forceFocusInsideTrap !== undefined ? forceFocusInsideTrap : true;
    var newDisabled = disabled !== undefined ? disabled : false;
    // Transition from forceFocusInsideTrap / FTZ disabled to enabled.
    if (!newDisabled || newForceFocusInsideTrap) {
      if (currentDisabledValue) {
        return;
      }
      FocusTrapZone.focusStack.push(id);
      internalState.previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss ? elementToFocusOnDismiss : doc.activeElement;
      if (!disableFirstFocus && !_Utilities.elementContains(root.current, internalState.previouslyFocusedElementOutsideTrapZone)) {
        focus();
      }
      if (!internalState.unmodalize && root.current && enableAriaHiddenSiblings) {
        internalState.unmodalize = _Utilities.modalize(root.current);
      }
    } else if (!newForceFocusInsideTrap || newDisabled) {
      // Transition from forceFocusInsideTrap / FTZ enabled to disabled.
      returnFocusToInitiator();
      if (internalState.unmodalize) {
        internalState.unmodalize();
      }
    }
    if (elementToFocusOnDismiss && internalState.previouslyFocusedElementOutsideTrapZone !== elementToFocusOnDismiss) {
      internalState.previouslyFocusedElementOutsideTrapZone = elementToFocusOnDismiss;
    }
  }, [elementToFocusOnDismiss, forceFocusInsideTrap, disabled]);
  // Cleanup lifecyle method for internalState.
  useUnmount(function () {
    // Dispose of event handlers so their closures can be garbage-collected
    if (internalState.disposeClickHandler) {
      internalState.disposeClickHandler();
      internalState.disposeClickHandler = undefined;
    }
    if (internalState.disposeFocusHandler) {
      internalState.disposeFocusHandler();
      internalState.disposeFocusHandler = undefined;
    }
    if (internalState.unmodalize) {
      internalState.unmodalize();
    }
    // Dispose of element references so the DOM Nodes can be garbage-collected
    delete internalState.previouslyFocusedElementInTrapZone;
    delete internalState.previouslyFocusedElementOutsideTrapZone;
  });
  useComponentRef(componentRef, internalState.previouslyFocusedElementInTrapZone, focus);
  return _react.createElement("div", _tslib.__assign({}, divProps, {
    className: className,
    ref: mergedRootRef,
    "aria-labelledby": ariaLabelledBy,
    onFocusCapture: onRootFocusCapture,
    onFocus: onFocus,
    onBlur: onBlur,
    onBlurCapture: onRootBlurCapture
  }), _react.createElement("div", _tslib.__assign({}, bumperProps, {
    ref: firstBumper
  })), children, _react.createElement("div", _tslib.__assign({}, bumperProps, {
    ref: lastBumper
  })));
});
var useUnmount = function (unmountFunction) {
  var unmountRef = _react.useRef(unmountFunction);
  unmountRef.current = unmountFunction;
  _react.useEffect(function () {
    return function () {
      if (unmountRef.current) {
        unmountRef.current();
      }
    };
  }, [unmountFunction]);
};
FocusTrapZone.displayName = COMPONENT_NAME;
FocusTrapZone.focusStack = [];

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","@fluentui/react-hooks":"1pHwU","../../WindowProvider":"6pPxG","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"v6aqM":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4gb7E":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3ad74":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuItem", function () {
  return ContextualMenuItem;
});
var _Utilities = require('../../Utilities');
var _ContextualMenuItemBase = require('./ContextualMenuItem.base');
var _ContextualMenuClassNames = require('./ContextualMenu.classNames');
var ContextualMenuItem = _Utilities.styled(_ContextualMenuItemBase.ContextualMenuItemBase, _ContextualMenuClassNames.getItemStyles, undefined, {
  scope: 'ContextualMenuItem'
});

},{"../../Utilities":"1439N","./ContextualMenuItem.base":"Am3hi","./ContextualMenu.classNames":"45QvB","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"Am3hi":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuItemBase", function () {
  return ContextualMenuItemBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _utilitiesContextualMenuIndex = require('../../utilities/contextualMenu/index');
var _Utilities = require('../../Utilities');
var _Icon = require('../../Icon');
var renderItemIcon = function (props) {
  var item = props.item, hasIcons = props.hasIcons, classNames = props.classNames;
  var iconProps = item.iconProps;
  if (!hasIcons) {
    return null;
  }
  if (item.onRenderIcon) {
    return item.onRenderIcon(props);
  }
  return _react.createElement(_Icon.Icon, _tslib.__assign({}, iconProps, {
    className: classNames.icon
  }));
};
var renderCheckMarkIcon = function (_a) {
  var onCheckmarkClick = _a.onCheckmarkClick, item = _a.item, classNames = _a.classNames;
  var isItemChecked = _utilitiesContextualMenuIndex.getIsChecked(item);
  if (onCheckmarkClick) {
    // Ensures that the item is passed as the first argument to the checkmark click callback.
    var onClick = function (e) {
      return onCheckmarkClick(item, e);
    };
    return _react.createElement(_Icon.Icon, {
      iconName: item.canCheck !== false && isItemChecked ? 'CheckMark' : '',
      className: classNames.checkmarkIcon,
      // eslint-disable-next-line react/jsx-no-bind
      onClick: onClick
    });
  }
  return null;
};
var renderItemName = function (_a) {
  var item = _a.item, classNames = _a.classNames;
  /*eslint-disable deprecation/deprecation*/
  if (item.text || item.name) {
    return _react.createElement("span", {
      className: classNames.label
    }, item.text || item.name);
  }
  /*eslint-enable deprecation/deprecation*/
  return null;
};
var renderSecondaryText = function (_a) {
  var item = _a.item, classNames = _a.classNames;
  if (item.secondaryText) {
    return _react.createElement("span", {
      className: classNames.secondaryText
    }, item.secondaryText);
  }
  return null;
};
var renderSubMenuIcon = function (_a) {
  var item = _a.item, classNames = _a.classNames, theme = _a.theme;
  if (_utilitiesContextualMenuIndex.hasSubmenu(item)) {
    return _react.createElement(_Icon.Icon, _tslib.__assign({
      iconName: _Utilities.getRTL(theme) ? 'ChevronLeft' : 'ChevronRight'
    }, item.submenuIconProps, {
      className: classNames.subMenuIcon
    }));
  }
  return null;
};
var ContextualMenuItemBase = /** @class*/
(function (_super) {
  _tslib.__extends(ContextualMenuItemBase, _super);
  function ContextualMenuItemBase(props) {
    var _this = _super.call(this, props) || this;
    _this.openSubMenu = function () {
      var _a = _this.props, item = _a.item, openSubMenu = _a.openSubMenu, getSubmenuTarget = _a.getSubmenuTarget;
      if (getSubmenuTarget) {
        var submenuTarget = getSubmenuTarget();
        if (_utilitiesContextualMenuIndex.hasSubmenu(item) && openSubMenu && submenuTarget) {
          openSubMenu(item, submenuTarget);
        }
      }
    };
    _this.dismissSubMenu = function () {
      var _a = _this.props, item = _a.item, dismissSubMenu = _a.dismissSubMenu;
      if (_utilitiesContextualMenuIndex.hasSubmenu(item) && dismissSubMenu) {
        dismissSubMenu();
      }
    };
    _this.dismissMenu = function (dismissAll) {
      var dismissMenu = _this.props.dismissMenu;
      if (dismissMenu) {
        dismissMenu(undefined, /*ev*/
        dismissAll);
      }
    };
    _Utilities.initializeComponentRef(_this);
    return _this;
  }
  ContextualMenuItemBase.prototype.render = function () {
    var _a = this.props, item = _a.item, classNames = _a.classNames;
    var renderContent = item.onRenderContent || this._renderLayout;
    return _react.createElement("div", {
      className: item.split ? classNames.linkContentMenu : classNames.linkContent
    }, renderContent(this.props, {
      renderCheckMarkIcon: renderCheckMarkIcon,
      renderItemIcon: renderItemIcon,
      renderItemName: renderItemName,
      renderSecondaryText: renderSecondaryText,
      renderSubMenuIcon: renderSubMenuIcon
    }));
  };
  ContextualMenuItemBase.prototype._renderLayout = function (props, defaultRenders) {
    return _react.createElement(_react.Fragment, null, defaultRenders.renderCheckMarkIcon(props), defaultRenders.renderItemIcon(props), defaultRenders.renderItemName(props), defaultRenders.renderSecondaryText(props), defaultRenders.renderSubMenuIcon(props));
  };
  return ContextualMenuItemBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../utilities/contextualMenu/index":"6LyFR","../../Utilities":"1439N","../../Icon":"7upjA","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"45QvB":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getSplitButtonVerticalDividerClassNames", function () {
  return getSplitButtonVerticalDividerClassNames;
});
_parcelHelpers.export(exports, "getItemClassNames", function () {
  return getItemClassNames;
});
_parcelHelpers.export(exports, "getItemStyles", function () {
  return getItemStyles;
});
var _DividerVerticalDividerClassNames = require('../Divider/VerticalDivider.classNames');
var _ContextualMenuCnstyles = require('./ContextualMenu.cnstyles');
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';
var MediumScreenSelector = _Styling.getScreenSelector(0, _Styling.ScreenWidthMaxMedium);
var getSplitButtonVerticalDividerClassNames = _Utilities.memoizeFunction(/*eslint-disable deprecation/deprecation*/
function (theme) {
  var _a;
  return _Styling.mergeStyleSets(_DividerVerticalDividerClassNames.getDividerClassNames(theme), {
    /*eslint-enable deprecation/deprecation*/
    wrapper: {
      position: 'absolute',
      right: 28,
      selectors: (_a = {}, _a[MediumScreenSelector] = {
        right: 32
      }, _a)
    },
    divider: {
      height: 16,
      width: 1
    }
  });
});
var GlobalClassNames = {
  item: 'ms-ContextualMenu-item',
  divider: 'ms-ContextualMenu-divider',
  root: 'ms-ContextualMenu-link',
  isChecked: 'is-checked',
  isExpanded: 'is-expanded',
  isDisabled: 'is-disabled',
  linkContent: 'ms-ContextualMenu-linkContent',
  linkContentMenu: 'ms-ContextualMenu-linkContent',
  icon: 'ms-ContextualMenu-icon',
  iconColor: 'ms-ContextualMenu-iconColor',
  checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',
  subMenuIcon: 'ms-ContextualMenu-submenuIcon',
  label: 'ms-ContextualMenu-itemText',
  secondaryText: 'ms-ContextualMenu-secondaryText',
  splitMenu: 'ms-ContextualMenu-splitMenu',
  screenReaderText: 'ms-ContextualMenu-screenReaderText'
};
var getItemClassNames = _Utilities.memoizeFunction(function (theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {
  var _a, _b, _c, _d;
  var styles = _ContextualMenuCnstyles.getMenuItemStyles(theme);
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return _Styling.mergeStyleSets({
    item: [classNames.item, styles.item, itemClassName],
    divider: [classNames.divider, styles.divider, dividerClassName],
    root: [classNames.root, styles.root, checked && [classNames.isChecked, styles.rootChecked], isAnchorLink && styles.anchorLink, expanded && [classNames.isExpanded, styles.rootExpanded], disabled && [classNames.isDisabled, styles.rootDisabled], !disabled && !expanded && [{
      selectors: (_a = {
        ':hover': styles.rootHovered,
        ':active': styles.rootPressed
      }, _a["." + _Utilities.IsFocusVisibleClassName + " &:focus, ." + _Utilities.IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused, _a["." + _Utilities.IsFocusVisibleClassName + " &:hover"] = {
        background: 'inherit;'
      }, _a)
    }], className],
    splitPrimary: [styles.root, {
      width: "calc(100% - " + CONTEXTUAL_SPLIT_MENU_MINWIDTH + ")"
    }, checked && ['is-checked', styles.rootChecked], (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled], !(disabled || primaryDisabled) && !checked && [{
      selectors: (_b = {
        ':hover': styles.rootHovered
      }, // when hovering over the splitPrimary also affect the splitMenu
      _b[":hover ~ ." + classNames.splitMenu] = styles.rootHovered, _b[':active'] = styles.rootPressed, _b["." + _Utilities.IsFocusVisibleClassName + " &:focus, ." + _Utilities.IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused, _b["." + _Utilities.IsFocusVisibleClassName + " &:hover"] = {
        background: 'inherit;'
      }, _b)
    }]],
    splitMenu: [classNames.splitMenu, styles.root, {
      flexBasis: '0',
      padding: '0 8px',
      minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH
    }, expanded && ['is-expanded', styles.rootExpanded], disabled && ['is-disabled', styles.rootDisabled], !disabled && !expanded && [{
      selectors: (_c = {
        ':hover': styles.rootHovered,
        ':active': styles.rootPressed
      }, _c["." + _Utilities.IsFocusVisibleClassName + " &:focus, ." + _Utilities.IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused, _c["." + _Utilities.IsFocusVisibleClassName + " &:hover"] = {
        background: 'inherit;'
      }, _c)
    }]],
    anchorLink: styles.anchorLink,
    linkContent: [classNames.linkContent, styles.linkContent],
    linkContentMenu: [classNames.linkContentMenu, styles.linkContent, {
      justifyContent: 'center'
    }],
    icon: [classNames.icon, knownIcon && styles.iconColor, styles.icon, iconClassName, disabled && [classNames.isDisabled, styles.iconDisabled]],
    iconColor: styles.iconColor,
    checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],
    subMenuIcon: [classNames.subMenuIcon, styles.subMenuIcon, subMenuClassName, expanded && ({
      color: theme.palette.neutralPrimary
    }), disabled && [styles.iconDisabled]],
    label: [classNames.label, styles.label],
    secondaryText: [classNames.secondaryText, styles.secondaryText],
    splitContainer: [styles.splitButtonFlexContainer, !disabled && !checked && [{
      selectors: (_d = {}, _d["." + _Utilities.IsFocusVisibleClassName + " &:focus, ." + _Utilities.IsFocusVisibleClassName + " &:focus:hover"] = styles.rootFocused, _d)
    }]],
    screenReaderText: [classNames.screenReaderText, styles.screenReaderText, _Styling.hiddenContentStyle, {
      visibility: 'hidden'
    }]
  });
});
var getItemStyles = function (props) {
  var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;
  // eslint-disable-next-line deprecation/deprecation
  return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);
};

},{"../Divider/VerticalDivider.classNames":"4H6z3","./ContextualMenu.cnstyles":"596gU","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4H6z3":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getDividerClassNames", function () {
  return getDividerClassNames;
});
var _Utilities = require('../../Utilities');
var _Styling = require('../../Styling');
var getDividerClassNames = _Utilities.memoizeFunction(// eslint-disable-next-line deprecation/deprecation
function (theme) {
  return _Styling.mergeStyleSets({
    wrapper: {
      display: 'inline-flex',
      height: '100%',
      alignItems: 'center'
    },
    divider: {
      width: 1,
      height: '100%',
      backgroundColor: theme.palette.neutralTertiaryAlt
    }
  });
});

},{"../../Utilities":"1439N","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"596gU":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CONTEXTUAL_MENU_ITEM_HEIGHT", function () {
  return CONTEXTUAL_MENU_ITEM_HEIGHT;
});
_parcelHelpers.export(exports, "getMenuItemStyles", function () {
  return getMenuItemStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var CONTEXTUAL_MENU_ITEM_HEIGHT = 36;
var MediumScreenSelector = _Styling.getScreenSelector(0, _Styling.ScreenWidthMaxMedium);
var getItemHighContrastStyles = _Utilities.memoizeFunction(function () {
  var _a;
  return {
    selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
      backgroundColor: 'Highlight',
      borderColor: 'Highlight',
      color: 'HighlightText'
    }, _Styling.getHighContrastNoAdjustStyle()), _a)
  };
});
var getMenuItemStyles = _Utilities.memoizeFunction(function (theme) {
  var _a, _b, _c, _d, _e, _f, _g;
  var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;
  var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;
  var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;
  var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;
  var ContextualMenuItemDividerColor = semanticColors.bodyDivider;
  var menuItemStyles = {
    item: [fonts.medium, {
      color: semanticColors.bodyText,
      position: 'relative',
      boxSizing: 'border-box'
    }],
    divider: {
      display: 'block',
      height: '1px',
      backgroundColor: ContextualMenuItemDividerColor,
      position: 'relative'
    },
    root: [_Styling.getFocusStyle(theme), fonts.medium, {
      color: semanticColors.bodyText,
      backgroundColor: 'transparent',
      border: 'none',
      width: '100%',
      height: CONTEXTUAL_MENU_ITEM_HEIGHT,
      lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
      display: 'block',
      cursor: 'pointer',
      padding: '0px 8px 0 4px',
      textAlign: 'left'
    }],
    rootDisabled: {
      color: semanticColors.disabledBodyText,
      cursor: 'default',
      pointerEvents: 'none',
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'GrayText',
        opacity: 1
      }, _Styling.getHighContrastNoAdjustStyle()), _a)
    },
    rootHovered: _tslib.__assign({
      backgroundColor: ContextualMenuItemBackgroundHoverColor,
      color: ContextualMenuItemTextHoverColor,
      selectors: {
        '.ms-ContextualMenu-icon': {
          color: palette.themeDarkAlt
        },
        '.ms-ContextualMenu-submenuIcon': {
          color: palette.neutralPrimary
        }
      }
    }, getItemHighContrastStyles()),
    rootFocused: _tslib.__assign({
      backgroundColor: palette.white
    }, getItemHighContrastStyles()),
    rootChecked: _tslib.__assign({
      selectors: {
        '.ms-ContextualMenu-checkmarkIcon': {
          color: palette.neutralPrimary
        }
      }
    }, getItemHighContrastStyles()),
    rootPressed: _tslib.__assign({
      backgroundColor: ContextualMenuItemBackgroundSelectedColor,
      selectors: {
        '.ms-ContextualMenu-icon': {
          color: palette.themeDark
        },
        '.ms-ContextualMenu-submenuIcon': {
          color: palette.neutralPrimary
        }
      }
    }, getItemHighContrastStyles()),
    rootExpanded: _tslib.__assign({
      backgroundColor: ContextualMenuItemBackgroundSelectedColor,
      color: semanticColors.bodyTextChecked
    }, getItemHighContrastStyles()),
    linkContent: {
      whiteSpace: 'nowrap',
      height: 'inherit',
      display: 'flex',
      alignItems: 'center',
      maxWidth: '100%'
    },
    anchorLink: {
      padding: '0px 8px 0 4px',
      textRendering: 'auto',
      color: 'inherit',
      letterSpacing: 'normal',
      wordSpacing: 'normal',
      textTransform: 'none',
      textIndent: '0px',
      textShadow: 'none',
      textDecoration: 'none',
      boxSizing: 'border-box'
    },
    label: {
      margin: '0 4px',
      verticalAlign: 'middle',
      display: 'inline-block',
      flexGrow: '1',
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap'
    },
    secondaryText: {
      color: theme.palette.neutralSecondary,
      paddingLeft: '20px',
      textAlign: 'right'
    },
    icon: {
      display: 'inline-block',
      minHeight: '1px',
      maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
      fontSize: _Styling.IconFontSizes.medium,
      width: _Styling.IconFontSizes.medium,
      margin: '0 4px',
      verticalAlign: 'middle',
      flexShrink: '0',
      selectors: (_b = {}, _b[MediumScreenSelector] = {
        fontSize: _Styling.IconFontSizes.large,
        width: _Styling.IconFontSizes.large
      }, _b)
    },
    iconColor: {
      color: semanticColors.menuIcon,
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
        color: 'inherit'
      }, _c['$root:hover &'] = {
        selectors: (_d = {}, _d[_Styling.HighContrastSelector] = {
          color: 'HighlightText'
        }, _d)
      }, _c['$root:focus &'] = {
        selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
          color: 'HighlightText'
        }, _e)
      }, _c)
    },
    iconDisabled: {
      color: semanticColors.disabledBodyText
    },
    checkmarkIcon: {
      color: semanticColors.bodySubtext,
      selectors: (_f = {}, _f[_Styling.HighContrastSelector] = {
        color: 'HighlightText'
      }, _f)
    },
    subMenuIcon: {
      height: CONTEXTUAL_MENU_ITEM_HEIGHT,
      lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
      color: palette.neutralSecondary,
      textAlign: 'center',
      display: 'inline-block',
      verticalAlign: 'middle',
      flexShrink: '0',
      fontSize: _Styling.IconFontSizes.small,
      selectors: (_g = {
        ':hover': {
          color: palette.neutralPrimary
        },
        ':active': {
          color: palette.neutralPrimary
        }
      }, _g[MediumScreenSelector] = {
        fontSize: _Styling.IconFontSizes.medium
      }, _g[_Styling.HighContrastSelector] = {
        color: 'HighlightText'
      }, _g)
    },
    splitButtonFlexContainer: [_Styling.getFocusStyle(theme), {
      display: 'flex',
      height: CONTEXTUAL_MENU_ITEM_HEIGHT,
      flexWrap: 'nowrap',
      justifyContent: 'center',
      alignItems: 'flex-start'
    }]
  };
  return _Styling.concatStyleSets(menuItemStyles);
});

},{"tslib":"6ZIET","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6aMWB":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _ContextualMenuAnchor = require('./ContextualMenuAnchor');
_parcelHelpers.exportAll(_ContextualMenuAnchor, exports);
var _ContextualMenuButton = require('./ContextualMenuButton');
_parcelHelpers.exportAll(_ContextualMenuButton, exports);
var _ContextualMenuSplitButton = require('./ContextualMenuSplitButton');
_parcelHelpers.exportAll(_ContextualMenuSplitButton, exports);
var _ContextualMenuItemWrapper = require('./ContextualMenuItemWrapper');
_parcelHelpers.exportAll(_ContextualMenuItemWrapper, exports);
var _ContextualMenuItemWrapperTypes = require('./ContextualMenuItemWrapper.types');
_parcelHelpers.exportAll(_ContextualMenuItemWrapperTypes, exports);

},{"./ContextualMenuAnchor":"3wRLP","./ContextualMenuButton":"3NFin","./ContextualMenuSplitButton":"1uRjV","./ContextualMenuItemWrapper":"3oHMZ","./ContextualMenuItemWrapper.types":"6Kyu1","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3wRLP":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuAnchor", function () {
  return ContextualMenuAnchor;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../../Utilities');
var _ContextualMenuItemWrapper = require('./ContextualMenuItemWrapper');
var _KeytipData = require('../../../KeytipData');
var _utilitiesContextualMenuIndex = require('../../../utilities/contextualMenu/index');
var _ContextualMenuItem = require('../ContextualMenuItem');
var ContextualMenuAnchor = /** @class*/
(function (_super) {
  _tslib.__extends(ContextualMenuAnchor, _super);
  function ContextualMenuAnchor() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._anchor = _react.createRef();
    _this._getMemoizedMenuButtonKeytipProps = _Utilities.memoizeFunction(function (keytipProps) {
      return _tslib.__assign(_tslib.__assign({}, keytipProps), {
        hasMenu: true
      });
    });
    _this._getSubmenuTarget = function () {
      return _this._anchor.current ? _this._anchor.current : undefined;
    };
    _this._onItemClick = function (ev) {
      var _a = _this.props, item = _a.item, onItemClick = _a.onItemClick;
      if (onItemClick) {
        onItemClick(item, ev);
      }
    };
    _this._renderAriaDescription = function (ariaDescription, className) {
      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan
      return ariaDescription ? _react.createElement("span", {
        id: _this._ariaDescriptionId,
        className: className
      }, ariaDescription) : null;
    };
    return _this;
  }
  ContextualMenuAnchor.prototype.render = function () {
    var _this = this;
    var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? _ContextualMenuItem.ContextualMenuItem : _b, expandedMenuItemKey = _a.expandedMenuItemKey, onItemClick = _a.onItemClick, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;
    var anchorRel = item.rel;
    if (item.target && item.target.toLowerCase() === '_blank') {
      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer';
    }
    var itemHasSubmenu = _utilitiesContextualMenuIndex.hasSubmenu(item);
    var nativeProps = _Utilities.getNativeProps(item, _Utilities.anchorProperties);
    var disabled = _utilitiesContextualMenuIndex.isItemDisabled(item);
    var itemProps = item.itemProps, ariaDescription = item.ariaDescription;
    var keytipProps = item.keytipProps;
    if (keytipProps && itemHasSubmenu) {
      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
    }
    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with
    // the description in it to be added to ariaDescribedBy
    if (ariaDescription) {
      this._ariaDescriptionId = _Utilities.getId();
    }
    var ariaDescribedByIds = _Utilities.mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, nativeProps['aria-describedby']);
    var additionalItemProperties = {
      'aria-describedby': ariaDescribedByIds
    };
    return _react.createElement("div", null, _react.createElement(_KeytipData.KeytipData, {
      keytipProps: item.keytipProps,
      ariaDescribedBy: ariaDescribedByIds,
      disabled: disabled
    }, function (keytipAttributes) {
      return _react.createElement("a", _tslib.__assign({}, additionalItemProperties, nativeProps, keytipAttributes, {
        ref: _this._anchor,
        href: item.href,
        target: item.target,
        rel: anchorRel,
        className: classNames.root,
        role: "menuitem",
        "aria-haspopup": itemHasSubmenu || undefined,
        "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,
        "aria-posinset": focusableElementIndex + 1,
        "aria-setsize": totalItemCount,
        "aria-disabled": _utilitiesContextualMenuIndex.isItemDisabled(item),
        // eslint-disable-next-line deprecation/deprecation
        style: item.style,
        onClick: _this._onItemClick,
        onMouseEnter: _this._onItemMouseEnter,
        onMouseLeave: _this._onItemMouseLeave,
        onMouseMove: _this._onItemMouseMove,
        onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined
      }), _react.createElement(ChildrenRenderer, _tslib.__assign({
        componentRef: item.componentRef,
        item: item,
        classNames: classNames,
        index: index,
        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,
        hasIcons: hasIcons,
        openSubMenu: openSubMenu,
        dismissSubMenu: dismissSubMenu,
        dismissMenu: dismissMenu,
        getSubmenuTarget: _this._getSubmenuTarget
      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));
    }));
  };
  return ContextualMenuAnchor;
})(_ContextualMenuItemWrapper.ContextualMenuItemWrapper);

},{"tslib":"6ZIET","react":"4g1R3","../../../Utilities":"1439N","./ContextualMenuItemWrapper":"3oHMZ","../../../KeytipData":"1wTJH","../../../utilities/contextualMenu/index":"6LyFR","../ContextualMenuItem":"3ad74","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3oHMZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuItemWrapper", function () {
  return ContextualMenuItemWrapper;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../../Utilities');
var ContextualMenuItemWrapper = /** @class*/
(function (_super) {
  _tslib.__extends(ContextualMenuItemWrapper, _super);
  function ContextualMenuItemWrapper(props) {
    var _this = _super.call(this, props) || this;
    _this._onItemMouseEnter = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;
      if (onItemMouseEnter) {
        onItemMouseEnter(item, ev, ev.currentTarget);
      }
    };
    _this._onItemClick = function (ev) {
      var _a = _this.props, item = _a.item, onItemClickBase = _a.onItemClickBase;
      if (onItemClickBase) {
        onItemClickBase(item, ev, ev.currentTarget);
      }
    };
    _this._onItemMouseLeave = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseLeave = _a.onItemMouseLeave;
      if (onItemMouseLeave) {
        onItemMouseLeave(item, ev);
      }
    };
    _this._onItemKeyDown = function (ev) {
      var _a = _this.props, item = _a.item, onItemKeyDown = _a.onItemKeyDown;
      if (onItemKeyDown) {
        onItemKeyDown(item, ev);
      }
    };
    _this._onItemMouseMove = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;
      if (onItemMouseMove) {
        onItemMouseMove(item, ev, ev.currentTarget);
      }
    };
    _this._getSubmenuTarget = function () {
      return undefined;
    };
    _Utilities.initializeComponentRef(_this);
    return _this;
  }
  ContextualMenuItemWrapper.prototype.shouldComponentUpdate = function (newProps) {
    return !_Utilities.shallowCompare(newProps, this.props);
  };
  return ContextualMenuItemWrapper;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1wTJH":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsKeytipDataIndex = require('./components/KeytipData/index');
_parcelHelpers.exportAll(_componentsKeytipDataIndex, exports);

},{"./components/KeytipData/index":"56maR","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"56maR":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "useKeytipRef", function () {
  return _useKeytipRef.useKeytipRef;
});
var _KeytipData = require('./KeytipData');
_parcelHelpers.exportAll(_KeytipData, exports);
var _KeytipDataTypes = require('./KeytipData.types');
_parcelHelpers.exportAll(_KeytipDataTypes, exports);
var _useKeytipRef = require('./useKeytipRef');

},{"./KeytipData":"72Ca5","./KeytipData.types":"4lZI4","./useKeytipRef":"3lycd","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"72Ca5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "KeytipData", function () {
  return KeytipData;
});
var _tslib = require("tslib");
var _utilitiesKeytipsIndex = require('../../utilities/keytips/index');
var _useKeytipData = require('./useKeytipData');
var KeytipData = function (props) {
  var _a;
  var children = props.children, keytipDataProps = _tslib.__rest(props, ["children"]);
  var _b = _useKeytipData.useKeytipData(keytipDataProps), keytipId = _b.keytipId, ariaDescribedBy = _b.ariaDescribedBy;
  return children((_a = {}, _a[_utilitiesKeytipsIndex.DATAKTP_TARGET] = keytipId, _a[_utilitiesKeytipsIndex.DATAKTP_EXECUTE_TARGET] = keytipId, _a['aria-describedby'] = ariaDescribedBy, _a));
};

},{"tslib":"6ZIET","../../utilities/keytips/index":"1me1Y","./useKeytipData":"2O9Bc","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1me1Y":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _IKeytipTransitionKey = require('./IKeytipTransitionKey');
_parcelHelpers.exportAll(_IKeytipTransitionKey, exports);
var _KeytipConfig = require('./KeytipConfig');
_parcelHelpers.exportAll(_KeytipConfig, exports);
var _KeytipConstants = require('./KeytipConstants');
_parcelHelpers.exportAll(_KeytipConstants, exports);
var _KeytipManager = require('./KeytipManager');
_parcelHelpers.exportAll(_KeytipManager, exports);
var _KeytipUtils = require('./KeytipUtils');
_parcelHelpers.exportAll(_KeytipUtils, exports);

},{"./IKeytipTransitionKey":"3WtGW","./KeytipConfig":"2JbIk","./KeytipConstants":"114yG","./KeytipManager":"5j7e6","./KeytipUtils":"4HeuL","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3WtGW":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "transitionKeysAreEqual", function () {
  return transitionKeysAreEqual;
});
_parcelHelpers.export(exports, "transitionKeysContain", function () {
  return transitionKeysContain;
});
var _Utilities = require('../../Utilities');
function transitionKeysAreEqual(key1, key2) {
  if (key1.key !== key2.key) {
    return false;
  }
  var mod1 = key1.modifierKeys;
  var mod2 = key2.modifierKeys;
  if (!mod1 && mod2 || mod1 && !mod2) {
    // Not equal if one modifier is defined and the other isn't
    return false;
  }
  if (mod1 && mod2) {
    if (mod1.length !== mod2.length) {
      return false;
    }
    // Sort both arrays
    mod1 = mod1.sort();
    mod2 = mod2.sort();
    for (var i = 0; i < mod1.length; i++) {
      if (mod1[i] !== mod2[i]) {
        return false;
      }
    }
  }
  return true;
}
function transitionKeysContain(keys, key) {
  return !!_Utilities.find(keys, function (transitionKey) {
    return transitionKeysAreEqual(transitionKey, key);
  });
}

},{"../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2JbIk":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "buildKeytipConfigMap", function () {
  return buildKeytipConfigMap;
});
_parcelHelpers.export(exports, "constructKeytip", function () {
  return constructKeytip;
});
var _tslib = require("tslib");
function buildKeytipConfigMap(config) {
  var configMap = {};
  for (var _i = 0, _a = config.keytips; _i < _a.length; _i++) {
    var keytip = _a[_i];
    constructKeytip(configMap, [], keytip);
  }
  return configMap;
}
function constructKeytip(configMap, parentSequence, keytip) {
  // Compute full key sequence
  var sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();
  var keytipSequence = parentSequence.concat(sequence);
  // Save props in configMap
  var keytipProps = _tslib.__assign(_tslib.__assign({}, keytip.optionalProps), {
    keySequences: keytipSequence,
    content: keytip.content
  });
  configMap[keytip.id] = keytipProps;
  if (keytip.children) {
    for (var _i = 0, _a = keytip.children; _i < _a.length; _i++) {
      var child = _a[_i];
      // Create keytips for all children
      constructKeytip(configMap, keytipSequence, child);
    }
  }
}

},{"tslib":"6ZIET","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"114yG":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "KTP_PREFIX", function () {
  return KTP_PREFIX;
});
_parcelHelpers.export(exports, "KTP_SEPARATOR", function () {
  return KTP_SEPARATOR;
});
_parcelHelpers.export(exports, "KTP_FULL_PREFIX", function () {
  return KTP_FULL_PREFIX;
});
_parcelHelpers.export(exports, "DATAKTP_TARGET", function () {
  return DATAKTP_TARGET;
});
_parcelHelpers.export(exports, "DATAKTP_EXECUTE_TARGET", function () {
  return DATAKTP_EXECUTE_TARGET;
});
_parcelHelpers.export(exports, "DATAKTP_ARIA_TARGET", function () {
  return DATAKTP_ARIA_TARGET;
});
_parcelHelpers.export(exports, "KTP_LAYER_ID", function () {
  return KTP_LAYER_ID;
});
_parcelHelpers.export(exports, "KTP_ARIA_SEPARATOR", function () {
  return KTP_ARIA_SEPARATOR;
});
_parcelHelpers.export(exports, "KeytipEvents", function () {
  return KeytipEvents;
});
var KTP_PREFIX = 'ktp';
var KTP_SEPARATOR = '-';
var KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;
var DATAKTP_TARGET = 'data-ktp-target';
var DATAKTP_EXECUTE_TARGET = 'data-ktp-execute-target';
var DATAKTP_ARIA_TARGET = 'data-ktp-aria-target';
var KTP_LAYER_ID = 'ktp-layer-id';
var KTP_ARIA_SEPARATOR = ', ';
var KeytipEvents;
(function (KeytipEvents) {
  KeytipEvents.KEYTIP_ADDED = 'keytipAdded';
  KeytipEvents.KEYTIP_REMOVED = 'keytipRemoved';
  KeytipEvents.KEYTIP_UPDATED = 'keytipUpdated';
  KeytipEvents.PERSISTED_KEYTIP_ADDED = 'persistedKeytipAdded';
  KeytipEvents.PERSISTED_KEYTIP_REMOVED = 'persistedKeytipRemoved';
  KeytipEvents.PERSISTED_KEYTIP_EXECUTE = 'persistedKeytipExecute';
  KeytipEvents.ENTER_KEYTIP_MODE = 'enterKeytipMode';
  KeytipEvents.EXIT_KEYTIP_MODE = 'exitKeytipMode';
})(KeytipEvents || (KeytipEvents = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5j7e6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "KeytipManager", function () {
  return KeytipManager;
});
var _tslib = require("tslib");
var _Utilities = require('../../Utilities');
var _utilitiesKeytipsKeytipConstants = require('../../utilities/keytips/KeytipConstants');
/**
* This class is responsible for handling registering, updating, and unregistering of keytips
*/
var KeytipManager = /** @class*/
(function () {
  function KeytipManager() {
    this.keytips = {};
    this.persistedKeytips = {};
    this.sequenceMapping = {};
    // This is (and should be) updated and kept in sync
    // with the inKeytipMode in KeytipLayer.
    this.inKeytipMode = false;
    // Boolean that gets checked before entering keytip mode by the KeytipLayer
    // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)
    this.shouldEnterKeytipMode = true;
    // Boolean to indicate whether to delay firing an event to update subscribers of
    // keytip data changed.
    this.delayUpdatingKeytipChange = false;
  }
  /**
  * Static function to get singleton KeytipManager instance
  *
  * @returns Singleton KeytipManager instance
  */
  KeytipManager.getInstance = function () {
    return this._instance;
  };
  /**
  * Initialization code to set set parameters to define
  * how the KeytipManager handles keytip data.
  *
  * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers
  * of keytip changes
  */
  KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {
    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;
  };
  /**
  * Registers a keytip
  *
  * @param keytipProps - Keytip to register
  * @param persisted - T/F if this keytip should be persisted, default is false
  * @returns Unique ID for this keytip
  */
  KeytipManager.prototype.register = function (keytipProps, persisted) {
    if (persisted === void 0) {
      persisted = false;
    }
    var props = keytipProps;
    if (!persisted) {
      // Add the overflowSetSequence if necessary
      props = this.addParentOverflow(keytipProps);
      this.sequenceMapping[props.keySequences.toString()] = props;
    }
    // Create a unique keytip
    var uniqueKeytip = this._getUniqueKtp(props);
    // Add to dictionary
    persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;
    // We only want to add something new if we are currently showing keytip mode
    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
      var event_1 = persisted ? _utilitiesKeytipsKeytipConstants.KeytipEvents.PERSISTED_KEYTIP_ADDED : _utilitiesKeytipsKeytipConstants.KeytipEvents.KEYTIP_ADDED;
      _Utilities.EventGroup.raise(this, event_1, {
        keytip: props,
        uniqueID: uniqueKeytip.uniqueID
      });
    }
    return uniqueKeytip.uniqueID;
  };
  /**
  * Update a keytip
  *
  * @param keytipProps - Keytip to update
  * @param uniqueID - Unique ID of this keytip
  */
  KeytipManager.prototype.update = function (keytipProps, uniqueID) {
    var newKeytipProps = this.addParentOverflow(keytipProps);
    var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);
    var oldKeyTip = this.keytips[uniqueID];
    if (oldKeyTip) {
      // Update everything except 'visible'
      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;
      // Update keytip in this.keytips
      this.keytips[uniqueID] = uniqueKeytip;
      // Update the sequence to be up to date
      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];
      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;
      // Raise event only if we are currently in keytip mode
      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
        _Utilities.EventGroup.raise(this, _utilitiesKeytipsKeytipConstants.KeytipEvents.KEYTIP_UPDATED, {
          keytip: uniqueKeytip.keytip,
          uniqueID: uniqueKeytip.uniqueID
        });
      }
    }
  };
  /**
  * Unregisters a keytip
  *
  * @param keytipToRemove - IKeytipProps of the keytip to remove
  * @param uniqueID - Unique ID of this keytip
  * @param persisted - T/F if this keytip should be persisted, default is false
  */
  KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {
    if (persisted === void 0) {
      persisted = false;
    }
    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];
    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];
    var event = persisted ? _utilitiesKeytipsKeytipConstants.KeytipEvents.PERSISTED_KEYTIP_REMOVED : _utilitiesKeytipsKeytipConstants.KeytipEvents.KEYTIP_REMOVED;
    // Update keytips only if we're in keytip mode
    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
      _Utilities.EventGroup.raise(this, event, {
        keytip: keytipToRemove,
        uniqueID: uniqueID
      });
    }
  };
  /**
  * Manual call to enter keytip mode
  */
  KeytipManager.prototype.enterKeytipMode = function () {
    _Utilities.EventGroup.raise(this, _utilitiesKeytipsKeytipConstants.KeytipEvents.ENTER_KEYTIP_MODE);
  };
  /**
  * Manual call to exit keytip mode
  */
  KeytipManager.prototype.exitKeytipMode = function () {
    _Utilities.EventGroup.raise(this, _utilitiesKeytipsKeytipConstants.KeytipEvents.EXIT_KEYTIP_MODE);
  };
  /**
  * Gets all IKeytipProps from this.keytips
  *
  * @returns All keytips stored in the manager
  */
  KeytipManager.prototype.getKeytips = function () {
    var _this = this;
    return Object.keys(this.keytips).map(function (key) {
      return _this.keytips[key].keytip;
    });
  };
  /**
  * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it
  *
  * @param keytipProps - Keytip props to add overflowSetSequence to if necessary
  * @returns - Modified keytip props, if needed to be modified
  */
  KeytipManager.prototype.addParentOverflow = function (keytipProps) {
    var fullSequence = _tslib.__spreadArrays(keytipProps.keySequences);
    fullSequence.pop();
    if (fullSequence.length !== 0) {
      var parentKeytip = this.sequenceMapping[fullSequence.toString()];
      if (parentKeytip && parentKeytip.overflowSetSequence) {
        return _tslib.__assign(_tslib.__assign({}, keytipProps), {
          overflowSetSequence: parentKeytip.overflowSetSequence
        });
      }
    }
    return keytipProps;
  };
  /**
  * Public function to bind for overflow items that have a submenu
  */
  KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {
    _Utilities.EventGroup.raise(this, _utilitiesKeytipsKeytipConstants.KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {
      overflowButtonSequences: overflowButtonSequences,
      keytipSequences: keytipSequences
    });
  };
  /**
  * Creates an IUniqueKeytip object
  *
  * @param keytipProps - IKeytipProps
  * @param uniqueID - Unique ID, will default to the next unique ID if not passed
  * @returns IUniqueKeytip object
  */
  KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {
    if (uniqueID === void 0) {
      uniqueID = _Utilities.getId();
    }
    return {
      keytip: _tslib.__assign({}, keytipProps),
      uniqueID: uniqueID
    };
  };
  KeytipManager._instance = new KeytipManager();
  return KeytipManager;
})();

},{"tslib":"6ZIET","../../Utilities":"1439N","../../utilities/keytips/KeytipConstants":"114yG","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4HeuL":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "sequencesToID", function () {
  return sequencesToID;
});
_parcelHelpers.export(exports, "mergeOverflows", function () {
  return mergeOverflows;
});
_parcelHelpers.export(exports, "ktpTargetFromSequences", function () {
  return ktpTargetFromSequences;
});
_parcelHelpers.export(exports, "ktpTargetFromId", function () {
  return ktpTargetFromId;
});
_parcelHelpers.export(exports, "getAriaDescribedBy", function () {
  return getAriaDescribedBy;
});
var _tslib = require("tslib");
var _KeytipConstants = require('./KeytipConstants');
var _Utilities = require('../../Utilities');
function sequencesToID(keySequences) {
  return keySequences.reduce(function (prevValue, keySequence) {
    return prevValue + _KeytipConstants.KTP_SEPARATOR + keySequence.split('').join(_KeytipConstants.KTP_SEPARATOR);
  }, _KeytipConstants.KTP_PREFIX);
}
function mergeOverflows(keySequences, overflowKeySequences) {
  var overflowSequenceLen = overflowKeySequences.length;
  var overflowSequence = _tslib.__spreadArrays(overflowKeySequences).pop();
  var newKeySequences = _tslib.__spreadArrays(keySequences);
  return _Utilities.addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);
}
function ktpTargetFromSequences(keySequences) {
  return '[' + _KeytipConstants.DATAKTP_TARGET + '="' + sequencesToID(keySequences) + '"]';
}
function ktpTargetFromId(keytipId) {
  return '[' + _KeytipConstants.DATAKTP_EXECUTE_TARGET + '="' + keytipId + '"]';
}
function getAriaDescribedBy(keySequences) {
  var describedby = ' ' + _KeytipConstants.KTP_LAYER_ID;
  if (!keySequences.length) {
    // Return just the layer ID
    return describedby;
  }
  return describedby + ' ' + sequencesToID(keySequences);
}

},{"tslib":"6ZIET","./KeytipConstants":"114yG","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2O9Bc":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "useKeytipData", function () {
  return useKeytipData;
});
var _tslib = require("tslib");
var _react = require('react');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _Utilities = require('../../Utilities');
var _utilitiesKeytipsIndex = require('../../utilities/keytips/index');
function useKeytipData(options) {
  var uniqueId = _react.useRef();
  var keytipProps = options.keytipProps ? _tslib.__assign({
    disabled: options.disabled
  }, options.keytipProps) : undefined;
  var keytipManager = _fluentuiReactHooks.useConst(_utilitiesKeytipsIndex.KeytipManager.getInstance());
  var prevOptions = _fluentuiReactHooks.usePrevious(options);
  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior
  // eslint-disable-next-line no-restricted-properties
  _react.useLayoutEffect(function () {
    if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {
      keytipManager.update(keytipProps, uniqueId.current);
    }
  });
  // eslint-disable-next-line no-restricted-properties
  _react.useLayoutEffect(function () {
    // Register Keytip in KeytipManager
    if (keytipProps) {
      uniqueId.current = keytipManager.register(keytipProps);
    }
    return function () {
      // Unregister Keytip in KeytipManager
      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);
    };
  }, []);
  var nativeKeytipProps = {
    ariaDescribedBy: undefined,
    keytipId: undefined
  };
  if (keytipProps) {
    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);
  }
  return nativeKeytipProps;
}
/**
* Gets the aria- and data- attributes to attach to the component
* @param keytipProps - options for Keytip
* @param describedByPrepend - ariaDescribedBy value to prepend
*/
function getKeytipData(keytipManager, keytipProps, describedByPrepend) {
  // Add the parent overflow sequence if necessary
  var newKeytipProps = keytipManager.addParentOverflow(keytipProps);
  // Construct aria-describedby and data-ktp-id attributes
  var ariaDescribedBy = _Utilities.mergeAriaAttributeValues(describedByPrepend, _utilitiesKeytipsIndex.getAriaDescribedBy(newKeytipProps.keySequences));
  var keySequences = _tslib.__spreadArrays(newKeytipProps.keySequences);
  if (newKeytipProps.overflowSetSequence) {
    keySequences = _utilitiesKeytipsIndex.mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);
  }
  var keytipId = _utilitiesKeytipsIndex.sequencesToID(keySequences);
  return {
    ariaDescribedBy: ariaDescribedBy,
    keytipId: keytipId
  };
}

},{"tslib":"6ZIET","react":"4g1R3","@fluentui/react-hooks":"1pHwU","../../Utilities":"1439N","../../utilities/keytips/index":"1me1Y","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4lZI4":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3lycd":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "useKeytipRef", function () {
  return useKeytipRef;
});
_parcelHelpers.export(exports, "setAttribute", function () {
  return setAttribute;
});
var _react = require('react');
var _utilitiesKeytipsIndex = require('../../utilities/keytips/index');
var _useKeytipData = require('./useKeytipData');
function useKeytipRef(options) {
  var _a = _useKeytipData.useKeytipData(options), keytipId = _a.keytipId, ariaDescribedBy = _a.ariaDescribedBy;
  var contentRef = _react.useCallback(function (contentElement) {
    if (!contentElement) {
      return;
    }
    var targetElement = findFirstElement(contentElement, _utilitiesKeytipsIndex.DATAKTP_TARGET) || contentElement;
    var executeElement = findFirstElement(contentElement, _utilitiesKeytipsIndex.DATAKTP_EXECUTE_TARGET) || targetElement;
    var ariaElement = findFirstElement(contentElement, _utilitiesKeytipsIndex.DATAKTP_ARIA_TARGET) || executeElement;
    setAttribute(targetElement, _utilitiesKeytipsIndex.DATAKTP_TARGET, keytipId);
    setAttribute(executeElement, _utilitiesKeytipsIndex.DATAKTP_EXECUTE_TARGET, keytipId);
    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);
  }, [keytipId, ariaDescribedBy]);
  return contentRef;
}
function setAttribute(element, attributeName, attributeValue, append) {
  if (append === void 0) {
    append = false;
  }
  if (element && attributeValue) {
    var value = attributeValue;
    if (append) {
      var currentValue = element.getAttribute(attributeName);
      if (currentValue && currentValue.indexOf(attributeValue) === -1) {
        value = currentValue + " " + attributeValue;
      }
    }
    element.setAttribute(attributeName, value);
  }
}
function findFirstElement(rootElement, dataAttribute) {
  return rootElement.querySelector("[" + dataAttribute + "]");
}

},{"react":"4g1R3","../../utilities/keytips/index":"1me1Y","./useKeytipData":"2O9Bc","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3NFin":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuButton", function () {
  return ContextualMenuButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../../Utilities');
var _ContextualMenuItemWrapper = require('./ContextualMenuItemWrapper');
var _KeytipData = require('../../../KeytipData');
var _utilitiesContextualMenuIndex = require('../../../utilities/contextualMenu/index');
var _ContextualMenuItem = require('../ContextualMenuItem');
var ContextualMenuButton = /** @class*/
(function (_super) {
  _tslib.__extends(ContextualMenuButton, _super);
  function ContextualMenuButton() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._btn = _react.createRef();
    _this._getMemoizedMenuButtonKeytipProps = _Utilities.memoizeFunction(function (keytipProps) {
      return _tslib.__assign(_tslib.__assign({}, keytipProps), {
        hasMenu: true
      });
    });
    _this._renderAriaDescription = function (ariaDescription, className) {
      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan
      return ariaDescription ? _react.createElement("span", {
        id: _this._ariaDescriptionId,
        className: className
      }, ariaDescription) : null;
    };
    _this._getSubmenuTarget = function () {
      return _this._btn.current ? _this._btn.current : undefined;
    };
    return _this;
  }
  ContextualMenuButton.prototype.render = function () {
    var _this = this;
    var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? _ContextualMenuItem.ContextualMenuItem : _b, expandedMenuItemKey = _a.expandedMenuItemKey, onItemMouseDown = _a.onItemMouseDown, onItemClick = _a.onItemClick, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;
    var isChecked = _utilitiesContextualMenuIndex.getIsChecked(item);
    var canCheck = isChecked !== null;
    var defaultRole = _utilitiesContextualMenuIndex.getMenuItemAriaRole(item);
    var itemHasSubmenu = _utilitiesContextualMenuIndex.hasSubmenu(item);
    var itemProps = item.itemProps, ariaLabel = item.ariaLabel, ariaDescription = item.ariaDescription;
    var buttonNativeProperties = _Utilities.getNativeProps(item, _Utilities.buttonProperties);
    // Do not add the disabled attribute to the button so that it is focusable
    delete buttonNativeProperties.disabled;
    var itemRole = item.role || defaultRole;
    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with
    // the description in it to be added to ariaDescribedBy
    if (ariaDescription) {
      this._ariaDescriptionId = _Utilities.getId();
    }
    var ariaDescribedByIds = _Utilities.mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, buttonNativeProperties['aria-describedby']);
    var itemButtonProperties = {
      className: classNames.root,
      onClick: this._onItemClick,
      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,
      onMouseEnter: this._onItemMouseEnter,
      onMouseLeave: this._onItemMouseLeave,
      onMouseDown: function (ev) {
        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;
      },
      onMouseMove: this._onItemMouseMove,
      href: item.href,
      title: item.title,
      'aria-label': ariaLabel,
      'aria-describedby': ariaDescribedByIds,
      'aria-haspopup': itemHasSubmenu || undefined,
      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,
      'aria-posinset': focusableElementIndex + 1,
      'aria-setsize': totalItemCount,
      'aria-disabled': _utilitiesContextualMenuIndex.isItemDisabled(item),
      'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,
      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,
      role: itemRole,
      // eslint-disable-next-line deprecation/deprecation
      style: item.style
    };
    var keytipProps = item.keytipProps;
    if (keytipProps && itemHasSubmenu) {
      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
    }
    return _react.createElement(_KeytipData.KeytipData, {
      keytipProps: keytipProps,
      ariaDescribedBy: ariaDescribedByIds,
      disabled: _utilitiesContextualMenuIndex.isItemDisabled(item)
    }, function (keytipAttributes) {
      return _react.createElement("button", _tslib.__assign({
        ref: _this._btn
      }, buttonNativeProperties, itemButtonProperties, keytipAttributes), _react.createElement(ChildrenRenderer, _tslib.__assign({
        componentRef: item.componentRef,
        item: item,
        classNames: classNames,
        index: index,
        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,
        hasIcons: hasIcons,
        openSubMenu: openSubMenu,
        dismissSubMenu: dismissSubMenu,
        dismissMenu: dismissMenu,
        getSubmenuTarget: _this._getSubmenuTarget
      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));
    });
  };
  return ContextualMenuButton;
})(_ContextualMenuItemWrapper.ContextualMenuItemWrapper);

},{"tslib":"6ZIET","react":"4g1R3","../../../Utilities":"1439N","./ContextualMenuItemWrapper":"3oHMZ","../../../KeytipData":"1wTJH","../../../utilities/contextualMenu/index":"6LyFR","../ContextualMenuItem":"3ad74","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1uRjV":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ContextualMenuSplitButton", function () {
  return ContextualMenuSplitButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../../Utilities');
var _ContextualMenuItem = require('../ContextualMenuItem');
var _ContextualMenuClassNames = require('../ContextualMenu.classNames');
var _KeytipData = require('../../../KeytipData');
var _utilitiesContextualMenuIndex = require('../../../utilities/contextualMenu/index');
var _Divider = require('../../../Divider');
var _ContextualMenuItemWrapper = require('./ContextualMenuItemWrapper');
var TouchIdleDelay = 500;
/*ms*/
var ContextualMenuSplitButton = /** @class*/
(function (_super) {
  _tslib.__extends(ContextualMenuSplitButton, _super);
  function ContextualMenuSplitButton(props) {
    var _this = _super.call(this, props) || this;
    _this._getMemoizedMenuButtonKeytipProps = _Utilities.memoizeFunction(function (keytipProps) {
      return _tslib.__assign(_tslib.__assign({}, keytipProps), {
        hasMenu: true
      });
    });
    _this._onItemKeyDown = function (ev) {
      var _a = _this.props, item = _a.item, onItemKeyDown = _a.onItemKeyDown;
      // eslint-disable-next-line deprecation/deprecation
      if (ev.which === _Utilities.KeyCodes.enter) {
        _this._executeItemClick(ev);
        ev.preventDefault();
        ev.stopPropagation();
      } else if (onItemKeyDown) {
        onItemKeyDown(item, ev);
      }
    };
    _this._getSubmenuTarget = function () {
      return _this._splitButton;
    };
    _this._renderAriaDescription = function (ariaDescription, className) {
      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan
      return ariaDescription ? _react.createElement("span", {
        id: _this._ariaDescriptionId,
        className: className
      }, ariaDescription) : null;
    };
    _this._onItemMouseEnterPrimary = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;
      if (onItemMouseEnter) {
        onItemMouseEnter(_tslib.__assign(_tslib.__assign({}, item), {
          subMenuProps: undefined,
          items: undefined
        }), ev, _this._splitButton);
      }
    };
    _this._onItemMouseEnterIcon = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseEnter = _a.onItemMouseEnter;
      if (onItemMouseEnter) {
        onItemMouseEnter(item, ev, _this._splitButton);
      }
    };
    _this._onItemMouseMovePrimary = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;
      if (onItemMouseMove) {
        onItemMouseMove(_tslib.__assign(_tslib.__assign({}, item), {
          subMenuProps: undefined,
          items: undefined
        }), ev, _this._splitButton);
      }
    };
    _this._onItemMouseMoveIcon = function (ev) {
      var _a = _this.props, item = _a.item, onItemMouseMove = _a.onItemMouseMove;
      if (onItemMouseMove) {
        onItemMouseMove(item, ev, _this._splitButton);
      }
    };
    _this._onIconItemClick = function (ev) {
      var _a = _this.props, item = _a.item, onItemClickBase = _a.onItemClickBase;
      if (onItemClickBase) {
        onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);
      }
    };
    _this._executeItemClick = function (ev) {
      var _a = _this.props, item = _a.item, executeItemClick = _a.executeItemClick, onItemClick = _a.onItemClick;
      if (item.disabled || item.isDisabled) {
        return;
      }
      if (_this._processingTouch && onItemClick) {
        return onItemClick(item, ev);
      }
      if (executeItemClick) {
        executeItemClick(item, ev);
      }
    };
    _this._onTouchStart = function (ev) {
      if (_this._splitButton && !(('onpointerdown' in _this._splitButton))) {
        _this._handleTouchAndPointerEvent(ev);
      }
    };
    _this._onPointerDown = function (ev) {
      if (ev.pointerType === 'touch') {
        _this._handleTouchAndPointerEvent(ev);
        ev.preventDefault();
        ev.stopImmediatePropagation();
      }
    };
    _this._async = new _Utilities.Async(_this);
    _this._events = new _Utilities.EventGroup(_this);
    return _this;
  }
  ContextualMenuSplitButton.prototype.componentDidMount = function () {
    if (this._splitButton && ('onpointerdown' in this._splitButton)) {
      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);
    }
  };
  ContextualMenuSplitButton.prototype.componentWillUnmount = function () {
    this._async.dispose();
    this._events.dispose();
  };
  ContextualMenuSplitButton.prototype.render = function () {
    var _this = this;
    var _a = this.props, item = _a.item, classNames = _a.classNames, index = _a.index, focusableElementIndex = _a.focusableElementIndex, totalItemCount = _a.totalItemCount, hasCheckmarks = _a.hasCheckmarks, hasIcons = _a.hasIcons, onItemMouseLeave = _a.onItemMouseLeave, expandedMenuItemKey = _a.expandedMenuItemKey;
    var itemHasSubmenu = _utilitiesContextualMenuIndex.hasSubmenu(item);
    var keytipProps = item.keytipProps;
    if (keytipProps) {
      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
    }
    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with
    // the description in it to be added to ariaDescribedBy
    var ariaDescription = item.ariaDescription;
    if (ariaDescription) {
      this._ariaDescriptionId = _Utilities.getId();
    }
    return _react.createElement(_KeytipData.KeytipData, {
      keytipProps: keytipProps,
      disabled: _utilitiesContextualMenuIndex.isItemDisabled(item)
    }, function (keytipAttributes) {
      return _react.createElement("div", {
        "data-ktp-target": keytipAttributes['data-ktp-target'],
        ref: function (splitButton) {
          return _this._splitButton = splitButton;
        },
        role: _utilitiesContextualMenuIndex.getMenuItemAriaRole(item),
        "aria-label": item.ariaLabel,
        className: classNames.splitContainer,
        "aria-disabled": _utilitiesContextualMenuIndex.isItemDisabled(item),
        "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,
        "aria-haspopup": true,
        "aria-describedby": _Utilities.mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes['aria-describedby']),
        "aria-checked": item.isChecked || item.checked,
        "aria-posinset": focusableElementIndex + 1,
        "aria-setsize": totalItemCount,
        onMouseEnter: _this._onItemMouseEnterPrimary,
        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, _tslib.__assign(_tslib.__assign({}, item), {
          subMenuProps: null,
          items: null
        })) : undefined,
        onMouseMove: _this._onItemMouseMovePrimary,
        onKeyDown: _this._onItemKeyDown,
        onClick: _this._executeItemClick,
        onTouchStart: _this._onTouchStart,
        tabIndex: 0,
        "data-is-focusable": true,
        "aria-roledescription": item['aria-roledescription']
      }, _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons), _this._renderSplitDivider(item), _this._renderSplitIconButton(item, classNames, index, keytipAttributes), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));
    });
  };
  ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item, // eslint-disable-next-line deprecation/deprecation
  classNames, index, hasCheckmarks, hasIcons) {
    var _a = this.props, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? _ContextualMenuItem.ContextualMenuItem : _b, onItemClick = _a.onItemClick;
    var itemProps = {
      key: item.key,
      disabled: _utilitiesContextualMenuIndex.isItemDisabled(item) || item.primaryDisabled,
      /*eslint-disable deprecation/deprecation*/
      name: item.name,
      text: item.text || item.name,
      secondaryText: item.secondaryText,
      /*eslint-enable deprecation/deprecation*/
      className: classNames.splitPrimary,
      canCheck: item.canCheck,
      isChecked: item.isChecked,
      checked: item.checked,
      iconProps: item.iconProps,
      onRenderIcon: item.onRenderIcon,
      data: item.data,
      'data-is-focusable': false
    };
    var itemComponentProps = item.itemProps;
    return _react.createElement("button", _tslib.__assign({}, _Utilities.getNativeProps(itemProps, _Utilities.buttonProperties)), _react.createElement(ChildrenRenderer, _tslib.__assign({
      "data-is-focusable": false,
      item: itemProps,
      classNames: classNames,
      index: index,
      onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,
      hasIcons: hasIcons
    }, itemComponentProps)));
  };
  ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {
    var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || _ContextualMenuClassNames.getSplitButtonVerticalDividerClassNames;
    return _react.createElement(_Divider.VerticalDivider, {
      getClassNames: getDividerClassNames
    });
  };
  ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames, // eslint-disable-line deprecation/deprecation
  index, keytipAttributes) {
    var _a = this.props, _b = _a.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? _ContextualMenuItem.ContextualMenuItem : _b, onItemMouseLeave = _a.onItemMouseLeave, onItemMouseDown = _a.onItemMouseDown, openSubMenu = _a.openSubMenu, dismissSubMenu = _a.dismissSubMenu, dismissMenu = _a.dismissMenu;
    var itemProps = {
      onClick: this._onIconItemClick,
      disabled: _utilitiesContextualMenuIndex.isItemDisabled(item),
      className: classNames.splitMenu,
      subMenuProps: item.subMenuProps,
      submenuIconProps: item.submenuIconProps,
      split: true,
      key: item.key
    };
    var buttonProps = _tslib.__assign(_tslib.__assign({}, _Utilities.getNativeProps(itemProps, _Utilities.buttonProperties)), {
      onMouseEnter: this._onItemMouseEnterIcon,
      onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,
      onMouseDown: function (ev) {
        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;
      },
      onMouseMove: this._onItemMouseMoveIcon,
      'data-is-focusable': false,
      'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],
      'aria-hidden': true
    });
    var itemComponentProps = item.itemProps;
    return _react.createElement("button", _tslib.__assign({}, buttonProps), _react.createElement(ChildrenRenderer, _tslib.__assign({
      componentRef: item.componentRef,
      item: itemProps,
      classNames: classNames,
      index: index,
      hasIcons: false,
      openSubMenu: openSubMenu,
      dismissSubMenu: dismissSubMenu,
      dismissMenu: dismissMenu,
      getSubmenuTarget: this._getSubmenuTarget
    }, itemComponentProps)));
  };
  ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {
    var _this = this;
    var onTap = this.props.onTap;
    if (onTap) {
      onTap(ev);
    }
    // If we already have an existing timeout from a previous touch/pointer event
    // cancel that timeout so we can set a new one.
    if (this._lastTouchTimeoutId) {
      this._async.clearTimeout(this._lastTouchTimeoutId);
      this._lastTouchTimeoutId = undefined;
    }
    this._processingTouch = true;
    this._lastTouchTimeoutId = this._async.setTimeout(function () {
      _this._processingTouch = false;
      _this._lastTouchTimeoutId = undefined;
    }, TouchIdleDelay);
  };
  return ContextualMenuSplitButton;
})(_ContextualMenuItemWrapper.ContextualMenuItemWrapper);

},{"tslib":"6ZIET","react":"4g1R3","../../../Utilities":"1439N","../ContextualMenuItem":"3ad74","../ContextualMenu.classNames":"45QvB","../../../KeytipData":"1wTJH","../../../utilities/contextualMenu/index":"6LyFR","../../../Divider":"2NfQZ","./ContextualMenuItemWrapper":"3oHMZ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2NfQZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsDividerIndex = require('./components/Divider/index');
_parcelHelpers.exportAll(_componentsDividerIndex, exports);

},{"./components/Divider/index":"4HJqv","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4HJqv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _VerticalDivider = require('./VerticalDivider');
_parcelHelpers.exportAll(_VerticalDivider, exports);
var _VerticalDividerTypes = require('./VerticalDivider.types');
_parcelHelpers.exportAll(_VerticalDividerTypes, exports);

},{"./VerticalDivider":"2F3Kz","./VerticalDivider.types":"2ptbv","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2F3Kz":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "VerticalDivider", function () {
  return VerticalDivider;
});
var _VerticalDividerStyles = require('./VerticalDivider.styles');
var _VerticalDividerBase = require('./VerticalDivider.base');
var _Utilities = require('../../Utilities');
var VerticalDivider = _Utilities.styled(_VerticalDividerBase.VerticalDividerBase, _VerticalDividerStyles.getStyles, undefined, {
  scope: 'VerticalDivider'
});

},{"./VerticalDivider.styles":"67fSA","./VerticalDivider.base":"6UIp0","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"67fSA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var getStyles = function (props) {
  // eslint-disable-next-line deprecation/deprecation
  var theme = props.theme, getClassNames = props.getClassNames, className = props.className;
  if (!theme) {
    throw new Error('Theme is undefined or null.');
  }
  if (getClassNames) {
    var names = getClassNames(theme);
    return {
      wrapper: [names.wrapper],
      divider: [names.divider]
    };
  }
  return {
    wrapper: [{
      display: 'inline-flex',
      height: '100%',
      alignItems: 'center'
    }, className],
    divider: [{
      width: 1,
      height: '100%',
      backgroundColor: theme.palette.neutralTertiaryAlt
    }]
  };
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6UIp0":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "VerticalDividerBase", function () {
  return VerticalDividerBase;
});
var _react = require('react');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var VerticalDividerBase = _react.forwardRef(function (props, ref) {
  // eslint-disable-next-line deprecation/deprecation
  var styles = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;
  var classNames = getClassNames(styles, {
    theme: theme,
    getClassNames: deprecatedGetClassNames,
    className: className
  });
  return _react.createElement("span", {
    className: classNames.wrapper,
    ref: ref
  }, _react.createElement("span", {
    className: classNames.divider
  }));
});
VerticalDividerBase.displayName = 'VerticalDividerBase';

},{"react":"4g1R3","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2ptbv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6Kyu1":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2WtGI":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilitiesHooksUseResponsiveMode = require('./utilities/hooks/useResponsiveMode');
_parcelHelpers.exportAll(_utilitiesHooksUseResponsiveMode, exports);
var _utilitiesDecoratorsWithResponsiveMode = require('./utilities/decorators/withResponsiveMode');
_parcelHelpers.exportAll(_utilitiesDecoratorsWithResponsiveMode, exports);

},{"./utilities/hooks/useResponsiveMode":"1MvRu","./utilities/decorators/withResponsiveMode":"CBzNv","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1MvRu":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "useResponsiveMode", function () {
  return useResponsiveMode;
});
var _react = require('react');
var _fluentuiUtilities = require('@fluentui/utilities');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _decoratorsWithResponsiveMode = require('../decorators/withResponsiveMode');
var _WindowProvider = require('../../WindowProvider');
var useResponsiveMode = function (elementRef, overrideResponsiveMode) {
  var _a = _react.useState(_decoratorsWithResponsiveMode.getInitialResponsiveMode()), lastResponsiveMode = _a[0], setLastResponsiveMode = _a[1];
  var onResize = _react.useCallback(function () {
    var newResponsiveMode = _decoratorsWithResponsiveMode.getResponsiveMode(_fluentuiUtilities.getWindow(elementRef.current));
    // Setting the same value should not cause a re-render.
    if (lastResponsiveMode !== newResponsiveMode) {
      setLastResponsiveMode(newResponsiveMode);
    }
  }, [elementRef, lastResponsiveMode]);
  var win = _WindowProvider.useWindow();
  _fluentuiReactHooks.useOnEvent(win, 'resize', onResize);
  // Call resize function initially on mount, or if the override changes from defined to undefined
  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)
  _react.useEffect(function () {
    if (overrideResponsiveMode === undefined) {
      onResize();
    }
  }, [overrideResponsiveMode]);
  return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;
};

},{"react":"4g1R3","@fluentui/utilities":"2AuOe","@fluentui/react-hooks":"1pHwU","../decorators/withResponsiveMode":"CBzNv","../../WindowProvider":"6pPxG","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"CBzNv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ResponsiveMode", function () {
  return ResponsiveMode;
});
_parcelHelpers.export(exports, "setResponsiveMode", function () {
  return setResponsiveMode;
});
_parcelHelpers.export(exports, "initializeResponsiveMode", function () {
  return initializeResponsiveMode;
});
_parcelHelpers.export(exports, "getInitialResponsiveMode", function () {
  return getInitialResponsiveMode;
});
_parcelHelpers.export(exports, "withResponsiveMode", function () {
  return withResponsiveMode;
});
_parcelHelpers.export(exports, "getResponsiveMode", function () {
  return getResponsiveMode;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseDecorator = require('./BaseDecorator');
var _Utilities = require('../../Utilities');
var _WindowProvider = require('../../WindowProvider');
var ResponsiveMode;
(function (ResponsiveMode) {
  /** Width \<= 479px*/
  ResponsiveMode[ResponsiveMode["small"] = 0] = "small";
  /** Width \> 479px and \<= 639px*/
  ResponsiveMode[ResponsiveMode["medium"] = 1] = "medium";
  /** Width \> 639px and \<= 1023px*/
  ResponsiveMode[ResponsiveMode["large"] = 2] = "large";
  /** Width \> 1023px and \<= 1365px*/
  ResponsiveMode[ResponsiveMode["xLarge"] = 3] = "xLarge";
  /** Width \> 1365px and \<= 1919px*/
  ResponsiveMode[ResponsiveMode["xxLarge"] = 4] = "xxLarge";
  /** Width \> 1919px*/
  ResponsiveMode[ResponsiveMode["xxxLarge"] = 5] = "xxxLarge";
  ResponsiveMode[ResponsiveMode["unknown"] = 999] = "unknown";
})(ResponsiveMode || (ResponsiveMode = {}));
var RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];
/**
* User specified mode to default to, useful for server side rendering scenarios.
*/
var _defaultMode;
/**
* Tracking the last mode we successfully rendered, which allows us to
* paint initial renders with the correct size.
*/
var _lastMode;
function setResponsiveMode(responsiveMode) {
  _defaultMode = responsiveMode;
}
function initializeResponsiveMode(element) {
  var currentWindow = _Utilities.getWindow(element);
  if (currentWindow) {
    getResponsiveMode(currentWindow);
  }
}
function getInitialResponsiveMode() {
  return _defaultMode || _lastMode || ResponsiveMode.large;
}
function withResponsiveMode(ComposedComponent) {
  var _a;
  // eslint-disable-next-line deprecation/deprecation
  var resultClass = (_a = /** @class*/
  (function (_super) {
    _tslib.__extends(WithResponsiveMode, _super);
    function WithResponsiveMode(props) {
      var _this = _super.call(this, props) || this;
      _this._onResize = function () {
        var responsiveMode = getResponsiveMode(_this.context.window);
        if (responsiveMode !== _this.state.responsiveMode) {
          _this.setState({
            responsiveMode: responsiveMode
          });
        }
      };
      _this._events = new _Utilities.EventGroup(_this);
      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);
      _this.state = {
        responsiveMode: getInitialResponsiveMode()
      };
      return _this;
    }
    WithResponsiveMode.prototype.componentDidMount = function () {
      this._events.on(this.context.window, 'resize', this._onResize);
      this._onResize();
    };
    WithResponsiveMode.prototype.componentWillUnmount = function () {
      this._events.dispose();
    };
    WithResponsiveMode.prototype.render = function () {
      var responsiveMode = this.state.responsiveMode;
      return responsiveMode === ResponsiveMode.unknown ? null : _react.createElement(ComposedComponent, _tslib.__assign({
        ref: this._updateComposedComponentRef,
        responsiveMode: responsiveMode
      }, this.props));
    };
    return WithResponsiveMode;
  })(_BaseDecorator.BaseDecorator), _a.contextType = _WindowProvider.WindowContext, _a);
  return _Utilities.hoistStatics(ComposedComponent, resultClass);
}
function getResponsiveMode(currentWindow) {
  var responsiveMode = ResponsiveMode.small;
  if (currentWindow) {
    try {
      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
        responsiveMode++;
      }
    } catch (e) {
      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.
      responsiveMode = getInitialResponsiveMode();
    }
    // Tracking last mode just gives us a better default in future renders,
    // which avoids starting with the wrong value if we've measured once.
    _lastMode = responsiveMode;
  } else {
    if (_defaultMode !== undefined) {
      responsiveMode = _defaultMode;
    } else {
      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');
    }
  }
  return responsiveMode;
}

},{"tslib":"6ZIET","react":"4g1R3","./BaseDecorator":"5zmwU","../../Utilities":"1439N","../../WindowProvider":"6pPxG","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5zmwU":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "BaseDecorator", function () {
  return BaseDecorator;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var BaseDecorator = /** @class*/
(function (_super) {
  _tslib.__extends(BaseDecorator, _super);
  function BaseDecorator(props) {
    var _this = _super.call(this, props) || this;
    _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);
    return _this;
  }
  /**
  * Updates the ref to the component composed by the decorator, which will also take care of hoisting
  * (and unhoisting as appropriate) methods from said component.
  *
  * Pass this method as the argument to the 'ref' property of the composed component.
  */
  BaseDecorator.prototype._updateComposedComponentRef = function (composedComponentInstance) {
    this._composedComponentInstance = composedComponentInstance;
    if (composedComponentInstance) {
      this._hoisted = _Utilities.hoistMethods(this, composedComponentInstance);
    } else if (this._hoisted) {
      _Utilities.unhoistMethods(this, this._hoisted);
    }
  };
  return BaseDecorator;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2DBO9":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _MenuContext = require('./MenuContext');
_parcelHelpers.exportAll(_MenuContext, exports);
var _types = require('./types');
_parcelHelpers.exportAll(_types, exports);

},{"./MenuContext":"7BbON","./types":"3y3Qv","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7BbON":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "MenuContext", function () {
  return MenuContext;
});
_parcelHelpers.export(exports, "useMenuContext", function () {
  return useMenuContext;
});
var _react = require('react');
var MenuContext = _react.createContext({});
var useMenuContext = function () {
  return _react.useContext(MenuContext);
};

},{"react":"4g1R3","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3y3Qv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"60WEG":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var _ContextualMenuCnstyles = require('./ContextualMenu.cnstyles');
var GlobalClassNames = {
  root: 'ms-ContextualMenu',
  container: 'ms-ContextualMenu-container',
  list: 'ms-ContextualMenu-list',
  header: 'ms-ContextualMenu-header',
  title: 'ms-ContextualMenu-title',
  isopen: 'is-open'
};
var getStyles = function (props) {
  var className = props.className, theme = props.theme;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
  return {
    root: [theme.fonts.medium, classNames.root, classNames.isopen, {
      backgroundColor: semanticColors.menuBackground,
      minWidth: '180px'
    }, className],
    container: [classNames.container, {
      selectors: {
        ':focus': {
          outline: 0
        }
      }
    }],
    list: [classNames.list, classNames.isopen, {
      listStyleType: 'none',
      margin: '0',
      padding: '0'
    }],
    header: [classNames.header, fonts.small, {
      fontWeight: _Styling.FontWeights.semibold,
      color: semanticColors.menuHeader,
      background: 'none',
      backgroundColor: 'transparent',
      border: 'none',
      height: _ContextualMenuCnstyles.CONTEXTUAL_MENU_ITEM_HEIGHT,
      lineHeight: _ContextualMenuCnstyles.CONTEXTUAL_MENU_ITEM_HEIGHT,
      cursor: 'default',
      padding: '0px 6px',
      userSelect: 'none',
      textAlign: 'left'
    }],
    title: [classNames.title, {
      fontSize: fonts.mediumPlus.fontSize,
      paddingRight: '14px',
      paddingLeft: '14px',
      paddingBottom: '5px',
      paddingTop: '5px',
      backgroundColor: semanticColors.menuItemBackgroundPressed
    }],
    subComponentStyles: {
      callout: {
        root: {
          boxShadow: effects.elevation8
        }
      },
      menuItem: {}
    }
  };
};

},{"../../Styling":"5q33X","./ContextualMenu.cnstyles":"596gU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6vNtb":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"35CbM":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ButtonGlobalClassNames", function () {
  return ButtonGlobalClassNames;
});
_parcelHelpers.export(exports, "getBaseButtonClassNames", function () {
  return getBaseButtonClassNames;
});
var _Utilities = require('../../Utilities');
var _Styling = require('../../Styling');
var ButtonGlobalClassNames = {
  msButton: 'ms-Button',
  msButtonHasMenu: 'ms-Button--hasMenu',
  msButtonIcon: 'ms-Button-icon',
  msButtonMenuIcon: 'ms-Button-menuIcon',
  msButtonLabel: 'ms-Button-label',
  msButtonDescription: 'ms-Button-description',
  msButtonScreenReaderText: 'ms-Button-screenReaderText',
  msButtonFlexContainer: 'ms-Button-flexContainer',
  msButtonTextContainer: 'ms-Button-textContainer'
};
var getBaseButtonClassNames = _Utilities.memoizeFunction(function (theme, styles, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
  var _a, _b;
  var classNames = _Styling.getGlobalClassNames(ButtonGlobalClassNames, theme || ({}));
  var isExpanded = expanded && !isSplit;
  return _Styling.mergeStyleSets({
    root: [classNames.msButton, styles.root, variantClassName, checked && ['is-checked', styles.rootChecked], isExpanded && ['is-expanded', styles.rootExpanded, {
      selectors: (_a = {}, _a[":hover ." + classNames.msButtonIcon] = styles.iconExpandedHovered, // menuIcon falls back to rootExpandedHovered to support original behavior
      _a[":hover ." + classNames.msButtonMenuIcon] = styles.menuIconExpandedHovered || styles.rootExpandedHovered, _a[':hover'] = styles.rootExpandedHovered, _a)
    }], hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu], disabled && ['is-disabled', styles.rootDisabled], !disabled && !isExpanded && !checked && ({
      selectors: (_b = {
        ':hover': styles.rootHovered
      }, _b[":hover ." + classNames.msButtonLabel] = styles.labelHovered, _b[":hover ." + classNames.msButtonIcon] = styles.iconHovered, _b[":hover ." + classNames.msButtonDescription] = styles.descriptionHovered, _b[":hover ." + classNames.msButtonMenuIcon] = styles.menuIconHovered, _b[':focus'] = styles.rootFocused, _b[':active'] = styles.rootPressed, _b[":active ." + classNames.msButtonIcon] = styles.iconPressed, _b[":active ." + classNames.msButtonDescription] = styles.descriptionPressed, _b[":active ." + classNames.msButtonMenuIcon] = styles.menuIconPressed, _b)
    }), disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && ({
      selectors: {
        ':hover': styles.rootCheckedHovered,
        ':active': styles.rootCheckedPressed
      }
    }), className],
    flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],
    textContainer: [classNames.msButtonTextContainer, styles.textContainer],
    icon: [classNames.msButtonIcon, iconClassName, styles.icon, isExpanded && styles.iconExpanded, checked && styles.iconChecked, disabled && styles.iconDisabled],
    label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],
    menuIcon: [classNames.msButtonMenuIcon, menuIconClassName, styles.menuIcon, checked && styles.menuIconChecked, disabled && !isSplit && styles.menuIconDisabled, !disabled && !isExpanded && !checked && ({
      selectors: {
        ':hover': styles.menuIconHovered,
        ':active': styles.menuIconPressed
      }
    }), isExpanded && ['is-expanded', styles.menuIconExpanded]],
    description: [classNames.msButtonDescription, styles.description, checked && styles.descriptionChecked, disabled && styles.descriptionDisabled],
    screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText]
  });
});

},{"../../Utilities":"1439N","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"NiYg5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getSplitButtonClassNames", function () {
  return getSplitButtonClassNames;
});
var _Utilities = require('../../../Utilities');
var _Styling = require('../../../Styling');
var getSplitButtonClassNames = _Utilities.memoizeFunction(function (styles, disabled, expanded, checked, primaryDisabled) {
  return {
    root: _Styling.mergeStyles(styles.splitButtonMenuButton, expanded && [styles.splitButtonMenuButtonExpanded], disabled && [styles.splitButtonMenuButtonDisabled], checked && !disabled && [styles.splitButtonMenuButtonChecked], primaryDisabled && !disabled && [{
      selectors: {
        ':focus': styles.splitButtonMenuFocused
      }
    }]),
    splitButtonContainer: _Styling.mergeStyles(styles.splitButtonContainer, !disabled && checked && [styles.splitButtonContainerChecked, {
      selectors: {
        ':hover': styles.splitButtonContainerCheckedHovered
      }
    }], !disabled && !checked && [{
      selectors: {
        ':hover': styles.splitButtonContainerHovered,
        ':focus': styles.splitButtonContainerFocused
      }
    }], disabled && styles.splitButtonContainerDisabled),
    icon: _Styling.mergeStyles(styles.splitButtonMenuIcon, disabled && styles.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles.splitButtonMenuIcon),
    flexContainer: _Styling.mergeStyles(styles.splitButtonFlexContainer),
    divider: _Styling.mergeStyles(styles.splitButtonDivider, (primaryDisabled || disabled) && styles.splitButtonDividerDisabled)
  };
});

},{"../../../Utilities":"1439N","../../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"pHSU6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ElementType", function () {
  return ElementType;
});
_parcelHelpers.export(exports, "ButtonType", function () {
  return ButtonType;
});
var ElementType;
(function (ElementType) {
  /** `button` element.*/
  ElementType[ElementType["button"] = 0] = "button";
  /** `a` element.*/
  ElementType[ElementType["anchor"] = 1] = "anchor";
})(ElementType || (ElementType = {}));
var ButtonType;
(function (ButtonType) {
  ButtonType[ButtonType["normal"] = 0] = "normal";
  ButtonType[ButtonType["primary"] = 1] = "primary";
  ButtonType[ButtonType["hero"] = 2] = "hero";
  ButtonType[ButtonType["compound"] = 3] = "compound";
  ButtonType[ButtonType["command"] = 4] = "command";
  ButtonType[ButtonType["icon"] = 5] = "icon";
  ButtonType[ButtonType["default"] = 6] = "default";
})(ButtonType || (ButtonType = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4mVoA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Button", function () {
  return Button;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _ButtonTypes = require('./Button.types');
var _DefaultButtonDefaultButton = require('./DefaultButton/DefaultButton');
var _ActionButtonActionButton = require('./ActionButton/ActionButton');
var _CompoundButtonCompoundButton = require('./CompoundButton/CompoundButton');
var _IconButtonIconButton = require('./IconButton/IconButton');
var _PrimaryButtonPrimaryButton = require('./PrimaryButton/PrimaryButton');
/**
* This class is deprecated. Use the individual *Button components instead.
* @deprecated Use the individual *Button components instead.
* {@docCategory Button}
*/
var Button = /** @class*/
(function (_super) {
  _tslib.__extends(Button, _super);
  function Button(props) {
    var _this = _super.call(this, props) || this;
    _Utilities.warn("The Button component has been deprecated. Use specific variants instead. " + "(PrimaryButton, DefaultButton, IconButton, ActionButton, etc.)");
    return _this;
  }
  Button.prototype.render = function () {
    var props = this.props;
    // eslint-disable-next-line deprecation/deprecation
    switch (props.buttonType) {
      case _ButtonTypes.ButtonType.command:
        return _react.createElement(_ActionButtonActionButton.ActionButton, _tslib.__assign({}, props));
      case _ButtonTypes.ButtonType.compound:
        return _react.createElement(_CompoundButtonCompoundButton.CompoundButton, _tslib.__assign({}, props));
      case _ButtonTypes.ButtonType.icon:
        return _react.createElement(_IconButtonIconButton.IconButton, _tslib.__assign({}, props));
      case _ButtonTypes.ButtonType.primary:
        return _react.createElement(_PrimaryButtonPrimaryButton.PrimaryButton, _tslib.__assign({}, props));
      default:
        return _react.createElement(_DefaultButtonDefaultButton.DefaultButton, _tslib.__assign({}, props));
    }
  };
  return Button;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./Button.types":"pHSU6","./DefaultButton/DefaultButton":"4eUH0","./ActionButton/ActionButton":"50wpx","./CompoundButton/CompoundButton":"6fyM7","./IconButton/IconButton":"6kVOT","./PrimaryButton/PrimaryButton":"4FOVZ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4eUH0":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DefaultButton", function () {
  return DefaultButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseButton = require('../BaseButton');
var _Utilities = require('../../../Utilities');
var _DefaultButtonStyles = require('./DefaultButton.styles');
/**
* {@docCategory Button}
*/
var DefaultButton = /** @class*/
(function (_super) {
  _tslib.__extends(DefaultButton, _super);
  function DefaultButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DefaultButton.prototype.render = function () {
    var _a = this.props, _b = _a.primary, primary = _b === void 0 ? false : _b, styles = _a.styles, theme = _a.theme;
    return _react.createElement(_BaseButton.BaseButton, _tslib.__assign({}, this.props, {
      variantClassName: primary ? 'ms-Button--primary' : 'ms-Button--default',
      styles: _DefaultButtonStyles.getStyles(theme, styles, primary),
      onRenderDescription: _Utilities.nullRender
    }));
  };
  DefaultButton = _tslib.__decorate([_Utilities.customizable('DefaultButton', ['theme', 'styles'], true)], DefaultButton);
  return DefaultButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../BaseButton":"3GXNT","../../../Utilities":"1439N","./DefaultButton.styles":"xLFR1","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"xLFR1":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var _BaseButtonStyles = require('../BaseButton.styles');
var _SplitButtonSplitButtonStyles = require('../SplitButton/SplitButton.styles');
var _ButtonThemes = require('../ButtonThemes');
var DEFAULT_BUTTON_HEIGHT = '32px';
var DEFAULT_BUTTON_MIN_WIDTH = '80px';
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles, primary) {
  var baseButtonStyles = _BaseButtonStyles.getStyles(theme);
  var splitButtonStyles = _SplitButtonSplitButtonStyles.getStyles(theme);
  var defaultButtonStyles = {
    root: {
      minWidth: DEFAULT_BUTTON_MIN_WIDTH,
      height: DEFAULT_BUTTON_HEIGHT
    },
    label: {
      fontWeight: _Styling.FontWeights.semibold
    }
  };
  return _Styling.concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? _ButtonThemes.primaryStyles(theme) : _ButtonThemes.standardStyles(theme), splitButtonStyles, customStyles);
});

},{"../../../Styling":"5q33X","../../../Utilities":"1439N","../BaseButton.styles":"4e7Yu","../SplitButton/SplitButton.styles":"2eUEK","../ButtonThemes":"2w7xA","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4e7Yu":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Utilities = require('../../Utilities');
var _Styling = require('../../Styling');
var noOutline = {
  outline: 0
};
var iconStyle = function (fontSize) {
  return {
    fontSize: fontSize,
    margin: '0 4px',
    height: '16px',
    lineHeight: '16px',
    textAlign: 'center',
    flexShrink: 0
  };
};
var getStyles = _Utilities.memoizeFunction(function (theme) {
  var _a, _b;
  var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
  var border = semanticColors.buttonBorder;
  var disabledBackground = semanticColors.disabledBackground;
  var disabledText = semanticColors.disabledText;
  var buttonHighContrastFocus = {
    left: -2,
    top: -2,
    bottom: -2,
    right: -2,
    outlineColor: 'ButtonText'
  };
  return {
    root: [_Styling.getFocusStyle(theme, {
      inset: 1,
      highContrastStyle: buttonHighContrastFocus,
      borderColor: 'transparent'
    }), theme.fonts.medium, {
      boxSizing: 'border-box',
      border: '1px solid ' + border,
      userSelect: 'none',
      display: 'inline-block',
      textDecoration: 'none',
      textAlign: 'center',
      cursor: 'pointer',
      padding: '0 16px',
      borderRadius: effects.roundedCorner2,
      selectors: {
        // IE11 workaround for preventing shift of child elements of a button when active.
        ':active > *': {
          position: 'relative',
          left: 0,
          top: 0
        }
      }
    }],
    rootDisabled: [_Styling.getFocusStyle(theme, {
      inset: 1,
      highContrastStyle: buttonHighContrastFocus,
      borderColor: 'transparent'
    }), {
      backgroundColor: disabledBackground,
      borderColor: disabledBackground,
      color: disabledText,
      cursor: 'default',
      selectors: {
        ':hover': noOutline,
        ':focus': noOutline
      }
    }],
    iconDisabled: {
      color: disabledText,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        color: 'GrayText'
      }, _a)
    },
    menuIconDisabled: {
      color: disabledText,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        color: 'GrayText'
      }, _b)
    },
    flexContainer: {
      display: 'flex',
      height: '100%',
      flexWrap: 'nowrap',
      justifyContent: 'center',
      alignItems: 'center'
    },
    description: {
      display: 'block'
    },
    textContainer: {
      flexGrow: 1,
      display: 'block'
    },
    icon: iconStyle(fonts.mediumPlus.fontSize),
    menuIcon: iconStyle(fonts.small.fontSize),
    label: {
      margin: '0 4px',
      lineHeight: '100%',
      display: 'block'
    },
    screenReaderText: _Styling.hiddenContentStyle
  };
});

},{"../../Utilities":"1439N","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2eUEK":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
  var buttonHighContrastFocus = {
    left: -2,
    top: -2,
    bottom: -2,
    right: -2,
    border: 'none'
  };
  var splitButtonDividerBaseStyles = {
    position: 'absolute',
    width: 1,
    right: 31,
    top: 8,
    bottom: 8
  };
  var splitButtonStyles = {
    splitButtonContainer: [_Styling.getFocusStyle(theme, {
      highContrastStyle: buttonHighContrastFocus,
      inset: 2
    }), {
      display: 'inline-flex',
      selectors: {
        '.ms-Button--default': {
          borderTopRightRadius: '0',
          borderBottomRightRadius: '0',
          borderRight: 'none'
        },
        '.ms-Button--primary': {
          borderTopRightRadius: '0',
          borderBottomRightRadius: '0',
          border: 'none',
          selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
            color: 'WindowText',
            backgroundColor: 'Window',
            border: '1px solid WindowText',
            borderRightWidth: '0'
          }, _Styling.getHighContrastNoAdjustStyle()), _a)
        },
        '.ms-Button--primary + .ms-Button': {
          border: 'none',
          selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
            border: '1px solid WindowText',
            borderLeftWidth: '0'
          }, _b)
        }
      }
    }],
    splitButtonContainerHovered: {
      selectors: {
        '.ms-Button--primary': {
          selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
            color: 'Window',
            backgroundColor: 'Highlight'
          }, _c)
        },
        '.ms-Button.is-disabled': {
          color: semanticColors.buttonTextDisabled,
          selectors: (_d = {}, _d[_Styling.HighContrastSelector] = {
            color: 'GrayText',
            borderColor: 'GrayText',
            backgroundColor: 'Window'
          }, _d)
        }
      }
    },
    splitButtonContainerChecked: {
      selectors: {
        '.ms-Button--primary': {
          selectors: (_e = {}, _e[_Styling.HighContrastSelector] = _tslib.__assign({
            color: 'Window',
            backgroundColor: 'WindowText'
          }, _Styling.getHighContrastNoAdjustStyle()), _e)
        }
      }
    },
    splitButtonContainerCheckedHovered: {
      selectors: {
        '.ms-Button--primary': {
          selectors: (_f = {}, _f[_Styling.HighContrastSelector] = _tslib.__assign({
            color: 'Window',
            backgroundColor: 'WindowText'
          }, _Styling.getHighContrastNoAdjustStyle()), _f)
        }
      }
    },
    splitButtonContainerFocused: {
      outline: 'none!important'
    },
    splitButtonMenuButton: (_g = {
      padding: 6,
      height: 'auto',
      boxSizing: 'border-box',
      borderRadius: 0,
      borderTopRightRadius: effects.roundedCorner2,
      borderBottomRightRadius: effects.roundedCorner2,
      border: "1px solid " + palette.neutralSecondaryAlt,
      borderLeft: 'none',
      outline: 'transparent',
      userSelect: 'none',
      display: 'inline-block',
      textDecoration: 'none',
      textAlign: 'center',
      cursor: 'pointer',
      verticalAlign: 'top',
      width: 32,
      marginLeft: -1,
      marginTop: 0,
      marginRight: 0,
      marginBottom: 0
    }, _g[_Styling.HighContrastSelector] = {
      '.ms-Button-menuIcon': {
        color: 'WindowText'
      }
    }, _g),
    splitButtonDivider: _tslib.__assign(_tslib.__assign({}, splitButtonDividerBaseStyles), {
      selectors: (_h = {}, _h[_Styling.HighContrastSelector] = {
        backgroundColor: 'WindowText'
      }, _h)
    }),
    splitButtonDividerDisabled: _tslib.__assign(_tslib.__assign({}, splitButtonDividerBaseStyles), {
      selectors: (_j = {}, _j[_Styling.HighContrastSelector] = {
        backgroundColor: 'GrayText'
      }, _j)
    }),
    splitButtonMenuButtonDisabled: {
      pointerEvents: 'none',
      border: 'none',
      selectors: (_k = {
        ':hover': {
          cursor: 'default'
        },
        '.ms-Button--primary': {
          selectors: (_l = {}, _l[_Styling.HighContrastSelector] = {
            color: 'GrayText',
            borderColor: 'GrayText',
            backgroundColor: 'Window'
          }, _l)
        },
        '.ms-Button-menuIcon': {
          selectors: (_m = {}, _m[_Styling.HighContrastSelector] = {
            color: 'GrayText'
          }, _m)
        }
      }, _k[_Styling.HighContrastSelector] = {
        color: 'GrayText',
        border: '1px solid GrayText',
        backgroundColor: 'Window'
      }, _k)
    },
    splitButtonFlexContainer: {
      display: 'flex',
      height: '100%',
      flexWrap: 'nowrap',
      justifyContent: 'center',
      alignItems: 'center'
    },
    splitButtonContainerDisabled: {
      outline: 'none',
      border: 'none',
      selectors: (_o = {}, _o[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'GrayText',
        borderColor: 'GrayText',
        backgroundColor: 'Window'
      }, _Styling.getHighContrastNoAdjustStyle()), _o)
    },
    splitButtonMenuFocused: _tslib.__assign({}, _Styling.getFocusStyle(theme, {
      highContrastStyle: buttonHighContrastFocus,
      inset: 2
    }))
  };
  return _Styling.concatStyleSets(splitButtonStyles, customStyles);
});

},{"tslib":"6ZIET","../../../Styling":"5q33X","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2w7xA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "standardStyles", function () {
  return standardStyles;
});
_parcelHelpers.export(exports, "primaryStyles", function () {
  return primaryStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var splitButtonDividerBaseStyles = function () {
  return {
    position: 'absolute',
    width: 1,
    right: 31,
    top: 8,
    bottom: 8
  };
};
function standardStyles(theme) {
  var _a, _b, _c, _d, _e;
  var s = theme.semanticColors, p = theme.palette;
  var buttonBackground = s.buttonBackground;
  var buttonBackgroundPressed = s.buttonBackgroundPressed;
  var buttonBackgroundHovered = s.buttonBackgroundHovered;
  var buttonBackgroundDisabled = s.buttonBackgroundDisabled;
  var buttonText = s.buttonText;
  var buttonTextHovered = s.buttonTextHovered;
  var buttonTextDisabled = s.buttonTextDisabled;
  var buttonTextChecked = s.buttonTextChecked;
  var buttonTextCheckedHovered = s.buttonTextCheckedHovered;
  return {
    root: {
      backgroundColor: buttonBackground,
      color: buttonText
    },
    rootHovered: {
      backgroundColor: buttonBackgroundHovered,
      color: buttonTextHovered,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        borderColor: 'Highlight',
        color: 'Highlight'
      }, _a)
    },
    rootPressed: {
      backgroundColor: buttonBackgroundPressed,
      color: buttonTextChecked
    },
    rootExpanded: {
      backgroundColor: buttonBackgroundPressed,
      color: buttonTextChecked
    },
    rootChecked: {
      backgroundColor: buttonBackgroundPressed,
      color: buttonTextChecked
    },
    rootCheckedHovered: {
      backgroundColor: buttonBackgroundPressed,
      color: buttonTextCheckedHovered
    },
    rootDisabled: {
      color: buttonTextDisabled,
      backgroundColor: buttonBackgroundDisabled,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        color: 'GrayText',
        borderColor: 'GrayText',
        backgroundColor: 'Window'
      }, _b)
    },
    // Split button styles
    splitButtonContainer: {
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
        border: 'none'
      }, _c)
    },
    splitButtonMenuButton: {
      color: p.white,
      backgroundColor: 'transparent',
      selectors: {
        ':hover': {
          backgroundColor: p.neutralLight,
          selectors: (_d = {}, _d[_Styling.HighContrastSelector] = {
            color: 'Highlight'
          }, _d)
        }
      }
    },
    splitButtonMenuButtonDisabled: {
      backgroundColor: s.buttonBackgroundDisabled,
      selectors: {
        ':hover': {
          backgroundColor: s.buttonBackgroundDisabled
        }
      }
    },
    splitButtonDivider: _tslib.__assign(_tslib.__assign({}, splitButtonDividerBaseStyles()), {
      backgroundColor: p.neutralTertiaryAlt,
      selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
        backgroundColor: 'WindowText'
      }, _e)
    }),
    splitButtonDividerDisabled: {
      backgroundColor: theme.palette.neutralTertiaryAlt
    },
    splitButtonMenuButtonChecked: {
      backgroundColor: p.neutralQuaternaryAlt,
      selectors: {
        ':hover': {
          backgroundColor: p.neutralQuaternaryAlt
        }
      }
    },
    splitButtonMenuButtonExpanded: {
      backgroundColor: p.neutralQuaternaryAlt,
      selectors: {
        ':hover': {
          backgroundColor: p.neutralQuaternaryAlt
        }
      }
    },
    splitButtonMenuIcon: {
      color: s.buttonText
    },
    splitButtonMenuIconDisabled: {
      color: s.buttonTextDisabled
    }
  };
}
function primaryStyles(theme) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  var p = theme.palette, s = theme.semanticColors;
  return {
    root: {
      backgroundColor: s.primaryButtonBackground,
      border: "1px solid " + s.primaryButtonBackground,
      color: s.primaryButtonText,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'Window',
        backgroundColor: 'WindowText',
        borderColor: 'WindowText'
      }, _Styling.getHighContrastNoAdjustStyle()), _a["." + _Utilities.IsFocusVisibleClassName + " &:focus"] = {
        selectors: {
          ':after': {
            border: "none",
            outlineColor: p.white
          }
        }
      }, _a)
    },
    rootHovered: {
      backgroundColor: s.primaryButtonBackgroundHovered,
      border: "1px solid " + s.primaryButtonBackgroundHovered,
      color: s.primaryButtonTextHovered,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        color: 'Window',
        backgroundColor: 'Highlight',
        borderColor: 'Highlight'
      }, _b)
    },
    rootPressed: {
      backgroundColor: s.primaryButtonBackgroundPressed,
      border: "1px solid " + s.primaryButtonBackgroundPressed,
      color: s.primaryButtonTextPressed,
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'Window',
        backgroundColor: 'WindowText',
        borderColor: 'WindowText'
      }, _Styling.getHighContrastNoAdjustStyle()), _c)
    },
    rootExpanded: {
      backgroundColor: s.primaryButtonBackgroundPressed,
      color: s.primaryButtonTextPressed
    },
    rootChecked: {
      backgroundColor: s.primaryButtonBackgroundPressed,
      color: s.primaryButtonTextPressed
    },
    rootCheckedHovered: {
      backgroundColor: s.primaryButtonBackgroundPressed,
      color: s.primaryButtonTextPressed
    },
    rootDisabled: {
      color: s.primaryButtonTextDisabled,
      backgroundColor: s.primaryButtonBackgroundDisabled,
      selectors: (_d = {}, _d[_Styling.HighContrastSelector] = {
        color: 'GrayText',
        borderColor: 'GrayText',
        backgroundColor: 'Window'
      }, _d)
    },
    // Split button styles
    splitButtonContainer: {
      selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
        border: 'none'
      }, _e)
    },
    splitButtonDivider: _tslib.__assign(_tslib.__assign({}, splitButtonDividerBaseStyles()), {
      backgroundColor: p.white,
      selectors: (_f = {}, _f[_Styling.HighContrastSelector] = {
        backgroundColor: 'Window'
      }, _f)
    }),
    splitButtonMenuButton: {
      backgroundColor: s.primaryButtonBackground,
      color: s.primaryButtonText,
      selectors: (_g = {}, _g[_Styling.HighContrastSelector] = {
        backgroundColor: 'WindowText'
      }, _g[':hover'] = {
        backgroundColor: s.primaryButtonBackgroundHovered,
        selectors: (_h = {}, _h[_Styling.HighContrastSelector] = {
          color: 'Highlight'
        }, _h)
      }, _g)
    },
    splitButtonMenuButtonDisabled: {
      backgroundColor: s.primaryButtonBackgroundDisabled,
      selectors: {
        ':hover': {
          backgroundColor: s.primaryButtonBackgroundDisabled
        }
      }
    },
    splitButtonMenuButtonChecked: {
      backgroundColor: s.primaryButtonBackgroundPressed,
      selectors: {
        ':hover': {
          backgroundColor: s.primaryButtonBackgroundPressed
        }
      }
    },
    splitButtonMenuButtonExpanded: {
      backgroundColor: s.primaryButtonBackgroundPressed,
      selectors: {
        ':hover': {
          backgroundColor: s.primaryButtonBackgroundPressed
        }
      }
    },
    splitButtonMenuIcon: {
      color: s.primaryButtonText
    },
    splitButtonMenuIconDisabled: {
      color: p.neutralTertiary,
      selectors: (_j = {}, _j[_Styling.HighContrastSelector] = {
        color: 'GrayText'
      }, _j)
    }
  };
}

},{"tslib":"6ZIET","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"50wpx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ActionButton", function () {
  return ActionButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseButton = require('../BaseButton');
var _Utilities = require('../../../Utilities');
var _ActionButtonStyles = require('./ActionButton.styles');
/**
* {@docCategory Button}
*/
var ActionButton = /** @class*/
(function (_super) {
  _tslib.__extends(ActionButton, _super);
  function ActionButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ActionButton.prototype.render = function () {
    var _a = this.props, styles = _a.styles, theme = _a.theme;
    return _react.createElement(_BaseButton.BaseButton, _tslib.__assign({}, this.props, {
      variantClassName: "ms-Button--action ms-Button--command",
      styles: _ActionButtonStyles.getStyles(theme, styles),
      onRenderDescription: _Utilities.nullRender
    }));
  };
  ActionButton = _tslib.__decorate([_Utilities.customizable('ActionButton', ['theme', 'styles'], true)], ActionButton);
  return ActionButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../BaseButton":"3GXNT","../../../Utilities":"1439N","./ActionButton.styles":"6fGP1","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6fGP1":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var _BaseButtonStyles = require('../BaseButton.styles');
var DEFAULT_BUTTON_HEIGHT = '40px';
var DEFAULT_PADDING = '0 4px';
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles) {
  var _a, _b, _c;
  var baseButtonStyles = _BaseButtonStyles.getStyles(theme);
  var actionButtonStyles = {
    root: {
      padding: DEFAULT_PADDING,
      height: DEFAULT_BUTTON_HEIGHT,
      color: theme.palette.neutralPrimary,
      backgroundColor: 'transparent',
      border: '1px solid transparent',
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        borderColor: 'Window'
      }, _a)
    },
    rootHovered: {
      color: theme.palette.themePrimary,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        color: 'Highlight'
      }, _b)
    },
    iconHovered: {
      color: theme.palette.themePrimary
    },
    rootPressed: {
      color: theme.palette.black
    },
    rootExpanded: {
      color: theme.palette.themePrimary
    },
    iconPressed: {
      color: theme.palette.themeDarker
    },
    rootDisabled: {
      color: theme.palette.neutralTertiary,
      backgroundColor: 'transparent',
      borderColor: 'transparent',
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
        color: 'GrayText'
      }, _c)
    },
    rootChecked: {
      color: theme.palette.black
    },
    iconChecked: {
      color: theme.palette.themeDarker
    },
    flexContainer: {
      justifyContent: 'flex-start'
    },
    icon: {
      color: theme.palette.themeDarkAlt
    },
    iconDisabled: {
      color: 'inherit'
    },
    menuIcon: {
      color: theme.palette.neutralSecondary
    },
    textContainer: {
      flexGrow: 0
    }
  };
  return _Styling.concatStyleSets(baseButtonStyles, actionButtonStyles, customStyles);
});

},{"../../../Styling":"5q33X","../../../Utilities":"1439N","../BaseButton.styles":"4e7Yu","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6fyM7":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CompoundButton", function () {
  return CompoundButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseButton = require('../BaseButton');
var _Utilities = require('../../../Utilities');
var _CompoundButtonStyles = require('./CompoundButton.styles');
/**
* {@docCategory Button}
*/
var CompoundButton = /** @class*/
(function (_super) {
  _tslib.__extends(CompoundButton, _super);
  function CompoundButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CompoundButton.prototype.render = function () {
    var _a = this.props, _b = _a.primary, primary = _b === void 0 ? false : _b, styles = _a.styles, theme = _a.theme;
    return _react.createElement(_BaseButton.BaseButton, _tslib.__assign({}, this.props, {
      variantClassName: primary ? 'ms-Button--compoundPrimary' : 'ms-Button--compound',
      styles: _CompoundButtonStyles.getStyles(theme, styles, primary)
    }));
  };
  CompoundButton = _tslib.__decorate([_Utilities.customizable('CompoundButton', ['theme', 'styles'], true)], CompoundButton);
  return CompoundButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../BaseButton":"3GXNT","../../../Utilities":"1439N","./CompoundButton.styles":"1uC52","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1uC52":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var _BaseButtonStyles = require('../BaseButton.styles');
var _SplitButtonSplitButtonStyles = require('../SplitButton/SplitButton.styles');
var _ButtonThemes = require('../ButtonThemes');
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles, primary) {
  var _a, _b, _c, _d, _e;
  var fonts = theme.fonts, palette = theme.palette;
  var baseButtonStyles = _BaseButtonStyles.getStyles(theme);
  var splitButtonStyles = _SplitButtonSplitButtonStyles.getStyles(theme);
  var compoundButtonStyles = {
    root: {
      maxWidth: '280px',
      minHeight: '72px',
      height: 'auto',
      padding: '16px 12px'
    },
    flexContainer: {
      flexDirection: 'row',
      alignItems: 'flex-start',
      minWidth: '100%',
      margin: ''
    },
    textContainer: {
      textAlign: 'left'
    },
    icon: {
      fontSize: '2em',
      lineHeight: '1em',
      height: '1em',
      margin: '0px 8px 0px 0px',
      flexBasis: '1em',
      flexShrink: '0'
    },
    label: {
      margin: '0 0 5px',
      lineHeight: '100%',
      fontWeight: _Styling.FontWeights.semibold
    },
    description: [fonts.small, {
      lineHeight: '100%'
    }]
  };
  var standardCompoundTheme = {
    description: {
      color: palette.neutralSecondary
    },
    descriptionHovered: {
      color: palette.neutralDark
    },
    descriptionPressed: {
      color: 'inherit'
    },
    descriptionChecked: {
      color: 'inherit'
    },
    descriptionDisabled: {
      color: 'inherit'
    }
  };
  var primaryCompoundTheme = {
    description: {
      color: palette.white,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
        backgroundColor: 'WindowText',
        color: 'Window'
      }, _Styling.getHighContrastNoAdjustStyle()), _a)
    },
    descriptionHovered: {
      color: palette.white,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        backgroundColor: 'Highlight',
        color: 'Window'
      }, _b)
    },
    descriptionPressed: {
      color: 'inherit',
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'Window',
        backgroundColor: 'WindowText'
      }, _Styling.getHighContrastNoAdjustStyle()), _c)
    },
    descriptionChecked: {
      color: 'inherit',
      selectors: (_d = {}, _d[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'Window',
        backgroundColor: 'WindowText'
      }, _Styling.getHighContrastNoAdjustStyle()), _d)
    },
    descriptionDisabled: {
      color: 'inherit',
      selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
        color: 'inherit'
      }, _e)
    }
  };
  return _Styling.concatStyleSets(baseButtonStyles, compoundButtonStyles, primary ? _ButtonThemes.primaryStyles(theme) : _ButtonThemes.standardStyles(theme), primary ? primaryCompoundTheme : standardCompoundTheme, splitButtonStyles, customStyles);
});

},{"tslib":"6ZIET","../../../Styling":"5q33X","../../../Utilities":"1439N","../BaseButton.styles":"4e7Yu","../SplitButton/SplitButton.styles":"2eUEK","../ButtonThemes":"2w7xA","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6kVOT":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "IconButton", function () {
  return IconButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseButton = require('../BaseButton');
var _Utilities = require('../../../Utilities');
var _IconButtonStyles = require('./IconButton.styles');
/**
* {@docCategory Button}
*/
var IconButton = /** @class*/
(function (_super) {
  _tslib.__extends(IconButton, _super);
  function IconButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  IconButton.prototype.render = function () {
    var _a = this.props, styles = _a.styles, theme = _a.theme;
    return _react.createElement(_BaseButton.BaseButton, _tslib.__assign({}, this.props, {
      variantClassName: "ms-Button--icon",
      styles: _IconButtonStyles.getStyles(theme, styles),
      onRenderText: _Utilities.nullRender,
      onRenderDescription: _Utilities.nullRender
    }));
  };
  IconButton = _tslib.__decorate([_Utilities.customizable('IconButton', ['theme', 'styles'], true)], IconButton);
  return IconButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../BaseButton":"3GXNT","../../../Utilities":"1439N","./IconButton.styles":"49tIf","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"49tIf":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var _BaseButtonStyles = require('../BaseButton.styles');
var _SplitButtonSplitButtonStyles = require('../SplitButton/SplitButton.styles');
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles) {
  var _a;
  var baseButtonStyles = _BaseButtonStyles.getStyles(theme);
  var splitButtonStyles = _SplitButtonSplitButtonStyles.getStyles(theme);
  var palette = theme.palette, semanticColors = theme.semanticColors;
  var iconButtonStyles = {
    root: {
      padding: '0 4px',
      width: '32px',
      height: '32px',
      backgroundColor: 'transparent',
      border: 'none',
      color: semanticColors.link
    },
    rootHovered: {
      color: palette.themeDarkAlt,
      backgroundColor: palette.neutralLighter,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        borderColor: 'Highlight',
        color: 'Highlight'
      }, _a)
    },
    rootHasMenu: {
      width: 'auto'
    },
    rootPressed: {
      color: palette.themeDark,
      backgroundColor: palette.neutralLight
    },
    rootExpanded: {
      color: palette.themeDark,
      backgroundColor: palette.neutralLight
    },
    rootChecked: {
      color: palette.themeDark,
      backgroundColor: palette.neutralLight
    },
    rootCheckedHovered: {
      color: palette.themeDark,
      backgroundColor: palette.neutralQuaternaryAlt
    },
    rootDisabled: {
      color: palette.neutralTertiaryAlt
    }
  };
  return _Styling.concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles);
});

},{"../../../Styling":"5q33X","../../../Utilities":"1439N","../BaseButton.styles":"4e7Yu","../SplitButton/SplitButton.styles":"2eUEK","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4FOVZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "PrimaryButton", function () {
  return PrimaryButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../../Utilities');
var _DefaultButtonDefaultButton = require('../DefaultButton/DefaultButton');
/**
* {@docCategory Button}
*/
var PrimaryButton = /** @class*/
(function (_super) {
  _tslib.__extends(PrimaryButton, _super);
  function PrimaryButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PrimaryButton.prototype.render = function () {
    return _react.createElement(_DefaultButtonDefaultButton.DefaultButton, _tslib.__assign({}, this.props, {
      primary: true,
      onRenderDescription: _Utilities.nullRender
    }));
  };
  PrimaryButton = _tslib.__decorate([_Utilities.customizable('PrimaryButton', ['theme', 'styles'], true)], PrimaryButton);
  return PrimaryButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../../Utilities":"1439N","../DefaultButton/DefaultButton":"4eUH0","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6qwv2":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CommandBarButton", function () {
  return CommandBarButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseButton = require('../BaseButton');
var _Utilities = require('../../../Utilities');
var _CommandBarButtonStyles = require('./CommandBarButton.styles');
/**
* {@docCategory Button}
*/
var CommandBarButton = /** @class*/
(function (_super) {
  _tslib.__extends(CommandBarButton, _super);
  function CommandBarButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CommandBarButton.prototype.render = function () {
    var _a = this.props, styles = _a.styles, theme = _a.theme;
    return _react.createElement(_BaseButton.BaseButton, _tslib.__assign({}, this.props, {
      variantClassName: "ms-Button--commandBar",
      styles: _CommandBarButtonStyles.getStyles(theme, styles),
      onRenderDescription: _Utilities.nullRender
    }));
  };
  CommandBarButton = _tslib.__decorate([_Utilities.customizable('CommandBarButton', ['theme', 'styles'], true)], CommandBarButton);
  return CommandBarButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../BaseButton":"3GXNT","../../../Utilities":"1439N","./CommandBarButton.styles":"2autF","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2autF":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var _BaseButtonStyles = require('../BaseButton.styles');
var _SplitButtonSplitButtonStyles = require('../SplitButton/SplitButton.styles');
var _BaseButtonClassNames = require('../BaseButton.classNames');
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles, focusInset, focusColor) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
  var baseButtonStyles = _BaseButtonStyles.getStyles(theme);
  var baseSplitButtonStyles = _SplitButtonSplitButtonStyles.getStyles(theme);
  var p = theme.palette, semanticColors = theme.semanticColors;
  var commandButtonHighContrastFocus = {
    left: 4,
    top: 4,
    bottom: 4,
    right: 4,
    border: 'none'
  };
  var commandButtonStyles = {
    root: [_Styling.getFocusStyle(theme, {
      inset: 2,
      highContrastStyle: commandButtonHighContrastFocus,
      borderColor: 'transparent'
    }), theme.fonts.medium, {
      minWidth: '40px',
      backgroundColor: p.white,
      color: p.neutralPrimary,
      padding: '0 4px',
      border: 'none',
      borderRadius: 0,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        border: 'none'
      }, _a)
    }],
    rootHovered: {
      backgroundColor: p.neutralLighter,
      color: p.neutralDark,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        color: 'Highlight'
      }, _b["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
        color: p.themeDarkAlt
      }, _b["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonMenuIcon] = {
        color: p.neutralPrimary
      }, _b)
    },
    rootPressed: {
      backgroundColor: p.neutralLight,
      color: p.neutralDark,
      selectors: (_c = {}, _c["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
        color: p.themeDark
      }, _c["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonMenuIcon] = {
        color: p.neutralPrimary
      }, _c)
    },
    rootChecked: {
      backgroundColor: p.neutralLight,
      color: p.neutralDark,
      selectors: (_d = {}, _d["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
        color: p.themeDark
      }, _d["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonMenuIcon] = {
        color: p.neutralPrimary
      }, _d)
    },
    rootCheckedHovered: {
      backgroundColor: p.neutralQuaternaryAlt,
      selectors: (_e = {}, _e["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
        color: p.themeDark
      }, _e["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonMenuIcon] = {
        color: p.neutralPrimary
      }, _e)
    },
    rootExpanded: {
      backgroundColor: p.neutralLight,
      color: p.neutralDark,
      selectors: (_f = {}, _f["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
        color: p.themeDark
      }, _f["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonMenuIcon] = {
        color: p.neutralPrimary
      }, _f)
    },
    rootExpandedHovered: {
      backgroundColor: p.neutralQuaternaryAlt
    },
    rootDisabled: {
      backgroundColor: p.white,
      selectors: (_g = {}, _g["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
        color: semanticColors.disabledBodySubtext,
        selectors: (_h = {}, _h[_Styling.HighContrastSelector] = _tslib.__assign({
          color: 'GrayText'
        }, _Styling.getHighContrastNoAdjustStyle()), _h)
      }, _g[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'GrayText',
        backgroundColor: 'Window'
      }, _Styling.getHighContrastNoAdjustStyle()), _g)
    },
    // Split button styles
    splitButtonContainer: {
      height: '100%',
      selectors: (_j = {}, _j[_Styling.HighContrastSelector] = {
        border: 'none'
      }, _j)
    },
    splitButtonDividerDisabled: {
      selectors: (_k = {}, _k[_Styling.HighContrastSelector] = {
        backgroundColor: 'Window'
      }, _k)
    },
    splitButtonDivider: {
      backgroundColor: p.neutralTertiaryAlt
    },
    splitButtonMenuButton: {
      backgroundColor: p.white,
      border: 'none',
      borderTopRightRadius: '0',
      borderBottomRightRadius: '0',
      color: p.neutralSecondary,
      selectors: {
        ':hover': {
          backgroundColor: p.neutralLighter,
          color: p.neutralDark,
          selectors: (_l = {}, _l[_Styling.HighContrastSelector] = {
            color: 'Highlight'
          }, _l["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
            color: p.neutralPrimary
          }, _l)
        },
        ':active': {
          backgroundColor: p.neutralLight,
          selectors: (_m = {}, _m["." + _BaseButtonClassNames.ButtonGlobalClassNames.msButtonIcon] = {
            color: p.neutralPrimary
          }, _m)
        }
      }
    },
    splitButtonMenuButtonDisabled: {
      backgroundColor: p.white,
      selectors: (_o = {}, _o[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'GrayText',
        border: 'none',
        backgroundColor: 'Window'
      }, _Styling.getHighContrastNoAdjustStyle()), _o)
    },
    splitButtonMenuButtonChecked: {
      backgroundColor: p.neutralLight,
      color: p.neutralDark,
      selectors: {
        ':hover': {
          backgroundColor: p.neutralQuaternaryAlt
        }
      }
    },
    splitButtonMenuButtonExpanded: {
      backgroundColor: p.neutralLight,
      color: p.black,
      selectors: {
        ':hover': {
          backgroundColor: p.neutralQuaternaryAlt
        }
      }
    },
    splitButtonMenuIcon: {
      color: p.neutralPrimary
    },
    splitButtonMenuIconDisabled: {
      color: p.neutralTertiary
    },
    label: {
      fontWeight: 'normal'
    },
    icon: {
      color: p.themePrimary
    },
    menuIcon: (_p = {
      color: p.neutralSecondary
    }, _p[_Styling.HighContrastSelector] = {
      color: 'GrayText'
    }, _p)
  };
  return _Styling.concatStyleSets(baseButtonStyles, baseSplitButtonStyles, commandButtonStyles, customStyles);
});

},{"tslib":"6ZIET","../../../Styling":"5q33X","../../../Utilities":"1439N","../BaseButton.styles":"4e7Yu","../SplitButton/SplitButton.styles":"2eUEK","../BaseButton.classNames":"35CbM","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4vTIs":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CommandButton", function () {
  return CommandButton;
});
var _ActionButtonActionButton = require('../ActionButton/ActionButton');
var CommandButton = _ActionButtonActionButton.ActionButton;

},{"../ActionButton/ActionButton":"50wpx","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2j4lL":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "MessageBarButton", function () {
  return MessageBarButton;
});
var _tslib = require("tslib");
var _react = require('react');
var _DefaultButtonDefaultButton = require('../DefaultButton/DefaultButton');
var _Utilities = require('../../../Utilities');
var _MessageBarButtonStyles = require('./MessageBarButton.styles');
/**
* {@docCategory MessageBar}
*/
var MessageBarButton = /** @class*/
(function (_super) {
  _tslib.__extends(MessageBarButton, _super);
  function MessageBarButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MessageBarButton.prototype.render = function () {
    var _a = this.props, styles = _a.styles, theme = _a.theme;
    return _react.createElement(_DefaultButtonDefaultButton.DefaultButton, _tslib.__assign({}, this.props, {
      styles: _MessageBarButtonStyles.getStyles(theme, styles),
      onRenderDescription: _Utilities.nullRender
    }));
  };
  MessageBarButton = _tslib.__decorate([_Utilities.customizable('MessageBarButton', ['theme', 'styles'], true)], MessageBarButton);
  return MessageBarButton;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../DefaultButton/DefaultButton":"4eUH0","../../../Utilities":"1439N","./MessageBarButton.styles":"4OOmU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4OOmU":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var getStyles = _Utilities.memoizeFunction(function (theme, customStyles) {
  return _Styling.concatStyleSets({
    root: [_Styling.getFocusStyle(theme, {
      inset: 1,
      highContrastStyle: {
        outlineOffset: '-4px',
        outline: '1px solid Window'
      },
      borderColor: 'transparent'
    }), {
      height: 24
    }]
  }, customStyles);
});

},{"../../../Styling":"5q33X","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4PdoP":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsStackIndex = require('./components/Stack/index');
_parcelHelpers.exportAll(_componentsStackIndex, exports);

},{"./components/Stack/index":"6BBhA","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6BBhA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _StackItemStackItem = require('./StackItem/StackItem');
_parcelHelpers.exportAll(_StackItemStackItem, exports);
var _StackItemStackItemTypes = require('./StackItem/StackItem.types');
_parcelHelpers.exportAll(_StackItemStackItemTypes, exports);
var _Stack = require('./Stack');
_parcelHelpers.exportAll(_Stack, exports);
var _StackTypes = require('./Stack.types');
_parcelHelpers.exportAll(_StackTypes, exports);

},{"./StackItem/StackItem":"75kmy","./StackItem/StackItem.types":"4EmIK","./Stack":"4dcrb","./Stack.types":"3rXZo","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"75kmy":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "StackItem", function () {
  return StackItem;
});
var _tslib = require("tslib");
var _fluentuiFoundationLegacy = require('@fluentui/foundation-legacy');
var _Utilities = require('../../../Utilities');
var _StackItemStyles = require('./StackItem.styles');
var StackItemView = function (props) {
  var children = props.children;
  var nativeProps = _Utilities.getNativeProps(props, _Utilities.htmlElementProperties);
  // eslint-disable-next-line eqeqeq
  if (children == null) {
    return null;
  }
  var Slots = _fluentuiFoundationLegacy.getSlots(props, {
    root: 'div'
  });
  return _fluentuiFoundationLegacy.withSlots(Slots.root, _tslib.__assign({}, nativeProps), children);
};
var StackItem = _fluentuiFoundationLegacy.createComponent(StackItemView, {
  displayName: 'StackItem',
  styles: _StackItemStyles.StackItemStyles
});
exports.default = StackItem;

},{"tslib":"6ZIET","@fluentui/foundation-legacy":"6Cchx","../../../Utilities":"1439N","./StackItem.styles":"48ArL","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6Cchx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.legacyStyled = void 0;
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./createComponent"), exports);
tslib_1.__exportStar(require("./IComponent"), exports);
tslib_1.__exportStar(require("./IHTMLSlots"), exports);
tslib_1.__exportStar(require("./ISlots"), exports);
tslib_1.__exportStar(require("./slots"), exports);
tslib_1.__exportStar(require("./ThemeProvider"), exports);
tslib_1.__exportStar(require("./hooks/index"), exports);
var utilities_1 = require("@fluentui/utilities");
Object.defineProperty(exports, "legacyStyled", { enumerable: true, get: function () { return utilities_1.styled; } });
require("./version");

},{"tslib":"Wczo1","./createComponent":"7qXJx","./IComponent":"5tB8s","./IHTMLSlots":"1lfBw","./ISlots":"1Wrpt","./slots":"2KGfH","./ThemeProvider":"3oAXp","./hooks/index":"oJkDJ","@fluentui/utilities":"2AuOe","./version":"US6NF"}],"Wczo1":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
******************************************************************************/
/*global global, define, System, Reflect, Promise*/
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __createBinding;
(function (factory) {
  var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
  if (typeof define === "function" && define.amd) {
    define("tslib", ["exports"], function (exports) {
      factory(createExporter(root, createExporter(exports)));
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    factory(createExporter(root, createExporter(module.exports)));
  } else {
    factory(createExporter(root));
  }
  function createExporter(exports, previous) {
    if (exports !== root) {
      if (typeof Object.create === "function") {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
      } else {
        exports.__esModule = true;
      }
    }
    return function (id, v) {
      return exports[id] = previous ? previous(id, v) : v;
    };
  }
})(function (exporter) {
  var extendStatics = Object.setPrototypeOf || ({
    __proto__: []
  }) instanceof Array && (function (d, b) {
    d.__proto__ = b;
  }) || (function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  });
  __extends = function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  __assign = Object.assign || (function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  });
  __rest = function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return (c > 3 && r && Object.defineProperty(target, key, r), r);
  };
  __param = function (paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  };
  __metadata = function (metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  };
  __awaiter = function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  __generator = function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return (g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g);
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (_) try {
        if ((f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
        if ((y = 0, t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  __exportStar = function (m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  };
  __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  __values = function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  };
  __read = function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  };
  /** @deprecated*/
  __spread = function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  };
  /** @deprecated*/
  __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];
    return r;
  };
  __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; (i++, j++)) to[j] = from[i];
    return to;
  };
  __await = function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  };
  __asyncGenerator = function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return (i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
  __asyncDelegator = function (o) {
    var i, p;
    return (i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i);
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  };
  __asyncValues = function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && (function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v), settle(resolve, reject, v.done, v.value));
        });
      });
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  };
  __makeTemplateObject = function (cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  };
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  __importStar = function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  __importDefault = function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  __classPrivateFieldGet = function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  __classPrivateFieldSet = function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);
  };
  exporter("__extends", __extends);
  exporter("__assign", __assign);
  exporter("__rest", __rest);
  exporter("__decorate", __decorate);
  exporter("__param", __param);
  exporter("__metadata", __metadata);
  exporter("__awaiter", __awaiter);
  exporter("__generator", __generator);
  exporter("__exportStar", __exportStar);
  exporter("__createBinding", __createBinding);
  exporter("__values", __values);
  exporter("__read", __read);
  exporter("__spread", __spread);
  exporter("__spreadArrays", __spreadArrays);
  exporter("__spreadArray", __spreadArray);
  exporter("__await", __await);
  exporter("__asyncGenerator", __asyncGenerator);
  exporter("__asyncDelegator", __asyncDelegator);
  exporter("__asyncValues", __asyncValues);
  exporter("__makeTemplateObject", __makeTemplateObject);
  exporter("__importStar", __importStar);
  exporter("__importDefault", __importDefault);
  exporter("__classPrivateFieldGet", __classPrivateFieldGet);
  exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

},{}],"7qXJx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponent = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var style_utilities_1 = require("@fluentui/style-utilities");
var utilities_1 = require("@fluentui/utilities");
var slots_1 = require("./slots");
var utilities_2 = require("./utilities");
/**
 * Assembles a higher order component based on the following: styles, theme, view, and state.
 * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness
 * in how components use and apply styling and theming.
 *
 * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.
 * State component, if provided, is passed in props for processing. Props from state / user are automatically processed
 * and styled before finally being passed to view.
 *
 * State components should contain all stateful behavior and should not generate any JSX, but rather simply call
 * the view prop.
 *
 * Views should simply be stateless pure functions that receive all props needed for rendering their output.
 *
 * State component is optional. If state is not provided, created component is essentially a functional
 * stateless component.
 *
 * @param options - component Component options. See IComponentOptions for more detail.
 */
function createComponent(view, options) {
    if (options === void 0) { options = {}; }
    var _a = options.factoryOptions, factoryOptions = _a === void 0 ? {} : _a;
    var defaultProp = factoryOptions.defaultProp;
    var ResultComponent = function (componentProps) {
        var settings = _getCustomizations(options.displayName, React.useContext(utilities_1.CustomizerContext), options.fields);
        var stateReducer = options.state;
        if (stateReducer) {
            // Don't assume state will return all props, so spread useState result over component props.
            componentProps = tslib_1.__assign(tslib_1.__assign({}, componentProps), stateReducer(componentProps));
        }
        var theme = componentProps.theme || settings.theme;
        var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);
        var styles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);
        var viewProps = tslib_1.__assign(tslib_1.__assign({}, componentProps), { styles: styles,
            tokens: tokens, _defaultStyles: styles, theme: theme });
        return view(viewProps);
    };
    ResultComponent.displayName = options.displayName || view.name;
    // If a shorthand prop is defined, create a factory for the component.
    // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.
    //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.
    if (defaultProp) {
        ResultComponent.create = slots_1.createFactory(ResultComponent, { defaultProp: defaultProp });
    }
    utilities_2.assign(ResultComponent, options.statics);
    // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.
    return ResultComponent;
}
exports.createComponent = createComponent;
/**
 * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.
 */
function _resolveStyles(props, theme, tokens) {
    var allStyles = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        allStyles[_i - 3] = arguments[_i];
    }
    return style_utilities_1.concatStyleSets.apply(void 0, allStyles.map(function (styles) {
        return typeof styles === 'function' ? styles(props, theme, tokens) : styles;
    }));
}
/**
 * Resolve all tokens functions with props flatten results along with all tokens objects.
 */
function _resolveTokens(props, theme) {
    var allTokens = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        allTokens[_i - 2] = arguments[_i];
    }
    var tokens = {};
    for (var _a = 0, allTokens_1 = allTokens; _a < allTokens_1.length; _a++) {
        var currentTokens = allTokens_1[_a];
        if (currentTokens) {
            // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.
            currentTokens =
                typeof currentTokens === 'function'
                    ? currentTokens(props, theme)
                    : currentTokens;
            if (Array.isArray(currentTokens)) {
                currentTokens = _resolveTokens.apply(void 0, tslib_1.__spreadArrays([props, theme], currentTokens));
            }
            utilities_2.assign(tokens, currentTokens);
        }
    }
    return tokens;
}
/**
 * Helper function for calling Customizations.getSettings falling back to default fields.
 *
 * @param displayName Displayable name for component.
 * @param context React context passed to component containing contextual settings.
 * @param fields Optional list of properties to grab from global store and context.
 */
function _getCustomizations(displayName, context, fields) {
    // TODO: do we want field props? should fields be part of IComponent and used here?
    // TODO: should we centrally define DefaultFields? (not exported from styling)
    // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps
    var DefaultFields = ['theme', 'styles', 'tokens'];
    return utilities_1.Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);
}

},{"tslib":"Wczo1","react":"4g1R3","@fluentui/style-utilities":"J5I0J","@fluentui/utilities":"2AuOe","./slots":"2KGfH","./utilities":"3QiCm"}],"2KGfH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSlots = exports.createFactory = exports.withSlots = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var merge_styles_1 = require("@fluentui/merge-styles");
var utilities_1 = require("@fluentui/utilities");
var utilities_2 = require("./utilities");
/**
 * This function is required for any module that uses slots.
 *
 * This function is a slot resolver that automatically evaluates slot functions to generate React elements.
 * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.
 *
 * To use this function on a per-file basis, use the jsx directive targeting withSlots.
 * This directive must be the FIRST LINE in the file to work correctly.
 * Usage of this pragma also requires withSlots import statement.
 *
 * See React.createElement
 */
// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now
// and widen as needed.
function withSlots(type, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        children[_i - 2] = arguments[_i];
    }
    var slotType = type;
    if (slotType.isSlot) {
        // Since we are bypassing createElement, use React.Children.toArray to make sure children are
        // properly assigned keys.
        // TODO: should this be mutating? does React mutate children subprop with createElement?
        // TODO: will toArray clobber existing keys?
        // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.
        //        Even children passed to createElement without keys don't generate this warning.
        //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.
        children = React.Children.toArray(children);
        // TODO: There is something weird going on here with children embedded in props vs. rest args.
        // Comment out these lines to see. Make sure this function is doing the right things.
        if (children.length === 0) {
            return slotType(props);
        }
        return slotType(tslib_1.__assign(tslib_1.__assign({}, props), { children: children }));
    }
    else {
        // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.
        //        Children had to be spread to avoid breaking KeytipData in Toggle.view:
        //        react-dom.development.js:18931 Uncaught TypeError: children is not a function
        //        Without spread, function child is a child array of one element
        // TODO: is there a reason this can't be:
        // return React.createElement.apply(this, arguments);
        return React.createElement.apply(React, tslib_1.__spreadArrays([type, props], children));
    }
}
exports.withSlots = withSlots;
/**
 * This function creates factories that render ouput depending on the user ISlotProp props passed in.
 * @param DefaultComponent - Base component to render when not overridden by user props.
 * @param options - Factory options, including defaultProp value for shorthand prop mapping.
 * @returns ISlotFactory function used for rendering slots.
 */
function createFactory(DefaultComponent, options) {
    if (options === void 0) { options = {}; }
    var _a = options.defaultProp, defaultProp = _a === void 0 ? 'children' : _a;
    var result = function (componentProps, userProps, userSlotOptions, defaultStyles, theme) {
        // If they passed in raw JSX, just return that.
        if (React.isValidElement(userProps)) {
            return userProps;
        }
        var flattenedUserProps = _translateShorthand(defaultProp, userProps);
        var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);
        if (userSlotOptions) {
            if (userSlotOptions.component) {
                // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.
                // return <userSlotOptions.component {...finalProps} />;
                var UserComponent = userSlotOptions.component;
                return React.createElement(UserComponent, tslib_1.__assign({}, finalProps));
            }
            if (userSlotOptions.render) {
                return userSlotOptions.render(finalProps, DefaultComponent);
            }
        }
        return React.createElement(DefaultComponent, tslib_1.__assign({}, finalProps));
    };
    return result;
}
exports.createFactory = createFactory;
/**
 * Default factory for components without explicit factories.
 */
var defaultFactory = utilities_1.memoizeFunction(function (type) { return createFactory(type); });
/**
 * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.
 * @param userProps - Props as pass to component.
 * @param slots - Slot definition object defining the default slot component for each slot.
 * @returns A set of created slots that components can render in JSX.
 */
function getSlots(userProps, slots) {
    var result = {};
    // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.
    var mixedProps = userProps;
    var _loop_1 = function (name_1) {
        if (slots.hasOwnProperty(name_1)) {
            // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React
            // detects each closure as a different component (since it is a new instance) from the previous one and then
            // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which
            // bypasses the call to React.createElement.
            var slot = function (componentProps) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (args.length > 0) {
                    // If React.createElement is being incorrectly used with slots, there will be additional arguments.
                    // We can detect these additional arguments and error on their presence.
                    throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');
                }
                // TODO: having TS infer types here seems to cause infinite loop.
                //   use explicit types or casting to preserve typing if possible.
                // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably
                //   causing the infinite loop
                return _renderSlot(slots[name_1], 
                // TODO: this cast to any is hiding a relationship issue between the first two args
                componentProps, mixedProps[name_1], mixedProps.slots && mixedProps.slots[name_1], 
                // _defaultStyles should always be present, but a check for existence is added to make view tests
                // easier to use.
                mixedProps._defaultStyles && mixedProps._defaultStyles[name_1], mixedProps.theme);
            };
            slot.isSlot = true;
            result[name_1] = slot;
        }
    };
    for (var name_1 in slots) {
        _loop_1(name_1);
    }
    return result;
}
exports.getSlots = getSlots;
/**
 * Helper function that translates shorthand as needed.
 * @param defaultProp
 * @param slotProps
 */
function _translateShorthand(defaultProp, slotProps) {
    var _a;
    var transformedProps;
    if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {
        transformedProps = (_a = {},
            _a[defaultProp] = slotProps,
            _a);
    }
    else {
        transformedProps = slotProps;
    }
    return transformedProps;
}
/**
 * Helper function that constructs final styles and props given a series of props ordered by increasing priority.
 */
function _constructFinalProps(defaultStyles, theme) {
    var allProps = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        allProps[_i - 2] = arguments[_i];
    }
    var finalProps = {};
    var classNames = [];
    for (var _a = 0, allProps_1 = allProps; _a < allProps_1.length; _a++) {
        var props = allProps_1[_a];
        classNames.push(props && props.className);
        utilities_2.assign(finalProps, props);
    }
    finalProps.className = merge_styles_1.mergeCss([defaultStyles, classNames], { rtl: utilities_1.getRTL(theme) });
    return finalProps;
}
/**
 * Render a slot given component and user props. Uses component factory if available, otherwise falls back
 * to default factory.
 * @param ComponentType Factory component type.
 * @param componentProps The properties passed into slot from within the component.
 * @param userProps The user properties passed in from outside of the component.
 */
function _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {
    if (ComponentType.create !== undefined) {
        return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);
    }
    else {
        // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'
        return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);
    }
}

},{"tslib":"Wczo1","react":"4g1R3","@fluentui/merge-styles":"366N8","@fluentui/utilities":"2AuOe","./utilities":"3QiCm"}],"3QiCm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assign = void 0;
var tslib_1 = require("tslib");
exports.assign = tslib_1.__assign;

},{"tslib":"Wczo1"}],"5tB8s":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"1lfBw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"1Wrpt":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"3oAXp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeProvider = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var style_utilities_1 = require("@fluentui/style-utilities");
var utilities_1 = require("@fluentui/utilities");
/**
 * Theme provider is a simplified version of Customizer that activates the appropriate theme data
 * for a given scheme name.
 *
 * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.
 * @deprecated This is an old ThemeProvider implementation. New code should use the ThemeProvider exported from
 * `@fluentui/react` (or `@fluentui/react/lib/Theme`) instead.
 */
var ThemeProvider = function (props) {
    var scheme = props.scheme, theme = props.theme, rest = tslib_1.__rest(props, ["scheme", "theme"]);
    // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme
    //   in context and uses quick global store accessor to trigger change by passing in theme object as child and
    //   triggering re-render. (perf benefits need verification)
    var contextTransform = function (context) {
        return style_utilities_1.getThemedContext(context, scheme, theme);
    };
    // eslint-disable-next-line react/jsx-no-bind, deprecation/deprecation
    return React.createElement(utilities_1.Customizer, tslib_1.__assign({}, rest, { contextTransform: contextTransform }));
};
exports.ThemeProvider = ThemeProvider;

},{"tslib":"Wczo1","react":"4g1R3","@fluentui/style-utilities":"J5I0J","@fluentui/utilities":"2AuOe"}],"oJkDJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./controlled"), exports);

},{"tslib":"Wczo1","./controlled":"4BD2Z"}],"4BD2Z":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getControlledDerivedProps = exports.useControlledState = void 0;
var React = require("react");
/**
 * Controlled state helper that gives priority to props value. Useful for components that have props with both
 * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.
 * If prop is defined and then later undefined, state will revert to its previous value.
 *
 * @param props - The props object containing controlled prop values.
 * @param propName - The controlled prop name.
 * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.
 */
function useControlledState(props, propName, options) {
    var defaultValue;
    if (options) {
        if (options.defaultPropName && props[options.defaultPropName] !== undefined) {
            // No easy way to coerce TProps[TDefaultProp] to match TProps[TProp] in generic typings, so cast it here.
            defaultValue = props[options.defaultPropName];
        }
        else {
            defaultValue = options && options.defaultPropValue;
        }
    }
    var _a = React.useState(defaultValue), state = _a[0], setState = _a[1];
    if (props[propName] !== undefined) {
        return [props[propName], setState];
    }
    else {
        return [state, setState];
    }
}
exports.useControlledState = useControlledState;
/**
 * Simple controlled helper that gives priority to props value and falls back to derived value.
 *
 * @param props - The props object containing controlled prop values.
 * @param propName - The controlled prop name.
 * @param derivedValue - Derived value. Returned when controlled value is not present.
 */
function getControlledDerivedProps(props, propName, derivedValue) {
    if (props[propName] !== undefined) {
        return props[propName];
    }
    else {
        return derivedValue;
    }
}
exports.getControlledDerivedProps = getControlledDerivedProps;

},{"react":"4g1R3"}],"US6NF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/foundation-legacy', '8.1.1');

},{"@fluentui/set-version":"12cIw"}],"48ArL":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "StackItemStyles", function () {
  return StackItemStyles;
});
var _Styling = require('../../../Styling');
var GlobalClassNames = {
  root: 'ms-StackItem'
};
var alignMap = {
  start: 'flex-start',
  end: 'flex-end'
};
var StackItemStyles = function (props, theme, tokens) {
  var grow = props.grow, shrink = props.shrink, disableShrink = props.disableShrink, align = props.align, verticalFill = props.verticalFill, order = props.order, className = props.className;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [theme.fonts.medium, classNames.root, {
      margin: tokens.margin,
      padding: tokens.padding,
      height: verticalFill ? '100%' : 'auto',
      width: 'auto'
    }, grow && ({
      flexGrow: grow === true ? 1 : grow
    }), (disableShrink || !grow && !shrink) && ({
      flexShrink: 0
    }), shrink && !disableShrink && ({
      flexShrink: 1
    }), align && ({
      alignSelf: alignMap[align] || align
    }), order && ({
      order: order
    }), className]
  };
};

},{"../../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4EmIK":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4dcrb":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Stack", function () {
  return Stack;
});
var _tslib = require("tslib");
var _react = require('react');
var _fluentuiFoundationLegacy = require('@fluentui/foundation-legacy');
var _Utilities = require('../../Utilities');
var _StackStyles = require('./Stack.styles');
var _StackItemStackItem = require('./StackItem/StackItem');
var StackView = function (props) {
  var _a = props.as, RootType = _a === void 0 ? 'div' : _a, disableShrink = props.disableShrink, wrap = props.wrap, rest = _tslib.__rest(props, ["as", "disableShrink", "wrap"]);
  _Utilities.warnDeprecations('Stack', props, {
    gap: 'tokens.childrenGap',
    maxHeight: 'tokens.maxHeight',
    maxWidth: 'tokens.maxWidth',
    padding: 'tokens.padding'
  });
  var stackChildren = _react.Children.map(props.children, function (child, index) {
    if (!child) {
      return null;
    }
    if (_isStackItem(child)) {
      var defaultItemProps = {
        shrink: !disableShrink
      };
      return _react.cloneElement(child, _tslib.__assign(_tslib.__assign({}, defaultItemProps), child.props));
    }
    return child;
  });
  var nativeProps = _Utilities.getNativeProps(rest, _Utilities.htmlElementProperties);
  var Slots = _fluentuiFoundationLegacy.getSlots(props, {
    root: RootType,
    inner: 'div'
  });
  if (wrap) {
    return _fluentuiFoundationLegacy.withSlots(Slots.root, _tslib.__assign({}, nativeProps), _fluentuiFoundationLegacy.withSlots(Slots.inner, null, stackChildren));
  }
  return _fluentuiFoundationLegacy.withSlots(Slots.root, _tslib.__assign({}, nativeProps), stackChildren);
};
function _isStackItem(item) {
  // In theory, we should be able to just check item.type === StackItem.
  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),
  // the object identity is different despite the function implementation being the same.
  return !!item && typeof item === 'object' && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name
  item.type.displayName === _StackItemStackItem.StackItem.displayName;
}
var StackStatics = {
  Item: _StackItemStackItem.StackItem
};
var Stack = _fluentuiFoundationLegacy.createComponent(StackView, {
  displayName: 'Stack',
  styles: _StackStyles.styles,
  statics: StackStatics
});
exports.default = Stack;

},{"tslib":"6ZIET","react":"4g1R3","@fluentui/foundation-legacy":"6Cchx","../../Utilities":"1439N","./Stack.styles":"5cYUk","./StackItem/StackItem":"75kmy","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5cYUk":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "styles", function () {
  return styles;
});
var _tslib = require("tslib");
var _StackUtils = require('./StackUtils');
var _Styling = require('../../Styling');
var nameMap = {
  start: 'flex-start',
  end: 'flex-end'
};
var GlobalClassNames = {
  root: 'ms-Stack',
  inner: 'ms-Stack-inner'
};
var styles = function (props, theme, tokens) {
  var _a, _b, _c, _d, _e, _f, _g;
  var verticalFill = props.verticalFill, horizontal = props.horizontal, reversed = props.reversed, grow = props.grow, wrap = props.wrap, horizontalAlign = props.horizontalAlign, verticalAlign = props.verticalAlign, disableShrink = props.disableShrink, className = props.className;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  /*eslint-disable deprecation/deprecation*/
  var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;
  var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;
  var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;
  var padding = tokens && tokens.padding ? tokens.padding : props.padding;
  /*eslint-enable deprecation/deprecation*/
  var _h = _StackUtils.parseGap(childrenGap, theme), rowGap = _h.rowGap, columnGap = _h.columnGap;
  var horizontalMargin = "" + -0.5 * columnGap.value + columnGap.unit;
  var verticalMargin = "" + -0.5 * rowGap.value + rowGap.unit;
  // styles to be applied to all direct children regardless of wrap or direction
  var childStyles = {
    textOverflow: 'ellipsis'
  };
  // selectors to be applied regardless of wrap or direction
  var commonSelectors = {
    // flexShrink styles are applied by the StackItem
    '> *:not(.ms-StackItem)': {
      flexShrink: disableShrink ? 0 : 1
    }
  };
  if (wrap) {
    return {
      root: [classNames.root, {
        flexWrap: 'wrap',
        maxWidth: maxWidth,
        maxHeight: maxHeight,
        width: 'auto',
        overflow: 'visible',
        height: '100%'
      }, horizontalAlign && (_a = {}, _a[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _a), verticalAlign && (_b = {}, _b[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _b), className, {
        // not allowed to be overridden by className
        // since this is necessary in order to prevent collapsing margins
        display: 'flex'
      }, horizontal && ({
        height: verticalFill ? '100%' : 'auto'
      })],
      inner: [classNames.inner, {
        display: 'flex',
        flexWrap: 'wrap',
        marginLeft: horizontalMargin,
        marginRight: horizontalMargin,
        marginTop: verticalMargin,
        marginBottom: verticalMargin,
        overflow: 'visible',
        boxSizing: 'border-box',
        padding: _StackUtils.parsePadding(padding, theme),
        // avoid unnecessary calc() calls if horizontal gap is 0
        width: columnGap.value === 0 ? '100%' : "calc(100% + " + columnGap.value + columnGap.unit + ")",
        maxWidth: '100vw',
        selectors: _tslib.__assign({
          '> *': _tslib.__assign({
            margin: "" + 0.5 * rowGap.value + rowGap.unit + " " + 0.5 * columnGap.value + columnGap.unit
          }, childStyles)
        }, commonSelectors)
      }, horizontalAlign && (_c = {}, _c[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _c), verticalAlign && (_d = {}, _d[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _d), horizontal && ({
        flexDirection: reversed ? 'row-reverse' : 'row',
        // avoid unnecessary calc() calls if vertical gap is 0
        height: rowGap.value === 0 ? '100%' : "calc(100% + " + rowGap.value + rowGap.unit + ")",
        selectors: {
          '> *': {
            maxWidth: columnGap.value === 0 ? '100%' : "calc(100% - " + columnGap.value + columnGap.unit + ")"
          }
        }
      }), !horizontal && ({
        flexDirection: reversed ? 'column-reverse' : 'column',
        height: "calc(100% + " + rowGap.value + rowGap.unit + ")",
        selectors: {
          '> *': {
            maxHeight: rowGap.value === 0 ? '100%' : "calc(100% - " + rowGap.value + rowGap.unit + ")"
          }
        }
      })]
    };
  }
  return {
    root: [classNames.root, {
      display: 'flex',
      flexDirection: horizontal ? reversed ? 'row-reverse' : 'row' : reversed ? 'column-reverse' : 'column',
      flexWrap: 'nowrap',
      width: 'auto',
      height: verticalFill ? '100%' : 'auto',
      maxWidth: maxWidth,
      maxHeight: maxHeight,
      padding: _StackUtils.parsePadding(padding, theme),
      boxSizing: 'border-box',
      selectors: _tslib.__assign((_e = {
        '> *': childStyles
      }, _e[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [horizontal && ({
        marginLeft: "" + columnGap.value + columnGap.unit
      }), !horizontal && ({
        marginTop: "" + rowGap.value + rowGap.unit
      })], _e), commonSelectors)
    }, grow && ({
      flexGrow: grow === true ? 1 : grow
    }), horizontalAlign && (_f = {}, _f[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _f), verticalAlign && (_g = {}, _g[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _g), className]
  };
};

},{"tslib":"6ZIET","./StackUtils":"p07Im","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"p07Im":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "parseGap", function () {
  return parseGap;
});
_parcelHelpers.export(exports, "parsePadding", function () {
  return parsePadding;
});
/**
* Functions used by Stack components to simplify style-related computations
*/
// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.
var _getThemedSpacing = function (space, theme) {
  if (theme.spacing.hasOwnProperty(space)) {
    return theme.spacing[space];
  }
  return space;
};
// Helper function that takes a gap as a string and converts it into a { value, unit } representation.
var _getValueUnitGap = function (gap) {
  var numericalPart = parseFloat(gap);
  var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;
  var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();
  var unitPart = gap.substring(numericalString.toString().length);
  return {
    value: numericalValue,
    unit: unitPart || 'px'
  };
};
var parseGap = function (gap, theme) {
  if (gap === undefined || gap === '') {
    return {
      rowGap: {
        value: 0,
        unit: 'px'
      },
      columnGap: {
        value: 0,
        unit: 'px'
      }
    };
  }
  if (typeof gap === 'number') {
    return {
      rowGap: {
        value: gap,
        unit: 'px'
      },
      columnGap: {
        value: gap,
        unit: 'px'
      }
    };
  }
  var splitGap = gap.split(' ');
  // If the array has more than two values, then return 0px.
  if (splitGap.length > 2) {
    return {
      rowGap: {
        value: 0,
        unit: 'px'
      },
      columnGap: {
        value: 0,
        unit: 'px'
      }
    };
  }
  // If the array has two values, then parse each one.
  if (splitGap.length === 2) {
    return {
      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),
      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))
    };
  }
  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.
  var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));
  return {
    rowGap: calculatedGap,
    columnGap: calculatedGap
  };
};
var parsePadding = function (padding, theme) {
  if (padding === undefined || typeof padding === 'number' || padding === '') {
    return padding;
  }
  var paddingValues = padding.split(' ');
  if (paddingValues.length < 2) {
    return _getThemedSpacing(padding, theme);
  }
  return paddingValues.reduce(function (padding1, padding2) {
    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);
  });
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3rXZo":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7IQ0G":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsTextIndex = require('./components/Text/index');
_parcelHelpers.exportAll(_componentsTextIndex, exports);

},{"./components/Text/index":"1MjxB","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1MjxB":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Text = require('./Text');
_parcelHelpers.exportAll(_Text, exports);
var _TextTypes = require('./Text.types');
_parcelHelpers.exportAll(_TextTypes, exports);
var _TextView = require('./Text.view');
_parcelHelpers.exportAll(_TextView, exports);
var _TextStyles = require('./Text.styles');
_parcelHelpers.exportAll(_TextStyles, exports);

},{"./Text":"6goNx","./Text.types":"4S4QM","./Text.view":"7fehT","./Text.styles":"6TzLa","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6goNx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Text", function () {
  return Text;
});
var _fluentuiFoundationLegacy = require('@fluentui/foundation-legacy');
var _TextView = require('./Text.view');
var _TextStyles = require('./Text.styles');
var Text = _fluentuiFoundationLegacy.createComponent(_TextView.TextView, {
  displayName: 'Text',
  styles: _TextStyles.TextStyles
});
exports.default = Text;

},{"@fluentui/foundation-legacy":"6Cchx","./Text.view":"7fehT","./Text.styles":"6TzLa","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7fehT":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "TextView", function () {
  return TextView;
});
var _tslib = require("tslib");
var _fluentuiFoundationLegacy = require('@fluentui/foundation-legacy');
var _Utilities = require('../../Utilities');
var TextView = function (props) {
  // eslint-disable-next-line eqeqeq
  if (props.children == null) {
    return null;
  }
  var block = props.block, className = props.className, _a = props.as, RootType = _a === void 0 ? 'span' : _a, variant = props.variant, nowrap = props.nowrap, rest = _tslib.__rest(props, ["block", "className", "as", "variant", "nowrap"]);
  var Slots = _fluentuiFoundationLegacy.getSlots(props, {
    root: RootType
  });
  return _fluentuiFoundationLegacy.withSlots(Slots.root, _tslib.__assign({}, _Utilities.getNativeProps(rest, _Utilities.htmlElementProperties)));
};

},{"tslib":"6ZIET","@fluentui/foundation-legacy":"6Cchx","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6TzLa":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "TextStyles", function () {
  return TextStyles;
});
var TextStyles = function (props, theme) {
  var as = props.as, className = props.className, block = props.block, nowrap = props.nowrap, variant = props.variant;
  var fonts = theme.fonts, semanticColors = theme.semanticColors;
  var variantObject = fonts[variant || 'medium'];
  return {
    root: [variantObject, {
      color: variantObject.color || semanticColors.bodyText,
      display: block ? as === 'td' ? 'table-cell' : 'block' : 'inline',
      mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,
      webkitFontSmoothing: variantObject.WebkitFontSmoothing
    }, nowrap && ({
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    }), className]
  };
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4S4QM":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"Q8h6l":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
  if ("development" === 'test') {
    return function (args) {
      func.call(null, args);
    };
  } else {
    var timeout = undefined;
    return function (args) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        timeout = undefined;
        func.call(null, args);
      }, delay);
    };
  }
}
var enqueueUpdate = debounce(function () {
  Refresh.performReactRefresh();
}, 30);
// Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function (module) {
  window.$RefreshReg$ = function (type, id) {
    Refresh.register(type, module.id + ' ' + id);
  };
  window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function (module) {
  if (isReactRefreshBoundary(module.exports)) {
    registerExportsForReactRefresh(module);
    if (module.hot) {
      module.hot.dispose(function (data) {
        if (Refresh.hasUnrecoverableErrors()) {
          window.location.reload();
        }
        data.prevExports = module.exports;
      });
      module.hot.accept(function (getParents) {
        var prevExports = module.hot.data.prevExports;
        var nextExports = module.exports;
        // Since we just executed the code for it, it's possible
        // that the new exports make it ineligible for being a boundary.
        var isNoLongerABoundary = !isReactRefreshBoundary(nextExports);
        // It can also become ineligible if its exports are incompatible
        // with the previous exports.
        // For example, if you add/remove/change exports, we'll want
        // to re-execute the importing modules, and force those components
        // to re-render. Similarly, if you convert a class component
        // to a function, we want to invalidate the boundary.
        var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
        if (isNoLongerABoundary || didInvalidate) {
          // We'll be conservative. The only case in which we won't do a full
          // reload is if all parent modules are also refresh boundaries.
          // In that case we'll add them to the current queue.
          var parents = getParents();
          if (parents.length === 0) {
            // Looks like we bubbled to the root. Can't recover from that.
            window.location.reload();
            return;
          }
          return parents;
        }
        enqueueUpdate();
      });
    }
  }
};
function isReactRefreshBoundary(exports) {
  if (Refresh.isLikelyComponentType(exports)) {
    return true;
  }
  if (exports == null || typeof exports !== 'object') {
    // Exit if we can't iterate over exports.
    return false;
  }
  var hasExports = false;
  var areAllExportsComponents = true;
  let isESM = ('__esModule' in exports);
  for (var key in exports) {
    hasExports = true;
    if (key === '__esModule') {
      continue;
    }
    var desc = Object.getOwnPropertyDescriptor(exports, key);
    if (desc && desc.get && !isESM) {
      // Don't invoke getters for CJS as they may have side effects.
      return false;
    }
    var exportValue = exports[key];
    if (!Refresh.isLikelyComponentType(exportValue)) {
      areAllExportsComponents = false;
    }
  }
  return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
  var prevSignature = getRefreshBoundarySignature(prevExports);
  var nextSignature = getRefreshBoundarySignature(nextExports);
  if (prevSignature.length !== nextSignature.length) {
    return true;
  }
  for (var i = 0; i < nextSignature.length; i++) {
    if (prevSignature[i] !== nextSignature[i]) {
      return true;
    }
  }
  return false;
}
// When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
  var signature = [];
  signature.push(Refresh.getFamilyByType(exports));
  if (exports == null || typeof exports !== 'object') {
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
  }
  let isESM = ('__esModule' in exports);
  for (var key in exports) {
    if (key === '__esModule') {
      continue;
    }
    var desc = Object.getOwnPropertyDescriptor(exports, key);
    if (desc && desc.get && !isESM) {
      // Don't invoke getters for CJS as they may have side effects.
      continue;
    }
    var exportValue = exports[key];
    signature.push(key);
    signature.push(Refresh.getFamilyByType(exportValue));
  }
  return signature;
}
function registerExportsForReactRefresh(module) {
  var exports = module.exports, id = module.id;
  Refresh.register(exports, id + ' %exports%');
  if (exports == null || typeof exports !== 'object') {
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
  }
  let isESM = ('__esModule' in exports);
  for (var key in exports) {
    var desc = Object.getOwnPropertyDescriptor(exports, key);
    if (desc && desc.get && !isESM) {
      // Don't invoke getters for CJS as they may have side effects.
      continue;
    }
    var exportValue = exports[key];
    Refresh.register(exportValue, id + ' %exports% ' + key);
  }
}

},{"react-refresh/runtime":"6YDLR"}],"6YDLR":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/react-refresh-runtime.production.min.js');
} else {
  module.exports = require('./cjs/react-refresh-runtime.development.js');
}

},{"./cjs/react-refresh-runtime.development.js":"7cxcF"}],"7cxcF":[function(require,module,exports) {
/** @license React v0.9.0
* react-refresh-runtime.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap();
    // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap();
    // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = [];
    // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map();
    // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set();
    // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set();
    // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = // $FlowIssue
    typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
      if (signature.fullKey !== null) {
        return signature.fullKey;
      }
      var fullKey = signature.ownKey;
      var hooks;
      try {
        hooks = signature.getCustomHooks();
      } catch (err) {
        // This can happen in an edge case, e.g. if expression like Foo.useSomething
        // depends on Foo which is lazily initialized during rendering.
        // In that case just assume we'll have to remount.
        signature.forceReset = true;
        signature.fullKey = fullKey;
        return fullKey;
      }
      for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i];
        if (typeof hook !== 'function') {
          // Something's wrong. Assume we need to remount.
          signature.forceReset = true;
          signature.fullKey = fullKey;
          return fullKey;
        }
        var nestedHookSignature = allSignaturesByType.get(hook);
        if (nestedHookSignature === undefined) {
          // No signature means Hook wasn't in the source code, e.g. in a library.
          // We'll skip it because we can assume it won't change during this session.
          continue;
        }
        var nestedHookKey = computeFullKey(nestedHookSignature);
        if (nestedHookSignature.forceReset) {
          signature.forceReset = true;
        }
        fullKey += '\n---\n' + nestedHookKey;
      }
      signature.fullKey = fullKey;
      return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
      var prevSignature = allSignaturesByType.get(prevType);
      var nextSignature = allSignaturesByType.get(nextType);
      if (prevSignature === undefined && nextSignature === undefined) {
        return true;
      }
      if (prevSignature === undefined || nextSignature === undefined) {
        return false;
      }
      if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
        return false;
      }
      if (nextSignature.forceReset) {
        return false;
      }
      return true;
    }
    function isReactClass(type) {
      return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
      if (isReactClass(prevType) || isReactClass(nextType)) {
        return false;
      }
      if (haveEqualSignatures(prevType, nextType)) {
        return true;
      }
      return false;
    }
    function resolveFamily(type) {
      // Only check updated types to keep lookups fast.
      return updatedFamiliesByType.get(type);
    }
    // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
      var clone = new Map();
      map.forEach(function (value, key) {
        clone.set(key, value);
      });
      return clone;
    }
    function cloneSet(set) {
      var clone = new Set();
      set.forEach(function (value) {
        clone.add(value);
      });
      return clone;
    }
    function performReactRefresh() {
      if (pendingUpdates.length === 0) {
        return null;
      }
      if (isPerformingRefresh) {
        return null;
      }
      isPerformingRefresh = true;
      try {
        var staleFamilies = new Set();
        var updatedFamilies = new Set();
        var updates = pendingUpdates;
        pendingUpdates = [];
        updates.forEach(function (_ref) {
          var family = _ref[0], nextType = _ref[1];
          // Now that we got a real edit, we can create associations
          // that will be read by the React reconciler.
          var prevType = family.current;
          updatedFamiliesByType.set(prevType, family);
          updatedFamiliesByType.set(nextType, family);
          family.current = nextType;
          // Determine whether this should be a re-render or a re-mount.
          if (canPreserveStateBetween(prevType, nextType)) {
            updatedFamilies.add(family);
          } else {
            staleFamilies.add(family);
          }
        });
        // TODO: rename these fields to something more meaningful.
        var update = {
          updatedFamilies: updatedFamilies,
          // Families that will re-render preserving state
          staleFamilies: staleFamilies
        };
        helpersByRendererID.forEach(function (helpers) {
          // Even if there are no roots, set the handler on first update.
          // This ensures that if *new* roots are mounted, they'll use the resolve handler.
          helpers.setRefreshHandler(resolveFamily);
        });
        var didError = false;
        var firstError = null;
        // We snapshot maps and sets that are mutated during commits.
        // If we don't do this, there is a risk they will be mutated while
        // we iterate over them. For example, trying to recover a failed root
        // may cause another root to be added to the failed list -- an infinite loop.
        var failedRootsSnapshot = cloneSet(failedRoots);
        var mountedRootsSnapshot = cloneSet(mountedRoots);
        var helpersByRootSnapshot = cloneMap(helpersByRoot);
        failedRootsSnapshot.forEach(function (root) {
          var helpers = helpersByRootSnapshot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          if (!failedRoots.has(root)) {}
          if (rootElements === null) {
            return;
          }
          if (!rootElements.has(root)) {
            return;
          }
          var element = rootElements.get(root);
          try {
            helpers.scheduleRoot(root, element);
          } catch (err) {
            if (!didError) {
              didError = true;
              firstError = err;
            }
          }
        });
        mountedRootsSnapshot.forEach(function (root) {
          var helpers = helpersByRootSnapshot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          if (!mountedRoots.has(root)) {}
          try {
            helpers.scheduleRefresh(root, update);
          } catch (err) {
            if (!didError) {
              didError = true;
              firstError = err;
            }
          }
        });
        if (didError) {
          throw firstError;
        }
        return update;
      } finally {
        isPerformingRefresh = false;
      }
    }
    function register(type, id) {
      {
        if (type === null) {
          return;
        }
        if (typeof type !== 'function' && typeof type !== 'object') {
          return;
        }
        // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) {
          return;
        }
        // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
          family = {
            current: type
          };
          allFamiliesByID.set(id, family);
        } else {
          pendingUpdates.push([family, type]);
        }
        allFamiliesByType.set(type, family);
        // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              register(type.render, id + '$render');
              break;
            case REACT_MEMO_TYPE:
              register(type.type, id + '$type');
              break;
          }
        }
      }
    }
    function setSignature(type, key) {
      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
      {
        allSignaturesByType.set(type, {
          forceReset: forceReset,
          ownKey: key,
          fullKey: null,
          getCustomHooks: getCustomHooks || (function () {
            return [];
          })
        });
      }
    }
    // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
      {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) {
          computeFullKey(signature);
        }
      }
    }
    function getFamilyByID(id) {
      {
        return allFamiliesByID.get(id);
      }
    }
    function getFamilyByType(type) {
      {
        return allFamiliesByType.get(type);
      }
    }
    function findAffectedHostInstances(families) {
      {
        var affectedInstances = new Set();
        mountedRoots.forEach(function (root) {
          var helpers = helpersByRoot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
          instancesForRoot.forEach(function (inst) {
            affectedInstances.add(inst);
          });
        });
        return affectedInstances;
      }
    }
    function injectIntoGlobalHook(globalObject) {
      {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
          // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
          // Note that in this case it's important that renderer code runs *after* this method call.
          // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
          var nextID = 0;
          globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
            renderers: new Map(),
            supportsFiber: true,
            inject: function (injected) {
              return nextID++;
            },
            onScheduleFiberRoot: function (id, root, children) {},
            onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},
            onCommitFiberUnmount: function () {}
          };
        }
        // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function (injected) {
          var id = oldInject.apply(this, arguments);
          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
            // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
          }
          return id;
        };
        // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function (injected, id) {
          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
            // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
          }
        });
        // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || (function () {});
        hook.onScheduleFiberRoot = function (id, root, children) {
          if (!isPerformingRefresh) {
            // If it was intentionally scheduled, don't attempt to restore.
            // This includes intentionally scheduled unmounts.
            failedRoots.delete(root);
            if (rootElements !== null) {
              rootElements.set(root, children);
            }
          }
          return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
          var helpers = helpersByRendererID.get(id);
          if (helpers === undefined) {
            return;
          }
          helpersByRoot.set(root, helpers);
          var current = root.current;
          var alternate = current.alternate;
          // We need to determine whether this root has just (un)mounted.
          // This logic is copy-pasted from similar logic in the DevTools backend.
          // If this breaks with some refactoring, you'll want to update DevTools too.
          if (alternate !== null) {
            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
            var isMounted = current.memoizedState != null && current.memoizedState.element != null;
            if (!wasMounted && isMounted) {
              // Mount a new root.
              mountedRoots.add(root);
              failedRoots.delete(root);
            } else if (wasMounted && isMounted) ; else if (wasMounted && !isMounted) {
              // Unmount an existing root.
              mountedRoots.delete(root);
              if (didError) {
                // We'll remount it on future edits.
                failedRoots.add(root);
              } else {
                helpersByRoot.delete(root);
              }
            } else if (!wasMounted && !isMounted) {
              if (didError) {
                // We'll remount it on future edits.
                failedRoots.add(root);
              }
            }
          } else {
            // Mount a new root.
            mountedRoots.add(root);
          }
          return oldOnCommitFiberRoot.apply(this, arguments);
        };
      }
    }
    function hasUnrecoverableErrors() {
      // TODO: delete this after removing dependency in RN.
      return false;
    }
    // Exposed for testing.
    function _getMountedRootCount() {
      {
        return mountedRoots.size;
      }
    }
    // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    // 
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    // 
    // function Hello() {
    // const [foo, setFoo] = useState(0);
    // const value = useCustomHook();
    // _s(); /* Second call triggers collecting the custom Hook list.
    // * This doesn't happen during the module evaluation because we
    // * don't want to change the module order with inline requires.
    // * Next calls are noops. */
    // return <h1>Hi</h1>;
    // }
    // 
    // /* First call specifies the signature: */
    // _s(
    // Hello,
    // 'useState{[foo, setFoo]}(0)',
    // () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
      {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function (type, key, forceReset, getCustomHooks) {
          switch (status) {
            case 'needsSignature':
              if (type !== undefined) {
                // If we received an argument, this is the initial registration call.
                savedType = type;
                hasCustomHooks = typeof getCustomHooks === 'function';
                setSignature(type, key, forceReset, getCustomHooks);
                // The next call we expect is from inside a function, to fill in the custom Hooks.
                status = 'needsCustomHooks';
              }
              break;
            case 'needsCustomHooks':
              if (hasCustomHooks) {
                collectCustomHooksForSignature(savedType);
              }
              status = 'resolved';
              break;
          }
          return type;
        };
      }
    }
    function isLikelyComponentType(type) {
      {
        switch (typeof type) {
          case 'function':
            {
              // First, deal with classes.
              if (type.prototype != null) {
                if (type.prototype.isReactComponent) {
                  // React class.
                  return true;
                }
                var ownNames = Object.getOwnPropertyNames(type.prototype);
                if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                  // This looks like a class.
                  return false;
                }
                // eslint-disable-next-line no-proto
                if (type.prototype.__proto__ !== Object.prototype) {
                  // It has a superclass.
                  return false;
                }
              }
              // For plain functions and arrows, use name as a heuristic.
              var name = type.name || type.displayName;
              return typeof name === 'string' && (/^[A-Z]/).test(name);
            }
          case 'object':
            {
              if (type != null) {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_MEMO_TYPE:
                    // Definitely React components.
                    return true;
                  default:
                    return false;
                }
              }
              return false;
            }
          default:
            {
              return false;
            }
        }
      }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
  })();
}

},{}],"7dAS5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "scopes", function () {
  return scopes;
});
_parcelHelpers.export(exports, "prepareWebApiRequest", function () {
  return prepareWebApiRequest;
});
_parcelHelpers.export(exports, "DependentComponentType", function () {
  return DependentComponentType;
});
_parcelHelpers.export(exports, "EntityFiltersEnum", function () {
  return EntityFiltersEnum;
});
var _xrmWebapiClient = require('xrm-webapi-client');
var _xrmWebapiClientDefault = _parcelHelpers.interopDefault(_xrmWebapiClient);
const POWERPLATFORM_ENV_URL = 'https://bsc-labs.crm.dynamics.com';
const scopes = [`${POWERPLATFORM_ENV_URL}/user_impersonation`];
const prepareWebApiRequest = auth => {
  let client = _xrmWebapiClientDefault.default;
  client.ApiVersion = '9.1';
  client.Token = auth.accessToken;
  client.ClientUrl = POWERPLATFORM_ENV_URL;
};
var DependentComponentType;
(function (DependentComponentType) {
  DependentComponentType[DependentComponentType["Entity"] = 1] = "Entity";
  DependentComponentType[DependentComponentType["Attribute"] = 2] = "Attribute";
  DependentComponentType[DependentComponentType["Relationship"] = 3] = "Relationship";
  DependentComponentType[DependentComponentType["Attribute Picklist Value"] = 4] = "Attribute Picklist Value";
  DependentComponentType[DependentComponentType["Attribute Lookup Value"] = 5] = "Attribute Lookup Value";
  DependentComponentType[DependentComponentType["View Attribute"] = 6] = "View Attribute";
  DependentComponentType[DependentComponentType["Localized Label"] = 7] = "Localized Label";
  DependentComponentType[DependentComponentType["Relationship Extra Condition"] = 8] = "Relationship Extra Condition";
  DependentComponentType[DependentComponentType["Option Set"] = 9] = "Option Set";
  DependentComponentType[DependentComponentType["Entity Relationship"] = 10] = "Entity Relationship";
  DependentComponentType[DependentComponentType["Entity Relationship Role"] = 11] = "Entity Relationship Role";
  DependentComponentType[DependentComponentType["Entity Relationship Relationships"] = 12] = "Entity Relationship Relationships";
  DependentComponentType[DependentComponentType["Managed Property"] = 13] = "Managed Property";
  DependentComponentType[DependentComponentType["Entity Key"] = 14] = "Entity Key";
  DependentComponentType[DependentComponentType["Privilege"] = 16] = "Privilege";
  DependentComponentType[DependentComponentType["PrivilegeObjectTypeCode"] = 17] = "PrivilegeObjectTypeCode";
  DependentComponentType[DependentComponentType["Role"] = 20] = "Role";
  DependentComponentType[DependentComponentType["Role Privilege"] = 21] = "Role Privilege";
  DependentComponentType[DependentComponentType["Display String"] = 22] = "Display String";
  DependentComponentType[DependentComponentType["Display String Map"] = 23] = "Display String Map";
  DependentComponentType[DependentComponentType["Form"] = 24] = "Form";
  DependentComponentType[DependentComponentType["Organization"] = 25] = "Organization";
  DependentComponentType[DependentComponentType["Saved Query"] = 26] = "Saved Query";
  DependentComponentType[DependentComponentType["Workflow"] = 29] = "Workflow";
  DependentComponentType[DependentComponentType["Report"] = 31] = "Report";
  DependentComponentType[DependentComponentType["Report Entity"] = 32] = "Report Entity";
  DependentComponentType[DependentComponentType["Report Category"] = 33] = "Report Category";
  DependentComponentType[DependentComponentType["Report Visibility"] = 34] = "Report Visibility";
  DependentComponentType[DependentComponentType["Attachment"] = 35] = "Attachment";
  DependentComponentType[DependentComponentType["Email Template"] = 36] = "Email Template";
  DependentComponentType[DependentComponentType["Contract Template"] = 37] = "Contract Template";
  DependentComponentType[DependentComponentType["KB Article Template"] = 38] = "KB Article Template";
  DependentComponentType[DependentComponentType["Mail Merge Template"] = 39] = "Mail Merge Template";
  DependentComponentType[DependentComponentType["Duplicate Rule"] = 44] = "Duplicate Rule";
  DependentComponentType[DependentComponentType["Duplicate Rule Condition"] = 45] = "Duplicate Rule Condition";
  DependentComponentType[DependentComponentType["Entity Map"] = 46] = "Entity Map";
  DependentComponentType[DependentComponentType["Attribute Map"] = 47] = "Attribute Map";
  DependentComponentType[DependentComponentType["Ribbon Command"] = 48] = "Ribbon Command";
  DependentComponentType[DependentComponentType["Ribbon Context Group"] = 49] = "Ribbon Context Group";
  DependentComponentType[DependentComponentType["Ribbon Customization"] = 50] = "Ribbon Customization";
  DependentComponentType[DependentComponentType["Ribbon Rule"] = 52] = "Ribbon Rule";
  DependentComponentType[DependentComponentType["Ribbon Tab To Command Map"] = 53] = "Ribbon Tab To Command Map";
  DependentComponentType[DependentComponentType["Ribbon Diff"] = 55] = "Ribbon Diff";
  DependentComponentType[DependentComponentType["Saved Query Visualization"] = 59] = "Saved Query Visualization";
  DependentComponentType[DependentComponentType["System Form"] = 60] = "System Form";
  DependentComponentType[DependentComponentType["Web Resource"] = 61] = "Web Resource";
  DependentComponentType[DependentComponentType["Site Map"] = 62] = "Site Map";
  DependentComponentType[DependentComponentType["Connection Role"] = 63] = "Connection Role";
  DependentComponentType[DependentComponentType["Complex Control"] = 64] = "Complex Control";
  DependentComponentType[DependentComponentType["Field Security Profile"] = 70] = "Field Security Profile";
  DependentComponentType[DependentComponentType["Field Permission"] = 71] = "Field Permission";
  DependentComponentType[DependentComponentType["Plugin Type"] = 90] = "Plugin Type";
  DependentComponentType[DependentComponentType["Plugin Assembly"] = 91] = "Plugin Assembly";
  DependentComponentType[DependentComponentType["SDK Message Processing Step"] = 92] = "SDK Message Processing Step";
  DependentComponentType[DependentComponentType["SDK Message Processing Step Image"] = 93] = "SDK Message Processing Step Image";
  DependentComponentType[DependentComponentType["Service Endpoint"] = 95] = "Service Endpoint";
  DependentComponentType[DependentComponentType["Routing Rule"] = 150] = "Routing Rule";
  DependentComponentType[DependentComponentType["Routing Rule Item"] = 151] = "Routing Rule Item";
  DependentComponentType[DependentComponentType["SLA"] = 152] = "SLA";
  DependentComponentType[DependentComponentType["SLA Item"] = 153] = "SLA Item";
  DependentComponentType[DependentComponentType["Convert Rule"] = 154] = "Convert Rule";
  DependentComponentType[DependentComponentType["Convert Rule Item"] = 155] = "Convert Rule Item";
  DependentComponentType[DependentComponentType["Hierarchy Rule"] = 65] = "Hierarchy Rule";
  DependentComponentType[DependentComponentType["Mobile Offline Profile"] = 161] = "Mobile Offline Profile";
  DependentComponentType[DependentComponentType["Mobile Offline Profile Item"] = 162] = "Mobile Offline Profile Item";
  DependentComponentType[DependentComponentType["Similarity Rule"] = 165] = "Similarity Rule";
  DependentComponentType[DependentComponentType["Custom Control"] = 66] = "Custom Control";
  DependentComponentType[DependentComponentType["Custom Control Default Config"] = 68] = "Custom Control Default Config";
  DependentComponentType[DependentComponentType["Data Source Mapping"] = 166] = "Data Source Mapping";
  DependentComponentType[DependentComponentType["SDKMessage"] = 201] = "SDKMessage";
  DependentComponentType[DependentComponentType["SDKMessageFilter"] = 202] = "SDKMessageFilter";
  DependentComponentType[DependentComponentType["SdkMessagePair"] = 203] = "SdkMessagePair";
  DependentComponentType[DependentComponentType["SdkMessageRequest"] = 204] = "SdkMessageRequest";
  DependentComponentType[DependentComponentType["SdkMessageRequestField"] = 205] = "SdkMessageRequestField";
  DependentComponentType[DependentComponentType["SdkMessageResponse"] = 206] = "SdkMessageResponse";
  DependentComponentType[DependentComponentType["SdkMessageResponseField"] = 207] = "SdkMessageResponseField";
  DependentComponentType[DependentComponentType["WebWizard"] = 210] = "WebWizard";
  DependentComponentType[DependentComponentType["Index"] = 18] = "Index";
  DependentComponentType[DependentComponentType["Import Map"] = 208] = "Import Map";
  DependentComponentType[DependentComponentType["Canvas App"] = 300] = "Canvas App";
  DependentComponentType[DependentComponentType["Connector1"] = 371] = "Connector1";
  DependentComponentType[DependentComponentType["Connector2"] = 372] = "Connector2";
  DependentComponentType[DependentComponentType["Environment Variable Definition"] = 380] = "Environment Variable Definition";
  DependentComponentType[DependentComponentType["Environment Variable Value"] = 381] = "Environment Variable Value";
  DependentComponentType[DependentComponentType["AI Project Type"] = 400] = "AI Project Type";
  DependentComponentType[DependentComponentType["AI Project"] = 401] = "AI Project";
  DependentComponentType[DependentComponentType["AI Configuration"] = 402] = "AI Configuration";
  DependentComponentType[DependentComponentType["Entity Analytics Configuration"] = 430] = "Entity Analytics Configuration";
  DependentComponentType[DependentComponentType["Attribute Image Configuration"] = 431] = "Attribute Image Configuration";
  DependentComponentType[DependentComponentType["Entity Image Configuration"] = 432] = "Entity Image Configuration";
})(DependentComponentType || (DependentComponentType = {}));
const EntityFiltersEnum = {
  Entity: 'Entity',
  Attributes: 'Attributes',
  Privileges: 'Privileges',
  Relationships: 'Relationships',
  All: 'All'
};
const retrieveDependenciesForDeleteRequest = params => _xrmWebapiClientDefault.default.Execute(_xrmWebapiClientDefault.default.Requests.RetrieveDependenciesForDeleteRequest.with({
  urlParams: params
}));

},{"xrm-webapi-client":"3LRkV","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3LRkV":[function(require,module,exports) {
var define;
var global = arguments[3];
(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    g.WebApiClient = f();
  }
})(function () {
  var define, module, exports;
  return (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;
          if (!u && a) return a(o, !0);
          if (i) return i(o, !0);
          var f = new Error("Cannot find module '" + o + "'");
          throw (f.code = "MODULE_NOT_FOUND", f);
        }
        var l = n[o] = {
          exports: {}
        };
        t[o][0].call(l.exports, function (e) {
          var n = t[o][1][e];
          return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
      }
      return n[o].exports;
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
  })({
    1: [function (require, module, exports) {
      (function (process, global) {
        /*@preserve
        * The MIT License (MIT)
        *
        * Copyright (c) 2013-2017 Petka Antonov
        *
        * Permission is hereby granted, free of charge, to any person obtaining a copy
        * of this software and associated documentation files (the "Software"), to deal
        * in the Software without restriction, including without limitation the rights
        * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        * copies of the Software, and to permit persons to whom the Software is
        * furnished to do so, subject to the following conditions:
        *
        * The above copyright notice and this permission notice shall be included in
        * all copies or substantial portions of the Software.
        *
        * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
        * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        * THE SOFTWARE.
        *
        */
        /**
        * bluebird build version 3.5.1
        * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
        */
        !(function (e) {
          if ("object" == typeof exports && "undefined" != typeof module) module.exports = e(); else if ("function" == typeof define && define.amd) define([], e); else {
            var f;
            ("undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.Promise = e());
          }
        })(function () {
          var define, module, exports;
          return (function e(t, n, r) {
            function s(o, u) {
              if (!n[o]) {
                if (!t[o]) {
                  var a = typeof _dereq_ == "function" && _dereq_;
                  if (!u && a) return a(o, !0);
                  if (i) return i(o, !0);
                  var f = new Error("Cannot find module '" + o + "'");
                  throw (f.code = "MODULE_NOT_FOUND", f);
                }
                var l = n[o] = {
                  exports: {}
                };
                t[o][0].call(l.exports, function (e) {
                  var n = t[o][1][e];
                  return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
              }
              return n[o].exports;
            }
            var i = typeof _dereq_ == "function" && _dereq_;
            for (var o = 0; o < r.length; o++) s(r[o]);
            return s;
          })({
            1: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise) {
                var SomePromiseArray = Promise._SomePromiseArray;
                function any(promises) {
                  var ret = new SomePromiseArray(promises);
                  var promise = ret.promise();
                  ret.setHowMany(1);
                  ret.setUnwrap();
                  ret.init();
                  return promise;
                }
                Promise.any = function (promises) {
                  return any(promises);
                };
                Promise.prototype.any = function () {
                  return any(this);
                };
              };
            }, {}],
            2: [function (_dereq_, module, exports) {
              "use strict";
              var firstLineError;
              try {
                throw new Error();
              } catch (e) {
                firstLineError = e;
              }
              var schedule = _dereq_("./schedule");
              var Queue = _dereq_("./queue");
              var util = _dereq_("./util");
              function Async() {
                this._customScheduler = false;
                this._isTickUsed = false;
                this._lateQueue = new Queue(16);
                this._normalQueue = new Queue(16);
                this._haveDrainedQueues = false;
                this._trampolineEnabled = true;
                var self = this;
                this.drainQueues = function () {
                  self._drainQueues();
                };
                this._schedule = schedule;
              }
              Async.prototype.setScheduler = function (fn) {
                var prev = this._schedule;
                this._schedule = fn;
                this._customScheduler = true;
                return prev;
              };
              Async.prototype.hasCustomScheduler = function () {
                return this._customScheduler;
              };
              Async.prototype.enableTrampoline = function () {
                this._trampolineEnabled = true;
              };
              Async.prototype.disableTrampolineIfNecessary = function () {
                if (util.hasDevTools) {
                  this._trampolineEnabled = false;
                }
              };
              Async.prototype.haveItemsQueued = function () {
                return this._isTickUsed || this._haveDrainedQueues;
              };
              Async.prototype.fatalError = function (e, isNode) {
                if (isNode) {
                  process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) + "\n");
                  process.exit(2);
                } else {
                  this.throwLater(e);
                }
              };
              Async.prototype.throwLater = function (fn, arg) {
                if (arguments.length === 1) {
                  arg = fn;
                  fn = function () {
                    throw arg;
                  };
                }
                if (typeof setTimeout !== "undefined") {
                  setTimeout(function () {
                    fn(arg);
                  }, 0);
                } else try {
                  this._schedule(function () {
                    fn(arg);
                  });
                } catch (e) {
                  throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                }
              };
              function AsyncInvokeLater(fn, receiver, arg) {
                this._lateQueue.push(fn, receiver, arg);
                this._queueTick();
              }
              function AsyncInvoke(fn, receiver, arg) {
                this._normalQueue.push(fn, receiver, arg);
                this._queueTick();
              }
              function AsyncSettlePromises(promise) {
                this._normalQueue._pushOne(promise);
                this._queueTick();
              }
              if (!util.hasDevTools) {
                Async.prototype.invokeLater = AsyncInvokeLater;
                Async.prototype.invoke = AsyncInvoke;
                Async.prototype.settlePromises = AsyncSettlePromises;
              } else {
                Async.prototype.invokeLater = function (fn, receiver, arg) {
                  if (this._trampolineEnabled) {
                    AsyncInvokeLater.call(this, fn, receiver, arg);
                  } else {
                    this._schedule(function () {
                      setTimeout(function () {
                        fn.call(receiver, arg);
                      }, 100);
                    });
                  }
                };
                Async.prototype.invoke = function (fn, receiver, arg) {
                  if (this._trampolineEnabled) {
                    AsyncInvoke.call(this, fn, receiver, arg);
                  } else {
                    this._schedule(function () {
                      fn.call(receiver, arg);
                    });
                  }
                };
                Async.prototype.settlePromises = function (promise) {
                  if (this._trampolineEnabled) {
                    AsyncSettlePromises.call(this, promise);
                  } else {
                    this._schedule(function () {
                      promise._settlePromises();
                    });
                  }
                };
              }
              Async.prototype._drainQueue = function (queue) {
                while (queue.length() > 0) {
                  var fn = queue.shift();
                  if (typeof fn !== "function") {
                    fn._settlePromises();
                    continue;
                  }
                  var receiver = queue.shift();
                  var arg = queue.shift();
                  fn.call(receiver, arg);
                }
              };
              Async.prototype._drainQueues = function () {
                this._drainQueue(this._normalQueue);
                this._reset();
                this._haveDrainedQueues = true;
                this._drainQueue(this._lateQueue);
              };
              Async.prototype._queueTick = function () {
                if (!this._isTickUsed) {
                  this._isTickUsed = true;
                  this._schedule(this.drainQueues);
                }
              };
              Async.prototype._reset = function () {
                this._isTickUsed = false;
              };
              module.exports = Async;
              module.exports.firstLineError = firstLineError;
            }, {
              "./queue": 26,
              "./schedule": 29,
              "./util": 36
            }],
            3: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL, tryConvertToPromise, debug) {
                var calledBind = false;
                var rejectThis = function (_, e) {
                  this._reject(e);
                };
                var targetRejected = function (e, context) {
                  context.promiseRejectionQueued = true;
                  context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
                };
                var bindingResolved = function (thisArg, context) {
                  if ((this._bitField & 50397184) === 0) {
                    this._resolveCallback(context.target);
                  }
                };
                var bindingRejected = function (e, context) {
                  if (!context.promiseRejectionQueued) this._reject(e);
                };
                Promise.prototype.bind = function (thisArg) {
                  if (!calledBind) {
                    calledBind = true;
                    Promise.prototype._propagateFrom = debug.propagateFromFunction();
                    Promise.prototype._boundValue = debug.boundValueFunction();
                  }
                  var maybePromise = tryConvertToPromise(thisArg);
                  var ret = new Promise(INTERNAL);
                  ret._propagateFrom(this, 1);
                  var target = this._target();
                  ret._setBoundTo(maybePromise);
                  if (maybePromise instanceof Promise) {
                    var context = {
                      promiseRejectionQueued: false,
                      promise: ret,
                      target: target,
                      bindingPromise: maybePromise
                    };
                    target._then(INTERNAL, targetRejected, undefined, ret, context);
                    maybePromise._then(bindingResolved, bindingRejected, undefined, ret, context);
                    ret._setOnCancel(maybePromise);
                  } else {
                    ret._resolveCallback(target);
                  }
                  return ret;
                };
                Promise.prototype._setBoundTo = function (obj) {
                  if (obj !== undefined) {
                    this._bitField = this._bitField | 2097152;
                    this._boundTo = obj;
                  } else {
                    this._bitField = this._bitField & ~2097152;
                  }
                };
                Promise.prototype._isBound = function () {
                  return (this._bitField & 2097152) === 2097152;
                };
                Promise.bind = function (thisArg, value) {
                  return Promise.resolve(value).bind(thisArg);
                };
              };
            }, {}],
            4: [function (_dereq_, module, exports) {
              "use strict";
              var old;
              if (typeof Promise !== "undefined") old = Promise;
              function noConflict() {
                try {
                  if (Promise === bluebird) Promise = old;
                } catch (e) {}
                return bluebird;
              }
              var bluebird = _dereq_("./promise")();
              bluebird.noConflict = noConflict;
              module.exports = bluebird;
            }, {
              "./promise": 22
            }],
            5: [function (_dereq_, module, exports) {
              "use strict";
              var cr = Object.create;
              if (cr) {
                var callerCache = cr(null);
                var getterCache = cr(null);
                callerCache[" size"] = getterCache[" size"] = 0;
              }
              module.exports = function (Promise) {
                var util = _dereq_("./util");
                var canEvaluate = util.canEvaluate;
                var isIdentifier = util.isIdentifier;
                var getMethodCaller;
                var getGetter;
                if (!true) {
                  var makeMethodCaller = function (methodName) {
                    return new Function("ensureMethod", ("                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ").replace(/methodName/g, methodName))(ensureMethod);
                  };
                  var makeGetter = function (propertyName) {
                    return new Function("obj", ("                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ").replace("propertyName", propertyName));
                  };
                  var getCompiled = function (name, compiler, cache) {
                    var ret = cache[name];
                    if (typeof ret !== "function") {
                      if (!isIdentifier(name)) {
                        return null;
                      }
                      ret = compiler(name);
                      cache[name] = ret;
                      cache[" size"]++;
                      if (cache[" size"] > 512) {
                        var keys = Object.keys(cache);
                        for (var i = 0; i < 256; ++i) delete cache[keys[i]];
                        cache[" size"] = keys.length - 256;
                      }
                    }
                    return ret;
                  };
                  getMethodCaller = function (name) {
                    return getCompiled(name, makeMethodCaller, callerCache);
                  };
                  getGetter = function (name) {
                    return getCompiled(name, makeGetter, getterCache);
                  };
                }
                function ensureMethod(obj, methodName) {
                  var fn;
                  if (obj != null) fn = obj[methodName];
                  if (typeof fn !== "function") {
                    var message = "Object " + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
                    throw new Promise.TypeError(message);
                  }
                  return fn;
                }
                function caller(obj) {
                  var methodName = this.pop();
                  var fn = ensureMethod(obj, methodName);
                  return fn.apply(obj, this);
                }
                Promise.prototype.call = function (methodName) {
                  var args = [].slice.call(arguments, 1);
                  ;
                  if (!true) {
                    if (canEvaluate) {
                      var maybeCaller = getMethodCaller(methodName);
                      if (maybeCaller !== null) {
                        return this._then(maybeCaller, undefined, undefined, args, undefined);
                      }
                    }
                  }
                  args.push(methodName);
                  return this._then(caller, undefined, undefined, args, undefined);
                };
                function namedGetter(obj) {
                  return obj[this];
                }
                function indexedGetter(obj) {
                  var index = +this;
                  if (index < 0) index = Math.max(0, index + obj.length);
                  return obj[index];
                }
                Promise.prototype.get = function (propertyName) {
                  var isIndex = typeof propertyName === "number";
                  var getter;
                  if (!isIndex) {
                    if (canEvaluate) {
                      var maybeGetter = getGetter(propertyName);
                      getter = maybeGetter !== null ? maybeGetter : namedGetter;
                    } else {
                      getter = namedGetter;
                    }
                  } else {
                    getter = indexedGetter;
                  }
                  return this._then(getter, undefined, undefined, propertyName, undefined);
                };
              };
            }, {
              "./util": 36
            }],
            6: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, apiRejection, debug) {
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                var async = Promise._async;
                Promise.prototype["break"] = Promise.prototype.cancel = function () {
                  if (!debug.cancellation()) return this._warn("cancellation is disabled");
                  var promise = this;
                  var child = promise;
                  while (promise._isCancellable()) {
                    if (!promise._cancelBy(child)) {
                      if (child._isFollowing()) {
                        child._followee().cancel();
                      } else {
                        child._cancelBranched();
                      }
                      break;
                    }
                    var parent = promise._cancellationParent;
                    if (parent == null || !parent._isCancellable()) {
                      if (promise._isFollowing()) {
                        promise._followee().cancel();
                      } else {
                        promise._cancelBranched();
                      }
                      break;
                    } else {
                      if (promise._isFollowing()) promise._followee().cancel();
                      promise._setWillBeCancelled();
                      child = promise;
                      promise = parent;
                    }
                  }
                };
                Promise.prototype._branchHasCancelled = function () {
                  this._branchesRemainingToCancel--;
                };
                Promise.prototype._enoughBranchesHaveCancelled = function () {
                  return this._branchesRemainingToCancel === undefined || this._branchesRemainingToCancel <= 0;
                };
                Promise.prototype._cancelBy = function (canceller) {
                  if (canceller === this) {
                    this._branchesRemainingToCancel = 0;
                    this._invokeOnCancel();
                    return true;
                  } else {
                    this._branchHasCancelled();
                    if (this._enoughBranchesHaveCancelled()) {
                      this._invokeOnCancel();
                      return true;
                    }
                  }
                  return false;
                };
                Promise.prototype._cancelBranched = function () {
                  if (this._enoughBranchesHaveCancelled()) {
                    this._cancel();
                  }
                };
                Promise.prototype._cancel = function () {
                  if (!this._isCancellable()) return;
                  this._setCancelled();
                  async.invoke(this._cancelPromises, this, undefined);
                };
                Promise.prototype._cancelPromises = function () {
                  if (this._length() > 0) this._settlePromises();
                };
                Promise.prototype._unsetOnCancel = function () {
                  this._onCancelField = undefined;
                };
                Promise.prototype._isCancellable = function () {
                  return this.isPending() && !this._isCancelled();
                };
                Promise.prototype.isCancellable = function () {
                  return this.isPending() && !this.isCancelled();
                };
                Promise.prototype._doInvokeOnCancel = function (onCancelCallback, internalOnly) {
                  if (util.isArray(onCancelCallback)) {
                    for (var i = 0; i < onCancelCallback.length; ++i) {
                      this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
                    }
                  } else if (onCancelCallback !== undefined) {
                    if (typeof onCancelCallback === "function") {
                      if (!internalOnly) {
                        var e = tryCatch(onCancelCallback).call(this._boundValue());
                        if (e === errorObj) {
                          this._attachExtraTrace(e.e);
                          async.throwLater(e.e);
                        }
                      }
                    } else {
                      onCancelCallback._resultCancelled(this);
                    }
                  }
                };
                Promise.prototype._invokeOnCancel = function () {
                  var onCancelCallback = this._onCancel();
                  this._unsetOnCancel();
                  async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
                };
                Promise.prototype._invokeInternalOnCancel = function () {
                  if (this._isCancellable()) {
                    this._doInvokeOnCancel(this._onCancel(), true);
                    this._unsetOnCancel();
                  }
                };
                Promise.prototype._resultCancelled = function () {
                  this.cancel();
                };
              };
            }, {
              "./util": 36
            }],
            7: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (NEXT_FILTER) {
                var util = _dereq_("./util");
                var getKeys = _dereq_("./es5").keys;
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                function catchFilter(instances, cb, promise) {
                  return function (e) {
                    var boundTo = promise._boundValue();
                    predicateLoop: for (var i = 0; i < instances.length; ++i) {
                      var item = instances[i];
                      if (item === Error || item != null && item.prototype instanceof Error) {
                        if (e instanceof item) {
                          return tryCatch(cb).call(boundTo, e);
                        }
                      } else if (typeof item === "function") {
                        var matchesPredicate = tryCatch(item).call(boundTo, e);
                        if (matchesPredicate === errorObj) {
                          return matchesPredicate;
                        } else if (matchesPredicate) {
                          return tryCatch(cb).call(boundTo, e);
                        }
                      } else if (util.isObject(e)) {
                        var keys = getKeys(item);
                        for (var j = 0; j < keys.length; ++j) {
                          var key = keys[j];
                          if (item[key] != e[key]) {
                            continue predicateLoop;
                          }
                        }
                        return tryCatch(cb).call(boundTo, e);
                      }
                    }
                    return NEXT_FILTER;
                  };
                }
                return catchFilter;
              };
            }, {
              "./es5": 13,
              "./util": 36
            }],
            8: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise) {
                var longStackTraces = false;
                var contextStack = [];
                Promise.prototype._promiseCreated = function () {};
                Promise.prototype._pushContext = function () {};
                Promise.prototype._popContext = function () {
                  return null;
                };
                Promise._peekContext = Promise.prototype._peekContext = function () {};
                function Context() {
                  this._trace = new Context.CapturedTrace(peekContext());
                }
                Context.prototype._pushContext = function () {
                  if (this._trace !== undefined) {
                    this._trace._promiseCreated = null;
                    contextStack.push(this._trace);
                  }
                };
                Context.prototype._popContext = function () {
                  if (this._trace !== undefined) {
                    var trace = contextStack.pop();
                    var ret = trace._promiseCreated;
                    trace._promiseCreated = null;
                    return ret;
                  }
                  return null;
                };
                function createContext() {
                  if (longStackTraces) return new Context();
                }
                function peekContext() {
                  var lastIndex = contextStack.length - 1;
                  if (lastIndex >= 0) {
                    return contextStack[lastIndex];
                  }
                  return undefined;
                }
                Context.CapturedTrace = null;
                Context.create = createContext;
                Context.deactivateLongStackTraces = function () {};
                Context.activateLongStackTraces = function () {
                  var Promise_pushContext = Promise.prototype._pushContext;
                  var Promise_popContext = Promise.prototype._popContext;
                  var Promise_PeekContext = Promise._peekContext;
                  var Promise_peekContext = Promise.prototype._peekContext;
                  var Promise_promiseCreated = Promise.prototype._promiseCreated;
                  Context.deactivateLongStackTraces = function () {
                    Promise.prototype._pushContext = Promise_pushContext;
                    Promise.prototype._popContext = Promise_popContext;
                    Promise._peekContext = Promise_PeekContext;
                    Promise.prototype._peekContext = Promise_peekContext;
                    Promise.prototype._promiseCreated = Promise_promiseCreated;
                    longStackTraces = false;
                  };
                  longStackTraces = true;
                  Promise.prototype._pushContext = Context.prototype._pushContext;
                  Promise.prototype._popContext = Context.prototype._popContext;
                  Promise._peekContext = Promise.prototype._peekContext = peekContext;
                  Promise.prototype._promiseCreated = function () {
                    var ctx = this._peekContext();
                    if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
                  };
                };
                return Context;
              };
            }, {}],
            9: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, Context) {
                var getDomain = Promise._getDomain;
                var async = Promise._async;
                var Warning = _dereq_("./errors").Warning;
                var util = _dereq_("./util");
                var canAttachTrace = util.canAttachTrace;
                var unhandledRejectionHandled;
                var possiblyUnhandledRejection;
                var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
                var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
                var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
                var stackFramePattern = null;
                var formatStack = null;
                var indentStackFrames = false;
                var printWarning;
                var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 && (true || util.env("BLUEBIRD_DEBUG") || util.env("NODE_ENV") === "development"));
                var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 && (debugging || util.env("BLUEBIRD_WARNINGS")));
                var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 && (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));
                var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 && (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
                Promise.prototype.suppressUnhandledRejections = function () {
                  var target = this._target();
                  target._bitField = target._bitField & ~1048576 | 524288;
                };
                Promise.prototype._ensurePossibleRejectionHandled = function () {
                  if ((this._bitField & 524288) !== 0) return;
                  this._setRejectionIsUnhandled();
                  var self = this;
                  setTimeout(function () {
                    self._notifyUnhandledRejection();
                  }, 1);
                };
                Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                  fireRejectionEvent("rejectionHandled", unhandledRejectionHandled, undefined, this);
                };
                Promise.prototype._setReturnedNonUndefined = function () {
                  this._bitField = this._bitField | 268435456;
                };
                Promise.prototype._returnedNonUndefined = function () {
                  return (this._bitField & 268435456) !== 0;
                };
                Promise.prototype._notifyUnhandledRejection = function () {
                  if (this._isRejectionUnhandled()) {
                    var reason = this._settledValue();
                    this._setUnhandledRejectionIsNotified();
                    fireRejectionEvent("unhandledRejection", possiblyUnhandledRejection, reason, this);
                  }
                };
                Promise.prototype._setUnhandledRejectionIsNotified = function () {
                  this._bitField = this._bitField | 262144;
                };
                Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                  this._bitField = this._bitField & ~262144;
                };
                Promise.prototype._isUnhandledRejectionNotified = function () {
                  return (this._bitField & 262144) > 0;
                };
                Promise.prototype._setRejectionIsUnhandled = function () {
                  this._bitField = this._bitField | 1048576;
                };
                Promise.prototype._unsetRejectionIsUnhandled = function () {
                  this._bitField = this._bitField & ~1048576;
                  if (this._isUnhandledRejectionNotified()) {
                    this._unsetUnhandledRejectionIsNotified();
                    this._notifyUnhandledRejectionIsHandled();
                  }
                };
                Promise.prototype._isRejectionUnhandled = function () {
                  return (this._bitField & 1048576) > 0;
                };
                Promise.prototype._warn = function (message, shouldUseOwnTrace, promise) {
                  return warn(message, shouldUseOwnTrace, promise || this);
                };
                Promise.onPossiblyUnhandledRejection = function (fn) {
                  var domain = getDomain();
                  possiblyUnhandledRejection = typeof fn === "function" ? domain === null ? fn : util.domainBind(domain, fn) : undefined;
                };
                Promise.onUnhandledRejectionHandled = function (fn) {
                  var domain = getDomain();
                  unhandledRejectionHandled = typeof fn === "function" ? domain === null ? fn : util.domainBind(domain, fn) : undefined;
                };
                var disableLongStackTraces = function () {};
                Promise.longStackTraces = function () {
                  if (async.haveItemsQueued() && !config.longStackTraces) {
                    throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  if (!config.longStackTraces && longStackTracesIsSupported()) {
                    var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
                    var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
                    config.longStackTraces = true;
                    disableLongStackTraces = function () {
                      if (async.haveItemsQueued() && !config.longStackTraces) {
                        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                      }
                      Promise.prototype._captureStackTrace = Promise_captureStackTrace;
                      Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
                      Context.deactivateLongStackTraces();
                      async.enableTrampoline();
                      config.longStackTraces = false;
                    };
                    Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
                    Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
                    Context.activateLongStackTraces();
                    async.disableTrampolineIfNecessary();
                  }
                };
                Promise.hasLongStackTraces = function () {
                  return config.longStackTraces && longStackTracesIsSupported();
                };
                var fireDomEvent = (function () {
                  try {
                    if (typeof CustomEvent === "function") {
                      var event = new CustomEvent("CustomEvent");
                      util.global.dispatchEvent(event);
                      return function (name, event) {
                        var domEvent = new CustomEvent(name.toLowerCase(), {
                          detail: event,
                          cancelable: true
                        });
                        return !util.global.dispatchEvent(domEvent);
                      };
                    } else if (typeof Event === "function") {
                      var event = new Event("CustomEvent");
                      util.global.dispatchEvent(event);
                      return function (name, event) {
                        var domEvent = new Event(name.toLowerCase(), {
                          cancelable: true
                        });
                        domEvent.detail = event;
                        return !util.global.dispatchEvent(domEvent);
                      };
                    } else {
                      var event = document.createEvent("CustomEvent");
                      event.initCustomEvent("testingtheevent", false, true, {});
                      util.global.dispatchEvent(event);
                      return function (name, event) {
                        var domEvent = document.createEvent("CustomEvent");
                        domEvent.initCustomEvent(name.toLowerCase(), false, true, event);
                        return !util.global.dispatchEvent(domEvent);
                      };
                    }
                  } catch (e) {}
                  return function () {
                    return false;
                  };
                })();
                var fireGlobalEvent = (function () {
                  if (util.isNode) {
                    return function () {
                      return process.emit.apply(process, arguments);
                    };
                  } else {
                    if (!util.global) {
                      return function () {
                        return false;
                      };
                    }
                    return function (name) {
                      var methodName = "on" + name.toLowerCase();
                      var method = util.global[methodName];
                      if (!method) return false;
                      method.apply(util.global, [].slice.call(arguments, 1));
                      return true;
                    };
                  }
                })();
                function generatePromiseLifecycleEventObject(name, promise) {
                  return {
                    promise: promise
                  };
                }
                var eventToObjectGenerator = {
                  promiseCreated: generatePromiseLifecycleEventObject,
                  promiseFulfilled: generatePromiseLifecycleEventObject,
                  promiseRejected: generatePromiseLifecycleEventObject,
                  promiseResolved: generatePromiseLifecycleEventObject,
                  promiseCancelled: generatePromiseLifecycleEventObject,
                  promiseChained: function (name, promise, child) {
                    return {
                      promise: promise,
                      child: child
                    };
                  },
                  warning: function (name, warning) {
                    return {
                      warning: warning
                    };
                  },
                  unhandledRejection: function (name, reason, promise) {
                    return {
                      reason: reason,
                      promise: promise
                    };
                  },
                  rejectionHandled: generatePromiseLifecycleEventObject
                };
                var activeFireEvent = function (name) {
                  var globalEventFired = false;
                  try {
                    globalEventFired = fireGlobalEvent.apply(null, arguments);
                  } catch (e) {
                    async.throwLater(e);
                    globalEventFired = true;
                  }
                  var domEventFired = false;
                  try {
                    domEventFired = fireDomEvent(name, eventToObjectGenerator[name].apply(null, arguments));
                  } catch (e) {
                    async.throwLater(e);
                    domEventFired = true;
                  }
                  return domEventFired || globalEventFired;
                };
                Promise.config = function (opts) {
                  opts = Object(opts);
                  if (("longStackTraces" in opts)) {
                    if (opts.longStackTraces) {
                      Promise.longStackTraces();
                    } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
                      disableLongStackTraces();
                    }
                  }
                  if (("warnings" in opts)) {
                    var warningsOption = opts.warnings;
                    config.warnings = !!warningsOption;
                    wForgottenReturn = config.warnings;
                    if (util.isObject(warningsOption)) {
                      if (("wForgottenReturn" in warningsOption)) {
                        wForgottenReturn = !!warningsOption.wForgottenReturn;
                      }
                    }
                  }
                  if (("cancellation" in opts) && opts.cancellation && !config.cancellation) {
                    if (async.haveItemsQueued()) {
                      throw new Error("cannot enable cancellation after promises are in use");
                    }
                    Promise.prototype._clearCancellationData = cancellationClearCancellationData;
                    Promise.prototype._propagateFrom = cancellationPropagateFrom;
                    Promise.prototype._onCancel = cancellationOnCancel;
                    Promise.prototype._setOnCancel = cancellationSetOnCancel;
                    Promise.prototype._attachCancellationCallback = cancellationAttachCancellationCallback;
                    Promise.prototype._execute = cancellationExecute;
                    propagateFromFunction = cancellationPropagateFrom;
                    config.cancellation = true;
                  }
                  if (("monitoring" in opts)) {
                    if (opts.monitoring && !config.monitoring) {
                      config.monitoring = true;
                      Promise.prototype._fireEvent = activeFireEvent;
                    } else if (!opts.monitoring && config.monitoring) {
                      config.monitoring = false;
                      Promise.prototype._fireEvent = defaultFireEvent;
                    }
                  }
                  return Promise;
                };
                function defaultFireEvent() {
                  return false;
                }
                Promise.prototype._fireEvent = defaultFireEvent;
                Promise.prototype._execute = function (executor, resolve, reject) {
                  try {
                    executor(resolve, reject);
                  } catch (e) {
                    return e;
                  }
                };
                Promise.prototype._onCancel = function () {};
                Promise.prototype._setOnCancel = function (handler) {
                  ;
                };
                Promise.prototype._attachCancellationCallback = function (onCancel) {
                  ;
                };
                Promise.prototype._captureStackTrace = function () {};
                Promise.prototype._attachExtraTrace = function () {};
                Promise.prototype._clearCancellationData = function () {};
                Promise.prototype._propagateFrom = function (parent, flags) {
                  ;
                  ;
                };
                function cancellationExecute(executor, resolve, reject) {
                  var promise = this;
                  try {
                    executor(resolve, reject, function (onCancel) {
                      if (typeof onCancel !== "function") {
                        throw new TypeError("onCancel must be a function, got: " + util.toString(onCancel));
                      }
                      promise._attachCancellationCallback(onCancel);
                    });
                  } catch (e) {
                    return e;
                  }
                }
                function cancellationAttachCancellationCallback(onCancel) {
                  if (!this._isCancellable()) return this;
                  var previousOnCancel = this._onCancel();
                  if (previousOnCancel !== undefined) {
                    if (util.isArray(previousOnCancel)) {
                      previousOnCancel.push(onCancel);
                    } else {
                      this._setOnCancel([previousOnCancel, onCancel]);
                    }
                  } else {
                    this._setOnCancel(onCancel);
                  }
                }
                function cancellationOnCancel() {
                  return this._onCancelField;
                }
                function cancellationSetOnCancel(onCancel) {
                  this._onCancelField = onCancel;
                }
                function cancellationClearCancellationData() {
                  this._cancellationParent = undefined;
                  this._onCancelField = undefined;
                }
                function cancellationPropagateFrom(parent, flags) {
                  if ((flags & 1) !== 0) {
                    this._cancellationParent = parent;
                    var branchesRemainingToCancel = parent._branchesRemainingToCancel;
                    if (branchesRemainingToCancel === undefined) {
                      branchesRemainingToCancel = 0;
                    }
                    parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
                  }
                  if ((flags & 2) !== 0 && parent._isBound()) {
                    this._setBoundTo(parent._boundTo);
                  }
                }
                function bindingPropagateFrom(parent, flags) {
                  if ((flags & 2) !== 0 && parent._isBound()) {
                    this._setBoundTo(parent._boundTo);
                  }
                }
                var propagateFromFunction = bindingPropagateFrom;
                function boundValueFunction() {
                  var ret = this._boundTo;
                  if (ret !== undefined) {
                    if (ret instanceof Promise) {
                      if (ret.isFulfilled()) {
                        return ret.value();
                      } else {
                        return undefined;
                      }
                    }
                  }
                  return ret;
                }
                function longStackTracesCaptureStackTrace() {
                  this._trace = new CapturedTrace(this._peekContext());
                }
                function longStackTracesAttachExtraTrace(error, ignoreSelf) {
                  if (canAttachTrace(error)) {
                    var trace = this._trace;
                    if (trace !== undefined) {
                      if (ignoreSelf) trace = trace._parent;
                    }
                    if (trace !== undefined) {
                      trace.attachExtraTrace(error);
                    } else if (!error.__stackCleaned__) {
                      var parsed = parseStackAndMessage(error);
                      util.notEnumerableProp(error, "stack", parsed.message + "\n" + parsed.stack.join("\n"));
                      util.notEnumerableProp(error, "__stackCleaned__", true);
                    }
                  }
                }
                function checkForgottenReturns(returnValue, promiseCreated, name, promise, parent) {
                  if (returnValue === undefined && promiseCreated !== null && wForgottenReturn) {
                    if (parent !== undefined && parent._returnedNonUndefined()) return;
                    if ((promise._bitField & 65535) === 0) return;
                    if (name) name = name + " ";
                    var handlerLine = "";
                    var creatorLine = "";
                    if (promiseCreated._trace) {
                      var traceLines = promiseCreated._trace.stack.split("\n");
                      var stack = cleanStack(traceLines);
                      for (var i = stack.length - 1; i >= 0; --i) {
                        var line = stack[i];
                        if (!nodeFramePattern.test(line)) {
                          var lineMatches = line.match(parseLinePattern);
                          if (lineMatches) {
                            handlerLine = "at " + lineMatches[1] + ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                          }
                          break;
                        }
                      }
                      if (stack.length > 0) {
                        var firstUserLine = stack[0];
                        for (var i = 0; i < traceLines.length; ++i) {
                          if (traceLines[i] === firstUserLine) {
                            if (i > 0) {
                              creatorLine = "\n" + traceLines[i - 1];
                            }
                            break;
                          }
                        }
                      }
                    }
                    var msg = "a promise was created in a " + name + "handler " + handlerLine + "but was not returned from it, " + "see http://goo.gl/rRqMUw" + creatorLine;
                    promise._warn(msg, true, promiseCreated);
                  }
                }
                function deprecated(name, replacement) {
                  var message = name + " is deprecated and will be removed in a future version.";
                  if (replacement) message += " Use " + replacement + " instead.";
                  return warn(message);
                }
                function warn(message, shouldUseOwnTrace, promise) {
                  if (!config.warnings) return;
                  var warning = new Warning(message);
                  var ctx;
                  if (shouldUseOwnTrace) {
                    promise._attachExtraTrace(warning);
                  } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
                    ctx.attachExtraTrace(warning);
                  } else {
                    var parsed = parseStackAndMessage(warning);
                    warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
                  }
                  if (!activeFireEvent("warning", warning)) {
                    formatAndLogError(warning, "", true);
                  }
                }
                function reconstructStack(message, stacks) {
                  for (var i = 0; i < stacks.length - 1; ++i) {
                    stacks[i].push("From previous event:");
                    stacks[i] = stacks[i].join("\n");
                  }
                  if (i < stacks.length) {
                    stacks[i] = stacks[i].join("\n");
                  }
                  return message + "\n" + stacks.join("\n");
                }
                function removeDuplicateOrEmptyJumps(stacks) {
                  for (var i = 0; i < stacks.length; ++i) {
                    if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                      stacks.splice(i, 1);
                      i--;
                    }
                  }
                }
                function removeCommonRoots(stacks) {
                  var current = stacks[0];
                  for (var i = 1; i < stacks.length; ++i) {
                    var prev = stacks[i];
                    var currentLastIndex = current.length - 1;
                    var currentLastLine = current[currentLastIndex];
                    var commonRootMeetPoint = -1;
                    for (var j = prev.length - 1; j >= 0; --j) {
                      if (prev[j] === currentLastLine) {
                        commonRootMeetPoint = j;
                        break;
                      }
                    }
                    for (var j = commonRootMeetPoint; j >= 0; --j) {
                      var line = prev[j];
                      if (current[currentLastIndex] === line) {
                        current.pop();
                        currentLastIndex--;
                      } else {
                        break;
                      }
                    }
                    current = prev;
                  }
                }
                function cleanStack(stack) {
                  var ret = [];
                  for (var i = 0; i < stack.length; ++i) {
                    var line = stack[i];
                    var isTraceLine = "    (No stack trace)" === line || stackFramePattern.test(line);
                    var isInternalFrame = isTraceLine && shouldIgnore(line);
                    if (isTraceLine && !isInternalFrame) {
                      if (indentStackFrames && line.charAt(0) !== " ") {
                        line = "    " + line;
                      }
                      ret.push(line);
                    }
                  }
                  return ret;
                }
                function stackFramesAsArray(error) {
                  var stack = error.stack.replace(/\s+$/g, "").split("\n");
                  for (var i = 0; i < stack.length; ++i) {
                    var line = stack[i];
                    if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
                      break;
                    }
                  }
                  if (i > 0 && error.name != "SyntaxError") {
                    stack = stack.slice(i);
                  }
                  return stack;
                }
                function parseStackAndMessage(error) {
                  var stack = error.stack;
                  var message = error.toString();
                  stack = typeof stack === "string" && stack.length > 0 ? stackFramesAsArray(error) : ["    (No stack trace)"];
                  return {
                    message: message,
                    stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
                  };
                }
                function formatAndLogError(error, title, isSoft) {
                  if (typeof console !== "undefined") {
                    var message;
                    if (util.isObject(error)) {
                      var stack = error.stack;
                      message = title + formatStack(stack, error);
                    } else {
                      message = title + String(error);
                    }
                    if (typeof printWarning === "function") {
                      printWarning(message, isSoft);
                    } else if (typeof console.log === "function" || typeof console.log === "object") {
                      console.log(message);
                    }
                  }
                }
                function fireRejectionEvent(name, localHandler, reason, promise) {
                  var localEventFired = false;
                  try {
                    if (typeof localHandler === "function") {
                      localEventFired = true;
                      if (name === "rejectionHandled") {
                        localHandler(promise);
                      } else {
                        localHandler(reason, promise);
                      }
                    }
                  } catch (e) {
                    async.throwLater(e);
                  }
                  if (name === "unhandledRejection") {
                    if (!activeFireEvent(name, reason, promise) && !localEventFired) {
                      formatAndLogError(reason, "Unhandled rejection ");
                    }
                  } else {
                    activeFireEvent(name, promise);
                  }
                }
                function formatNonError(obj) {
                  var str;
                  if (typeof obj === "function") {
                    str = "[function " + (obj.name || "anonymous") + "]";
                  } else {
                    str = obj && typeof obj.toString === "function" ? obj.toString() : util.toString(obj);
                    var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                    if (ruselessToString.test(str)) {
                      try {
                        var newStr = JSON.stringify(obj);
                        str = newStr;
                      } catch (e) {}
                    }
                    if (str.length === 0) {
                      str = "(empty array)";
                    }
                  }
                  return "(<" + snip(str) + ">, no stack trace)";
                }
                function snip(str) {
                  var maxChars = 41;
                  if (str.length < maxChars) {
                    return str;
                  }
                  return str.substr(0, maxChars - 3) + "...";
                }
                function longStackTracesIsSupported() {
                  return typeof captureStackTrace === "function";
                }
                var shouldIgnore = function () {
                  return false;
                };
                var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
                function parseLineInfo(line) {
                  var matches = line.match(parseLineInfoRegex);
                  if (matches) {
                    return {
                      fileName: matches[1],
                      line: parseInt(matches[2], 10)
                    };
                  }
                }
                function setBounds(firstLineError, lastLineError) {
                  if (!longStackTracesIsSupported()) return;
                  var firstStackLines = firstLineError.stack.split("\n");
                  var lastStackLines = lastLineError.stack.split("\n");
                  var firstIndex = -1;
                  var lastIndex = -1;
                  var firstFileName;
                  var lastFileName;
                  for (var i = 0; i < firstStackLines.length; ++i) {
                    var result = parseLineInfo(firstStackLines[i]);
                    if (result) {
                      firstFileName = result.fileName;
                      firstIndex = result.line;
                      break;
                    }
                  }
                  for (var i = 0; i < lastStackLines.length; ++i) {
                    var result = parseLineInfo(lastStackLines[i]);
                    if (result) {
                      lastFileName = result.fileName;
                      lastIndex = result.line;
                      break;
                    }
                  }
                  if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                    return;
                  }
                  shouldIgnore = function (line) {
                    if (bluebirdFramePattern.test(line)) return true;
                    var info = parseLineInfo(line);
                    if (info) {
                      if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                        return true;
                      }
                    }
                    return false;
                  };
                }
                function CapturedTrace(parent) {
                  this._parent = parent;
                  this._promisesCreated = 0;
                  var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                  captureStackTrace(this, CapturedTrace);
                  if (length > 32) this.uncycle();
                }
                util.inherits(CapturedTrace, Error);
                Context.CapturedTrace = CapturedTrace;
                CapturedTrace.prototype.uncycle = function () {
                  var length = this._length;
                  if (length < 2) return;
                  var nodes = [];
                  var stackToIndex = {};
                  for (var i = 0, node = this; node !== undefined; ++i) {
                    nodes.push(node);
                    node = node._parent;
                  }
                  length = this._length = i;
                  for (var i = length - 1; i >= 0; --i) {
                    var stack = nodes[i].stack;
                    if (stackToIndex[stack] === undefined) {
                      stackToIndex[stack] = i;
                    }
                  }
                  for (var i = 0; i < length; ++i) {
                    var currentStack = nodes[i].stack;
                    var index = stackToIndex[currentStack];
                    if (index !== undefined && index !== i) {
                      if (index > 0) {
                        nodes[index - 1]._parent = undefined;
                        nodes[index - 1]._length = 1;
                      }
                      nodes[i]._parent = undefined;
                      nodes[i]._length = 1;
                      var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                      if (index < length - 1) {
                        cycleEdgeNode._parent = nodes[index + 1];
                        cycleEdgeNode._parent.uncycle();
                        cycleEdgeNode._length = cycleEdgeNode._parent._length + 1;
                      } else {
                        cycleEdgeNode._parent = undefined;
                        cycleEdgeNode._length = 1;
                      }
                      var currentChildLength = cycleEdgeNode._length + 1;
                      for (var j = i - 2; j >= 0; --j) {
                        nodes[j]._length = currentChildLength;
                        currentChildLength++;
                      }
                      return;
                    }
                  }
                };
                CapturedTrace.prototype.attachExtraTrace = function (error) {
                  if (error.__stackCleaned__) return;
                  this.uncycle();
                  var parsed = parseStackAndMessage(error);
                  var message = parsed.message;
                  var stacks = [parsed.stack];
                  var trace = this;
                  while (trace !== undefined) {
                    stacks.push(cleanStack(trace.stack.split("\n")));
                    trace = trace._parent;
                  }
                  removeCommonRoots(stacks);
                  removeDuplicateOrEmptyJumps(stacks);
                  util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
                  util.notEnumerableProp(error, "__stackCleaned__", true);
                };
                var captureStackTrace = (function stackDetection() {
                  var v8stackFramePattern = /^\s*at\s*/;
                  var v8stackFormatter = function (stack, error) {
                    if (typeof stack === "string") return stack;
                    if (error.name !== undefined && error.message !== undefined) {
                      return error.toString();
                    }
                    return formatNonError(error);
                  };
                  if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
                    Error.stackTraceLimit += 6;
                    stackFramePattern = v8stackFramePattern;
                    formatStack = v8stackFormatter;
                    var captureStackTrace = Error.captureStackTrace;
                    shouldIgnore = function (line) {
                      return bluebirdFramePattern.test(line);
                    };
                    return function (receiver, ignoreUntil) {
                      Error.stackTraceLimit += 6;
                      captureStackTrace(receiver, ignoreUntil);
                      Error.stackTraceLimit -= 6;
                    };
                  }
                  var err = new Error();
                  if (typeof err.stack === "string" && err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
                    stackFramePattern = /@/;
                    formatStack = v8stackFormatter;
                    indentStackFrames = true;
                    return function captureStackTrace(o) {
                      o.stack = new Error().stack;
                    };
                  }
                  var hasStackAfterThrow;
                  try {
                    throw new Error();
                  } catch (e) {
                    hasStackAfterThrow = ("stack" in e);
                  }
                  if (!(("stack" in err)) && hasStackAfterThrow && typeof Error.stackTraceLimit === "number") {
                    stackFramePattern = v8stackFramePattern;
                    formatStack = v8stackFormatter;
                    return function captureStackTrace(o) {
                      Error.stackTraceLimit += 6;
                      try {
                        throw new Error();
                      } catch (e) {
                        o.stack = e.stack;
                      }
                      Error.stackTraceLimit -= 6;
                    };
                  }
                  formatStack = function (stack, error) {
                    if (typeof stack === "string") return stack;
                    if ((typeof error === "object" || typeof error === "function") && error.name !== undefined && error.message !== undefined) {
                      return error.toString();
                    }
                    return formatNonError(error);
                  };
                  return null;
                })([]);
                if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
                  printWarning = function (message) {
                    console.warn(message);
                  };
                  if (util.isNode && process.stderr.isTTY) {
                    printWarning = function (message, isSoft) {
                      var color = isSoft ? "\u001b[33m" : "\u001b[31m";
                      console.warn(color + message + "\u001b[0m\n");
                    };
                  } else if (!util.isNode && typeof new Error().stack === "string") {
                    printWarning = function (message, isSoft) {
                      console.warn("%c" + message, isSoft ? "color: darkorange" : "color: red");
                    };
                  }
                }
                var config = {
                  warnings: warnings,
                  longStackTraces: false,
                  cancellation: false,
                  monitoring: false
                };
                if (longStackTraces) Promise.longStackTraces();
                return {
                  longStackTraces: function () {
                    return config.longStackTraces;
                  },
                  warnings: function () {
                    return config.warnings;
                  },
                  cancellation: function () {
                    return config.cancellation;
                  },
                  monitoring: function () {
                    return config.monitoring;
                  },
                  propagateFromFunction: function () {
                    return propagateFromFunction;
                  },
                  boundValueFunction: function () {
                    return boundValueFunction;
                  },
                  checkForgottenReturns: checkForgottenReturns,
                  setBounds: setBounds,
                  warn: warn,
                  deprecated: deprecated,
                  CapturedTrace: CapturedTrace,
                  fireDomEvent: fireDomEvent,
                  fireGlobalEvent: fireGlobalEvent
                };
              };
            }, {
              "./errors": 12,
              "./util": 36
            }],
            10: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise) {
                function returner() {
                  return this.value;
                }
                function thrower() {
                  throw this.reason;
                }
                Promise.prototype["return"] = Promise.prototype.thenReturn = function (value) {
                  if (value instanceof Promise) value.suppressUnhandledRejections();
                  return this._then(returner, undefined, undefined, {
                    value: value
                  }, undefined);
                };
                Promise.prototype["throw"] = Promise.prototype.thenThrow = function (reason) {
                  return this._then(thrower, undefined, undefined, {
                    reason: reason
                  }, undefined);
                };
                Promise.prototype.catchThrow = function (reason) {
                  if (arguments.length <= 1) {
                    return this._then(undefined, thrower, undefined, {
                      reason: reason
                    }, undefined);
                  } else {
                    var _reason = arguments[1];
                    var handler = function () {
                      throw _reason;
                    };
                    return this.caught(reason, handler);
                  }
                };
                Promise.prototype.catchReturn = function (value) {
                  if (arguments.length <= 1) {
                    if (value instanceof Promise) value.suppressUnhandledRejections();
                    return this._then(undefined, returner, undefined, {
                      value: value
                    }, undefined);
                  } else {
                    var _value = arguments[1];
                    if (_value instanceof Promise) _value.suppressUnhandledRejections();
                    var handler = function () {
                      return _value;
                    };
                    return this.caught(value, handler);
                  }
                };
              };
            }, {}],
            11: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL) {
                var PromiseReduce = Promise.reduce;
                var PromiseAll = Promise.all;
                function promiseAllThis() {
                  return PromiseAll(this);
                }
                function PromiseMapSeries(promises, fn) {
                  return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
                }
                Promise.prototype.each = function (fn) {
                  return PromiseReduce(this, fn, INTERNAL, 0)._then(promiseAllThis, undefined, undefined, this, undefined);
                };
                Promise.prototype.mapSeries = function (fn) {
                  return PromiseReduce(this, fn, INTERNAL, INTERNAL);
                };
                Promise.each = function (promises, fn) {
                  return PromiseReduce(promises, fn, INTERNAL, 0)._then(promiseAllThis, undefined, undefined, promises, undefined);
                };
                Promise.mapSeries = PromiseMapSeries;
              };
            }, {}],
            12: [function (_dereq_, module, exports) {
              "use strict";
              var es5 = _dereq_("./es5");
              var Objectfreeze = es5.freeze;
              var util = _dereq_("./util");
              var inherits = util.inherits;
              var notEnumerableProp = util.notEnumerableProp;
              function subError(nameProperty, defaultMessage) {
                function SubError(message) {
                  if (!(this instanceof SubError)) return new SubError(message);
                  notEnumerableProp(this, "message", typeof message === "string" ? message : defaultMessage);
                  notEnumerableProp(this, "name", nameProperty);
                  if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, this.constructor);
                  } else {
                    Error.call(this);
                  }
                }
                inherits(SubError, Error);
                return SubError;
              }
              var _TypeError, _RangeError;
              var Warning = subError("Warning", "warning");
              var CancellationError = subError("CancellationError", "cancellation error");
              var TimeoutError = subError("TimeoutError", "timeout error");
              var AggregateError = subError("AggregateError", "aggregate error");
              try {
                _TypeError = TypeError;
                _RangeError = RangeError;
              } catch (e) {
                _TypeError = subError("TypeError", "type error");
                _RangeError = subError("RangeError", "range error");
              }
              var methods = ("join pop push shift unshift slice filter forEach some " + "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
              for (var i = 0; i < methods.length; ++i) {
                if (typeof Array.prototype[methods[i]] === "function") {
                  AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
                }
              }
              es5.defineProperty(AggregateError.prototype, "length", {
                value: 0,
                configurable: false,
                writable: true,
                enumerable: true
              });
              AggregateError.prototype["isOperational"] = true;
              var level = 0;
              AggregateError.prototype.toString = function () {
                var indent = Array(level * 4 + 1).join(" ");
                var ret = "\n" + indent + "AggregateError of:" + "\n";
                level++;
                indent = Array(level * 4 + 1).join(" ");
                for (var i = 0; i < this.length; ++i) {
                  var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
                  var lines = str.split("\n");
                  for (var j = 0; j < lines.length; ++j) {
                    lines[j] = indent + lines[j];
                  }
                  str = lines.join("\n");
                  ret += str + "\n";
                }
                level--;
                return ret;
              };
              function OperationalError(message) {
                if (!(this instanceof OperationalError)) return new OperationalError(message);
                notEnumerableProp(this, "name", "OperationalError");
                notEnumerableProp(this, "message", message);
                this.cause = message;
                this["isOperational"] = true;
                if (message instanceof Error) {
                  notEnumerableProp(this, "message", message.message);
                  notEnumerableProp(this, "stack", message.stack);
                } else if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, this.constructor);
                }
              }
              inherits(OperationalError, Error);
              var errorTypes = Error["__BluebirdErrorTypes__"];
              if (!errorTypes) {
                errorTypes = Objectfreeze({
                  CancellationError: CancellationError,
                  TimeoutError: TimeoutError,
                  OperationalError: OperationalError,
                  RejectionError: OperationalError,
                  AggregateError: AggregateError
                });
                es5.defineProperty(Error, "__BluebirdErrorTypes__", {
                  value: errorTypes,
                  writable: false,
                  enumerable: false,
                  configurable: false
                });
              }
              module.exports = {
                Error: Error,
                TypeError: _TypeError,
                RangeError: _RangeError,
                CancellationError: errorTypes.CancellationError,
                OperationalError: errorTypes.OperationalError,
                TimeoutError: errorTypes.TimeoutError,
                AggregateError: errorTypes.AggregateError,
                Warning: Warning
              };
            }, {
              "./es5": 13,
              "./util": 36
            }],
            13: [function (_dereq_, module, exports) {
              var isES5 = (function () {
                "use strict";
                return this === undefined;
              })();
              if (isES5) {
                module.exports = {
                  freeze: Object.freeze,
                  defineProperty: Object.defineProperty,
                  getDescriptor: Object.getOwnPropertyDescriptor,
                  keys: Object.keys,
                  names: Object.getOwnPropertyNames,
                  getPrototypeOf: Object.getPrototypeOf,
                  isArray: Array.isArray,
                  isES5: isES5,
                  propertyIsWritable: function (obj, prop) {
                    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                    return !!(!descriptor || descriptor.writable || descriptor.set);
                  }
                };
              } else {
                var has = ({}).hasOwnProperty;
                var str = ({}).toString;
                var proto = ({}).constructor.prototype;
                var ObjectKeys = function (o) {
                  var ret = [];
                  for (var key in o) {
                    if (has.call(o, key)) {
                      ret.push(key);
                    }
                  }
                  return ret;
                };
                var ObjectGetDescriptor = function (o, key) {
                  return {
                    value: o[key]
                  };
                };
                var ObjectDefineProperty = function (o, key, desc) {
                  o[key] = desc.value;
                  return o;
                };
                var ObjectFreeze = function (obj) {
                  return obj;
                };
                var ObjectGetPrototypeOf = function (obj) {
                  try {
                    return Object(obj).constructor.prototype;
                  } catch (e) {
                    return proto;
                  }
                };
                var ArrayIsArray = function (obj) {
                  try {
                    return str.call(obj) === "[object Array]";
                  } catch (e) {
                    return false;
                  }
                };
                module.exports = {
                  isArray: ArrayIsArray,
                  keys: ObjectKeys,
                  names: ObjectKeys,
                  defineProperty: ObjectDefineProperty,
                  getDescriptor: ObjectGetDescriptor,
                  freeze: ObjectFreeze,
                  getPrototypeOf: ObjectGetPrototypeOf,
                  isES5: isES5,
                  propertyIsWritable: function () {
                    return true;
                  }
                };
              }
            }, {}],
            14: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL) {
                var PromiseMap = Promise.map;
                Promise.prototype.filter = function (fn, options) {
                  return PromiseMap(this, fn, options, INTERNAL);
                };
                Promise.filter = function (promises, fn, options) {
                  return PromiseMap(promises, fn, options, INTERNAL);
                };
              };
            }, {}],
            15: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, tryConvertToPromise, NEXT_FILTER) {
                var util = _dereq_("./util");
                var CancellationError = Promise.CancellationError;
                var errorObj = util.errorObj;
                var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
                function PassThroughHandlerContext(promise, type, handler) {
                  this.promise = promise;
                  this.type = type;
                  this.handler = handler;
                  this.called = false;
                  this.cancelPromise = null;
                }
                PassThroughHandlerContext.prototype.isFinallyHandler = function () {
                  return this.type === 0;
                };
                function FinallyHandlerCancelReaction(finallyHandler) {
                  this.finallyHandler = finallyHandler;
                }
                FinallyHandlerCancelReaction.prototype._resultCancelled = function () {
                  checkCancel(this.finallyHandler);
                };
                function checkCancel(ctx, reason) {
                  if (ctx.cancelPromise != null) {
                    if (arguments.length > 1) {
                      ctx.cancelPromise._reject(reason);
                    } else {
                      ctx.cancelPromise._cancel();
                    }
                    ctx.cancelPromise = null;
                    return true;
                  }
                  return false;
                }
                function succeed() {
                  return finallyHandler.call(this, this.promise._target()._settledValue());
                }
                function fail(reason) {
                  if (checkCancel(this, reason)) return;
                  errorObj.e = reason;
                  return errorObj;
                }
                function finallyHandler(reasonOrValue) {
                  var promise = this.promise;
                  var handler = this.handler;
                  if (!this.called) {
                    this.called = true;
                    var ret = this.isFinallyHandler() ? handler.call(promise._boundValue()) : handler.call(promise._boundValue(), reasonOrValue);
                    if (ret === NEXT_FILTER) {
                      return ret;
                    } else if (ret !== undefined) {
                      promise._setReturnedNonUndefined();
                      var maybePromise = tryConvertToPromise(ret, promise);
                      if (maybePromise instanceof Promise) {
                        if (this.cancelPromise != null) {
                          if (maybePromise._isCancelled()) {
                            var reason = new CancellationError("late cancellation observer");
                            promise._attachExtraTrace(reason);
                            errorObj.e = reason;
                            return errorObj;
                          } else if (maybePromise.isPending()) {
                            maybePromise._attachCancellationCallback(new FinallyHandlerCancelReaction(this));
                          }
                        }
                        return maybePromise._then(succeed, fail, undefined, this, undefined);
                      }
                    }
                  }
                  if (promise.isRejected()) {
                    checkCancel(this);
                    errorObj.e = reasonOrValue;
                    return errorObj;
                  } else {
                    checkCancel(this);
                    return reasonOrValue;
                  }
                }
                Promise.prototype._passThrough = function (handler, type, success, fail) {
                  if (typeof handler !== "function") return this.then();
                  return this._then(success, fail, undefined, new PassThroughHandlerContext(this, type, handler), undefined);
                };
                Promise.prototype.lastly = Promise.prototype["finally"] = function (handler) {
                  return this._passThrough(handler, 0, finallyHandler, finallyHandler);
                };
                Promise.prototype.tap = function (handler) {
                  return this._passThrough(handler, 1, finallyHandler);
                };
                Promise.prototype.tapCatch = function (handlerOrPredicate) {
                  var len = arguments.length;
                  if (len === 1) {
                    return this._passThrough(handlerOrPredicate, 1, undefined, finallyHandler);
                  } else {
                    var catchInstances = new Array(len - 1), j = 0, i;
                    for (i = 0; i < len - 1; ++i) {
                      var item = arguments[i];
                      if (util.isObject(item)) {
                        catchInstances[j++] = item;
                      } else {
                        return Promise.reject(new TypeError("tapCatch statement predicate: " + "expecting an object but got " + util.classString(item)));
                      }
                    }
                    catchInstances.length = j;
                    var handler = arguments[i];
                    return this._passThrough(catchFilter(catchInstances, handler, this), 1, undefined, finallyHandler);
                  }
                };
                return PassThroughHandlerContext;
              };
            }, {
              "./catch_filter": 7,
              "./util": 36
            }],
            16: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug) {
                var errors = _dereq_("./errors");
                var TypeError = errors.TypeError;
                var util = _dereq_("./util");
                var errorObj = util.errorObj;
                var tryCatch = util.tryCatch;
                var yieldHandlers = [];
                function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                  for (var i = 0; i < yieldHandlers.length; ++i) {
                    traceParent._pushContext();
                    var result = tryCatch(yieldHandlers[i])(value);
                    traceParent._popContext();
                    if (result === errorObj) {
                      traceParent._pushContext();
                      var ret = Promise.reject(errorObj.e);
                      traceParent._popContext();
                      return ret;
                    }
                    var maybePromise = tryConvertToPromise(result, traceParent);
                    if (maybePromise instanceof Promise) return maybePromise;
                  }
                  return null;
                }
                function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                  if (debug.cancellation()) {
                    var internal = new Promise(INTERNAL);
                    var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
                    this._promise = internal.lastly(function () {
                      return _finallyPromise;
                    });
                    internal._captureStackTrace();
                    internal._setOnCancel(this);
                  } else {
                    var promise = this._promise = new Promise(INTERNAL);
                    promise._captureStackTrace();
                  }
                  this._stack = stack;
                  this._generatorFunction = generatorFunction;
                  this._receiver = receiver;
                  this._generator = undefined;
                  this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
                  this._yieldedPromise = null;
                  this._cancellationPhase = false;
                }
                util.inherits(PromiseSpawn, Proxyable);
                PromiseSpawn.prototype._isResolved = function () {
                  return this._promise === null;
                };
                PromiseSpawn.prototype._cleanup = function () {
                  this._promise = this._generator = null;
                  if (debug.cancellation() && this._finallyPromise !== null) {
                    this._finallyPromise._fulfill();
                    this._finallyPromise = null;
                  }
                };
                PromiseSpawn.prototype._promiseCancelled = function () {
                  if (this._isResolved()) return;
                  var implementsReturn = typeof this._generator["return"] !== "undefined";
                  var result;
                  if (!implementsReturn) {
                    var reason = new Promise.CancellationError("generator .return() sentinel");
                    Promise.coroutine.returnSentinel = reason;
                    this._promise._attachExtraTrace(reason);
                    this._promise._pushContext();
                    result = tryCatch(this._generator["throw"]).call(this._generator, reason);
                    this._promise._popContext();
                  } else {
                    this._promise._pushContext();
                    result = tryCatch(this._generator["return"]).call(this._generator, undefined);
                    this._promise._popContext();
                  }
                  this._cancellationPhase = true;
                  this._yieldedPromise = null;
                  this._continue(result);
                };
                PromiseSpawn.prototype._promiseFulfilled = function (value) {
                  this._yieldedPromise = null;
                  this._promise._pushContext();
                  var result = tryCatch(this._generator.next).call(this._generator, value);
                  this._promise._popContext();
                  this._continue(result);
                };
                PromiseSpawn.prototype._promiseRejected = function (reason) {
                  this._yieldedPromise = null;
                  this._promise._attachExtraTrace(reason);
                  this._promise._pushContext();
                  var result = tryCatch(this._generator["throw"]).call(this._generator, reason);
                  this._promise._popContext();
                  this._continue(result);
                };
                PromiseSpawn.prototype._resultCancelled = function () {
                  if (this._yieldedPromise instanceof Promise) {
                    var promise = this._yieldedPromise;
                    this._yieldedPromise = null;
                    promise.cancel();
                  }
                };
                PromiseSpawn.prototype.promise = function () {
                  return this._promise;
                };
                PromiseSpawn.prototype._run = function () {
                  this._generator = this._generatorFunction.call(this._receiver);
                  this._receiver = this._generatorFunction = undefined;
                  this._promiseFulfilled(undefined);
                };
                PromiseSpawn.prototype._continue = function (result) {
                  var promise = this._promise;
                  if (result === errorObj) {
                    this._cleanup();
                    if (this._cancellationPhase) {
                      return promise.cancel();
                    } else {
                      return promise._rejectCallback(result.e, false);
                    }
                  }
                  var value = result.value;
                  if (result.done === true) {
                    this._cleanup();
                    if (this._cancellationPhase) {
                      return promise.cancel();
                    } else {
                      return promise._resolveCallback(value);
                    }
                  } else {
                    var maybePromise = tryConvertToPromise(value, this._promise);
                    if (!(maybePromise instanceof Promise)) {
                      maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
                      if (maybePromise === null) {
                        this._promiseRejected(new TypeError(("A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a").replace("%s", String(value)) + "From coroutine:\u000a" + this._stack.split("\n").slice(1, -7).join("\n")));
                        return;
                      }
                    }
                    maybePromise = maybePromise._target();
                    var bitField = maybePromise._bitField;
                    ;
                    if ((bitField & 50397184) === 0) {
                      this._yieldedPromise = maybePromise;
                      maybePromise._proxy(this, null);
                    } else if ((bitField & 33554432) !== 0) {
                      Promise._async.invoke(this._promiseFulfilled, this, maybePromise._value());
                    } else if ((bitField & 16777216) !== 0) {
                      Promise._async.invoke(this._promiseRejected, this, maybePromise._reason());
                    } else {
                      this._promiseCancelled();
                    }
                  }
                };
                Promise.coroutine = function (generatorFunction, options) {
                  if (typeof generatorFunction !== "function") {
                    throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  var yieldHandler = Object(options).yieldHandler;
                  var PromiseSpawn$ = PromiseSpawn;
                  var stack = new Error().stack;
                  return function () {
                    var generator = generatorFunction.apply(this, arguments);
                    var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
                    var ret = spawn.promise();
                    spawn._generator = generator;
                    spawn._promiseFulfilled(undefined);
                    return ret;
                  };
                };
                Promise.coroutine.addYieldHandler = function (fn) {
                  if (typeof fn !== "function") {
                    throw new TypeError("expecting a function but got " + util.classString(fn));
                  }
                  yieldHandlers.push(fn);
                };
                Promise.spawn = function (generatorFunction) {
                  debug.deprecated("Promise.spawn()", "Promise.coroutine()");
                  if (typeof generatorFunction !== "function") {
                    return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  var spawn = new PromiseSpawn(generatorFunction, this);
                  var ret = spawn.promise();
                  spawn._run(Promise.spawn);
                  return ret;
                };
              };
            }, {
              "./errors": 12,
              "./util": 36
            }],
            17: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain) {
                var util = _dereq_("./util");
                var canEvaluate = util.canEvaluate;
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                var reject;
                if (!true) {
                  if (canEvaluate) {
                    var thenCallback = function (i) {
                      return new Function("value", "holder", ("                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ").replace(/Index/g, i));
                    };
                    var promiseSetter = function (i) {
                      return new Function("promise", "holder", ("                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ").replace(/Index/g, i));
                    };
                    var generateHolderClass = function (total) {
                      var props = new Array(total);
                      for (var i = 0; i < props.length; ++i) {
                        props[i] = "this.p" + (i + 1);
                      }
                      var assignment = props.join(" = ") + " = null;";
                      var cancellationCode = "var promise;\n" + props.map(function (prop) {
                        return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
                      }).join("\n");
                      var passedArguments = props.join(", ");
                      var name = "Holder$" + total;
                      var code = "return function(tryCatch, errorObj, Promise, async) {    \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
            }                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) {          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) {                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
                } else {                                                     \n\
                    promise._resolveCallback(ret);                           \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    if (this.asyncNeeded) {                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                    } else {                                                 \n\
                        this._callFunction(promise);                         \n\
                    }                                                        \n\
                                                                             \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise, async);                               \n\
        ";
                      code = code.replace(/\[TheName\]/g, name).replace(/\[TheTotal\]/g, total).replace(/\[ThePassedArguments\]/g, passedArguments).replace(/\[TheProperties\]/g, assignment).replace(/\[CancellationCode\]/g, cancellationCode);
                      return new Function("tryCatch", "errorObj", "Promise", "async", code)(tryCatch, errorObj, Promise, async);
                    };
                    var holderClasses = [];
                    var thenCallbacks = [];
                    var promiseSetters = [];
                    for (var i = 0; i < 8; ++i) {
                      holderClasses.push(generateHolderClass(i + 1));
                      thenCallbacks.push(thenCallback(i + 1));
                      promiseSetters.push(promiseSetter(i + 1));
                    }
                    reject = function (reason) {
                      this._reject(reason);
                    };
                  }
                }
                Promise.join = function () {
                  var last = arguments.length - 1;
                  var fn;
                  if (last > 0 && typeof arguments[last] === "function") {
                    fn = arguments[last];
                    if (!true) {
                      if (last <= 8 && canEvaluate) {
                        var ret = new Promise(INTERNAL);
                        ret._captureStackTrace();
                        var HolderClass = holderClasses[last - 1];
                        var holder = new HolderClass(fn);
                        var callbacks = thenCallbacks;
                        for (var i = 0; i < last; ++i) {
                          var maybePromise = tryConvertToPromise(arguments[i], ret);
                          if (maybePromise instanceof Promise) {
                            maybePromise = maybePromise._target();
                            var bitField = maybePromise._bitField;
                            ;
                            if ((bitField & 50397184) === 0) {
                              maybePromise._then(callbacks[i], reject, undefined, ret, holder);
                              promiseSetters[i](maybePromise, holder);
                              holder.asyncNeeded = false;
                            } else if ((bitField & 33554432) !== 0) {
                              callbacks[i].call(ret, maybePromise._value(), holder);
                            } else if ((bitField & 16777216) !== 0) {
                              ret._reject(maybePromise._reason());
                            } else {
                              ret._cancel();
                            }
                          } else {
                            callbacks[i].call(ret, maybePromise, holder);
                          }
                        }
                        if (!ret._isFateSealed()) {
                          if (holder.asyncNeeded) {
                            var domain = getDomain();
                            if (domain !== null) {
                              holder.fn = util.domainBind(domain, holder.fn);
                            }
                          }
                          ret._setAsyncGuaranteed();
                          ret._setOnCancel(holder);
                        }
                        return ret;
                      }
                    }
                  }
                  var args = [].slice.call(arguments);
                  ;
                  if (fn) args.pop();
                  var ret = new PromiseArray(args).promise();
                  return fn !== undefined ? ret.spread(fn) : ret;
                };
              };
            }, {
              "./util": 36
            }],
            18: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug) {
                var getDomain = Promise._getDomain;
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                var async = Promise._async;
                function MappingPromiseArray(promises, fn, limit, _filter) {
                  this.constructor$(promises);
                  this._promise._captureStackTrace();
                  var domain = getDomain();
                  this._callback = domain === null ? fn : util.domainBind(domain, fn);
                  this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
                  this._limit = limit;
                  this._inFlight = 0;
                  this._queue = [];
                  async.invoke(this._asyncInit, this, undefined);
                }
                util.inherits(MappingPromiseArray, PromiseArray);
                MappingPromiseArray.prototype._asyncInit = function () {
                  this._init$(undefined, -2);
                };
                MappingPromiseArray.prototype._init = function () {};
                MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                  var values = this._values;
                  var length = this.length();
                  var preservedValues = this._preservedValues;
                  var limit = this._limit;
                  if (index < 0) {
                    index = index * -1 - 1;
                    values[index] = value;
                    if (limit >= 1) {
                      this._inFlight--;
                      this._drainQueue();
                      if (this._isResolved()) return true;
                    }
                  } else {
                    if (limit >= 1 && this._inFlight >= limit) {
                      values[index] = value;
                      this._queue.push(index);
                      return false;
                    }
                    if (preservedValues !== null) preservedValues[index] = value;
                    var promise = this._promise;
                    var callback = this._callback;
                    var receiver = promise._boundValue();
                    promise._pushContext();
                    var ret = tryCatch(callback).call(receiver, value, index, length);
                    var promiseCreated = promise._popContext();
                    debug.checkForgottenReturns(ret, promiseCreated, preservedValues !== null ? "Promise.filter" : "Promise.map", promise);
                    if (ret === errorObj) {
                      this._reject(ret.e);
                      return true;
                    }
                    var maybePromise = tryConvertToPromise(ret, this._promise);
                    if (maybePromise instanceof Promise) {
                      maybePromise = maybePromise._target();
                      var bitField = maybePromise._bitField;
                      ;
                      if ((bitField & 50397184) === 0) {
                        if (limit >= 1) this._inFlight++;
                        values[index] = maybePromise;
                        maybePromise._proxy(this, (index + 1) * -1);
                        return false;
                      } else if ((bitField & 33554432) !== 0) {
                        ret = maybePromise._value();
                      } else if ((bitField & 16777216) !== 0) {
                        this._reject(maybePromise._reason());
                        return true;
                      } else {
                        this._cancel();
                        return true;
                      }
                    }
                    values[index] = ret;
                  }
                  var totalResolved = ++this._totalResolved;
                  if (totalResolved >= length) {
                    if (preservedValues !== null) {
                      this._filter(values, preservedValues);
                    } else {
                      this._resolve(values);
                    }
                    return true;
                  }
                  return false;
                };
                MappingPromiseArray.prototype._drainQueue = function () {
                  var queue = this._queue;
                  var limit = this._limit;
                  var values = this._values;
                  while (queue.length > 0 && this._inFlight < limit) {
                    if (this._isResolved()) return;
                    var index = queue.pop();
                    this._promiseFulfilled(values[index], index);
                  }
                };
                MappingPromiseArray.prototype._filter = function (booleans, values) {
                  var len = values.length;
                  var ret = new Array(len);
                  var j = 0;
                  for (var i = 0; i < len; ++i) {
                    if (booleans[i]) ret[j++] = values[i];
                  }
                  ret.length = j;
                  this._resolve(ret);
                };
                MappingPromiseArray.prototype.preservedValues = function () {
                  return this._preservedValues;
                };
                function map(promises, fn, options, _filter) {
                  if (typeof fn !== "function") {
                    return apiRejection("expecting a function but got " + util.classString(fn));
                  }
                  var limit = 0;
                  if (options !== undefined) {
                    if (typeof options === "object" && options !== null) {
                      if (typeof options.concurrency !== "number") {
                        return Promise.reject(new TypeError("'concurrency' must be a number but it is " + util.classString(options.concurrency)));
                      }
                      limit = options.concurrency;
                    } else {
                      return Promise.reject(new TypeError("options argument must be an object but it is " + util.classString(options)));
                    }
                  }
                  limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
                  return new MappingPromiseArray(promises, fn, limit, _filter).promise();
                }
                Promise.prototype.map = function (fn, options) {
                  return map(this, fn, options, null);
                };
                Promise.map = function (promises, fn, options, _filter) {
                  return map(promises, fn, options, _filter);
                };
              };
            }, {
              "./util": 36
            }],
            19: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;
                Promise.method = function (fn) {
                  if (typeof fn !== "function") {
                    throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
                  }
                  return function () {
                    var ret = new Promise(INTERNAL);
                    ret._captureStackTrace();
                    ret._pushContext();
                    var value = tryCatch(fn).apply(this, arguments);
                    var promiseCreated = ret._popContext();
                    debug.checkForgottenReturns(value, promiseCreated, "Promise.method", ret);
                    ret._resolveFromSyncValue(value);
                    return ret;
                  };
                };
                Promise.attempt = Promise["try"] = function (fn) {
                  if (typeof fn !== "function") {
                    return apiRejection("expecting a function but got " + util.classString(fn));
                  }
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  ret._pushContext();
                  var value;
                  if (arguments.length > 1) {
                    debug.deprecated("calling Promise.try with more than 1 argument");
                    var arg = arguments[1];
                    var ctx = arguments[2];
                    value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg) : tryCatch(fn).call(ctx, arg);
                  } else {
                    value = tryCatch(fn)();
                  }
                  var promiseCreated = ret._popContext();
                  debug.checkForgottenReturns(value, promiseCreated, "Promise.try", ret);
                  ret._resolveFromSyncValue(value);
                  return ret;
                };
                Promise.prototype._resolveFromSyncValue = function (value) {
                  if (value === util.errorObj) {
                    this._rejectCallback(value.e, false);
                  } else {
                    this._resolveCallback(value, true);
                  }
                };
              };
            }, {
              "./util": 36
            }],
            20: [function (_dereq_, module, exports) {
              "use strict";
              var util = _dereq_("./util");
              var maybeWrapAsError = util.maybeWrapAsError;
              var errors = _dereq_("./errors");
              var OperationalError = errors.OperationalError;
              var es5 = _dereq_("./es5");
              function isUntypedError(obj) {
                return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
              }
              var rErrorKey = /^(?:name|message|stack|cause)$/;
              function wrapAsOperationalError(obj) {
                var ret;
                if (isUntypedError(obj)) {
                  ret = new OperationalError(obj);
                  ret.name = obj.name;
                  ret.message = obj.message;
                  ret.stack = obj.stack;
                  var keys = es5.keys(obj);
                  for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (!rErrorKey.test(key)) {
                      ret[key] = obj[key];
                    }
                  }
                  return ret;
                }
                util.markAsOriginatingFromRejection(obj);
                return obj;
              }
              function nodebackForPromise(promise, multiArgs) {
                return function (err, value) {
                  if (promise === null) return;
                  if (err) {
                    var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                    promise._attachExtraTrace(wrapped);
                    promise._reject(wrapped);
                  } else if (!multiArgs) {
                    promise._fulfill(value);
                  } else {
                    var args = [].slice.call(arguments, 1);
                    ;
                    promise._fulfill(args);
                  }
                  promise = null;
                };
              }
              module.exports = nodebackForPromise;
            }, {
              "./errors": 12,
              "./es5": 13,
              "./util": 36
            }],
            21: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise) {
                var util = _dereq_("./util");
                var async = Promise._async;
                var tryCatch = util.tryCatch;
                var errorObj = util.errorObj;
                function spreadAdapter(val, nodeback) {
                  var promise = this;
                  if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
                  var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                  if (ret === errorObj) {
                    async.throwLater(ret.e);
                  }
                }
                function successAdapter(val, nodeback) {
                  var promise = this;
                  var receiver = promise._boundValue();
                  var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
                  if (ret === errorObj) {
                    async.throwLater(ret.e);
                  }
                }
                function errorAdapter(reason, nodeback) {
                  var promise = this;
                  if (!reason) {
                    var newReason = new Error(reason + "");
                    newReason.cause = reason;
                    reason = newReason;
                  }
                  var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                  if (ret === errorObj) {
                    async.throwLater(ret.e);
                  }
                }
                Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {
                  if (typeof nodeback == "function") {
                    var adapter = successAdapter;
                    if (options !== undefined && Object(options).spread) {
                      adapter = spreadAdapter;
                    }
                    this._then(adapter, errorAdapter, undefined, this, nodeback);
                  }
                  return this;
                };
              };
            }, {
              "./util": 36
            }],
            22: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function () {
                var makeSelfResolutionError = function () {
                  return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                };
                var reflectHandler = function () {
                  return new Promise.PromiseInspection(this._target());
                };
                var apiRejection = function (msg) {
                  return Promise.reject(new TypeError(msg));
                };
                function Proxyable() {}
                var UNDEFINED_BINDING = {};
                var util = _dereq_("./util");
                var getDomain;
                if (util.isNode) {
                  getDomain = function () {
                    var ret = process.domain;
                    if (ret === undefined) ret = null;
                    return ret;
                  };
                } else {
                  getDomain = function () {
                    return null;
                  };
                }
                util.notEnumerableProp(Promise, "_getDomain", getDomain);
                var es5 = _dereq_("./es5");
                var Async = _dereq_("./async");
                var async = new Async();
                es5.defineProperty(Promise, "_async", {
                  value: async
                });
                var errors = _dereq_("./errors");
                var TypeError = Promise.TypeError = errors.TypeError;
                Promise.RangeError = errors.RangeError;
                var CancellationError = Promise.CancellationError = errors.CancellationError;
                Promise.TimeoutError = errors.TimeoutError;
                Promise.OperationalError = errors.OperationalError;
                Promise.RejectionError = errors.OperationalError;
                Promise.AggregateError = errors.AggregateError;
                var INTERNAL = function () {};
                var APPLY = {};
                var NEXT_FILTER = {};
                var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
                var PromiseArray = _dereq_("./promise_array")(Promise, INTERNAL, tryConvertToPromise, apiRejection, Proxyable);
                var Context = _dereq_("./context")(Promise);
                /*jshint unused:false*/
                var createContext = Context.create;
                var debug = _dereq_("./debuggability")(Promise, Context);
                var CapturedTrace = debug.CapturedTrace;
                var PassThroughHandlerContext = _dereq_("./finally")(Promise, tryConvertToPromise, NEXT_FILTER);
                var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
                var nodebackForPromise = _dereq_("./nodeback");
                var errorObj = util.errorObj;
                var tryCatch = util.tryCatch;
                function check(self, executor) {
                  if (self == null || self.constructor !== Promise) {
                    throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  if (typeof executor !== "function") {
                    throw new TypeError("expecting a function but got " + util.classString(executor));
                  }
                }
                function Promise(executor) {
                  if (executor !== INTERNAL) {
                    check(this, executor);
                  }
                  this._bitField = 0;
                  this._fulfillmentHandler0 = undefined;
                  this._rejectionHandler0 = undefined;
                  this._promise0 = undefined;
                  this._receiver0 = undefined;
                  this._resolveFromExecutor(executor);
                  this._promiseCreated();
                  this._fireEvent("promiseCreated", this);
                }
                Promise.prototype.toString = function () {
                  return "[object Promise]";
                };
                Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
                  var len = arguments.length;
                  if (len > 1) {
                    var catchInstances = new Array(len - 1), j = 0, i;
                    for (i = 0; i < len - 1; ++i) {
                      var item = arguments[i];
                      if (util.isObject(item)) {
                        catchInstances[j++] = item;
                      } else {
                        return apiRejection("Catch statement predicate: " + "expecting an object but got " + util.classString(item));
                      }
                    }
                    catchInstances.length = j;
                    fn = arguments[i];
                    return this.then(undefined, catchFilter(catchInstances, fn, this));
                  }
                  return this.then(undefined, fn);
                };
                Promise.prototype.reflect = function () {
                  return this._then(reflectHandler, reflectHandler, undefined, this, undefined);
                };
                Promise.prototype.then = function (didFulfill, didReject) {
                  if (debug.warnings() && arguments.length > 0 && typeof didFulfill !== "function" && typeof didReject !== "function") {
                    var msg = ".then() only accepts functions but was passed: " + util.classString(didFulfill);
                    if (arguments.length > 1) {
                      msg += ", " + util.classString(didReject);
                    }
                    this._warn(msg);
                  }
                  return this._then(didFulfill, didReject, undefined, undefined, undefined);
                };
                Promise.prototype.done = function (didFulfill, didReject) {
                  var promise = this._then(didFulfill, didReject, undefined, undefined, undefined);
                  promise._setIsFinal();
                };
                Promise.prototype.spread = function (fn) {
                  if (typeof fn !== "function") {
                    return apiRejection("expecting a function but got " + util.classString(fn));
                  }
                  return this.all()._then(fn, undefined, undefined, APPLY, undefined);
                };
                Promise.prototype.toJSON = function () {
                  var ret = {
                    isFulfilled: false,
                    isRejected: false,
                    fulfillmentValue: undefined,
                    rejectionReason: undefined
                  };
                  if (this.isFulfilled()) {
                    ret.fulfillmentValue = this.value();
                    ret.isFulfilled = true;
                  } else if (this.isRejected()) {
                    ret.rejectionReason = this.reason();
                    ret.isRejected = true;
                  }
                  return ret;
                };
                Promise.prototype.all = function () {
                  if (arguments.length > 0) {
                    this._warn(".all() was passed arguments but it does not take any");
                  }
                  return new PromiseArray(this).promise();
                };
                Promise.prototype.error = function (fn) {
                  return this.caught(util.originatesFromRejection, fn);
                };
                Promise.getNewLibraryCopy = module.exports;
                Promise.is = function (val) {
                  return val instanceof Promise;
                };
                Promise.fromNode = Promise.fromCallback = function (fn) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs : false;
                  var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
                  if (result === errorObj) {
                    ret._rejectCallback(result.e, true);
                  }
                  if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
                  return ret;
                };
                Promise.all = function (promises) {
                  return new PromiseArray(promises).promise();
                };
                Promise.cast = function (obj) {
                  var ret = tryConvertToPromise(obj);
                  if (!(ret instanceof Promise)) {
                    ret = new Promise(INTERNAL);
                    ret._captureStackTrace();
                    ret._setFulfilled();
                    ret._rejectionHandler0 = obj;
                  }
                  return ret;
                };
                Promise.resolve = Promise.fulfilled = Promise.cast;
                Promise.reject = Promise.rejected = function (reason) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  ret._rejectCallback(reason, true);
                  return ret;
                };
                Promise.setScheduler = function (fn) {
                  if (typeof fn !== "function") {
                    throw new TypeError("expecting a function but got " + util.classString(fn));
                  }
                  return async.setScheduler(fn);
                };
                Promise.prototype._then = function (didFulfill, didReject, _, receiver, internalData) {
                  var haveInternalData = internalData !== undefined;
                  var promise = haveInternalData ? internalData : new Promise(INTERNAL);
                  var target = this._target();
                  var bitField = target._bitField;
                  if (!haveInternalData) {
                    promise._propagateFrom(this, 3);
                    promise._captureStackTrace();
                    if (receiver === undefined && (this._bitField & 2097152) !== 0) {
                      if (!((bitField & 50397184) === 0)) {
                        receiver = this._boundValue();
                      } else {
                        receiver = target === this ? undefined : this._boundTo;
                      }
                    }
                    this._fireEvent("promiseChained", this, promise);
                  }
                  var domain = getDomain();
                  if (!((bitField & 50397184) === 0)) {
                    var handler, value, settler = target._settlePromiseCtx;
                    if ((bitField & 33554432) !== 0) {
                      value = target._rejectionHandler0;
                      handler = didFulfill;
                    } else if ((bitField & 16777216) !== 0) {
                      value = target._fulfillmentHandler0;
                      handler = didReject;
                      target._unsetRejectionIsUnhandled();
                    } else {
                      settler = target._settlePromiseLateCancellationObserver;
                      value = new CancellationError("late cancellation observer");
                      target._attachExtraTrace(value);
                      handler = didReject;
                    }
                    async.invoke(settler, target, {
                      handler: domain === null ? handler : typeof handler === "function" && util.domainBind(domain, handler),
                      promise: promise,
                      receiver: receiver,
                      value: value
                    });
                  } else {
                    target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
                  }
                  return promise;
                };
                Promise.prototype._length = function () {
                  return this._bitField & 65535;
                };
                Promise.prototype._isFateSealed = function () {
                  return (this._bitField & 117506048) !== 0;
                };
                Promise.prototype._isFollowing = function () {
                  return (this._bitField & 67108864) === 67108864;
                };
                Promise.prototype._setLength = function (len) {
                  this._bitField = this._bitField & -65536 | len & 65535;
                };
                Promise.prototype._setFulfilled = function () {
                  this._bitField = this._bitField | 33554432;
                  this._fireEvent("promiseFulfilled", this);
                };
                Promise.prototype._setRejected = function () {
                  this._bitField = this._bitField | 16777216;
                  this._fireEvent("promiseRejected", this);
                };
                Promise.prototype._setFollowing = function () {
                  this._bitField = this._bitField | 67108864;
                  this._fireEvent("promiseResolved", this);
                };
                Promise.prototype._setIsFinal = function () {
                  this._bitField = this._bitField | 4194304;
                };
                Promise.prototype._isFinal = function () {
                  return (this._bitField & 4194304) > 0;
                };
                Promise.prototype._unsetCancelled = function () {
                  this._bitField = this._bitField & ~65536;
                };
                Promise.prototype._setCancelled = function () {
                  this._bitField = this._bitField | 65536;
                  this._fireEvent("promiseCancelled", this);
                };
                Promise.prototype._setWillBeCancelled = function () {
                  this._bitField = this._bitField | 8388608;
                };
                Promise.prototype._setAsyncGuaranteed = function () {
                  if (async.hasCustomScheduler()) return;
                  this._bitField = this._bitField | 134217728;
                };
                Promise.prototype._receiverAt = function (index) {
                  var ret = index === 0 ? this._receiver0 : this[index * 4 - 4 + 3];
                  if (ret === UNDEFINED_BINDING) {
                    return undefined;
                  } else if (ret === undefined && this._isBound()) {
                    return this._boundValue();
                  }
                  return ret;
                };
                Promise.prototype._promiseAt = function (index) {
                  return this[index * 4 - 4 + 2];
                };
                Promise.prototype._fulfillmentHandlerAt = function (index) {
                  return this[index * 4 - 4 + 0];
                };
                Promise.prototype._rejectionHandlerAt = function (index) {
                  return this[index * 4 - 4 + 1];
                };
                Promise.prototype._boundValue = function () {};
                Promise.prototype._migrateCallback0 = function (follower) {
                  var bitField = follower._bitField;
                  var fulfill = follower._fulfillmentHandler0;
                  var reject = follower._rejectionHandler0;
                  var promise = follower._promise0;
                  var receiver = follower._receiverAt(0);
                  if (receiver === undefined) receiver = UNDEFINED_BINDING;
                  this._addCallbacks(fulfill, reject, promise, receiver, null);
                };
                Promise.prototype._migrateCallbackAt = function (follower, index) {
                  var fulfill = follower._fulfillmentHandlerAt(index);
                  var reject = follower._rejectionHandlerAt(index);
                  var promise = follower._promiseAt(index);
                  var receiver = follower._receiverAt(index);
                  if (receiver === undefined) receiver = UNDEFINED_BINDING;
                  this._addCallbacks(fulfill, reject, promise, receiver, null);
                };
                Promise.prototype._addCallbacks = function (fulfill, reject, promise, receiver, domain) {
                  var index = this._length();
                  if (index >= 65535 - 4) {
                    index = 0;
                    this._setLength(0);
                  }
                  if (index === 0) {
                    this._promise0 = promise;
                    this._receiver0 = receiver;
                    if (typeof fulfill === "function") {
                      this._fulfillmentHandler0 = domain === null ? fulfill : util.domainBind(domain, fulfill);
                    }
                    if (typeof reject === "function") {
                      this._rejectionHandler0 = domain === null ? reject : util.domainBind(domain, reject);
                    }
                  } else {
                    var base = index * 4 - 4;
                    this[base + 2] = promise;
                    this[base + 3] = receiver;
                    if (typeof fulfill === "function") {
                      this[base + 0] = domain === null ? fulfill : util.domainBind(domain, fulfill);
                    }
                    if (typeof reject === "function") {
                      this[base + 1] = domain === null ? reject : util.domainBind(domain, reject);
                    }
                  }
                  this._setLength(index + 1);
                  return index;
                };
                Promise.prototype._proxy = function (proxyable, arg) {
                  this._addCallbacks(undefined, undefined, arg, proxyable, null);
                };
                Promise.prototype._resolveCallback = function (value, shouldBind) {
                  if ((this._bitField & 117506048) !== 0) return;
                  if (value === this) return this._rejectCallback(makeSelfResolutionError(), false);
                  var maybePromise = tryConvertToPromise(value, this);
                  if (!(maybePromise instanceof Promise)) return this._fulfill(value);
                  if (shouldBind) this._propagateFrom(maybePromise, 2);
                  var promise = maybePromise._target();
                  if (promise === this) {
                    this._reject(makeSelfResolutionError());
                    return;
                  }
                  var bitField = promise._bitField;
                  if ((bitField & 50397184) === 0) {
                    var len = this._length();
                    if (len > 0) promise._migrateCallback0(this);
                    for (var i = 1; i < len; ++i) {
                      promise._migrateCallbackAt(this, i);
                    }
                    this._setFollowing();
                    this._setLength(0);
                    this._setFollowee(promise);
                  } else if ((bitField & 33554432) !== 0) {
                    this._fulfill(promise._value());
                  } else if ((bitField & 16777216) !== 0) {
                    this._reject(promise._reason());
                  } else {
                    var reason = new CancellationError("late cancellation observer");
                    promise._attachExtraTrace(reason);
                    this._reject(reason);
                  }
                };
                Promise.prototype._rejectCallback = function (reason, synchronous, ignoreNonErrorWarnings) {
                  var trace = util.ensureErrorObject(reason);
                  var hasStack = trace === reason;
                  if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
                    var message = "a promise was rejected with a non-error: " + util.classString(reason);
                    this._warn(message, true);
                  }
                  this._attachExtraTrace(trace, synchronous ? hasStack : false);
                  this._reject(reason);
                };
                Promise.prototype._resolveFromExecutor = function (executor) {
                  if (executor === INTERNAL) return;
                  var promise = this;
                  this._captureStackTrace();
                  this._pushContext();
                  var synchronous = true;
                  var r = this._execute(executor, function (value) {
                    promise._resolveCallback(value);
                  }, function (reason) {
                    promise._rejectCallback(reason, synchronous);
                  });
                  synchronous = false;
                  this._popContext();
                  if (r !== undefined) {
                    promise._rejectCallback(r, true);
                  }
                };
                Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
                  var bitField = promise._bitField;
                  if ((bitField & 65536) !== 0) return;
                  promise._pushContext();
                  var x;
                  if (receiver === APPLY) {
                    if (!value || typeof value.length !== "number") {
                      x = errorObj;
                      x.e = new TypeError("cannot .spread() a non-array: " + util.classString(value));
                    } else {
                      x = tryCatch(handler).apply(this._boundValue(), value);
                    }
                  } else {
                    x = tryCatch(handler).call(receiver, value);
                  }
                  var promiseCreated = promise._popContext();
                  bitField = promise._bitField;
                  if ((bitField & 65536) !== 0) return;
                  if (x === NEXT_FILTER) {
                    promise._reject(value);
                  } else if (x === errorObj) {
                    promise._rejectCallback(x.e, false);
                  } else {
                    debug.checkForgottenReturns(x, promiseCreated, "", promise, this);
                    promise._resolveCallback(x);
                  }
                };
                Promise.prototype._target = function () {
                  var ret = this;
                  while (ret._isFollowing()) ret = ret._followee();
                  return ret;
                };
                Promise.prototype._followee = function () {
                  return this._rejectionHandler0;
                };
                Promise.prototype._setFollowee = function (promise) {
                  this._rejectionHandler0 = promise;
                };
                Promise.prototype._settlePromise = function (promise, handler, receiver, value) {
                  var isPromise = promise instanceof Promise;
                  var bitField = this._bitField;
                  var asyncGuaranteed = (bitField & 134217728) !== 0;
                  if ((bitField & 65536) !== 0) {
                    if (isPromise) promise._invokeInternalOnCancel();
                    if (receiver instanceof PassThroughHandlerContext && receiver.isFinallyHandler()) {
                      receiver.cancelPromise = promise;
                      if (tryCatch(handler).call(receiver, value) === errorObj) {
                        promise._reject(errorObj.e);
                      }
                    } else if (handler === reflectHandler) {
                      promise._fulfill(reflectHandler.call(receiver));
                    } else if (receiver instanceof Proxyable) {
                      receiver._promiseCancelled(promise);
                    } else if (isPromise || promise instanceof PromiseArray) {
                      promise._cancel();
                    } else {
                      receiver.cancel();
                    }
                  } else if (typeof handler === "function") {
                    if (!isPromise) {
                      handler.call(receiver, value, promise);
                    } else {
                      if (asyncGuaranteed) promise._setAsyncGuaranteed();
                      this._settlePromiseFromHandler(handler, receiver, value, promise);
                    }
                  } else if (receiver instanceof Proxyable) {
                    if (!receiver._isResolved()) {
                      if ((bitField & 33554432) !== 0) {
                        receiver._promiseFulfilled(value, promise);
                      } else {
                        receiver._promiseRejected(value, promise);
                      }
                    }
                  } else if (isPromise) {
                    if (asyncGuaranteed) promise._setAsyncGuaranteed();
                    if ((bitField & 33554432) !== 0) {
                      promise._fulfill(value);
                    } else {
                      promise._reject(value);
                    }
                  }
                };
                Promise.prototype._settlePromiseLateCancellationObserver = function (ctx) {
                  var handler = ctx.handler;
                  var promise = ctx.promise;
                  var receiver = ctx.receiver;
                  var value = ctx.value;
                  if (typeof handler === "function") {
                    if (!(promise instanceof Promise)) {
                      handler.call(receiver, value, promise);
                    } else {
                      this._settlePromiseFromHandler(handler, receiver, value, promise);
                    }
                  } else if (promise instanceof Promise) {
                    promise._reject(value);
                  }
                };
                Promise.prototype._settlePromiseCtx = function (ctx) {
                  this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
                };
                Promise.prototype._settlePromise0 = function (handler, value, bitField) {
                  var promise = this._promise0;
                  var receiver = this._receiverAt(0);
                  this._promise0 = undefined;
                  this._receiver0 = undefined;
                  this._settlePromise(promise, handler, receiver, value);
                };
                Promise.prototype._clearCallbackDataAtIndex = function (index) {
                  var base = index * 4 - 4;
                  this[base + 2] = this[base + 3] = this[base + 0] = this[base + 1] = undefined;
                };
                Promise.prototype._fulfill = function (value) {
                  var bitField = this._bitField;
                  if ((bitField & 117506048) >>> 16) return;
                  if (value === this) {
                    var err = makeSelfResolutionError();
                    this._attachExtraTrace(err);
                    return this._reject(err);
                  }
                  this._setFulfilled();
                  this._rejectionHandler0 = value;
                  if ((bitField & 65535) > 0) {
                    if ((bitField & 134217728) !== 0) {
                      this._settlePromises();
                    } else {
                      async.settlePromises(this);
                    }
                  }
                };
                Promise.prototype._reject = function (reason) {
                  var bitField = this._bitField;
                  if ((bitField & 117506048) >>> 16) return;
                  this._setRejected();
                  this._fulfillmentHandler0 = reason;
                  if (this._isFinal()) {
                    return async.fatalError(reason, util.isNode);
                  }
                  if ((bitField & 65535) > 0) {
                    async.settlePromises(this);
                  } else {
                    this._ensurePossibleRejectionHandled();
                  }
                };
                Promise.prototype._fulfillPromises = function (len, value) {
                  for (var i = 1; i < len; i++) {
                    var handler = this._fulfillmentHandlerAt(i);
                    var promise = this._promiseAt(i);
                    var receiver = this._receiverAt(i);
                    this._clearCallbackDataAtIndex(i);
                    this._settlePromise(promise, handler, receiver, value);
                  }
                };
                Promise.prototype._rejectPromises = function (len, reason) {
                  for (var i = 1; i < len; i++) {
                    var handler = this._rejectionHandlerAt(i);
                    var promise = this._promiseAt(i);
                    var receiver = this._receiverAt(i);
                    this._clearCallbackDataAtIndex(i);
                    this._settlePromise(promise, handler, receiver, reason);
                  }
                };
                Promise.prototype._settlePromises = function () {
                  var bitField = this._bitField;
                  var len = bitField & 65535;
                  if (len > 0) {
                    if ((bitField & 16842752) !== 0) {
                      var reason = this._fulfillmentHandler0;
                      this._settlePromise0(this._rejectionHandler0, reason, bitField);
                      this._rejectPromises(len, reason);
                    } else {
                      var value = this._rejectionHandler0;
                      this._settlePromise0(this._fulfillmentHandler0, value, bitField);
                      this._fulfillPromises(len, value);
                    }
                    this._setLength(0);
                  }
                  this._clearCancellationData();
                };
                Promise.prototype._settledValue = function () {
                  var bitField = this._bitField;
                  if ((bitField & 33554432) !== 0) {
                    return this._rejectionHandler0;
                  } else if ((bitField & 16777216) !== 0) {
                    return this._fulfillmentHandler0;
                  }
                };
                function deferResolve(v) {
                  this.promise._resolveCallback(v);
                }
                function deferReject(v) {
                  this.promise._rejectCallback(v, false);
                }
                Promise.defer = Promise.pending = function () {
                  debug.deprecated("Promise.defer", "new Promise");
                  var promise = new Promise(INTERNAL);
                  return {
                    promise: promise,
                    resolve: deferResolve,
                    reject: deferReject
                  };
                };
                util.notEnumerableProp(Promise, "_makeSelfResolutionError", makeSelfResolutionError);
                _dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug);
                _dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
                _dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
                _dereq_("./direct_resolve")(Promise);
                _dereq_("./synchronous_inspection")(Promise);
                _dereq_("./join")(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);
                Promise.Promise = Promise;
                Promise.version = "3.5.1";
                _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
                _dereq_('./call_get.js')(Promise);
                _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
                _dereq_('./timers.js')(Promise, INTERNAL, debug);
                _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
                _dereq_('./nodeify.js')(Promise);
                _dereq_('./promisify.js')(Promise, INTERNAL);
                _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
                _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
                _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
                _dereq_('./settle.js')(Promise, PromiseArray, debug);
                _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
                _dereq_('./filter.js')(Promise, INTERNAL);
                _dereq_('./each.js')(Promise, INTERNAL);
                _dereq_('./any.js')(Promise);
                util.toFastProperties(Promise);
                util.toFastProperties(Promise.prototype);
                function fillTypes(value) {
                  var p = new Promise(INTERNAL);
                  p._fulfillmentHandler0 = value;
                  p._rejectionHandler0 = value;
                  p._promise0 = value;
                  p._receiver0 = value;
                }
                // Complete slack tracking, opt out of field-type tracking and
                // stabilize map
                fillTypes({
                  a: 1
                });
                fillTypes({
                  b: 2
                });
                fillTypes({
                  c: 3
                });
                fillTypes(1);
                fillTypes(function () {});
                fillTypes(undefined);
                fillTypes(false);
                fillTypes(new Promise(INTERNAL));
                debug.setBounds(Async.firstLineError, util.lastLineError);
                return Promise;
              };
            }, {
              "./any.js": 1,
              "./async": 2,
              "./bind": 3,
              "./call_get.js": 5,
              "./cancel": 6,
              "./catch_filter": 7,
              "./context": 8,
              "./debuggability": 9,
              "./direct_resolve": 10,
              "./each.js": 11,
              "./errors": 12,
              "./es5": 13,
              "./filter.js": 14,
              "./finally": 15,
              "./generators.js": 16,
              "./join": 17,
              "./map.js": 18,
              "./method": 19,
              "./nodeback": 20,
              "./nodeify.js": 21,
              "./promise_array": 23,
              "./promisify.js": 24,
              "./props.js": 25,
              "./race.js": 27,
              "./reduce.js": 28,
              "./settle.js": 30,
              "./some.js": 31,
              "./synchronous_inspection": 32,
              "./thenables": 33,
              "./timers.js": 34,
              "./using.js": 35,
              "./util": 36
            }],
            23: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection, Proxyable) {
                var util = _dereq_("./util");
                var isArray = util.isArray;
                function toResolutionValue(val) {
                  switch (val) {
                    case -2:
                      return [];
                    case -3:
                      return {};
                    case -6:
                      return new Map();
                  }
                }
                function PromiseArray(values) {
                  var promise = this._promise = new Promise(INTERNAL);
                  if (values instanceof Promise) {
                    promise._propagateFrom(values, 3);
                  }
                  promise._setOnCancel(this);
                  this._values = values;
                  this._length = 0;
                  this._totalResolved = 0;
                  this._init(undefined, -2);
                }
                util.inherits(PromiseArray, Proxyable);
                PromiseArray.prototype.length = function () {
                  return this._length;
                };
                PromiseArray.prototype.promise = function () {
                  return this._promise;
                };
                PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                  var values = tryConvertToPromise(this._values, this._promise);
                  if (values instanceof Promise) {
                    values = values._target();
                    var bitField = values._bitField;
                    ;
                    this._values = values;
                    if ((bitField & 50397184) === 0) {
                      this._promise._setAsyncGuaranteed();
                      return values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
                    } else if ((bitField & 33554432) !== 0) {
                      values = values._value();
                    } else if ((bitField & 16777216) !== 0) {
                      return this._reject(values._reason());
                    } else {
                      return this._cancel();
                    }
                  }
                  values = util.asArray(values);
                  if (values === null) {
                    var err = apiRejection("expecting an array or an iterable object but got " + util.classString(values)).reason();
                    this._promise._rejectCallback(err, false);
                    return;
                  }
                  if (values.length === 0) {
                    if (resolveValueIfEmpty === -5) {
                      this._resolveEmptyArray();
                    } else {
                      this._resolve(toResolutionValue(resolveValueIfEmpty));
                    }
                    return;
                  }
                  this._iterate(values);
                };
                PromiseArray.prototype._iterate = function (values) {
                  var len = this.getActualLength(values.length);
                  this._length = len;
                  this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                  var result = this._promise;
                  var isResolved = false;
                  var bitField = null;
                  for (var i = 0; i < len; ++i) {
                    var maybePromise = tryConvertToPromise(values[i], result);
                    if (maybePromise instanceof Promise) {
                      maybePromise = maybePromise._target();
                      bitField = maybePromise._bitField;
                    } else {
                      bitField = null;
                    }
                    if (isResolved) {
                      if (bitField !== null) {
                        maybePromise.suppressUnhandledRejections();
                      }
                    } else if (bitField !== null) {
                      if ((bitField & 50397184) === 0) {
                        maybePromise._proxy(this, i);
                        this._values[i] = maybePromise;
                      } else if ((bitField & 33554432) !== 0) {
                        isResolved = this._promiseFulfilled(maybePromise._value(), i);
                      } else if ((bitField & 16777216) !== 0) {
                        isResolved = this._promiseRejected(maybePromise._reason(), i);
                      } else {
                        isResolved = this._promiseCancelled(i);
                      }
                    } else {
                      isResolved = this._promiseFulfilled(maybePromise, i);
                    }
                  }
                  if (!isResolved) result._setAsyncGuaranteed();
                };
                PromiseArray.prototype._isResolved = function () {
                  return this._values === null;
                };
                PromiseArray.prototype._resolve = function (value) {
                  this._values = null;
                  this._promise._fulfill(value);
                };
                PromiseArray.prototype._cancel = function () {
                  if (this._isResolved() || !this._promise._isCancellable()) return;
                  this._values = null;
                  this._promise._cancel();
                };
                PromiseArray.prototype._reject = function (reason) {
                  this._values = null;
                  this._promise._rejectCallback(reason, false);
                };
                PromiseArray.prototype._promiseFulfilled = function (value, index) {
                  this._values[index] = value;
                  var totalResolved = ++this._totalResolved;
                  if (totalResolved >= this._length) {
                    this._resolve(this._values);
                    return true;
                  }
                  return false;
                };
                PromiseArray.prototype._promiseCancelled = function () {
                  this._cancel();
                  return true;
                };
                PromiseArray.prototype._promiseRejected = function (reason) {
                  this._totalResolved++;
                  this._reject(reason);
                  return true;
                };
                PromiseArray.prototype._resultCancelled = function () {
                  if (this._isResolved()) return;
                  var values = this._values;
                  this._cancel();
                  if (values instanceof Promise) {
                    values.cancel();
                  } else {
                    for (var i = 0; i < values.length; ++i) {
                      if (values[i] instanceof Promise) {
                        values[i].cancel();
                      }
                    }
                  }
                };
                PromiseArray.prototype.shouldCopyValues = function () {
                  return true;
                };
                PromiseArray.prototype.getActualLength = function (len) {
                  return len;
                };
                return PromiseArray;
              };
            }, {
              "./util": 36
            }],
            24: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL) {
                var THIS = {};
                var util = _dereq_("./util");
                var nodebackForPromise = _dereq_("./nodeback");
                var withAppended = util.withAppended;
                var maybeWrapAsError = util.maybeWrapAsError;
                var canEvaluate = util.canEvaluate;
                var TypeError = _dereq_("./errors").TypeError;
                var defaultSuffix = "Async";
                var defaultPromisified = {
                  __isPromisified__: true
                };
                var noCopyProps = ["arity", "length", "name", "arguments", "caller", "callee", "prototype", "__isPromisified__"];
                var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
                var defaultFilter = function (name) {
                  return util.isIdentifier(name) && name.charAt(0) !== "_" && name !== "constructor";
                };
                function propsFilter(key) {
                  return !noCopyPropsPattern.test(key);
                }
                function isPromisified(fn) {
                  try {
                    return fn.__isPromisified__ === true;
                  } catch (e) {
                    return false;
                  }
                }
                function hasPromisified(obj, key, suffix) {
                  var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
                  return val ? isPromisified(val) : false;
                }
                function checkValid(ret, suffix, suffixRegexp) {
                  for (var i = 0; i < ret.length; i += 2) {
                    var key = ret[i];
                    if (suffixRegexp.test(key)) {
                      var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
                      for (var j = 0; j < ret.length; j += 2) {
                        if (ret[j] === keyWithoutAsyncSuffix) {
                          throw new TypeError(("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a").replace("%s", suffix));
                        }
                      }
                    }
                  }
                }
                function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                  var keys = util.inheritedDataKeys(obj);
                  var ret = [];
                  for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    var value = obj[key];
                    var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
                    if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
                      ret.push(key, value);
                    }
                  }
                  checkValid(ret, suffix, suffixRegexp);
                  return ret;
                }
                var escapeIdentRegex = function (str) {
                  return str.replace(/([$])/, "\\$");
                };
                var makeNodePromisifiedEval;
                if (!true) {
                  var switchCaseArgumentOrder = function (likelyArgumentCount) {
                    var ret = [likelyArgumentCount];
                    var min = Math.max(0, likelyArgumentCount - 1 - 3);
                    for (var i = likelyArgumentCount - 1; i >= min; --i) {
                      ret.push(i);
                    }
                    for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                      ret.push(i);
                    }
                    return ret;
                  };
                  var argumentSequence = function (argumentCount) {
                    return util.filledRange(argumentCount, "_arg", "");
                  };
                  var parameterDeclaration = function (parameterCount) {
                    return util.filledRange(Math.max(parameterCount, 3), "_arg", "");
                  };
                  var parameterCount = function (fn) {
                    if (typeof fn.length === "number") {
                      return Math.max(Math.min(fn.length, 1023 + 1), 0);
                    }
                    return 0;
                  };
                  makeNodePromisifiedEval = function (callback, receiver, originalName, fn, _, multiArgs) {
                    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                    var shouldProxyThis = typeof callback === "string" || receiver === THIS;
                    function generateCallForArgumentCount(count) {
                      var args = argumentSequence(count).join(", ");
                      var comma = count > 0 ? ", " : "";
                      var ret;
                      if (shouldProxyThis) {
                        ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
                      } else {
                        ret = receiver === undefined ? "ret = callback({{args}}, nodeback); break;\n" : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
                      }
                      return ret.replace("{{args}}", args).replace(", ", comma);
                    }
                    function generateArgumentSwitchCase() {
                      var ret = "";
                      for (var i = 0; i < argumentOrder.length; ++i) {
                        ret += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
                      }
                      ret += ("                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ").replace("[CodeForCall]", shouldProxyThis ? "ret = callback.apply(this, args);\n" : "ret = callback.apply(receiver, args);\n");
                      return ret;
                    }
                    var getFunctionCode = typeof callback === "string" ? "this != null ? this['" + callback + "'] : fn" : "fn";
                    var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + (");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ").replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).replace("[GetFunctionCode]", getFunctionCode);
                    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
                    return new Function("Promise", "fn", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "tryCatch", "errorObj", "notEnumerableProp", "INTERNAL", body)(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL);
                  };
                }
                function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
                  var defaultThis = (function () {
                    return this;
                  })();
                  var method = callback;
                  if (typeof method === "string") {
                    callback = fn;
                  }
                  function promisified() {
                    var _receiver = receiver;
                    if (receiver === THIS) _receiver = this;
                    var promise = new Promise(INTERNAL);
                    promise._captureStackTrace();
                    var cb = typeof method === "string" && this !== defaultThis ? this[method] : callback;
                    var fn = nodebackForPromise(promise, multiArgs);
                    try {
                      cb.apply(_receiver, withAppended(arguments, fn));
                    } catch (e) {
                      promise._rejectCallback(maybeWrapAsError(e), true, true);
                    }
                    if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
                    return promise;
                  }
                  util.notEnumerableProp(promisified, "__isPromisified__", true);
                  return promisified;
                }
                var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
                function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
                  var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
                  var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
                  for (var i = 0, len = methods.length; i < len; i += 2) {
                    var key = methods[i];
                    var fn = methods[i + 1];
                    var promisifiedKey = key + suffix;
                    if (promisifier === makeNodePromisified) {
                      obj[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
                    } else {
                      var promisified = promisifier(fn, function () {
                        return makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
                      });
                      util.notEnumerableProp(promisified, "__isPromisified__", true);
                      obj[promisifiedKey] = promisified;
                    }
                  }
                  util.toFastProperties(obj);
                  return obj;
                }
                function promisify(callback, receiver, multiArgs) {
                  return makeNodePromisified(callback, receiver, undefined, callback, null, multiArgs);
                }
                Promise.promisify = function (fn, options) {
                  if (typeof fn !== "function") {
                    throw new TypeError("expecting a function but got " + util.classString(fn));
                  }
                  if (isPromisified(fn)) {
                    return fn;
                  }
                  options = Object(options);
                  var receiver = options.context === undefined ? THIS : options.context;
                  var multiArgs = !!options.multiArgs;
                  var ret = promisify(fn, receiver, multiArgs);
                  util.copyDescriptors(fn, ret, propsFilter);
                  return ret;
                };
                Promise.promisifyAll = function (target, options) {
                  if (typeof target !== "function" && typeof target !== "object") {
                    throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  options = Object(options);
                  var multiArgs = !!options.multiArgs;
                  var suffix = options.suffix;
                  if (typeof suffix !== "string") suffix = defaultSuffix;
                  var filter = options.filter;
                  if (typeof filter !== "function") filter = defaultFilter;
                  var promisifier = options.promisifier;
                  if (typeof promisifier !== "function") promisifier = makeNodePromisified;
                  if (!util.isIdentifier(suffix)) {
                    throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  var keys = util.inheritedDataKeys(target);
                  for (var i = 0; i < keys.length; ++i) {
                    var value = target[keys[i]];
                    if (keys[i] !== "constructor" && util.isClass(value)) {
                      promisifyAll(value.prototype, suffix, filter, promisifier, multiArgs);
                      promisifyAll(value, suffix, filter, promisifier, multiArgs);
                    }
                  }
                  return promisifyAll(target, suffix, filter, promisifier, multiArgs);
                };
              };
            }, {
              "./errors": 12,
              "./nodeback": 20,
              "./util": 36
            }],
            25: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {
                var util = _dereq_("./util");
                var isObject = util.isObject;
                var es5 = _dereq_("./es5");
                var Es6Map;
                if (typeof Map === "function") Es6Map = Map;
                var mapToEntries = (function () {
                  var index = 0;
                  var size = 0;
                  function extractEntry(value, key) {
                    this[index] = value;
                    this[index + size] = key;
                    index++;
                  }
                  return function mapToEntries(map) {
                    size = map.size;
                    index = 0;
                    var ret = new Array(map.size * 2);
                    map.forEach(extractEntry, ret);
                    return ret;
                  };
                })();
                var entriesToMap = function (entries) {
                  var ret = new Es6Map();
                  var length = entries.length / 2 | 0;
                  for (var i = 0; i < length; ++i) {
                    var key = entries[length + i];
                    var value = entries[i];
                    ret.set(key, value);
                  }
                  return ret;
                };
                function PropertiesPromiseArray(obj) {
                  var isMap = false;
                  var entries;
                  if (Es6Map !== undefined && obj instanceof Es6Map) {
                    entries = mapToEntries(obj);
                    isMap = true;
                  } else {
                    var keys = es5.keys(obj);
                    var len = keys.length;
                    entries = new Array(len * 2);
                    for (var i = 0; i < len; ++i) {
                      var key = keys[i];
                      entries[i] = obj[key];
                      entries[i + len] = key;
                    }
                  }
                  this.constructor$(entries);
                  this._isMap = isMap;
                  this._init$(undefined, isMap ? -6 : -3);
                }
                util.inherits(PropertiesPromiseArray, PromiseArray);
                PropertiesPromiseArray.prototype._init = function () {};
                PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                  this._values[index] = value;
                  var totalResolved = ++this._totalResolved;
                  if (totalResolved >= this._length) {
                    var val;
                    if (this._isMap) {
                      val = entriesToMap(this._values);
                    } else {
                      val = {};
                      var keyOffset = this.length();
                      for (var i = 0, len = this.length(); i < len; ++i) {
                        val[this._values[i + keyOffset]] = this._values[i];
                      }
                    }
                    this._resolve(val);
                    return true;
                  }
                  return false;
                };
                PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                  return false;
                };
                PropertiesPromiseArray.prototype.getActualLength = function (len) {
                  return len >> 1;
                };
                function props(promises) {
                  var ret;
                  var castValue = tryConvertToPromise(promises);
                  if (!isObject(castValue)) {
                    return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  } else if (castValue instanceof Promise) {
                    ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined);
                  } else {
                    ret = new PropertiesPromiseArray(castValue).promise();
                  }
                  if (castValue instanceof Promise) {
                    ret._propagateFrom(castValue, 2);
                  }
                  return ret;
                }
                Promise.prototype.props = function () {
                  return props(this);
                };
                Promise.props = function (promises) {
                  return props(promises);
                };
              };
            }, {
              "./es5": 13,
              "./util": 36
            }],
            26: [function (_dereq_, module, exports) {
              "use strict";
              function arrayMove(src, srcIndex, dst, dstIndex, len) {
                for (var j = 0; j < len; ++j) {
                  dst[j + dstIndex] = src[j + srcIndex];
                  src[j + srcIndex] = void 0;
                }
              }
              function Queue(capacity) {
                this._capacity = capacity;
                this._length = 0;
                this._front = 0;
              }
              Queue.prototype._willBeOverCapacity = function (size) {
                return this._capacity < size;
              };
              Queue.prototype._pushOne = function (arg) {
                var length = this.length();
                this._checkCapacity(length + 1);
                var i = this._front + length & this._capacity - 1;
                this[i] = arg;
                this._length = length + 1;
              };
              Queue.prototype.push = function (fn, receiver, arg) {
                var length = this.length() + 3;
                if (this._willBeOverCapacity(length)) {
                  this._pushOne(fn);
                  this._pushOne(receiver);
                  this._pushOne(arg);
                  return;
                }
                var j = this._front + length - 3;
                this._checkCapacity(length);
                var wrapMask = this._capacity - 1;
                this[j + 0 & wrapMask] = fn;
                this[j + 1 & wrapMask] = receiver;
                this[j + 2 & wrapMask] = arg;
                this._length = length;
              };
              Queue.prototype.shift = function () {
                var front = this._front, ret = this[front];
                this[front] = undefined;
                this._front = front + 1 & this._capacity - 1;
                this._length--;
                return ret;
              };
              Queue.prototype.length = function () {
                return this._length;
              };
              Queue.prototype._checkCapacity = function (size) {
                if (this._capacity < size) {
                  this._resizeTo(this._capacity << 1);
                }
              };
              Queue.prototype._resizeTo = function (capacity) {
                var oldCapacity = this._capacity;
                this._capacity = capacity;
                var front = this._front;
                var length = this._length;
                var moveItemsCount = front + length & oldCapacity - 1;
                arrayMove(this, 0, this, oldCapacity, moveItemsCount);
              };
              module.exports = Queue;
            }, {}],
            27: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
                var util = _dereq_("./util");
                var raceLater = function (promise) {
                  return promise.then(function (array) {
                    return race(array, promise);
                  });
                };
                function race(promises, parent) {
                  var maybePromise = tryConvertToPromise(promises);
                  if (maybePromise instanceof Promise) {
                    return raceLater(maybePromise);
                  } else {
                    promises = util.asArray(promises);
                    if (promises === null) return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
                  }
                  var ret = new Promise(INTERNAL);
                  if (parent !== undefined) {
                    ret._propagateFrom(parent, 3);
                  }
                  var fulfill = ret._fulfill;
                  var reject = ret._reject;
                  for (var i = 0, len = promises.length; i < len; ++i) {
                    var val = promises[i];
                    if (val === undefined && !((i in promises))) {
                      continue;
                    }
                    Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
                  }
                  return ret;
                }
                Promise.race = function (promises) {
                  return race(promises, undefined);
                };
                Promise.prototype.race = function () {
                  return race(this, undefined);
                };
              };
            }, {
              "./util": 36
            }],
            28: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug) {
                var getDomain = Promise._getDomain;
                var util = _dereq_("./util");
                var tryCatch = util.tryCatch;
                function ReductionPromiseArray(promises, fn, initialValue, _each) {
                  this.constructor$(promises);
                  var domain = getDomain();
                  this._fn = domain === null ? fn : util.domainBind(domain, fn);
                  if (initialValue !== undefined) {
                    initialValue = Promise.resolve(initialValue);
                    initialValue._attachCancellationCallback(this);
                  }
                  this._initialValue = initialValue;
                  this._currentCancellable = null;
                  if (_each === INTERNAL) {
                    this._eachValues = Array(this._length);
                  } else if (_each === 0) {
                    this._eachValues = null;
                  } else {
                    this._eachValues = undefined;
                  }
                  this._promise._captureStackTrace();
                  this._init$(undefined, -5);
                }
                util.inherits(ReductionPromiseArray, PromiseArray);
                ReductionPromiseArray.prototype._gotAccum = function (accum) {
                  if (this._eachValues !== undefined && this._eachValues !== null && accum !== INTERNAL) {
                    this._eachValues.push(accum);
                  }
                };
                ReductionPromiseArray.prototype._eachComplete = function (value) {
                  if (this._eachValues !== null) {
                    this._eachValues.push(value);
                  }
                  return this._eachValues;
                };
                ReductionPromiseArray.prototype._init = function () {};
                ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                  this._resolve(this._eachValues !== undefined ? this._eachValues : this._initialValue);
                };
                ReductionPromiseArray.prototype.shouldCopyValues = function () {
                  return false;
                };
                ReductionPromiseArray.prototype._resolve = function (value) {
                  this._promise._resolveCallback(value);
                  this._values = null;
                };
                ReductionPromiseArray.prototype._resultCancelled = function (sender) {
                  if (sender === this._initialValue) return this._cancel();
                  if (this._isResolved()) return;
                  this._resultCancelled$();
                  if (this._currentCancellable instanceof Promise) {
                    this._currentCancellable.cancel();
                  }
                  if (this._initialValue instanceof Promise) {
                    this._initialValue.cancel();
                  }
                };
                ReductionPromiseArray.prototype._iterate = function (values) {
                  this._values = values;
                  var value;
                  var i;
                  var length = values.length;
                  if (this._initialValue !== undefined) {
                    value = this._initialValue;
                    i = 0;
                  } else {
                    value = Promise.resolve(values[0]);
                    i = 1;
                  }
                  this._currentCancellable = value;
                  if (!value.isRejected()) {
                    for (; i < length; ++i) {
                      var ctx = {
                        accum: null,
                        value: values[i],
                        index: i,
                        length: length,
                        array: this
                      };
                      value = value._then(gotAccum, undefined, undefined, ctx, undefined);
                    }
                  }
                  if (this._eachValues !== undefined) {
                    value = value._then(this._eachComplete, undefined, undefined, this, undefined);
                  }
                  value._then(completed, completed, undefined, value, this);
                };
                Promise.prototype.reduce = function (fn, initialValue) {
                  return reduce(this, fn, initialValue, null);
                };
                Promise.reduce = function (promises, fn, initialValue, _each) {
                  return reduce(promises, fn, initialValue, _each);
                };
                function completed(valueOrReason, array) {
                  if (this.isFulfilled()) {
                    array._resolve(valueOrReason);
                  } else {
                    array._reject(valueOrReason);
                  }
                }
                function reduce(promises, fn, initialValue, _each) {
                  if (typeof fn !== "function") {
                    return apiRejection("expecting a function but got " + util.classString(fn));
                  }
                  var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                  return array.promise();
                }
                function gotAccum(accum) {
                  this.accum = accum;
                  this.array._gotAccum(accum);
                  var value = tryConvertToPromise(this.value, this.array._promise);
                  if (value instanceof Promise) {
                    this.array._currentCancellable = value;
                    return value._then(gotValue, undefined, undefined, this, undefined);
                  } else {
                    return gotValue.call(this, value);
                  }
                }
                function gotValue(value) {
                  var array = this.array;
                  var promise = array._promise;
                  var fn = tryCatch(array._fn);
                  promise._pushContext();
                  var ret;
                  if (array._eachValues !== undefined) {
                    ret = fn.call(promise._boundValue(), value, this.index, this.length);
                  } else {
                    ret = fn.call(promise._boundValue(), this.accum, value, this.index, this.length);
                  }
                  if (ret instanceof Promise) {
                    array._currentCancellable = ret;
                  }
                  var promiseCreated = promise._popContext();
                  debug.checkForgottenReturns(ret, promiseCreated, array._eachValues !== undefined ? "Promise.each" : "Promise.reduce", promise);
                  return ret;
                }
              };
            }, {
              "./util": 36
            }],
            29: [function (_dereq_, module, exports) {
              "use strict";
              var util = _dereq_("./util");
              var schedule;
              var noAsyncScheduler = function () {
                throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
              };
              var NativePromise = util.getNativePromise();
              if (util.isNode && typeof MutationObserver === "undefined") {
                var GlobalSetImmediate = global.setImmediate;
                var ProcessNextTick = process.nextTick;
                schedule = util.isRecentNode ? function (fn) {
                  GlobalSetImmediate.call(global, fn);
                } : function (fn) {
                  ProcessNextTick.call(process, fn);
                };
              } else if (typeof NativePromise === "function" && typeof NativePromise.resolve === "function") {
                var nativePromise = NativePromise.resolve();
                schedule = function (fn) {
                  nativePromise.then(fn);
                };
              } else if (typeof MutationObserver !== "undefined" && !(typeof window !== "undefined" && window.navigator && (window.navigator.standalone || window.cordova))) {
                schedule = (function () {
                  var div = document.createElement("div");
                  var opts = {
                    attributes: true
                  };
                  var toggleScheduled = false;
                  var div2 = document.createElement("div");
                  var o2 = new MutationObserver(function () {
                    div.classList.toggle("foo");
                    toggleScheduled = false;
                  });
                  o2.observe(div2, opts);
                  var scheduleToggle = function () {
                    if (toggleScheduled) return;
                    toggleScheduled = true;
                    div2.classList.toggle("foo");
                  };
                  return function schedule(fn) {
                    var o = new MutationObserver(function () {
                      o.disconnect();
                      fn();
                    });
                    o.observe(div, opts);
                    scheduleToggle();
                  };
                })();
              } else if (typeof setImmediate !== "undefined") {
                schedule = function (fn) {
                  setImmediate(fn);
                };
              } else if (typeof setTimeout !== "undefined") {
                schedule = function (fn) {
                  setTimeout(fn, 0);
                };
              } else {
                schedule = noAsyncScheduler;
              }
              module.exports = schedule;
            }, {
              "./util": 36
            }],
            30: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, debug) {
                var PromiseInspection = Promise.PromiseInspection;
                var util = _dereq_("./util");
                function SettledPromiseArray(values) {
                  this.constructor$(values);
                }
                util.inherits(SettledPromiseArray, PromiseArray);
                SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                  this._values[index] = inspection;
                  var totalResolved = ++this._totalResolved;
                  if (totalResolved >= this._length) {
                    this._resolve(this._values);
                    return true;
                  }
                  return false;
                };
                SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                  var ret = new PromiseInspection();
                  ret._bitField = 33554432;
                  ret._settledValueField = value;
                  return this._promiseResolved(index, ret);
                };
                SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                  var ret = new PromiseInspection();
                  ret._bitField = 16777216;
                  ret._settledValueField = reason;
                  return this._promiseResolved(index, ret);
                };
                Promise.settle = function (promises) {
                  debug.deprecated(".settle()", ".reflect()");
                  return new SettledPromiseArray(promises).promise();
                };
                Promise.prototype.settle = function () {
                  return Promise.settle(this);
                };
              };
            }, {
              "./util": 36
            }],
            31: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, PromiseArray, apiRejection) {
                var util = _dereq_("./util");
                var RangeError = _dereq_("./errors").RangeError;
                var AggregateError = _dereq_("./errors").AggregateError;
                var isArray = util.isArray;
                var CANCELLATION = {};
                function SomePromiseArray(values) {
                  this.constructor$(values);
                  this._howMany = 0;
                  this._unwrap = false;
                  this._initialized = false;
                }
                util.inherits(SomePromiseArray, PromiseArray);
                SomePromiseArray.prototype._init = function () {
                  if (!this._initialized) {
                    return;
                  }
                  if (this._howMany === 0) {
                    this._resolve([]);
                    return;
                  }
                  this._init$(undefined, -5);
                  var isArrayResolved = isArray(this._values);
                  if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                    this._reject(this._getRangeError(this.length()));
                  }
                };
                SomePromiseArray.prototype.init = function () {
                  this._initialized = true;
                  this._init();
                };
                SomePromiseArray.prototype.setUnwrap = function () {
                  this._unwrap = true;
                };
                SomePromiseArray.prototype.howMany = function () {
                  return this._howMany;
                };
                SomePromiseArray.prototype.setHowMany = function (count) {
                  this._howMany = count;
                };
                SomePromiseArray.prototype._promiseFulfilled = function (value) {
                  this._addFulfilled(value);
                  if (this._fulfilled() === this.howMany()) {
                    this._values.length = this.howMany();
                    if (this.howMany() === 1 && this._unwrap) {
                      this._resolve(this._values[0]);
                    } else {
                      this._resolve(this._values);
                    }
                    return true;
                  }
                  return false;
                };
                SomePromiseArray.prototype._promiseRejected = function (reason) {
                  this._addRejected(reason);
                  return this._checkOutcome();
                };
                SomePromiseArray.prototype._promiseCancelled = function () {
                  if (this._values instanceof Promise || this._values == null) {
                    return this._cancel();
                  }
                  this._addRejected(CANCELLATION);
                  return this._checkOutcome();
                };
                SomePromiseArray.prototype._checkOutcome = function () {
                  if (this.howMany() > this._canPossiblyFulfill()) {
                    var e = new AggregateError();
                    for (var i = this.length(); i < this._values.length; ++i) {
                      if (this._values[i] !== CANCELLATION) {
                        e.push(this._values[i]);
                      }
                    }
                    if (e.length > 0) {
                      this._reject(e);
                    } else {
                      this._cancel();
                    }
                    return true;
                  }
                  return false;
                };
                SomePromiseArray.prototype._fulfilled = function () {
                  return this._totalResolved;
                };
                SomePromiseArray.prototype._rejected = function () {
                  return this._values.length - this.length();
                };
                SomePromiseArray.prototype._addRejected = function (reason) {
                  this._values.push(reason);
                };
                SomePromiseArray.prototype._addFulfilled = function (value) {
                  this._values[this._totalResolved++] = value;
                };
                SomePromiseArray.prototype._canPossiblyFulfill = function () {
                  return this.length() - this._rejected();
                };
                SomePromiseArray.prototype._getRangeError = function (count) {
                  var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
                  return new RangeError(message);
                };
                SomePromiseArray.prototype._resolveEmptyArray = function () {
                  this._reject(this._getRangeError(0));
                };
                function some(promises, howMany) {
                  if ((howMany | 0) !== howMany || howMany < 0) {
                    return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  var ret = new SomePromiseArray(promises);
                  var promise = ret.promise();
                  ret.setHowMany(howMany);
                  ret.init();
                  return promise;
                }
                Promise.some = function (promises, howMany) {
                  return some(promises, howMany);
                };
                Promise.prototype.some = function (howMany) {
                  return some(this, howMany);
                };
                Promise._SomePromiseArray = SomePromiseArray;
              };
            }, {
              "./errors": 12,
              "./util": 36
            }],
            32: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise) {
                function PromiseInspection(promise) {
                  if (promise !== undefined) {
                    promise = promise._target();
                    this._bitField = promise._bitField;
                    this._settledValueField = promise._isFateSealed() ? promise._settledValue() : undefined;
                  } else {
                    this._bitField = 0;
                    this._settledValueField = undefined;
                  }
                }
                PromiseInspection.prototype._settledValue = function () {
                  return this._settledValueField;
                };
                var value = PromiseInspection.prototype.value = function () {
                  if (!this.isFulfilled()) {
                    throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  return this._settledValue();
                };
                var reason = PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function () {
                  if (!this.isRejected()) {
                    throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
                  }
                  return this._settledValue();
                };
                var isFulfilled = PromiseInspection.prototype.isFulfilled = function () {
                  return (this._bitField & 33554432) !== 0;
                };
                var isRejected = PromiseInspection.prototype.isRejected = function () {
                  return (this._bitField & 16777216) !== 0;
                };
                var isPending = PromiseInspection.prototype.isPending = function () {
                  return (this._bitField & 50397184) === 0;
                };
                var isResolved = PromiseInspection.prototype.isResolved = function () {
                  return (this._bitField & 50331648) !== 0;
                };
                PromiseInspection.prototype.isCancelled = function () {
                  return (this._bitField & 8454144) !== 0;
                };
                Promise.prototype.__isCancelled = function () {
                  return (this._bitField & 65536) === 65536;
                };
                Promise.prototype._isCancelled = function () {
                  return this._target().__isCancelled();
                };
                Promise.prototype.isCancelled = function () {
                  return (this._target()._bitField & 8454144) !== 0;
                };
                Promise.prototype.isPending = function () {
                  return isPending.call(this._target());
                };
                Promise.prototype.isRejected = function () {
                  return isRejected.call(this._target());
                };
                Promise.prototype.isFulfilled = function () {
                  return isFulfilled.call(this._target());
                };
                Promise.prototype.isResolved = function () {
                  return isResolved.call(this._target());
                };
                Promise.prototype.value = function () {
                  return value.call(this._target());
                };
                Promise.prototype.reason = function () {
                  var target = this._target();
                  target._unsetRejectionIsUnhandled();
                  return reason.call(target);
                };
                Promise.prototype._value = function () {
                  return this._settledValue();
                };
                Promise.prototype._reason = function () {
                  this._unsetRejectionIsUnhandled();
                  return this._settledValue();
                };
                Promise.PromiseInspection = PromiseInspection;
              };
            }, {}],
            33: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL) {
                var util = _dereq_("./util");
                var errorObj = util.errorObj;
                var isObject = util.isObject;
                function tryConvertToPromise(obj, context) {
                  if (isObject(obj)) {
                    if (obj instanceof Promise) return obj;
                    var then = getThen(obj);
                    if (then === errorObj) {
                      if (context) context._pushContext();
                      var ret = Promise.reject(then.e);
                      if (context) context._popContext();
                      return ret;
                    } else if (typeof then === "function") {
                      if (isAnyBluebirdPromise(obj)) {
                        var ret = new Promise(INTERNAL);
                        obj._then(ret._fulfill, ret._reject, undefined, ret, null);
                        return ret;
                      }
                      return doThenable(obj, then, context);
                    }
                  }
                  return obj;
                }
                function doGetThen(obj) {
                  return obj.then;
                }
                function getThen(obj) {
                  try {
                    return doGetThen(obj);
                  } catch (e) {
                    errorObj.e = e;
                    return errorObj;
                  }
                }
                var hasProp = ({}).hasOwnProperty;
                function isAnyBluebirdPromise(obj) {
                  try {
                    return hasProp.call(obj, "_promise0");
                  } catch (e) {
                    return false;
                  }
                }
                function doThenable(x, then, context) {
                  var promise = new Promise(INTERNAL);
                  var ret = promise;
                  if (context) context._pushContext();
                  promise._captureStackTrace();
                  if (context) context._popContext();
                  var synchronous = true;
                  var result = util.tryCatch(then).call(x, resolve, reject);
                  synchronous = false;
                  if (promise && result === errorObj) {
                    promise._rejectCallback(result.e, true, true);
                    promise = null;
                  }
                  function resolve(value) {
                    if (!promise) return;
                    promise._resolveCallback(value);
                    promise = null;
                  }
                  function reject(reason) {
                    if (!promise) return;
                    promise._rejectCallback(reason, synchronous, true);
                    promise = null;
                  }
                  return ret;
                }
                return tryConvertToPromise;
              };
            }, {
              "./util": 36
            }],
            34: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, INTERNAL, debug) {
                var util = _dereq_("./util");
                var TimeoutError = Promise.TimeoutError;
                function HandleWrapper(handle) {
                  this.handle = handle;
                }
                HandleWrapper.prototype._resultCancelled = function () {
                  clearTimeout(this.handle);
                };
                var afterValue = function (value) {
                  return delay(+this).thenReturn(value);
                };
                var delay = Promise.delay = function (ms, value) {
                  var ret;
                  var handle;
                  if (value !== undefined) {
                    ret = Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
                    if (debug.cancellation() && value instanceof Promise) {
                      ret._setOnCancel(value);
                    }
                  } else {
                    ret = new Promise(INTERNAL);
                    handle = setTimeout(function () {
                      ret._fulfill();
                    }, +ms);
                    if (debug.cancellation()) {
                      ret._setOnCancel(new HandleWrapper(handle));
                    }
                    ret._captureStackTrace();
                  }
                  ret._setAsyncGuaranteed();
                  return ret;
                };
                Promise.prototype.delay = function (ms) {
                  return delay(ms, this);
                };
                var afterTimeout = function (promise, message, parent) {
                  var err;
                  if (typeof message !== "string") {
                    if (message instanceof Error) {
                      err = message;
                    } else {
                      err = new TimeoutError("operation timed out");
                    }
                  } else {
                    err = new TimeoutError(message);
                  }
                  util.markAsOriginatingFromRejection(err);
                  promise._attachExtraTrace(err);
                  promise._reject(err);
                  if (parent != null) {
                    parent.cancel();
                  }
                };
                function successClear(value) {
                  clearTimeout(this.handle);
                  return value;
                }
                function failureClear(reason) {
                  clearTimeout(this.handle);
                  throw reason;
                }
                Promise.prototype.timeout = function (ms, message) {
                  ms = +ms;
                  var ret, parent;
                  var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
                    if (ret.isPending()) {
                      afterTimeout(ret, message, parent);
                    }
                  }, ms));
                  if (debug.cancellation()) {
                    parent = this.then();
                    ret = parent._then(successClear, failureClear, undefined, handleWrapper, undefined);
                    ret._setOnCancel(handleWrapper);
                  } else {
                    ret = this._then(successClear, failureClear, undefined, handleWrapper, undefined);
                  }
                  return ret;
                };
              };
            }, {
              "./util": 36
            }],
            35: [function (_dereq_, module, exports) {
              "use strict";
              module.exports = function (Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug) {
                var util = _dereq_("./util");
                var TypeError = _dereq_("./errors").TypeError;
                var inherits = _dereq_("./util").inherits;
                var errorObj = util.errorObj;
                var tryCatch = util.tryCatch;
                var NULL = {};
                function thrower(e) {
                  setTimeout(function () {
                    throw e;
                  }, 0);
                }
                function castPreservingDisposable(thenable) {
                  var maybePromise = tryConvertToPromise(thenable);
                  if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
                    maybePromise._setDisposable(thenable._getDisposer());
                  }
                  return maybePromise;
                }
                function dispose(resources, inspection) {
                  var i = 0;
                  var len = resources.length;
                  var ret = new Promise(INTERNAL);
                  function iterator() {
                    if (i >= len) return ret._fulfill();
                    var maybePromise = castPreservingDisposable(resources[i++]);
                    if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
                      try {
                        maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise);
                      } catch (e) {
                        return thrower(e);
                      }
                      if (maybePromise instanceof Promise) {
                        return maybePromise._then(iterator, thrower, null, null, null);
                      }
                    }
                    iterator();
                  }
                  iterator();
                  return ret;
                }
                function Disposer(data, promise, context) {
                  this._data = data;
                  this._promise = promise;
                  this._context = context;
                }
                Disposer.prototype.data = function () {
                  return this._data;
                };
                Disposer.prototype.promise = function () {
                  return this._promise;
                };
                Disposer.prototype.resource = function () {
                  if (this.promise().isFulfilled()) {
                    return this.promise().value();
                  }
                  return NULL;
                };
                Disposer.prototype.tryDispose = function (inspection) {
                  var resource = this.resource();
                  var context = this._context;
                  if (context !== undefined) context._pushContext();
                  var ret = resource !== NULL ? this.doDispose(resource, inspection) : null;
                  if (context !== undefined) context._popContext();
                  this._promise._unsetDisposable();
                  this._data = null;
                  return ret;
                };
                Disposer.isDisposer = function (d) {
                  return d != null && typeof d.resource === "function" && typeof d.tryDispose === "function";
                };
                function FunctionDisposer(fn, promise, context) {
                  this.constructor$(fn, promise, context);
                }
                inherits(FunctionDisposer, Disposer);
                FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                  var fn = this.data();
                  return fn.call(resource, resource, inspection);
                };
                function maybeUnwrapDisposer(value) {
                  if (Disposer.isDisposer(value)) {
                    this.resources[this.index]._setDisposable(value);
                    return value.promise();
                  }
                  return value;
                }
                function ResourceList(length) {
                  this.length = length;
                  this.promise = null;
                  this[length - 1] = null;
                }
                ResourceList.prototype._resultCancelled = function () {
                  var len = this.length;
                  for (var i = 0; i < len; ++i) {
                    var item = this[i];
                    if (item instanceof Promise) {
                      item.cancel();
                    }
                  }
                };
                Promise.using = function () {
                  var len = arguments.length;
                  if (len < 2) return apiRejection("you must pass at least 2 arguments to Promise.using");
                  var fn = arguments[len - 1];
                  if (typeof fn !== "function") {
                    return apiRejection("expecting a function but got " + util.classString(fn));
                  }
                  var input;
                  var spreadArgs = true;
                  if (len === 2 && Array.isArray(arguments[0])) {
                    input = arguments[0];
                    len = input.length;
                    spreadArgs = false;
                  } else {
                    input = arguments;
                    len--;
                  }
                  var resources = new ResourceList(len);
                  for (var i = 0; i < len; ++i) {
                    var resource = input[i];
                    if (Disposer.isDisposer(resource)) {
                      var disposer = resource;
                      resource = resource.promise();
                      resource._setDisposable(disposer);
                    } else {
                      var maybePromise = tryConvertToPromise(resource);
                      if (maybePromise instanceof Promise) {
                        resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                          resources: resources,
                          index: i
                        }, undefined);
                      }
                    }
                    resources[i] = resource;
                  }
                  var reflectedResources = new Array(resources.length);
                  for (var i = 0; i < reflectedResources.length; ++i) {
                    reflectedResources[i] = Promise.resolve(resources[i]).reflect();
                  }
                  var resultPromise = Promise.all(reflectedResources).then(function (inspections) {
                    for (var i = 0; i < inspections.length; ++i) {
                      var inspection = inspections[i];
                      if (inspection.isRejected()) {
                        errorObj.e = inspection.error();
                        return errorObj;
                      } else if (!inspection.isFulfilled()) {
                        resultPromise.cancel();
                        return;
                      }
                      inspections[i] = inspection.value();
                    }
                    promise._pushContext();
                    fn = tryCatch(fn);
                    var ret = spreadArgs ? fn.apply(undefined, inspections) : fn(inspections);
                    var promiseCreated = promise._popContext();
                    debug.checkForgottenReturns(ret, promiseCreated, "Promise.using", promise);
                    return ret;
                  });
                  var promise = resultPromise.lastly(function () {
                    var inspection = new Promise.PromiseInspection(resultPromise);
                    return dispose(resources, inspection);
                  });
                  resources.promise = promise;
                  promise._setOnCancel(resources);
                  return promise;
                };
                Promise.prototype._setDisposable = function (disposer) {
                  this._bitField = this._bitField | 131072;
                  this._disposer = disposer;
                };
                Promise.prototype._isDisposable = function () {
                  return (this._bitField & 131072) > 0;
                };
                Promise.prototype._getDisposer = function () {
                  return this._disposer;
                };
                Promise.prototype._unsetDisposable = function () {
                  this._bitField = this._bitField & ~131072;
                  this._disposer = undefined;
                };
                Promise.prototype.disposer = function (fn) {
                  if (typeof fn === "function") {
                    return new FunctionDisposer(fn, this, createContext());
                  }
                  throw new TypeError();
                };
              };
            }, {
              "./errors": 12,
              "./util": 36
            }],
            36: [function (_dereq_, module, exports) {
              "use strict";
              var es5 = _dereq_("./es5");
              var canEvaluate = typeof navigator == "undefined";
              var errorObj = {
                e: {}
              };
              var tryCatchTarget;
              var globalObject = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this !== undefined ? this : null;
              function tryCatcher() {
                try {
                  var target = tryCatchTarget;
                  tryCatchTarget = null;
                  return target.apply(this, arguments);
                } catch (e) {
                  errorObj.e = e;
                  return errorObj;
                }
              }
              function tryCatch(fn) {
                tryCatchTarget = fn;
                return tryCatcher;
              }
              var inherits = function (Child, Parent) {
                var hasProp = ({}).hasOwnProperty;
                function T() {
                  this.constructor = Child;
                  this.constructor$ = Parent;
                  for (var propertyName in Parent.prototype) {
                    if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
                      this[propertyName + "$"] = Parent.prototype[propertyName];
                    }
                  }
                }
                T.prototype = Parent.prototype;
                Child.prototype = new T();
                return Child.prototype;
              };
              function isPrimitive(val) {
                return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
              }
              function isObject(value) {
                return typeof value === "function" || typeof value === "object" && value !== null;
              }
              function maybeWrapAsError(maybeError) {
                if (!isPrimitive(maybeError)) return maybeError;
                return new Error(safeToString(maybeError));
              }
              function withAppended(target, appendee) {
                var len = target.length;
                var ret = new Array(len + 1);
                var i;
                for (i = 0; i < len; ++i) {
                  ret[i] = target[i];
                }
                ret[i] = appendee;
                return ret;
              }
              function getDataPropertyOrDefault(obj, key, defaultValue) {
                if (es5.isES5) {
                  var desc = Object.getOwnPropertyDescriptor(obj, key);
                  if (desc != null) {
                    return desc.get == null && desc.set == null ? desc.value : defaultValue;
                  }
                } else {
                  return ({}).hasOwnProperty.call(obj, key) ? obj[key] : undefined;
                }
              }
              function notEnumerableProp(obj, name, value) {
                if (isPrimitive(obj)) return obj;
                var descriptor = {
                  value: value,
                  configurable: true,
                  enumerable: false,
                  writable: true
                };
                es5.defineProperty(obj, name, descriptor);
                return obj;
              }
              function thrower(r) {
                throw r;
              }
              var inheritedDataKeys = (function () {
                var excludedPrototypes = [Array.prototype, Object.prototype, Function.prototype];
                var isExcludedProto = function (val) {
                  for (var i = 0; i < excludedPrototypes.length; ++i) {
                    if (excludedPrototypes[i] === val) {
                      return true;
                    }
                  }
                  return false;
                };
                if (es5.isES5) {
                  var getKeys = Object.getOwnPropertyNames;
                  return function (obj) {
                    var ret = [];
                    var visitedKeys = Object.create(null);
                    while (obj != null && !isExcludedProto(obj)) {
                      var keys;
                      try {
                        keys = getKeys(obj);
                      } catch (e) {
                        return ret;
                      }
                      for (var i = 0; i < keys.length; ++i) {
                        var key = keys[i];
                        if (visitedKeys[key]) continue;
                        visitedKeys[key] = true;
                        var desc = Object.getOwnPropertyDescriptor(obj, key);
                        if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                        }
                      }
                      obj = es5.getPrototypeOf(obj);
                    }
                    return ret;
                  };
                } else {
                  var hasProp = ({}).hasOwnProperty;
                  return function (obj) {
                    if (isExcludedProto(obj)) return [];
                    var ret = [];
                    /*jshint forin:false*/
                    enumeration: for (var key in obj) {
                      if (hasProp.call(obj, key)) {
                        ret.push(key);
                      } else {
                        for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration;
                          }
                        }
                        ret.push(key);
                      }
                    }
                    return ret;
                  };
                }
              })();
              var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
              function isClass(fn) {
                try {
                  if (typeof fn === "function") {
                    var keys = es5.names(fn.prototype);
                    var hasMethods = es5.isES5 && keys.length > 1;
                    var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
                    var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;
                    if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                      return true;
                    }
                  }
                  return false;
                } catch (e) {
                  return false;
                }
              }
              function toFastProperties(obj) {
                /*jshint -W027,-W055,-W031*/
                function FakeConstructor() {}
                FakeConstructor.prototype = obj;
                var l = 8;
                while (l--) new FakeConstructor();
                return obj;
                eval(obj);
              }
              var rident = /^[a-z$_][a-z$_0-9]*$/i;
              function isIdentifier(str) {
                return rident.test(str);
              }
              function filledRange(count, prefix, suffix) {
                var ret = new Array(count);
                for (var i = 0; i < count; ++i) {
                  ret[i] = prefix + i + suffix;
                }
                return ret;
              }
              function safeToString(obj) {
                try {
                  return obj + "";
                } catch (e) {
                  return "[no string representation]";
                }
              }
              function isError(obj) {
                return obj instanceof Error || obj !== null && typeof obj === "object" && typeof obj.message === "string" && typeof obj.name === "string";
              }
              function markAsOriginatingFromRejection(e) {
                try {
                  notEnumerableProp(e, "isOperational", true);
                } catch (ignore) {}
              }
              function originatesFromRejection(e) {
                if (e == null) return false;
                return e instanceof Error["__BluebirdErrorTypes__"].OperationalError || e["isOperational"] === true;
              }
              function canAttachTrace(obj) {
                return isError(obj) && es5.propertyIsWritable(obj, "stack");
              }
              var ensureErrorObject = (function () {
                if (!(("stack" in new Error()))) {
                  return function (value) {
                    if (canAttachTrace(value)) return value;
                    try {
                      throw new Error(safeToString(value));
                    } catch (err) {
                      return err;
                    }
                  };
                } else {
                  return function (value) {
                    if (canAttachTrace(value)) return value;
                    return new Error(safeToString(value));
                  };
                }
              })();
              function classString(obj) {
                return ({}).toString.call(obj);
              }
              function copyDescriptors(from, to, filter) {
                var keys = es5.names(from);
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  if (filter(key)) {
                    try {
                      es5.defineProperty(to, key, es5.getDescriptor(from, key));
                    } catch (ignore) {}
                  }
                }
              }
              var asArray = function (v) {
                if (es5.isArray(v)) {
                  return v;
                }
                return null;
              };
              if (typeof Symbol !== "undefined" && Symbol.iterator) {
                var ArrayFrom = typeof Array.from === "function" ? function (v) {
                  return Array.from(v);
                } : function (v) {
                  var ret = [];
                  var it = v[Symbol.iterator]();
                  var itResult;
                  while (!(itResult = it.next()).done) {
                    ret.push(itResult.value);
                  }
                  return ret;
                };
                asArray = function (v) {
                  if (es5.isArray(v)) {
                    return v;
                  } else if (v != null && typeof v[Symbol.iterator] === "function") {
                    return ArrayFrom(v);
                  }
                  return null;
                };
              }
              var isNode = typeof process !== "undefined" && classString(process).toLowerCase() === "[object process]";
              var hasEnvVariables = typeof process !== "undefined" && typeof process.env !== "undefined";
              function env(key) {
                return hasEnvVariables ? process.env[key] : undefined;
              }
              function getNativePromise() {
                if (typeof Promise === "function") {
                  try {
                    var promise = new Promise(function () {});
                    if (({}).toString.call(promise) === "[object Promise]") {
                      return Promise;
                    }
                  } catch (e) {}
                }
              }
              function domainBind(self, cb) {
                return self.bind(cb);
              }
              var ret = {
                isClass: isClass,
                isIdentifier: isIdentifier,
                inheritedDataKeys: inheritedDataKeys,
                getDataPropertyOrDefault: getDataPropertyOrDefault,
                thrower: thrower,
                isArray: es5.isArray,
                asArray: asArray,
                notEnumerableProp: notEnumerableProp,
                isPrimitive: isPrimitive,
                isObject: isObject,
                isError: isError,
                canEvaluate: canEvaluate,
                errorObj: errorObj,
                tryCatch: tryCatch,
                inherits: inherits,
                withAppended: withAppended,
                maybeWrapAsError: maybeWrapAsError,
                toFastProperties: toFastProperties,
                filledRange: filledRange,
                toString: safeToString,
                canAttachTrace: canAttachTrace,
                ensureErrorObject: ensureErrorObject,
                originatesFromRejection: originatesFromRejection,
                markAsOriginatingFromRejection: markAsOriginatingFromRejection,
                classString: classString,
                copyDescriptors: copyDescriptors,
                hasDevTools: typeof chrome !== "undefined" && chrome && typeof chrome.loadTimes === "function",
                isNode: isNode,
                hasEnvVariables: hasEnvVariables,
                env: env,
                global: globalObject,
                getNativePromise: getNativePromise,
                domainBind: domainBind
              };
              ret.isRecentNode = ret.isNode && (function () {
                var version = process.versions.node.split(".").map(Number);
                return version[0] === 0 && version[1] > 10 || version[0] > 0;
              })();
              if (ret.isNode) ret.toFastProperties(process);
              try {
                throw new Error();
              } catch (e) {
                ret.lastLineError = e;
              }
              module.exports = ret;
            }, {
              "./es5": 13
            }]
          }, {}, [4])(4);
        });
        ;
        if (typeof window !== 'undefined' && window !== null) {
          window.P = window.Promise;
        } else if (typeof self !== 'undefined' && self !== null) {
          self.P = self.Promise;
        }
      }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "_process": 2
    }],
    2: [function (require, module, exports) {
      // shim for using process in browser
      var process = module.exports = {};
      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }
      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }
      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          // normal enviroments in sane situations
          return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          // normal enviroments in sane situations
          return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = '';
      // empty string to avoid regexp issues
      process.versions = {};
      function noop() {}
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function (name) {
        return [];
      };
      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };
      process.cwd = function () {
        return '/';
      };
      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };
      process.umask = function () {
        return 0;
      };
    }, {}],
    3: [function (require, module, exports) {
      (function (undefined) {
        "use strict";
        /**
        * Batch to send using WebApiClient.SendBatch.
        * Batches can be used for sending multiple requests at once.
        * All requests inside a change set will be executed as a transaction, i.e. fail or succeed together.
        * @constructor
        * @see https://msdn.microsoft.com/en-us/library/mt607719.aspx#bkmk_BatchRequests
        * @param {Object} parameters
        * @param {String} [parameters.name] Name to set for this batch. Will be set to a default name if ommitted
        * @param {Array<ChangeSet>} [parameters.changeSets] Change Sets to include in this batch. Defaults to an empty array
        * @param {Array<Request>} [parameters.requests] GET requests to include in this batch. GET requests must be contained in here and are forbidden in change sets. Defaults to an empty array
        * @param {Array<{key:string,value:string}>} [parameters.headers] Headers to append to the batch.
        * @param {bool} [parameters.async] True for sending async, false for sending sync. WebApiClient default is async
        * @param {bool} [parameters.isOverLengthGet] Used internally for flagging a GET request that was originally not a batch but had to be transformed to a batch request automatically since the url was too long
        * @memberof module:WebApiClient
        */
        var Batch = function (parameters) {
          var params = parameters || ({});
          /**
          * @property {String} name - Name of the batch
          * @this {Batch}
          */
          this.name = params.name || "batch_AAA123";
          /**
          * @property {Array<ChangeSet>} changeSets - Change sets included in this batch. Only non GET requests may be included here. Each change set will execute as a separate transaction
          * @this {Batch}
          */
          this.changeSets = params.changeSets || [];
          /**
          * @property {Array<Request>} requests - GET Requests included in this batch. GET request may only be included in here
          * @this {Batch}
          */
          this.requests = params.requests || [];
          /**
          * @property {Array<{key:string,value:string}>} headers - Headers for the batch
          * @this {Batch}
          */
          this.headers = params.headers || [];
          /**
          * @property {bool} async - False for executing the batch synchronously, defaults to async
          * @this {Batch}
          */
          this.async = params.async;
          /**
          * @property {bool} isOverLengthGet - Used internally for flagging a GET request that was originally not a batch but had to be transformed to a batch request automatically since the url was too long
          * @this {Batch}
          */
          this.isOverLengthGet = params.isOverLengthGet;
        };
        /**
        * @description Creates a text representation of the whole batch for sending as message body
        * @return {String}
        * @this {Batch}
        */
        Batch.prototype.buildPayload = function () {
          var payload = "";
          for (var i = 0; i < this.changeSets.length; i++) {
            payload += "--" + this.name + "\n";
            payload += "Content-Type: multipart/mixed;boundary=" + this.changeSets[i].name + "\n\n";
            var changeSet = this.changeSets[i];
            payload += changeSet.stringify();
          }
          for (var j = 0; j < this.requests.length; j++) {
            payload += "--" + this.name + "\n";
            payload += "Content-Type: application/http\n";
            payload += "Content-Transfer-Encoding:binary\n\n";
            var request = this.requests[j];
            payload += request.stringify();
            // When all requests are stringified, we need a closing batch tag
            if (j === this.requests.length - 1) {
              payload += "--" + this.name + "--\n";
            }
          }
          return payload;
        };
        module.exports = Batch;
      })();
    }, {}],
    4: [function (require, module, exports) {
      (function (undefined) {
        "use strict";
        /**
        * Request used inside batches, used for all HTTP methods
        * @constructor
        * @see https://msdn.microsoft.com/en-us/library/mt607719.aspx#bkmk_BatchRequests
        * @param {Object} parameters
        * @param {String} parameters.method The HTTP method such as GET, POST, ... for this request
        * @param {String} parameters.url The url used for this request
        * @param {Object} [parameters.payload] The request body for this request. Will be stringified and embedded.
        * @param {Array<{key:string,value:string}>} [parameters.headers] Headers to append to this request
        * @param {String} parameters.contentId Content ID to set for this request
        * @memberof module:WebApiClient
        */
        var BatchRequest = function (parameters) {
          var params = parameters || ({});
          /**
          * @property {String} method - Method of the request such as GET, POST, ...
          * @this {BatchRequest}
          */
          this.method = params.method;
          /**
          * @property {String} url - URL for this request
          * @this {BatchRequest}
          */
          this.url = params.url;
          /**
          * @property {Object} payload - Payload to send with this request
          * @this {BatchRequest}
          */
          this.payload = params.payload;
          /**
          * @property {Array<{key: string, value:string}>} headers - Headers to append to this request
          * @this {BatchRequest}
          */
          this.headers = params.headers || [];
          /**
          * @property {String} contentId - Content ID for this request. Will be set on the responses as well, to match responses with requests
          * @this {BatchRequest}
          */
          this.contentId = params.contentId;
        };
        /**
        * @description Converts current batch request into a string representation for including in the batch body
        * @return {String}
        * @this {BatchRequest}
        */
        BatchRequest.prototype.stringify = function () {
          var payload = "";
          if (this.contentId) {
            payload += "Content-ID: " + this.contentId + "\n\n";
          }
          payload += this.method + " " + this.url + " HTTP/1.1\n";
          for (var i = 0; i < this.headers.length; i++) {
            var header = this.headers[i];
            if (["accept", "content-type"].indexOf(header.key.toLowerCase()) === -1) {
              payload += header.key + ": " + header.value + "\n";
            }
          }
          if (this.method.toLowerCase() === "get") {
            payload += "Accept: application/json\n\n";
          } else {
            payload += "Content-Type: application/json;type=entry\n\n";
          }
          if (this.payload) {
            payload += JSON.stringify(this.payload);
          } else if (this.method.toLowerCase() === "delete") {
            // Delete requests need an empty payload, pass it if not already set
            payload += JSON.stringify({});
          }
          return payload;
        };
        module.exports = BatchRequest;
      })();
    }, {}],
    5: [function (require, module, exports) {
      (function (undefined) {
        "use strict";
        var WebApiClient = require("./WebApiClient.Core.js");
        /**
        * Response returned from WebApiClient.SendBatch method. You will usually not instantiate this yourself.
        * @constructor
        * @see https://msdn.microsoft.com/en-us/library/mt607719.aspx#bkmk_Example
        * @param {Object} [parameters]
        * @param {String} [parameters.name] The name of the batch response
        * @param {Array<{name:string, responses:Array<Response>}>} [parameters.changeSetResponses] Array of responses for change sets, each change set has a separate response
        * @param {Array<Response>} [parameters.batchResponses] Array of responses for GET batch requests
        * @param {bool} [parameters.isFaulted] Indicates whether any of the requests failed
        * @param {Array<string>} [parameters.errors] List of error messages if requests failed
        * @param {XMLHttpRequest} [parameters.xhr] XMLHttpRequest to use for parsing the results and filling the other properties
        * @memberof module:WebApiClient
        */
        var BatchResponse = function (parameters) {
          var params = parameters || ({});
          /**
          * @property {String} name - Name of the batch response
          * @this {BatchResponse}
          */
          this.name = params.name;
          /**
          * @property {Array<{name:string, responses:Array<Response>}>} changeSetResponses - Array of responses for change sets, each change set has a separate response
          * @this {BatchResponse}
          */
          this.changeSetResponses = params.changeSetResponses || [];
          /**
          * @property {Array<Response>} batchResponses - Array of responses for GET batch requests
          * @this {BatchResponse}
          */
          this.batchResponses = params.batchResponses || [];
          /**
          * @property {bool} isFaulted - Indicates whether any of the requests failed
          * @this {BatchResponse}
          */
          this.isFaulted = params.isFaulted || false;
          /**
          * @property {Array<string>} errors - List of error messages if requests failed
          * @this {BatchResponse}
          */
          this.errors = params.errors || [];
          if (params.xhr) {
            var xhr = params.xhr;
            var responseText = xhr.responseText;
            var responseContentType = xhr.getResponseHeader("Content-Type");
            this.name = responseContentType.substring(responseContentType.indexOf("boundary=")).replace("boundary=", "");
            var changeSetBoundaries = responseText.match(/boundary=changesetresponse.*/g);
            for (var i = 0; changeSetBoundaries && i < changeSetBoundaries.length; i++) {
              var changeSetName = changeSetBoundaries[i].replace("boundary=", "");
              // Find all change set responses in responseText
              var changeSetRegex = new RegExp("--" + changeSetName + "[\\S\\s]*?(?=--" + changeSetName + ")", "gm");
              var changeSetResponse = {
                name: changeSetName,
                responses: []
              };
              var changeSets = responseText.match(changeSetRegex);
              for (var k = 0; k < changeSets.length; k++) {
                var response = new WebApiClient.Response({
                  rawData: changeSets[k]
                });
                if (response.payload && response.payload.error) {
                  this.isFaulted = true;
                  this.errors.push(response.payload.error);
                }
                changeSetResponse.responses.push(response);
              }
              this.changeSetResponses.push(changeSetResponse);
            }
            // Find all batch responses in responseText
            var batchRegex = new RegExp("--" + this.name + "[\\r\\n]+Content-Type: application\\/http[\\S\\s]*?(?=--" + this.name + ")", "gm");
            var batchResponsesRaw = responseText.match(batchRegex);
            for (var j = 0; batchResponsesRaw && j < batchResponsesRaw.length; j++) {
              var batchResponse = new WebApiClient.Response({
                rawData: batchResponsesRaw[j]
              });
              if (batchResponse.payload && batchResponse.payload.error) {
                this.isFaulted = true;
                this.errors.push(batchResponse.payload.error);
              }
              this.batchResponses.push(batchResponse);
            }
          }
        };
        module.exports = BatchResponse;
      })();
    }, {
      "./WebApiClient.Core.js": 7
    }],
    6: [function (require, module, exports) {
      (function (undefined) {
        "use strict";
        var instanceCount = 1;
        /**
        * Change sets are containers for requests inside batch requests.
        * All requests inside a change set fail or succeed together.
        * No GET requests are allowed inside change sets.
        * @constructor
        * @see https://msdn.microsoft.com/en-us/library/mt607719.aspx#bkmk_ChangeSets
        * @param {Object} [parameters]
        * @param {String} [parameters.name] The name of the change set (should be unique for this batch). Auto generated if ommitted
        * @param {Array<Request>} [parameters.requests] Array of _POST_ requests for this change set. No get requests are allowed inside change sets. Initialized as empty array if ommitted
        * @memberof module:WebApiClient
        */
        var ChangeSet = function (parameters) {
          var params = parameters || ({});
          /**
          * @property {String} name - Name of the change set
          * @this {ChangeSet}
          */
          this.name = params.name || "changeset_" + instanceCount++;
          /**
          * @property {Array<Request>} requests - Requests included in the change set. Only non GET requests are allowed.
          * @this {ChangeSet}
          */
          this.requests = params.requests || [];
        };
        /**
        * @description Converts current change set into a string representation for including in the batch body
        * @return {String}
        * @this {ChangeSet}
        */
        ChangeSet.prototype.stringify = function () {
          var payload = "";
          var contentId = 1;
          for (var i = 0; i < this.requests.length; i++) {
            payload += "--" + this.name + "\n";
            payload += "Content-Type: application/http\n";
            payload += "Content-Transfer-Encoding:binary\n";
            var request = this.requests[i];
            request.contentId = request.contentId || contentId++;
            payload += request.stringify() + "\n";
            // When all requests are stringified, we need a closing changeSet tag
            if (i === this.requests.length - 1) {
              payload += "--" + this.name + "--\n\n";
            }
          }
          return payload;
        };
        module.exports = ChangeSet;
      })();
    }, {}],
    7: [function (require, module, exports) {
      /*@preserve
      * MIT License
      *
      * Copyright (c) 2016 Florian Krönert
      *
      * Permission is hereby granted, free of charge, to any person obtaining a copy
      * of this software and associated documentation files (the "Software"), to deal
      * in the Software without restriction, including without limitation the rights
      * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      * copies of the Software, and to permit persons to whom the Software is
      * furnished to do so, subject to the following conditions:
      *
      * The above copyright notice and this permission notice shall be included in all
      * copies or substantial portions of the Software.
      *
      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      * SOFTWARE.
      *
      */
      /** @preserve
      * WebApiClient build version v4.0.0
      */
      /**
      * This is the core functionality of Xrm-WebApi-Client
      * No instantiation needed, it's a singleton.
      * @module WebApiClient
      */
      (function (undefined) {
        "use strict";
        var WebApiClient = {};
        var batchName = "batch_UrlLimitExeedingRequest";
        /**
        * @description The API version that will be used when sending requests. Default is "8.0"
        * @param {String}
        * @memberof module:WebApiClient
        */
        WebApiClient.ApiVersion = "8.0";
        /**
        * @description Checks for more pages when retrieving results. If set to true, all pages will be retrieved, if set to false, only the first page will be retrieved.
        * @param {boolean}
        * @memberof module:WebApiClient
        */
        WebApiClient.ReturnAllPages = false;
        /**
        * @description Set to true for retrieving formatted error in style 'xhr.statusText: xhr.error.Message'. If set to false, error json will be returned.
        * @param {boolean}
        * @memberof module:WebApiClient
        */
        WebApiClient.PrettifyErrors = true;
        /**
        * @description Set to false for sending all requests synchronously. True by default.
        * @param {boolean}
        * @memberof module:WebApiClient
        */
        WebApiClient.Async = true;
        /**
        * @description Connection to use when being used in a single page app.
        * @param {String}
        * @memberof module:WebApiClient
        */
        WebApiClient.ClientUrl = null;
        /**
        * @description Token to use for authenticating when being used in a single page app.
        * @param {String}
        * @memberof module:WebApiClient
        */
        WebApiClient.Token = null;
        // This is for ensuring that we use bluebird internally, so that calls to WebApiClient have no differing set of
        // functions that can be applied to the Promise. For example Promise.finally would not be available without Bluebird.
        var Promise = require("bluebird").noConflict();
        function GetCrmContext() {
          if (typeof GetGlobalContext !== "undefined") {
            return GetGlobalContext();
          }
          if (typeof Xrm !== "undefined") {
            return Xrm.Page.context;
          }
        }
        function GetClientUrl() {
          var context = GetCrmContext();
          if (context) {
            return context.getClientUrl();
          }
          if (WebApiClient.ClientUrl) {
            return WebApiClient.ClientUrl;
          }
          throw new Error("Failed to retrieve client url, is ClientGlobalContext.aspx available?");
        }
        function MergeResults(firstResponse, secondResponse) {
          if (!firstResponse && !secondResponse) {
            return null;
          }
          if (firstResponse && !secondResponse) {
            return firstResponse;
          }
          if (!firstResponse && secondResponse) {
            return secondResponse;
          }
          firstResponse.value = firstResponse.value.concat(secondResponse.value);
          delete firstResponse["@odata.nextLink"];
          delete firstResponse["@Microsoft.Dynamics.CRM.fetchxmlpagingcookie"];
          return firstResponse;
        }
        function RemoveIdBrackets(id) {
          if (!id) {
            return id;
          }
          return id.replace("{", "").replace("}", "");
        }
        /**
        * @description Builds the set name of a given entity name.
        * @method GetSetName
        * @param {String} entityName Logical name of the entity, such as "account"
        * @param {String}[overriddenSetName] Override set name if it can't be infered from plural rules
        * @memberof module:WebApiClient
        * @return {String}
        */
        WebApiClient.GetSetName = function (entityName, overriddenSetName) {
          if (overriddenSetName) {
            return overriddenSetName;
          }
          var ending = entityName.slice(-1);
          switch (ending) {
            case 's':
              return entityName + "es";
            case 'y':
              return entityName.substring(0, entityName.length - 1) + "ies";
            default:
              return entityName + "s";
          }
        };
        var DefaultHeaders = [{
          key: "Accept",
          value: "application/json"
        }, {
          key: "OData-Version",
          value: "4.0"
        }, {
          key: "OData-MaxVersion",
          value: "4.0"
        }, // Prevent caching since it sometimes sends old data as unmodified
        {
          key: "If-None-Match",
          value: null
        }, {
          key: "Content-Type",
          value: "application/json; charset=utf-8"
        }];
        /**
        * @description Returns array of default headers.
        * @method GetDefaultHeaders
        * @return {Array<{key: String, value:String}>}
        * @memberof module:WebApiClient
        */
        WebApiClient.GetDefaultHeaders = function () {
          return DefaultHeaders;
        };
        function VerifyHeader(header) {
          if (!header.key || typeof header.value === "undefined") {
            throw new Error("Each request header needs a key and a value!");
          }
        }
        /**
        * @description Function for building the set name of a given entity name.
        * @method AppendToDefaultHeaders
        * @param {...{key:String, value:String}} var_args Headers as variable arguments
        * @memberof module:WebApiClient
        * @return {void}
        */
        WebApiClient.AppendToDefaultHeaders = function () {
          if (!arguments.length) {
            return;
          }
          for (var i = 0; i < arguments.length; i++) {
            var argument = arguments[i];
            VerifyHeader(argument);
            DefaultHeaders.push(argument);
          }
        };
        function AppendHeaders(xhr, headers) {
          if (headers) {
            for (var i = 0; i < headers.length; i++) {
              var header = headers[i];
              VerifyHeader(header);
              xhr.setRequestHeader(header.key, header.value);
            }
          }
        }
        function GetRecordUrl(parameters) {
          var params = parameters || ({});
          if (!params.entityName && !params.overriddenSetName || !params.entityId && !params.alternateKey) {
            throw new Error("Need entity name or overridden set name and entity id or alternate key for getting record url!");
          }
          var url = WebApiClient.GetApiUrl() + WebApiClient.GetSetName(params.entityName, params.overriddenSetName);
          if (params.alternateKey) {
            url += BuildAlternateKeyUrl(params);
          } else {
            url += "(" + RemoveIdBrackets(params.entityId) + ")";
          }
          return url;
        }
        function FormatError(xhr) {
          if (xhr && xhr.response) {
            var json = JSON.parse(xhr.response);
            if (!WebApiClient.PrettifyErrors) {
              json.xhrStatusText = xhr.statusText;
              return JSON.stringify(json);
            } else {
              var error = "";
              if (json.error) {
                error = json.error.message;
              }
              return xhr.statusText + ": " + error;
            }
          }
          return "";
        }
        function GetNextLink(response) {
          return response["@odata.nextLink"];
        }
        function GetPagingCookie(response) {
          return response["@Microsoft.Dynamics.CRM.fetchxmlpagingcookie"];
        }
        function SetCookie(pagingCookie, parameters) {
          // Parse cookie that we retrieved with response
          var parser = new DOMParser();
          var cookieXml = parser.parseFromString(pagingCookie, "text/xml");
          var cookie = cookieXml.documentElement;
          var cookieAttribute = cookie.getAttribute("pagingcookie");
          // In CRM 8.X orgs, fetch cookies where escaped twice. Since 9.X, they are only escaped once.
          // Below indexOf check checks for the double escaped cookie string '<cookie page'.
          // In CRM 9.X this will lead to no matches, as cookies start as '%3ccookie%20page'.
          if (cookieAttribute && cookieAttribute.indexOf("%253ccookie%2520page") === 0) {
            cookieAttribute = unescape(cookieAttribute);
          }
          var cookieValue = unescape(cookieAttribute);
          var pageNumber = parseInt((/<cookie page="([\d]+)">/).exec(cookieValue)[1]) + 1;
          // Parse our original fetch XML, we will inject the paging information in here
          var fetchXml = parser.parseFromString(parameters.fetchXml, "text/xml");
          var fetch = fetchXml.documentElement;
          fetch.setAttribute("page", pageNumber);
          fetch.setAttribute("paging-cookie", cookieValue);
          // Serialize modified fetch with paging information
          var serializer = new XMLSerializer();
          return serializer.serializeToString(fetchXml);
        }
        function SetPreviousResponse(parameters, response) {
          // Set previous response
          parameters._previousResponse = response;
        }
        function MergeHeaders() {
          var headers = [];
          if (!arguments) {
            return headers;
          }
          for (var i = 0; i < arguments.length; i++) {
            var headersToAdd = arguments[i];
            if (!headersToAdd || !Array.isArray(headersToAdd)) {
              continue;
            }
            for (var j = 0; j < headersToAdd.length; j++) {
              var header = headersToAdd[j];
              VerifyHeader(header);
              var addHeader = true;
              for (var k = 0; k < headers.length; k++) {
                if (headers[k].key === header.key) {
                  addHeader = false;
                  break;
                }
              }
              if (addHeader) {
                headers.push(header);
              }
            }
          }
          return headers;
        }
        function IsBatch(responseText) {
          return responseText && (/^--batchresponse_[a-fA-F0-9\-]+$/m).test(responseText);
        }
        function ParseResponse(xhr) {
          var responseText = xhr.responseText;
          // Check if it is a batch response
          if (IsBatch(responseText)) {
            return new WebApiClient.BatchResponse({
              xhr: xhr
            });
          } else {
            return JSON.parse(xhr.responseText);
          }
        }
        function IsOverlengthGet(method, url) {
          return method && method.toLowerCase() === "get" && url && url.length > 2048;
        }
        function SendAsync(method, url, payload, parameters) {
          var xhr = new XMLHttpRequest();
          var promise = new Promise(function (resolve, reject) {
            xhr.onload = function () {
              if (xhr.readyState !== 4) {
                return;
              }
              if (xhr.status === 200) {
                var response = ParseResponse(xhr);
                if (response instanceof WebApiClient.BatchResponse) {
                  // If it was an overlength fetchXml, that was sent as batch automatically, we don't want it to behave as a batch
                  if (parameters.isOverLengthGet) {
                    response = response.batchResponses[0].payload;
                                      // If we received multiple responses, but not from overlength get, it was a custom batch. Just resolve all matches
} else // If we received multiple responses, but not from overlength get, it was a custom batch. Just resolve all matches
                  {
                    resolve(response);
                  }
                }
                var nextLink = GetNextLink(response);
                var pagingCookie = GetPagingCookie(response);
                // Since 9.X paging cookie is always added to response, even in queryParams retrieves
                // In 9.X the morerecords flag can signal whether there are more records to be found
                // In 8.X the flag was not present and instead the pagingCookie was only set if more records were available
                var moreRecords = ("@Microsoft.Dynamics.CRM.morerecords" in response) ? response["@Microsoft.Dynamics.CRM.morerecords"] : true;
                response = MergeResults(parameters._previousResponse, response);
                // Results are paged, we don't have all results at this point
                if (moreRecords && nextLink && (WebApiClient.ReturnAllPages || parameters.returnAllPages)) {
                  SetPreviousResponse(parameters, response);
                  resolve(SendAsync("GET", nextLink, null, parameters));
                } else if (parameters.fetchXml && moreRecords && pagingCookie && (WebApiClient.ReturnAllPages || parameters.returnAllPages)) {
                  var nextPageFetch = SetCookie(pagingCookie, parameters);
                  SetPreviousResponse(parameters, response);
                  parameters.fetchXml = nextPageFetch;
                  resolve(WebApiClient.Retrieve(parameters));
                } else {
                  resolve(response);
                }
              } else if (xhr.status === 201) {
                resolve(ParseResponse(xhr));
              } else if (xhr.status === 204) {
                if (method.toLowerCase() === "post") {
                  resolve(xhr.getResponseHeader("OData-EntityId"));
                                  // No content returned for delete, update, ...
} else // No content returned for delete, update, ...
                {
                  resolve(xhr.statusText);
                }
              } else {
                reject(new Error(FormatError(xhr)));
              }
            };
            xhr.onerror = function () {
              reject(new Error(FormatError(xhr)));
            };
          });
          var headers = [];
          if (IsOverlengthGet(method, url)) {
            var batch = new WebApiClient.Batch({
              requests: [new WebApiClient.BatchRequest({
                method: method,
                url: url,
                payload: payload,
                headers: parameters.headers
              })],
              async: true,
              isOverLengthGet: true
            });
            return WebApiClient.SendBatch(batch);
          }
          xhr.open(method, url, true);
          headers = MergeHeaders(headers, parameters.headers, DefaultHeaders);
          AppendHeaders(xhr, headers);
          // Bugfix for IE. If payload is undefined, IE would send "undefined" as request body
          if (payload) {
            // For batch requests, we just want to send a string body
            if (typeof payload === "string") {
              xhr.send(payload);
            } else {
              xhr.send(JSON.stringify(payload));
            }
          } else {
            xhr.send();
          }
          return promise;
        }
        function SendSync(method, url, payload, parameters) {
          var xhr = new XMLHttpRequest();
          var response;
          var headers = [];
          if (IsOverlengthGet(method, url)) {
            var batch = new WebApiClient.Batch({
              requests: [new WebApiClient.BatchRequest({
                method: method,
                url: url,
                payload: payload,
                headers: parameters.headers
              })],
              async: false,
              isOverLengthGet: true
            });
            return WebApiClient.SendBatch(batch);
          }
          xhr.open(method, url, false);
          headers = MergeHeaders(headers, parameters.headers, DefaultHeaders);
          AppendHeaders(xhr, headers);
          // Bugfix for IE. If payload is undefined, IE would send "undefined" as request body
          if (payload) {
            // For batch requests, we just want to send a string body
            if (typeof payload === "string") {
              xhr.send(payload);
            } else {
              xhr.send(JSON.stringify(payload));
            }
          } else {
            xhr.send();
          }
          if (xhr.readyState !== 4) {
            return;
          }
          if (xhr.status === 200) {
            response = ParseResponse(xhr);
            // If we received multiple responses, it was a custom batch. Just resolve all matches
            if (response instanceof WebApiClient.BatchResponse) {
              // If it was an overlength fetchXml, that was sent as batch automatically, we don't want it to behave as a batch
              if (parameters.isOverLengthGet) {
                response = response.batchResponses[0].payload;
              } else {
                return response;
              }
            }
            var nextLink = GetNextLink(response);
            var pagingCookie = GetPagingCookie(response);
            // Since 9.X paging cookie is always added to response, even in queryParams retrieves
            // In 9.X the morerecords flag can signal whether there are more records to be found
            // In 8.X the flag was not present and instead the pagingCookie was only set if more records were available
            var moreRecords = ("@Microsoft.Dynamics.CRM.morerecords" in response) ? response["@Microsoft.Dynamics.CRM.morerecords"] : true;
            response = MergeResults(parameters._previousResponse, response);
            // Results are paged, we don't have all results at this point
            if (moreRecords && nextLink && (WebApiClient.ReturnAllPages || parameters.returnAllPages)) {
              SetPreviousResponse(parameters, response);
              SendSync("GET", nextLink, null, parameters);
            } else if (parameters.fetchXml && moreRecords && pagingCookie && (WebApiClient.ReturnAllPages || parameters.returnAllPages)) {
              var nextPageFetch = SetCookie(pagingCookie, parameters);
              SetPreviousResponse(parameters, response);
              parameters.fetchXml = nextPageFetch;
              WebApiClient.Retrieve(parameters);
            }
          } else if (xhr.status === 201) {
            response = ParseResponse(xhr);
          } else if (xhr.status === 204) {
            if (method.toLowerCase() === "post") {
              response = xhr.getResponseHeader("OData-EntityId");
                          // No content returned for delete, update, ...
} else // No content returned for delete, update, ...
            {
              response = xhr.statusText;
            }
          } else {
            throw new Error(FormatError(xhr));
          }
          return response;
        }
        function GetAsync(parameters) {
          if (typeof parameters.async !== "undefined") {
            return parameters.async;
          }
          return WebApiClient.Async;
        }
        function BuildAlternateKeyUrl(params) {
          if (!params || !params.alternateKey) {
            return "";
          }
          var url = "(";
          for (var i = 0; i < params.alternateKey.length; i++) {
            var key = params.alternateKey[i];
            var value = key.value;
            if (typeof key.value !== "number") {
              value = "'" + key.value + "'";
            }
            url += key.property + "=" + value;
            if (i + 1 === params.alternateKey.length) {
              url += ")";
            } else {
              url += ",";
            }
          }
          return url;
        }
        /**
        * @description Sends request using given parameters.
        * @method SendRequest
        * @param {String} method Method type of request to send, such as "GET"
        * @param {String} url Target URL for request.
        * @param {Object} [payload] Payload for request.
        * @param {Object} [parameters] - Parameters for sending the request
        * @param {Boolean} [parameters.async] - True for sending async, false for sync. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] - Headers for appending to request
        * @memberof module:WebApiClient
        * @return {Promise<Object>|Object}
        */
        WebApiClient.SendRequest = function (method, url, payload, parameters) {
          var params = parameters || ({});
          // Fallback for request headers array as fourth parameter
          if (Array.isArray(params)) {
            params = {
              headers: params
            };
          }
          if (WebApiClient.Token) {
            params.headers = params.headers || [];
            params.headers.push({
              key: "Authorization",
              value: "Bearer " + WebApiClient.Token
            });
          }
          if (params.asBatch) {
            return new WebApiClient.BatchRequest({
              method: method,
              url: url,
              payload: payload,
              headers: params.headers
            });
          }
          var asynchronous = GetAsync(params);
          if (asynchronous) {
            return SendAsync(method, url, payload, params);
          } else {
            return SendSync(method, url, payload, params);
          }
        };
        /**
        * @description Applies configuration to WebApiClient.
        * @method Configure
        * @param {Object} configuration Object with keys named after WebApiClient Members, such as "Token"s
        * @memberof module:WebApiClient
        * @return {void}
        */
        WebApiClient.Configure = function (configuration) {
          for (var property in configuration) {
            if (!configuration.hasOwnProperty(property)) {
              continue;
            }
            WebApiClient[property] = configuration[property];
          }
        };
        /**
        * @description Gets the current base API url that is used.
        * @method GetApiUrl
        * @memberof module:WebApiClient
        * @return {String}
        */
        WebApiClient.GetApiUrl = function () {
          return GetClientUrl() + "/api/data/v" + WebApiClient.ApiVersion + "/";
        };
        /**
        * @description Creates a given record in CRM.
        * @method Create
        * @param {Object} parameters Parameters for creating record
        * @param {String} parameters.entityName Entity name of record that should be created
        * @param {String} [parameters.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {Object} parameters.entity Object containing record data
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<String>|Promise<object>|String|Object} - Returns Promise<Object> if return=representation header is set, otherwise Promise<String>. Just Object or String if sent synchronously.
        */
        WebApiClient.Create = function (parameters) {
          var params = parameters || ({});
          if (!params.entityName && !params.overriddenSetName || !params.entity) {
            throw new Error("Entity name and entity object have to be passed!");
          }
          var url = WebApiClient.GetApiUrl() + WebApiClient.GetSetName(params.entityName, params.overriddenSetName);
          return WebApiClient.SendRequest("POST", url, params.entity, params);
        };
        /**
        * @description Retrieves records from CRM
        * @method Retrieve
        * @param {Object} parameters Parameters for retrieving records
        * @param {String} parameters.entityName Entity name of records that should be retrieved
        * @param {String} [parameters.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} [parameters.queryParams] Query Parameters to append to URL, such as ?$select=*
        * @param {String} [parameters.fetchXml] Fetch XML query
        * @param {String} [parameters.entityId] ID of entity to retrieve, will return single record
        * @param {Array<property:string,value:string>} [parameters.alternateKey] Alternate key array for retrieving single record
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<object>|Object} - Returns Promise<Object> if asyncj, just Object if sent synchronously.
        */
        WebApiClient.Retrieve = function (parameters) {
          var params = parameters || ({});
          if (!params.entityName && !params.overriddenSetName) {
            throw new Error("Entity name has to be passed!");
          }
          var url = WebApiClient.GetApiUrl() + WebApiClient.GetSetName(params.entityName, params.overriddenSetName);
          if (params.entityId) {
            url += "(" + RemoveIdBrackets(params.entityId) + ")";
          } else if (params.fetchXml) {
            url += "?fetchXml=" + escape(params.fetchXml);
          } else if (params.alternateKey) {
            url += BuildAlternateKeyUrl(params);
          }
          if (params.queryParams) {
            url += params.queryParams;
          }
          return WebApiClient.SendRequest("GET", url, null, params);
        };
        /**
        * @description Updates a given record in CRM.
        * @method Update
        * @param {Object} parameters Parameters for updating record
        * @param {String} parameters.entityName Entity name of records that should be updated
        * @param {String} [parameters.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} [parameters.entityId] ID of entity to update
        * @param {Array<property:string,value:string>} [parameters.alternateKey] Alternate key array for updating record
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<String>|Promise<object>|String|Object} - Returns Promise<Object> if return=representation header is set, otherwise Promise<String>. Just Object or String if sent synchronously.
        */
        WebApiClient.Update = function (parameters) {
          var params = parameters || ({});
          if (!params.entity) {
            throw new Error("Update object has to be passed!");
          }
          var url = GetRecordUrl(params);
          return WebApiClient.SendRequest("PATCH", url, params.entity, params);
        };
        /**
        * @description Deletes a given record in CRM.
        * @method Delete
        * @param {Object} parameters Parameters for deleting record
        * @param {String} parameters.entityName Entity name of records that should be deleted
        * @param {String} [parameters.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} [parameters.entityId] ID of entity to delete
        * @param {Array<property:string,value:string>} [parameters.alternateKey] Alternate key array for deleting record
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<String>|String} - Returns Promise<String> if async, just String if sent synchronously.
        */
        WebApiClient.Delete = function (parameters) {
          var params = parameters || ({});
          var url = GetRecordUrl(params);
          if (params.queryParams) {
            url += params.queryParams;
          }
          return WebApiClient.SendRequest("DELETE", url, null, params);
        };
        /**
        * @description Associates given records in CRM.
        * @method Associate
        * @param {Object} parameters Parameters for associating records
        * @param {String} parameters.relationShip Name of relation ship to use for associating
        * @param {Object} parameters.source Source entity for disassociating
        * @param {String} [parameters.source.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} parameters.source.entityId ID of entity
        * @param {String} parameters.source.entityName Logical name of entity, such as "account"
        * @param {Object} parameters.target Target entity for disassociating
        * @param {String} [parameters.target.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} parameters.target.entityId ID of entity
        * @param {String} parameters.target.entityName Logical name of entity, such as "account"
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<String>|String} - Returns Promise<String> if async, just String if sent synchronously.
        */
        WebApiClient.Associate = function (parameters) {
          var params = parameters || ({});
          if (!params.relationShip) {
            throw new Error("Relationship has to be passed!");
          }
          if (!params.source || !params.target) {
            throw new Error("Source and target have to be passed!");
          }
          var targetUrl = GetRecordUrl(params.target);
          var relationShip = "/" + params.relationShip + "/$ref";
          var url = targetUrl + relationShip;
          var payload = {
            "@odata.id": GetRecordUrl(params.source)
          };
          return WebApiClient.SendRequest("POST", url, payload, params);
        };
        /**
        * @description Disassociates given records in CRM.
        * @method Disassociate
        * @param {Object} parameters Parameters for disassociating records
        * @param {String} parameters.relationShip Name of relation ship to use for disassociating
        * @param {Object} parameters.source Source entity for disassociating
        * @param {String} [parameters.source.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} parameters.source.entityId ID of entity
        * @param {String} parameters.source.entityName Logical name of entity, such as "account"
        * @param {Object} parameters.target Target entity for disassociating
        * @param {String} [parameters.target.overriddenSetName] Plural name of entity, if not according to plural rules
        * @param {String} parameters.target.entityId ID of entity
        * @param {String} parameters.target.entityName Logical name of entity, such as "account"
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<String>|String} - Returns Promise<String> if async, just String if sent synchronously.
        */
        WebApiClient.Disassociate = function (parameters) {
          var params = parameters || ({});
          if (!params.relationShip) {
            throw new Error("Relationship has to be passed!");
          }
          if (!params.source || !params.target) {
            throw new Error("Source and target have to be passed!");
          }
          if (!params.source.entityId) {
            throw new Error("Source needs entityId set!");
          }
          var targetUrl = GetRecordUrl(params.target);
          var relationShip = "/" + params.relationShip + "(" + RemoveIdBrackets(params.source.entityId) + ")/$ref";
          var url = targetUrl + relationShip;
          return WebApiClient.SendRequest("DELETE", url, null, params);
        };
        /**
        * @description Executes the given request in CRM.
        * @method Execute
        * @param {Object} request Request to send, must be in prototype chain of WebApiClient.Requests.Request.
        * @param {Boolean} [request.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [request.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<Object>|Object} - Returns Promise<Object> if async, just Object if sent synchronously.
        */
        WebApiClient.Execute = function (request) {
          if (!request) {
            throw new Error("You need to pass a request!");
          }
          if (!(request instanceof WebApiClient.Requests.Request)) {
            throw new Error("Request for execution must be in prototype chain of WebApiClient.Request");
          }
          return WebApiClient.SendRequest(request.method, request.buildUrl(), request.payload, request);
        };
        /**
        * @description Sends the given batch to CRM.
        * @method SendBatch
        * @param {Object} batch Batch to send to CRM
        * @param {Boolean} [batch.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [batch.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<Object>|Object} - Returns Promise<Object> if async, just Object if sent synchronously.
        */
        WebApiClient.SendBatch = function (batch) {
          if (!batch) {
            throw new Error("You need to pass a batch!");
          }
          if (!(batch instanceof WebApiClient.Batch)) {
            throw new Error("Batch for execution must be a WebApiClient.Batch object");
          }
          var url = WebApiClient.GetApiUrl() + "$batch";
          batch.headers = batch.headers || [];
          batch.headers.push({
            key: "Content-Type",
            value: "multipart/mixed;boundary=" + batch.name
          });
          var payload = batch.buildPayload();
          return WebApiClient.SendRequest("POST", url, payload, batch);
        };
        /**
        * @description Expands all odata.nextLink (deferred) properties for an array of records.
        * @method Expand
        * @param {Object} parameters Configuration for expanding
        * @param {Array<Object>} parameters.records Array of records to expand
        * @param {Boolean} [parameters.async] True for sending asynchronous, false for synchronous. Defaults to true.
        * @param {Array<key:string,value:string>} [parameters.headers] Headers to attach to request
        * @memberof module:WebApiClient
        * @return {Promise<Object>|Object} - Returns Promise<Object> if async, just Object if sent synchronously.
        */
        WebApiClient.Expand = function (parameters) {
          // / <summary>Expands all odata.nextLink / deferred properties for an array of records</summary>
          // / <param name="parameters" type="Object">Object that contains 'records' array or object. Optional 'headers'.</param>
          // / <returns>Promise for sent request or result if sync.</returns>
          var params = parameters || ({});
          var records = params.records;
          var requests = [];
          var asynchronous = GetAsync(parameters);
          for (var i = 0; i < records.length; i++) {
            var record = records[i];
            for (var attribute in record) {
              if (!record.hasOwnProperty(attribute)) {
                continue;
              }
              var name = attribute.replace("@odata.nextLink", "");
              // If nothing changed, this was not a deferred attribute
              if (!name || name === attribute) {
                continue;
              }
              record[name] = WebApiClient.SendRequest("GET", record[attribute], null, params);
              // Delete @odata.nextLink property
              delete record[attribute];
            }
            if (asynchronous) {
              requests.push(Promise.props(record));
            }
          }
          if (asynchronous) {
            return Promise.all(requests);
          } else {
            return records;
          }
        };
        module.exports = WebApiClient;
      })();
    }, {
      "bluebird": 1
    }],
    8: [function (require, module, exports) {
      /**
      * @description This is the collection of all preimplemented Web API actions and functions
      * @module Requests
      */
      (function (undefined) {
        "use strict";
        var WebApiClient = require("./WebApiClient.Core.js");
        function AppendRequestParams(url, params) {
          url += "(";
          var paramCount = 1;
          for (var parameter in params) {
            if (!params.hasOwnProperty(parameter)) {
              continue;
            }
            if (paramCount !== 1) {
              url += ",";
            }
            url += parameter + "=@p" + paramCount++;
          }
          url += ")";
          return url;
        }
        function AppendParamValues(url, params) {
          var paramCount = 1;
          for (var parameter in params) {
            if (!params.hasOwnProperty(parameter)) {
              continue;
            }
            if (paramCount === 1) {
              url += "?@p1=";
            } else {
              url += "&@p" + paramCount + "=";
            }
            paramCount++;
            url += params[parameter];
          }
          return url;
        }
        var Requests = {};
        /**
        * @description Base class for all actions and functions.
        * @constructor
        * @param {Object} parameters
        * @param {String} parameters.method The HTTP method of the request, such as GET / POST / ...
        * @param {String} parameters.name The name of the request
        * @param {bool} [parameters.bound] Determines if request is bound, i.e. always executed regarding a distinct record, or not. Defaults to false
        * @param {String} [parameters.entityName] Name of the request if it is bound to an entity
        * @param {String} [parameters.entityId] Record ID if bound to an entity
        * @param {Object} [parameters.payload] Message body for this request
        * @param {Array<{key:string, value:string}>} [parameters.headers] Headers to append to this request
        * @param {Object} [parameters.urlParams] Object with key-value pairs that will be appended to the URL of a GET request. Used for calling functions with parameters
        * @param {bool} [parameters.async] Determines if request is sent async or not. Defaults to async
        * @memberof module:Requests
        * @this {Request}
        * @alias WebApiClient.Requests.Request
        */
        Requests.Request = function () {
          this.method = "";
          this.name = "";
          this.bound = false;
          this.entityName = "";
          this.entityId = "";
          this.payload = null;
          this.headers = null;
          this.urlParams = null;
          this.async = true;
        };
        /**
        * @description Applies properties of parameters object to the current request and returns it
        * @param {Object} parameters Pass object with properties that will be applied to current request
        * @return {Request}
        * @memberof module:Requests
        * @this {Request}
        */
        Requests.Request.prototype.with = function (parameters) {
          var request = Object.create(this);
          for (var parameter in parameters) {
            if (!parameters.hasOwnProperty(parameter)) {
              continue;
            }
            request[parameter] = parameters[parameter];
          }
          return request;
        };
        /**
        * @description Builds URL for sending a HTTP request based on the information provided by the request
        * @return {String}
        * @this {Request}
        */
        Requests.Request.prototype.buildUrl = function () {
          var baseUrl = WebApiClient.GetApiUrl();
          var url = baseUrl;
          if (this.bound && this.entityId) {
            var entityId = this.entityId.replace("{", "").replace("}", "");
            url += WebApiClient.GetSetName(this.entityName) + "(" + entityId + ")/";
          }
          if (this.bound && this.name.indexOf("Microsoft.Dynamics.CRM.") === -1) {
            url += "Microsoft.Dynamics.CRM.";
          }
          url += this.name;
          if (this.urlParams) {
            url = AppendRequestParams(url, this.urlParams);
            url = AppendParamValues(url, this.urlParams);
          } else {
            url += "()";
          }
          return url;
        };
        // Functions
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt718083.aspx
        * @description Calculates the value of a rollup attribute.
        * @alias CalculateRollupFieldRequest
        */
        Requests.CalculateRollupFieldRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "CalculateRollupField",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593054.aspx
        * @description Calculates the total time, in minutes, that you used while you worked on an incident (case).
        * @alias CalculateTotalTimeIncidentRequest
        */
        Requests.CalculateTotalTimeIncidentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "CalculateTotalTimeIncident",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "incident",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683529.aspx
        * @description Check whether the incoming email message is relevant to the Microsoft Dynamics 365 system.
        * @alias CheckIncomingEmailRequest
        */
        Requests.CheckIncomingEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "CheckIncomingEmail",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593013.aspx
        * @description Contains the data that is needed to check whether the incoming email message should be promoted to the Microsoft Dynamics 365 system.
        * @alias CheckPromoteEmailRequest
        */
        Requests.CheckPromoteEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "CheckPromoteEmail",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607800.aspx
        * @description Downloads a report definition.
        * @alias DownloadReportDefinitionRequest
        */
        Requests.DownloadReportDefinitionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "DownloadReportDefinition",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "report",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607824.aspx
        * @description Converts the calendar rules to an array of available time blocks for the specified period.
        * @alias ExpandCalendarRequest
        */
        Requests.ExpandCalendarRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "ExpandCalendar",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "calendar",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593047.aspx
        * @description Exports localizable fields values to a compressed file.
        * @alias ExportFieldTranslationRequest
        */
        Requests.ExportFieldTranslationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "ExportFieldTranslation",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491169.aspx
        * @description Converts a query in FetchXML to a QueryExpression.
        * @alias FetchXmlToQueryExpressionRequest
        */
        Requests.FetchXmlToQueryExpressionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "FetchXmlToQueryExpression",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683530.aspx
        * @description Finds a parent resource group (scheduling group) for the specified resource groups (scheduling groups).
        * @alias FindParentResourceGroupRequest
        */
        Requests.FindParentResourceGroupRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "FindParentResourceGroup",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "resourcegroup",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593004.aspx
        * @description Retrieves all the time zone definitions for the specified locale and to return only the display name attribute.
        * @alias GetAllTimeZonesWithDisplayNameRequest
        */
        Requests.GetAllTimeZonesWithDisplayNameRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetAllTimeZonesWithDisplayName",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608119.aspx
        * @description Retrieves the default price level (price list) for the current user based on the user’s territory relationship with the price level.
        * @alias GetDefaultPriceLevelRequest
        */
        Requests.GetDefaultPriceLevelRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetDefaultPriceLevel",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622422.aspx
        * @description Retrieves distinct values from the parse table for a column in the source file that contains list values.
        * @alias GetDistinctValuesImportFileRequest
        */
        Requests.GetDistinctValuesImportFileRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetDistinctValuesImportFile",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "importfile",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622408.aspx
        * @description Retrieves the source-file column headings; or retrieve the system-generated column headings if the source file does not contain column headings.
        * @alias GetHeaderColumnsImportFileRequest
        */
        Requests.GetHeaderColumnsImportFileRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetHeaderColumnsImportFile",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "importfile",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683531.aspx
        * @description Gets the quantity decimal value of a product for the specified entity in the target.
        * @alias GetQuantityDecimalRequest
        */
        Requests.GetQuantityDecimalRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetQuantityDecimal",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607697.aspx
        * @description Retrieves the history limit for a report.
        * @alias GetReportHistoryLimitRequest
        */
        Requests.GetReportHistoryLimitRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetReportHistoryLimit",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "report",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607644.aspx
        * @description Retrieves the time zone code for the specified localized time zone name.
        * @alias GetTimeZoneCodeByLocalizedNameRequest
        */
        Requests.GetTimeZoneCodeByLocalizedNameRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetTimeZoneCodeByLocalizedName",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608131.aspx
        * @description Retrieves a list of all the entities that can participate in a Many-to-Many entity relationship.
        * @alias GetValidManyToManyRequest
        */
        Requests.GetValidManyToManyRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetValidManyToMany",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608031.aspx
        * @description Retrieves a list of entity logical names that are valid as the primary entity (one) from the specified entity in a one-to-many relationship.
        * @alias GetValidReferencedEntitiesRequest
        */
        Requests.GetValidReferencedEntitiesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetValidReferencedEntities",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt592992.aspx
        * @description Retrieves the set of entities that are valid as the related entity (many) to the specified entity in a one-to-many relationship.
        * @alias GetValidReferencingEntitiesRequest
        */
        Requests.GetValidReferencingEntitiesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "GetValidReferencingEntities",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683532.aspx
        * @description Increments the per day view count of a knowledge article record.
        * @alias IncrementKnowledgeArticleViewCountRequest
        */
        Requests.IncrementKnowledgeArticleViewCountRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "IncrementKnowledgeArticleViewCount",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683533.aspx
        * @description Initializes a new record from an existing record.
        * @alias InitializeFromRequest
        */
        Requests.InitializeFromRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "InitializeFrom",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607606.aspx
        * @description Determines whether a solution component is customizable.
        * @alias IsComponentCustomizableRequest
        */
        Requests.IsComponentCustomizableRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "IsComponentCustomizable",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607678.aspx
        * @description Determines whether data encryption is currently running (active or inactive).
        * @alias IsDataEncryptionActiveRequest
        */
        Requests.IsDataEncryptionActiveRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "IsDataEncryptionActive",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683534.aspx
        * @description Validates the state transition.
        * @alias IsValidStateTransitionRequest
        */
        Requests.IsValidStateTransitionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "IsValidStateTransition",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683535.aspx
        * @description Searches multiple resources for available time block that matches the specified parameters.
        * @alias QueryMultipleSchedulesRequest
        */
        Requests.QueryMultipleSchedulesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "QueryMultipleSchedules",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608100.aspx
        * @description Searches the specified resource for an available time block that matches the specified parameters.
        * @alias QueryScheduleRequest
        */
        Requests.QueryScheduleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "QuerySchedule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622429.aspx
        * @description Retrieves the absolute URL and the site collection URL for a SharePoint location record in Microsoft Dynamics 365.
        * @alias RetrieveAbsoluteAndSiteCollectionUrlRequest
        */
        Requests.RetrieveAbsoluteAndSiteCollectionUrlRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveAbsoluteAndSiteCollectionUrl",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491171.aspx
        * @description TODO: RetrieveActivePath Function Description (No Joke, MS description)
        * @alias RetrieveActivePathRequest
        */
        Requests.RetrieveActivePathRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveActivePath",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607682.aspx
        * @description Retrieves the collection of users that report to the specified system user (user).
        * @alias RetrieveAllChildUsersSystemUserRequest
        */
        Requests.RetrieveAllChildUsersSystemUserRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveAllChildUsersSystemUser",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683536.aspx
        * @description Retrieves metadata information about all the entities.
        * @alias RetrieveAllEntitiesRequest
        */
        Requests.RetrieveAllEntitiesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveAllEntities",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607503.aspx
        * @description Retrieve the data that defines the content and behavior of the application ribbon.
        * @alias RetrieveApplicationRibbonRequest
        */
        Requests.RetrieveApplicationRibbonRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveApplicationRibbon",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593106.aspx
        * @description Retrieves the list of database partitions that are used to store audited history data.
        * @alias RetrieveAuditPartitionListRequest
        */
        Requests.RetrieveAuditPartitionListRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveAuditPartitionList",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607635.aspx
        * @description Retrieves the list of language packs that are installed and enabled on the server.
        * @alias RetrieveAvailableLanguagesRequest
        */
        Requests.RetrieveAvailableLanguagesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveAvailableLanguages",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607489.aspx
        * @description Retrieves all business units from the business unit hierarchy.
        * @alias RetrieveBusinessHierarchyBusinessUnitRequest
        */
        Requests.RetrieveBusinessHierarchyBusinessUnitRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveBusinessHierarchyBusinessUnit",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "businessunit",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607979.aspx
        * @description Retrieves all resources that are related to the specified resource group
        * @alias RetrieveByGroupResourceRequest
        */
        Requests.RetrieveByGroupResourceRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveByGroupResource",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "resourcegroup",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607881.aspx
        * @description Retrieves the resource groups (scheduling groups) that contain the specified resource.
        * @alias RetrieveByResourceResourceGroupRequest
        */
        Requests.RetrieveByResourceResourceGroupRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveByResourceResourceGroup",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "resource",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491172.aspx
        * @description Retrieve the collection of services that are related to the specified set of resources.
        * @alias RetrieveByResourcesServiceRequest
        */
        Requests.RetrieveByResourcesServiceRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveByResourcesService",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607560.aspx
        * @description Retrieves the top-ten articles about a specified product from the knowledge base of articles for the organization
        * @alias RetrieveByTopIncidentProductKbArticleRequest
        */
        Requests.RetrieveByTopIncidentProductKbArticleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveByTopIncidentProductKbArticle",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "product",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608058.aspx
        * @description Retrieves the top-ten articles about a specified subject from the knowledge base of articles for your organization.
        * @alias RetrieveByTopIncidentSubjectKbArticleRequest
        */
        Requests.RetrieveByTopIncidentSubjectKbArticleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveByTopIncidentSubjectKbArticle",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "subject",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608120.aspx
        * @description Retrieve information about the current organization.
        * @alias RetrieveCurrentOrganizationRequest
        */
        Requests.RetrieveCurrentOrganizationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveCurrentOrganization",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608110.aspx
        * @description Retrieves the data encryption key value.
        * @alias RetrieveDataEncryptionKeyRequest
        */
        Requests.RetrieveDataEncryptionKeyRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDataEncryptionKey",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607985.aspx
        * @description Retrieves a collection of dependency records that describe any solution components that would prevent a solution component from being deleted.
        * @alias RetrieveDependenciesForDeleteRequest
        */
        Requests.RetrieveDependenciesForDeleteRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDependenciesForDelete",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607791.aspx
        * @description Retrieves a list of the solution component dependencies that can prevent you from uninstalling a managed solution.
        * @alias RetrieveDependenciesForUninstallRequest
        */
        Requests.RetrieveDependenciesForUninstallRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDependenciesForUninstall",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593045.aspx
        * @description Retrieves a list dependencies for solution components that directly depend on a solution component.
        * @alias RetrieveDependentComponentsRequest
        */
        Requests.RetrieveDependentComponentsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDependentComponents",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593056.aspx
        * @description Retrieves the type of license for a deployment of Microsoft Dynamics 365.
        * @alias RetrieveDeploymentLicenseTypeRequest
        */
        Requests.RetrieveDeploymentLicenseTypeRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDeploymentLicenseType",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607656.aspx
        * @description Retrieves a list of language packs that are installed on the server that have been disabled.
        * @alias RetrieveDeprovisionedLanguagesRequest
        */
        Requests.RetrieveDeprovisionedLanguagesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDeprovisionedLanguages",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683537.aspx
        * @description Detects and retrieves duplicates for a specified record.
        * @alias RetrieveDuplicatesRequest
        */
        Requests.RetrieveDuplicatesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveDuplicates",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491170.aspx
        * @description Retrieve the changes for an entity.
        * @alias RetrieveEntityChangesRequest
        */
        Requests.RetrieveEntityChangesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveEntityChanges",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607698.aspx
        * @description Retrieves ribbon definitions for an entity.
        * @alias RetrieveEntityRibbonRequest
        */
        Requests.RetrieveEntityRibbonRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveEntityRibbon",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491173.aspx
        * @description Retrieves the appointments for the current user for a specific date range from the exchange web service.
        * @alias RetrieveExchangeAppointmentsRequest
        */
        Requests.RetrieveExchangeAppointmentsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveExchangeAppointments",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607795.aspx
        * @description Retrieves the exchange rate.
        * @alias RetrieveExchangeRateRequest
        */
        Requests.RetrieveExchangeRateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveExchangeRate",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491174.aspx
        * @description Retrieves the entity forms that are available for a specified user.
        * @alias RetrieveFilteredFormsRequest
        */
        Requests.RetrieveFilteredFormsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveFilteredForms",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607487.aspx
        * @description Retrieves the formatted results from an import job.
        * @alias RetrieveFormattedImportJobResultsRequest
        */
        Requests.RetrieveFormattedImportJobResultsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveFormattedImportJobResults",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607696.aspx
        * @description Retrieves the list of language packs that are installed on the server.
        * @alias RetrieveInstalledLanguagePacksRequest
        */
        Requests.RetrieveInstalledLanguagePacksRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveInstalledLanguagePacks",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608102.aspx
        * @description Retrieves the version of an installed language pack.
        * @alias RetrieveInstalledLanguagePackVersionRequest
        */
        Requests.RetrieveInstalledLanguagePackVersionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveInstalledLanguagePackVersion",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607844.aspx
        * @description Retrieves the number of used and available licenses for a deployment of Microsoft Dynamics 365.
        * @alias RetrieveLicenseInfoRequest
        */
        Requests.RetrieveLicenseInfoRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveLicenseInfo",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683538.aspx
        * @description Retrieves localized labels for a limited set of entity attributes.
        * @alias RetrieveLocLabelsRequest
        */
        Requests.RetrieveLocLabelsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveLocLabels",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt592988.aspx
        * @description Retrieves folder-level tracking rules for a mailbox.
        * @alias RetrieveMailboxTrackingFoldersRequest
        */
        Requests.RetrieveMailboxTrackingFoldersRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveMailboxTrackingFolders",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622412.aspx
        * @description Retrieves the members of a bulk operation.
        * @alias RetrieveMembersBulkOperationRequest
        */
        Requests.RetrieveMembersBulkOperationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveMembersBulkOperation",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "bulkoperation",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607580.aspx
        * @description Retrieves a list of missing components in the target organization.
        * @alias RetrieveMissingComponentsRequest
        */
        Requests.RetrieveMissingComponentsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveMissingComponents",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607972.aspx
        * @description Retrieves any required solution components that are not included in the solution.
        * @alias RetrieveMissingDependenciesRequest
        */
        Requests.RetrieveMissingDependenciesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveMissingDependencies",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607527.aspx
        * @description Retrieves the resources that are used by an organization.
        * @alias RetrieveOrganizationResourcesRequest
        */
        Requests.RetrieveOrganizationResourcesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveOrganizationResources",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607818.aspx
        * @description Retrieves the collection of the parent resource groups of the specified resource group (scheduling group).
        * @alias RetrieveParentGroupsResourceGroupRequest
        */
        Requests.RetrieveParentGroupsResourceGroupRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveParentGroupsResourceGroup",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607594.aspx
        * @description Retrieves the data from the parse table.
        * @alias RetrieveParsedDataImportFileRequest
        */
        Requests.RetrieveParsedDataImportFileRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveParsedDataImportFile",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607613.aspx
        * @description Retrieves pages of posts, including comments for each post, for all records that the calling user is following.
        * @alias RetrievePersonalWallRequest
        */
        Requests.RetrievePersonalWallRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrievePersonalWall",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683539.aspx
        * @description Retrieves the access rights of the specified security principal (team or user) to the specified record.
        * @alias RetrievePrincipalAccessRequest
        */
        Requests.RetrievePrincipalAccessRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrievePrincipalAccess",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607755.aspx
        * @description Retrieves all the secured attribute privileges a user or team has through direct or indirect (through team membership) associations with the FieldSecurityProfile entity.
        * @alias RetrievePrincipalAttributePrivilegesRequest
        */
        Requests.RetrievePrincipalAttributePrivilegesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrievePrincipalAttributePrivileges",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593098.aspx
        * @description For internal use only.
        * @alias RetrievePrincipalSyncAttributeMappingsRequest
        */
        Requests.RetrievePrincipalSyncAttributeMappingsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrievePrincipalSyncAttributeMappings",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622426.aspx
        * @description Retrieves the set of privileges defined in the system.
        * @alias RetrievePrivilegeSetRequest
        */
        Requests.RetrievePrivilegeSetRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrievePrivilegeSet",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491175.aspx
        * @description TODO: RetrieveProcessInstances Function Description (By MS)
        * @alias RetrieveProcessInstancesRequest
        */
        Requests.RetrieveProcessInstancesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveProcessInstances",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607701.aspx
        * @description Retrieve all the property instances (dynamic property instances) for a product added to an opportunity, quote, order, or invoice.
        * @alias RetrieveProductPropertiesRequest
        */
        Requests.RetrieveProductPropertiesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveProductProperties",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593074.aspx
        * @description Retrieves the version of a provisioned language pack.
        * @alias RetrieveProvisionedLanguagePackVersionRequest
        */
        Requests.RetrieveProvisionedLanguagePackVersionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveProvisionedLanguagePackVersion",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607900.aspx
        * @description Retrieves the list of provisioned languages.
        * @alias RetrieveProvisionedLanguagesRequest
        */
        Requests.RetrieveProvisionedLanguagesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveProvisionedLanguages",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683540.aspx
        * @description Retrieves pages of posts, including comments for each post, for a specified record.
        * @alias RetrieveRecordWallRequest
        */
        Requests.RetrieveRecordWallRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveRecordWall",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607927.aspx
        * @description Retrieves a collection of solution components that are required for a solution component.
        * @alias RetrieveRequiredComponentsRequest
        */
        Requests.RetrieveRequiredComponentsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveRequiredComponents",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607997.aspx
        * @description Retrieves the privileges that are assigned to the specified role.
        * @alias RetrieveRolePrivilegesRoleRequest
        */
        Requests.RetrieveRolePrivilegesRoleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveRolePrivilegesRole",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607604.aspx
        * @description Retrieves the collection of child resource groups from the specified resource group.
        * @alias RetrieveSubGroupsResourceGroupRequest
        */
        Requests.RetrieveSubGroupsResourceGroupRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveSubGroupsResourceGroup",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "resourcegroup",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608036.aspx
        * @description Retrieves the privileges for a team.
        * @alias RetrieveTeamPrivilegesRequest
        */
        Requests.RetrieveTeamPrivilegesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveTeamPrivileges",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "team",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607518.aspx
        * @description Retrieves a time stamp for the metadata.
        * @alias RetrieveTimestampRequest
        */
        Requests.RetrieveTimestampRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveTimestamp",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683541.aspx
        * @description Retrieves a collection of unpublished organization-owned records that satisfy the specified query criteria.
        * @alias RetrieveUnpublishedMultipleRequest
        */
        Requests.RetrieveUnpublishedMultipleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveUnpublishedMultiple",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607996.aspx
        * @description Retrieves the privileges a system user (user) has through his or her roles in the specified business unit.
        * @alias RetrieveUserPrivilegesRequest
        */
        Requests.RetrieveUserPrivilegesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveUserPrivileges",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607579.aspx
        * @description Retrieves all private queues of a specified user and optionally all public queues.
        * @alias RetrieveUserQueuesRequest
        */
        Requests.RetrieveUserQueuesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveUserQueues",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593041.aspx
        * @description Retrieves the version number of the Microsoft Dynamics 365 Server.
        * @alias RetrieveVersionRequest
        */
        Requests.RetrieveVersionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "RetrieveVersion",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491176.aspx
        * @description Retrieves all the entity records that are related to the specified record.
        * @alias RollupRequest
        */
        Requests.RollupRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "Rollup",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608029.aspx
        * @description Searches for available time slots that fulfill the specified appointment request.
        * @alias SearchRequest
        */
        Requests.SearchRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "Search",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683542.aspx
        * @description Searches for knowledge base articles that contain the specified body text.
        * @alias SearchByBodyKbArticleRequest
        */
        Requests.SearchByBodyKbArticleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "SearchByBodyKbArticle",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683543.aspx
        * @description Searches for knowledge base articles that contain the specified keywords.
        * @alias SearchByKeywordsKbArticleRequest
        */
        Requests.SearchByKeywordsKbArticleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "SearchByKeywordsKbArticle",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683544.aspx
        * @description Searches for knowledge base articles that contain the specified title.
        * @alias SearchByTitleKbArticleRequest
        */
        Requests.SearchByTitleKbArticleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "SearchByTitleKbArticle",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt683545.aspx
        * @description Validates a rule for a recurring appointment.
        * @alias ValidateRecurrenceRuleRequest
        */
        Requests.ValidateRecurrenceRuleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "ValidateRecurrenceRule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607925.aspx
        * @description Retrieves the system user ID for the currently logged on user or the user under whose context the code is running.
        * @alias WhoAmIRequest
        */
        Requests.WhoAmIRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "GET",
            writeable: true
          },
          name: {
            value: "WhoAmI",
            writeable: true
          }
        });
        // Actions
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607569.aspx
        * @description Adds an item to a campaign.
        * @alias AddItemCampaignRequest
        */
        Requests.AddItemCampaignRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddItemCampaign",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607559.aspx
        * @description Adds an item to a campaign activity.
        * @alias AddItemCampaignActivityRequest
        */
        Requests.AddItemCampaignActivityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddItemCampaignActivity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607641.aspx
        * @description Adds members to a list.
        * @alias AddListMembersListRequest
        */
        Requests.AddListMembersListRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddListMembersList",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607495.aspx
        * @description Adds a member to a list (marketing list).
        * @alias AddMemberListRequest
        */
        Requests.AddMemberListRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddMemberList",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "list",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607496.aspx
        * @description Adds members to a team.
        * @alias AddMembersTeamRequest
        */
        Requests.AddMembersTeamRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddMembersTeam",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "team",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593089.aspx
        * @description Adds the specified principal to the list of queue members.
        * @alias AddPrincipalToQueueRequest
        */
        Requests.AddPrincipalToQueueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddPrincipalToQueue",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "queue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607862.aspx
        * @description Adds a set of existing privileges to an existing role.
        * @alias AddPrivilegesRoleRequest
        */
        Requests.AddPrivilegesRoleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddPrivilegesRole",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "role",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607566.aspx
        * @description Adds recurrence information to an existing appointment.
        * @alias AddRecurrenceRequest
        */
        Requests.AddRecurrenceRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddRecurrence",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "appointment",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593057.aspx
        * @description Adds a solution component to an unmanaged solution.
        * @alias AddSolutionComponentRequest
        */
        Requests.AddSolutionComponentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddSolutionComponent",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607880.aspx
        * @description Moves an entity record from a source queue to a destination queue.
        * @alias AddToQueueRequest
        */
        Requests.AddToQueueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddToQueue",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "queue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607951.aspx
        * @description Adds a user to the auto created access team for the specified record.
        * @alias AddUserToRecordTeamRequest
        */
        Requests.AddUserToRecordTeamRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AddUserToRecordTeam",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608069.aspx
        * @description Applies record creation and update rules to activities in 365 created as a result of the integration with external applications.
        * @alias ApplyRecordCreationAndUpdateRuleRequest
        */
        Requests.ApplyRecordCreationAndUpdateRuleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ApplyRecordCreationAndUpdateRule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608125.aspx
        * @description Applies the active routing rule to an incident.
        * @alias ApplyRoutingRuleRequest
        */
        Requests.ApplyRoutingRuleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ApplyRoutingRule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607766.aspx
        * @description Generates a new set of attribute mappings based on the metadata.
        * @alias AutoMapEntityRequest
        */
        Requests.AutoMapEntityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "AutoMapEntity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt718079.aspx
        * @description Schedules or "books" an appointment, recurring appointment, or service appointment (service activity).
        * @alias BookRequest
        */
        Requests.BookRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "Book",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491158.aspx
        * @description Submits a bulk delete job that deletes selected records in bulk. This job runs asynchronously in the background without blocking other activities.
        * @alias BulkDeleteRequest
        */
        Requests.BulkDeleteRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "BulkDelete",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491162.aspx
        * @description Submits an asynchronous system job that detects and logs multiple duplicate records.
        * @alias BulkDetectDuplicatesRequest
        */
        Requests.BulkDetectDuplicatesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "BulkDetectDuplicates",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607988.aspx
        * @description Calculates the value of an opportunity that is in the "Won" state.
        * @alias CalculateActualValueOpportunityRequest
        */
        Requests.CalculateActualValueOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CalculateActualValueOpportunity",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "opportunity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608012.aspx
        * @description Calculates price in an opportunity, quote, order, and invoice.
        * @alias CalculatePriceRequest
        */
        Requests.CalculatePriceRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CalculatePrice",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593059.aspx
        * @description Checks whether the specified entity can be the primary entity (one) in a one-to-many relationship.
        * @alias CanBeReferencedRequest
        */
        Requests.CanBeReferencedRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CanBeReferenced",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607578.aspx
        * @description Checkes whether an entity can be the referencing entity in a one-to-many relationship.
        * @alias CanBeReferencingRequest
        */
        Requests.CanBeReferencingRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CanBeReferencing",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607610.aspx
        * @description Cancels a contract.
        * @alias CancelContractRequest
        */
        Requests.CancelContractRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CancelContract",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "contract",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607587.aspx
        * @description Cancels a sales order.
        * @alias CancelSalesOrderRequest
        */
        Requests.CancelSalesOrderRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CancelSalesOrder",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607577.aspx
        * @description Checks whether an entity can participate in a many-to-many relationship.
        * @alias CanManyToManyRequest
        */
        Requests.CanManyToManyRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CanManyToMany",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607802.aspx
        * @description Creates a solution patch from a managed or unmanaged solution.
        * @alias CloneAsPatchRequest
        */
        Requests.CloneAsPatchRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloneAsPatch",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607806.aspx
        * @description Creates a new copy of an unmanged solution that contains the original solution plus all of its patches.
        * @alias CloneAsSolutionRequest
        */
        Requests.CloneAsSolutionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloneAsSolution",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607895.aspx
        * @description Copies an existing contract and its line items.
        * @alias CloneContractRequest
        */
        Requests.CloneContractRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloneContract",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "contract",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt718080.aspx
        * @description For internal use only.
        * @alias CloneMobileOfflineProfileRequest
        */
        Requests.CloneMobileOfflineProfileRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloneMobileOfflineProfile",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "mobileofflineprofile",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608030.aspx
        * @description Copies an existing product family, product, or bundle under the same parent record.
        * @alias CloneProductRequest
        */
        Requests.CloneProductRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloneProduct",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "product",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607498.aspx
        * @description Closes an incident (case).
        * @alias CloseIncidentRequest
        */
        Requests.CloseIncidentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloseIncident",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607685.aspx
        * @description Closes a quote.
        * @alias CloseQuoteRequest
        */
        Requests.CloseQuoteRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CloseQuote",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608088.aspx
        * @description Updates a duplicate rule (duplicate detection rule) and its related duplicate rule conditions.
        * @alias CompoundUpdateDuplicateDetectionRuleRequest
        */
        Requests.CompoundUpdateDuplicateDetectionRuleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CompoundUpdateDuplicateDetectionRule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607749.aspx
        * @description Converts a team of type owner to a team of type access.
        * @alias ConvertOwnerTeamToAccessTeamRequest
        */
        Requests.ConvertOwnerTeamToAccessTeamRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ConvertOwnerTeamToAccessTeam",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "team",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607933.aspx
        * @description Converts a product to a kit.
        * @alias ConvertProductToKitRequest
        */
        Requests.ConvertProductToKitRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ConvertProductToKit",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607842.aspx
        * @description Converts a quote to a sales order.
        * @alias ConvertQuoteToSalesOrderRequest
        */
        Requests.ConvertQuoteToSalesOrderRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ConvertQuoteToSalesOrder",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607736.aspx
        * @description Converts a sales order to an invoice.
        * @alias ConvertSalesOrderToInvoiceRequest
        */
        Requests.ConvertSalesOrderToInvoiceRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ConvertSalesOrderToInvoice",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607820.aspx
        * @description Copies a campaign.
        * @alias CopyCampaignRequest
        */
        Requests.CopyCampaignRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CopyCampaign",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "campaign",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607655.aspx
        * @description Creates a copy of a campaign response
        * @alias CopyCampaignResponseRequest
        */
        Requests.CopyCampaignResponseRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CopyCampaignResponse",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "campaignresponse",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593064.aspx
        * @description Creates a static list from the specified dynamic list and add the members that satisfy the dynamic list query criteria to the static list.
        * @alias CopyDynamicListToStaticRequest
        */
        Requests.CopyDynamicListToStaticRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CopyDynamicListToStatic",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "list",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607620.aspx
        * @description Copies the members from the source list to the target list without creating duplicates.
        * @alias CopyMembersListRequest
        */
        Requests.CopyMembersListRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CopyMembersList",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "list",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608044.aspx
        * @description Creates a new entity form that is based on an existing entity form.
        * @alias CopySystemFormRequest
        */
        Requests.CopySystemFormRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CopySystemForm",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemform",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607931.aspx
        * @description Creates a quick campaign to distribute an activity to members of a list (marketing list).
        * @alias CreateActivitiesListRequest
        */
        Requests.CreateActivitiesListRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateActivitiesList",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491161.aspx
        * @description Creates a new customer lookup attribute, and optionally, to add it to a specified unmanaged solution.
        * @alias CreateCustomerRelationshipsRequest
        */
        Requests.CreateCustomerRelationshipsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateCustomerRelationships",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593100.aspx
        * @description Creates an exception for the recurring appointment instance.
        * @alias CreateExceptionRequest
        */
        Requests.CreateExceptionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateException",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608070.aspx
        * @description Creates future unexpanded instances for the recurring appointment master.
        * @alias CreateInstanceRequest
        */
        Requests.CreateInstanceRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateInstance",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607622.aspx
        * @description Creates translation of a knowledge article instance.
        * @alias CreateKnowledgeArticleTranslationRequest
        */
        Requests.CreateKnowledgeArticleTranslationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateKnowledgeArticleTranslation",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607825.aspx
        * @description Creates a major or minor version of a knowledge article instance.
        * @alias CreateKnowledgeArticleVersionRequest
        */
        Requests.CreateKnowledgeArticleVersionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateKnowledgeArticleVersion",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622404.aspx
        * @description Creates a workflow (process) from a workflow template.
        * @alias CreateWorkflowFromTemplateRequest
        */
        Requests.CreateWorkflowFromTemplateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "CreateWorkflowFromTemplate",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "workflow",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607488.aspx
        * @description Replaces managed solution (A) plus all of its patches with managed solution (B) that is the clone of (A) and all of its patches.
        * @alias DeleteAndPromoteRequest
        */
        Requests.DeleteAndPromoteRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeleteAndPromote",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607758.aspx
        * @description Deletes all audit data records up until a specified end date.
        * @alias DeleteAuditDataRequest
        */
        Requests.DeleteAuditDataRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeleteAuditData",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608051.aspx
        * @description Deletes instances of a recurring appointment master that have an “Open” state.
        * @alias DeleteOpenInstancesRequest
        */
        Requests.DeleteOpenInstancesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeleteOpenInstances",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607754.aspx
        * @description Deletes an option value in a global or local option set.
        * @alias DeleteOptionValueRequest
        */
        Requests.DeleteOptionValueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeleteOptionValue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607515.aspx
        * @description Creates an email activity record from an incoming email message.
        * @alias DeliverIncomingEmailRequest
        */
        Requests.DeliverIncomingEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeliverIncomingEmail",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608033.aspx
        * @description Creates an email activity record from the specified email message
        * @alias DeliverPromoteEmailRequest
        */
        Requests.DeliverPromoteEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeliverPromoteEmail",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "email",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608078.aspx
        * @description Deprovisions a language.
        * @alias DeprovisionLanguageRequest
        */
        Requests.DeprovisionLanguageRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DeprovisionLanguage",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607926.aspx
        * @description Creates a bulk operation that distributes a campaign activity.
        * @alias DistributeCampaignActivityRequest
        */
        Requests.DistributeCampaignActivityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "DistributeCampaignActivity",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "campaignactivity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491159.aspx
        * @description Executes a workflow.
        * @alias ExecuteWorkflowRequest
        */
        Requests.ExecuteWorkflowRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ExecuteWorkflow",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "workflow",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622402.aspx
        * @description Exports a data map as an XML formatted data.
        * @alias ExportMappingsImportMapRequest
        */
        Requests.ExportMappingsImportMapRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ExportMappingsImportMap",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "importmap",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607590.aspx
        * @description Exports a solution.
        * @alias ExportSolutionRequest
        */
        Requests.ExportSolutionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ExportSolution",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608097.aspx
        * @description Exports all translations for a specific solution to a compressed file.
        * @alias ExportTranslationRequest
        */
        Requests.ExportTranslationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ExportTranslation",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607784.aspx
        * @description Fulfills a sales order.
        * @alias FulfillSalesOrderRequest
        */
        Requests.FulfillSalesOrderRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "FulfillSalesOrder",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491160.aspx
        * @description Performs a full-text search on knowledge articles in Dynamics 365 using the specified search text.
        * @alias FullTextSearchKnowledgeArticleRequest
        */
        Requests.FullTextSearchKnowledgeArticleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "FullTextSearchKnowledgeArticle",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593066.aspx
        * @description Generates an invoice from an opportunity.
        * @alias GenerateInvoiceFromOpportunityRequest
        */
        Requests.GenerateInvoiceFromOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GenerateInvoiceFromOpportunity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607591.aspx
        * @description Generates a quote from an opportunity.
        * @alias GenerateQuoteFromOpportunityRequest
        */
        Requests.GenerateQuoteFromOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GenerateQuoteFromOpportunity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607659.aspx
        * @description Generates a sales order (order) from an opportunity.
        * @alias GenerateSalesOrderFromOpportunityRequest
        */
        Requests.GenerateSalesOrderFromOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GenerateSalesOrderFromOpportunity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593014.aspx
        * @description Returns an existing social profile record if one exists, otherwise generates a new one and returns it.
        * @alias GenerateSocialProfileRequest
        */
        Requests.GenerateSocialProfileRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GenerateSocialProfile",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "socialprofile",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607526.aspx
        * @description Retrieves the products from an opportunity and copy them to the invoice.
        * @alias GetInvoiceProductsFromOpportunityRequest
        */
        Requests.GetInvoiceProductsFromOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GetInvoiceProductsFromOpportunity",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "invoice",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607548.aspx
        * @description Retrieves the products from an opportunity and copy them to the quote.
        * @alias GetQuoteProductsFromOpportunityRequest
        */
        Requests.GetQuoteProductsFromOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GetQuoteProductsFromOpportunity",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "quote",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607869.aspx
        * @description Retrieves the products from an opportunity and copy them to the sales order.
        * @alias GetSalesOrderProductsFromOpportunityRequest
        */
        Requests.GetSalesOrderProductsFromOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GetSalesOrderProductsFromOpportunity",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "salesorder",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593007.aspx
        * @description Returns a tracking token that can then be passed as a parameter to the SendEmailRequest message.
        * @alias GetTrackingTokenEmailRequest
        */
        Requests.GetTrackingTokenEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "GetTrackingTokenEmail",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608013.aspx
        * @description Imports translations from a compressed file.
        * @alias ImportFieldTranslationRequest
        */
        Requests.ImportFieldTranslationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ImportFieldTranslation",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607768.aspx
        * @description Imports the XML representation of a data map and create an import map (data map) based on this data.
        * @alias ImportMappingsImportMapRequest
        */
        Requests.ImportMappingsImportMapRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ImportMappingsImportMap",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622418.aspx
        * @description Submits an asynchronous job that uploads the transformed data into Microsoft Dynamics 365.
        * @alias ImportRecordsImportRequest
        */
        Requests.ImportRecordsImportRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ImportRecordsImport",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "import",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608117.aspx
        * @description Imports a solution.
        * @alias ImportSolutionRequest
        */
        Requests.ImportSolutionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ImportSolution",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607744.aspx
        * @description Imports translations from a compressed file.
        * @alias ImportTranslationRequest
        */
        Requests.ImportTranslationRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ImportTranslation",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607647.aspx
        * @description Inserts a new option value for a global or local option set.
        * @alias InsertOptionValueRequest
        */
        Requests.InsertOptionValueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "InsertOptionValue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607839.aspx
        * @description Inserts a new option into a StatusAttributeMetadata attribute.
        * @alias InsertStatusValueRequest
        */
        Requests.InsertStatusValueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "InsertStatusValue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608101.aspx
        * @description Installs the sample data.
        * @alias InstallSampleDataRequest
        */
        Requests.InstallSampleDataRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "InstallSampleData",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607877.aspx
        * @description Instantiates a set of filters for Dynamics 365 for Outlook for the specified user.
        * @alias InstantiateFiltersRequest
        */
        Requests.InstantiateFiltersRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "InstantiateFilters",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt592993.aspx
        * @description Creates an email message from a template (email template).
        * @alias InstantiateTemplateRequest
        */
        Requests.InstantiateTemplateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "InstantiateTemplate",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607781.aspx
        * @description Locks the total price of products and services that are specified in the invoice.
        * @alias LockInvoicePricingRequest
        */
        Requests.LockInvoicePricingRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "LockInvoicePricing",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "invoice",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607804.aspx
        * @description Locks the total price of products and services that are specified in the sales order (order).
        * @alias LockSalesOrderPricingRequest
        */
        Requests.LockSalesOrderPricingRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "LockSalesOrderPricing",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "salesorder",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607618.aspx
        * @description Sets the state of an opportunity to Lost.
        * @alias LoseOpportunityRequest
        */
        Requests.LoseOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "LoseOpportunity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607669.aspx
        * @description Merges the information from two entity records of the same type.
        * @alias MergeRequest
        */
        Requests.MergeRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "Merge",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607483.aspx
        * @description Sets the order for an option set.
        * @alias OrderOptionRequest
        */
        Requests.OrderOptionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "OrderOption",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622440.aspx
        * @description Submits an asynchronous job that parses all import files that are associated with the specified import (data import).
        * @alias ParseImportRequest
        */
        Requests.ParseImportRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ParseImport",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "import",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593071.aspx
        * @description Assigns a queue item to a user and optionally remove the queue item from the queue.
        * @alias PickFromQueueRequest
        */
        Requests.PickFromQueueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PickFromQueue",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "queueitem",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607787.aspx
        * @description Processes the email responses from a marketing campaign.
        * @alias ProcessInboundEmailRequest
        */
        Requests.ProcessInboundEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ProcessInboundEmail",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "email",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491163.aspx
        * @description Creates a quick campaign to distribute an activity to accounts, contacts, or leads that are selected by a query.
        * @alias PropagateByExpressionRequest
        */
        Requests.PropagateByExpressionRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PropagateByExpression",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608077.aspx
        * @description Provisions a new language.
        * @alias ProvisionLanguageRequest
        */
        Requests.ProvisionLanguageRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ProvisionLanguage",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607699.aspx
        * @description Publishes all changes to solution components.
        * @alias PublishAllXmlRequest
        */
        Requests.PublishAllXmlRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PublishAllXml",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622423.aspx
        * @description Submits an asynchronous job to publish a duplicate rule.
        * @alias PublishDuplicateRuleRequest
        */
        Requests.PublishDuplicateRuleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PublishDuplicateRule",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "duplicaterule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593011.aspx
        * @description Publishes a product family record and all its child records.
        * @alias PublishProductHierarchyRequest
        */
        Requests.PublishProductHierarchyRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PublishProductHierarchy",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "product",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608018.aspx
        * @description Publishes a theme and set it as the current theme.
        * @alias PublishThemeRequest
        */
        Requests.PublishThemeRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PublishTheme",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "theme",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593076.aspx
        * @description Publishes specified solution components.
        * @alias PublishXmlRequest
        */
        Requests.PublishXmlRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "PublishXml",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491164.aspx
        * @description Qualifies a lead and create account, contact, and opportunity records that are linked to the originating lead record.
        * @alias QualifyLeadRequest
        */
        Requests.QualifyLeadRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "QualifyLead",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "lead",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607614.aspx
        * @description Qualifies the specified list and either override the list members or remove them according to the specified option.
        * @alias QualifyMemberListRequest
        */
        Requests.QualifyMemberListRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "QualifyMemberList",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "list",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491165.aspx
        * @description Converts a QueryExpression query to its equivalent FetchXML query
        * @alias QueryExpressionToFetchXmlRequest
        */
        Requests.QueryExpressionToFetchXmlRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "QueryExpressionToFetchXml",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607627.aspx
        * @description Reassigns all records that are owned by the security principal (user or team) to another security principal (user or team).
        * @alias ReassignObjectsOwnerRequest
        */
        Requests.ReassignObjectsOwnerRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ReassignObjectsOwner",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607965.aspx
        * @description Reassigns all records that are owned by a specified user to another security principal (user or team).
        * @alias ReassignObjectsSystemUserRequest
        */
        Requests.ReassignObjectsSystemUserRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ReassignObjectsSystemUser",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607675.aspx
        * @description Recalculate system-computed values for rollup fields in the goal hierarchy.
        * @alias RecalculateRequest
        */
        Requests.RecalculateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "Recalculate",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "goal",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593031.aspx
        * @description Assigns a queue item back to the queue owner so others can pick it.
        * @alias ReleaseToQueueRequest
        */
        Requests.ReleaseToQueueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ReleaseToQueue",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "queueitem",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607534.aspx
        * @description Removes a queue item from a queue.
        * @alias RemoveFromQueueRequest
        */
        Requests.RemoveFromQueueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RemoveFromQueue",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "queueitem",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607537.aspx
        * @description Removes members from a team.
        * @alias RemoveMembersTeamRequest
        */
        Requests.RemoveMembersTeamRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RemoveMembersTeam",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607528.aspx
        * @description Removes the parent for a system user (user) record.
        * @alias RemoveParentRequest
        */
        Requests.RemoveParentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RemoveParent",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593107.aspx
        * @description Removes a privilege from an existing role.
        * @alias RemovePrivilegeRoleRequest
        */
        Requests.RemovePrivilegeRoleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RemovePrivilegeRole",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "role",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608116.aspx
        * @description Removes a component from an unmanaged solution.
        * @alias RemoveSolutionComponentRequest
        */
        Requests.RemoveSolutionComponentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RemoveSolutionComponent",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607735.aspx
        * @description Removes a user from the auto created access team for the specified record.
        * @alias RemoveUserFromRecordTeamRequest
        */
        Requests.RemoveUserFromRecordTeamRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RemoveUserFromRecordTeam",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593084.aspx
        * @description Renews a contract and create the contract details for a new contract.
        * @alias RenewContractRequest
        */
        Requests.RenewContractRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RenewContract",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "contract",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607893.aspx
        * @description Renews an entitlement.
        * @alias RenewEntitlementRequest
        */
        Requests.RenewEntitlementRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RenewEntitlement",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "entitlement",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607752.aspx
        * @description Replaces the privilege set of an existing role.
        * @alias ReplacePrivilegesRoleRequest
        */
        Requests.ReplacePrivilegesRoleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ReplacePrivilegesRole",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "role",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt718082.aspx
        * @description Reschedules an appointment, recurring appointment, or service appointment (service activity).
        * @alias RescheduleRequest
        */
        Requests.RescheduleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "Reschedule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607633.aspx
        * @description Resets the offline data filters for the calling user to the default filters for the organization.
        * @alias ResetUserFiltersRequest
        */
        Requests.ResetUserFiltersRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ResetUserFilters",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608006.aspx
        * @description Reverts changes done to properties of a product family, product, or bundle record, and set it back to its last published (active) state.
        * @alias RevertProductRequest
        */
        Requests.RevertProductRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RevertProduct",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607543.aspx
        * @description Sets the state of a quote to Draft.
        * @alias ReviseQuoteRequest
        */
        Requests.ReviseQuoteRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ReviseQuote",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607505.aspx
        * @description Replaces the access rights on the target record for the specified security principal (user or team).
        * @alias RevokeAccessRequest
        */
        Requests.RevokeAccessRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RevokeAccess",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607729.aspx
        * @description Routes a queue item to a queue, a user, or a team.
        * @alias RouteToRequest
        */
        Requests.RouteToRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "RouteTo",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491166.aspx
        * @description Sends bulk email messages.
        * @alias SendBulkMailRequest
        */
        Requests.SendBulkMailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SendBulkMail",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608061.aspx
        * @description Sends an e-mail message.
        * @alias SendEmailRequest
        */
        Requests.SendEmailRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SendEmail",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "email",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607523.aspx
        * @description Sends an e-mail message to a recipient using an e-mail template.
        * @alias SendEmailFromTemplateRequest
        */
        Requests.SendEmailFromTemplateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SendEmailFromTemplate",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607670.aspx
        * @description Sends a fax.
        * @alias SendFaxRequest
        */
        Requests.SendFaxRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SendFax",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607717.aspx
        * @description Sends a bulk email message that is created from a template.
        * @alias SendTemplateRequest
        */
        Requests.SendTemplateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SendTemplate",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608087.aspx
        * @description Assigns equipment (facility/equipment) to a specific business unit.
        * @alias SetBusinessEquipmentRequest
        */
        Requests.SetBusinessEquipmentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetBusinessEquipment",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593023.aspx
        * @description Moves a system user (user) to a different business unit.
        * @alias SetBusinessSystemUserRequest
        */
        Requests.SetBusinessSystemUserRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetBusinessSystemUser",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608039.aspx
        * @description Sets or restore the data encryption key.
        * @alias SetDataEncryptionKeyRequest
        */
        Requests.SetDataEncryptionKeyRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetDataEncryptionKey",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491167.aspx
        * @description TODO: SetFeatureStatus Action Description (Obviously no description yet)
        * @alias SetFeatureStatusRequest
        */
        Requests.SetFeatureStatusRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetFeatureStatus",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607609.aspx
        * @description Sets localized labels for a limited set of entity attributes.
        * @alias SetLocLabelsRequest
        */
        Requests.SetLocLabelsRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetLocLabels",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607617.aspx
        * @description Sets a new parent system user (user) for the specified user.
        * @alias SetParentSystemUserRequest
        */
        Requests.SetParentSystemUserRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetParentSystemUser",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "systemuser",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607705.aspx
        * @description Sets the process that associates with a given target entity. The user can set to another business process or specify null to clear out the current process.
        * @alias SetProcessRequest
        */
        Requests.SetProcessRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetProcess",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607765.aspx
        * @description Links an instance of a report entity to related entities.
        * @alias SetReportRelatedRequest
        */
        Requests.SetReportRelatedRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "SetReportRelated",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608027.aspx
        * @description Submits an asynchronous job that transforms the parsed data.
        * @alias TransformImportRequest
        */
        Requests.TransformImportRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "TransformImport",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt622443.aspx
        * @description Validates the configuration of a Microsoft Azure Service Bus solution’s service endpoint.
        * @alias TriggerServiceEndpointCheckRequest
        */
        Requests.TriggerServiceEndpointCheckRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "TriggerServiceEndpointCheck",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          },
          entityName: {
            value: "serviceendpoint",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608045.aspx
        * @description Uninstalls the sample data.
        * @alias UninstallSampleDataRequest
        */
        Requests.UninstallSampleDataRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UninstallSampleData",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608015.aspx
        * @description Unlocks pricing for an invoice.
        * @alias UnlockInvoicePricingRequest
        */
        Requests.UnlockInvoicePricingRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UnlockInvoicePricing",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt608026.aspx
        * @description Unlocks pricing for a sales order (order).
        * @alias UnlockSalesOrderPricingRequest
        */
        Requests.UnlockSalesOrderPricingRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UnlockSalesOrderPricing",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt593018.aspx
        * @description Submits an asynchronous job to unpublish a duplicate rule.
        * @alias UnpublishDuplicateRuleRequest
        */
        Requests.UnpublishDuplicateRuleRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UnpublishDuplicateRule",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt491168.aspx
        * @description TODO: UpdateFeatureConfig Action Description (Missing)
        * @alias UpdateFeatureConfigRequest
        */
        Requests.UpdateFeatureConfigRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UpdateFeatureConfig",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607949.aspx
        * @description Updates an option value in a global or local option set.
        * @alias UpdateOptionValueRequest
        */
        Requests.UpdateOptionValueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UpdateOptionValue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607561.aspx
        * @description Updates values of the property instances (dynamic property instances) for a product added to an opportunity, quote, order, or invoice.
        * @alias UpdateProductPropertiesRequest
        */
        Requests.UpdateProductPropertiesRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UpdateProductProperties",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607611.aspx
        * @description Updates a component in an unmanaged solution.
        * @alias UpdateSolutionComponentRequest
        */
        Requests.UpdateSolutionComponentRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UpdateSolutionComponent",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607556.aspx
        * @description Updates an option set value in for a StateAttributeMetadata attribute.
        * @alias UpdateStateValueRequest
        */
        Requests.UpdateStateValueRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "UpdateStateValue",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607767.aspx
        * @description Verifies that an appointment or service appointment (service activity) has valid available resources for the activity, duration, and site, as appropriate.
        * @alias ValidateRequest
        */
        Requests.ValidateRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "Validate",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607945.aspx
        * @description Validates a saved query.
        * @alias ValidateSavedQueryRequest
        */
        Requests.ValidateSavedQueryRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "ValidateSavedQuery",
            writeable: true
          },
          bound: {
            value: true,
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607971.aspx
        * @description Sets the state of an opportunity to Won.
        * @alias WinOpportunityRequest
        */
        Requests.WinOpportunityRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "WinOpportunity",
            writeable: true
          }
        });
        /**
        * @memberof module:Requests
        * @this {Requests}
        * @see https://msdn.microsoft.com/en-us/library/mt607710.aspx
        * @description Sets the state of a quote to Won.
        * @alias WinQuoteRequest
        */
        Requests.WinQuoteRequest = Object.create(Requests.Request.prototype, {
          method: {
            value: "POST",
            writeable: true
          },
          name: {
            value: "WinQuote",
            writeable: true
          }
        });
        // Export Requests for later referencing in Core
        module.exports = Requests;
      })();
    }, {
      "./WebApiClient.Core.js": 7
    }],
    9: [function (require, module, exports) {
      (function (undefined) {
        "use strict";
        function ParseContentId(rawData) {
          var contentIdRaw = (/^Content-ID: ([0-9]+)$/m).exec(rawData);
          if (contentIdRaw && contentIdRaw.length > 1) {
            return contentIdRaw[1];
          }
          return null;
        }
        function ParsePayload(rawData) {
          var payloadRaw = (/^{[\s\S]*}/m).exec(rawData);
          if (payloadRaw && payloadRaw.length > 0) {
            return JSON.parse(payloadRaw[0]);
          }
          return null;
        }
        function ParseStatus(rawData) {
          var statusRaw = (/^HTTP\/1\.1 ([0-9]{3,3}).*$/m).exec(rawData);
          if (statusRaw && statusRaw.length > 1) {
            return statusRaw[1];
          }
          return null;
        }
        function ParseHeaders(rawData) {
          var headersRaw = (/HTTP\/1.1.*[\r\n]+([\S\s]*)?(?={|$)/g).exec(rawData);
          if (headersRaw && headersRaw.length > 1) {
            var headers = {};
            var headersSplit = headersRaw[1].split(/[\r\n]/);
            for (var i = 0; i < headersSplit.length; i++) {
              var line = headersSplit[i];
              var delimiterIndex = line.indexOf(": ");
              var key = line.substring(0, delimiterIndex);
              if (!key) {
                continue;
              }
              // Start after delimiterIndex (which is two chars long)
              var value = line.substring(delimiterIndex + 2);
              headers[key] = value;
            }
            return headers;
          }
          return null;
        }
        /**
        * Response returned for every requests inside a batch.
        * @constructor
        * @see https://msdn.microsoft.com/en-us/library/mt607719.aspx#bkmk_Example
        * @param {Object} [parameters]
        * @param {String} [parameters.contentId] Content ID for this response. You can identify which request this response belongs to, if the Content-Id was set on the request as well
        * @param {Object} [parameters.payload] Message body returned for this response, parsed JSON object
        * @param {string} [parameters.status] HTTP status code returned for this response
        * @param {Object} [parameters.headers] Headers returned for this response. Header keys are set as object keys with the corresponding values
        * @param {string} [parameters.rawData] Text fragment returned for this response. Will be used for parsing other properties if passed
        * @memberof module:WebApiClient
        */
        var Response = function (parameters) {
          var params = parameters || ({});
          if (!params.rawData) {
            /**
            * @property {String} contentId - Content ID for this response. You can identify which request this response belongs to, if the Content-Id was set on the request as well
            * @this {Response}
            */
            this.contentId = params.contentId;
            /**
            * @property {Object} payload - Message body returned for this response, parsed JSON object
            * @this {Response}
            */
            this.payload = params.payload;
            /**
            * @property {String} status - HTTP status code returned for this response
            * @this {Response}
            */
            this.status = params.status;
            /**
            * @property {String} headers - Headers returned for this response. Header keys are set as object keys with the corresponding values
            * @this {Response}
            */
            this.headers = params.headers;
          } else {
            var rawData = params.rawData;
            this.contentId = ParseContentId(rawData);
            this.payload = ParsePayload(rawData);
            this.status = ParseStatus(rawData);
            this.headers = ParseHeaders(rawData);
          }
        };
        module.exports = Response;
      })();
    }, {}],
    10: [function (require, module, exports) {
      (function (undefined) {
        "use strict";
        // Get WebApiClient core
        var WebApiClient = require("./WebApiClient.Core.js");
        /**
        * This is the bundled version of bluebird for usage as polyfill in browsers that don't support promises natively
        * @class
        * @see https://github.com/petkaantonov/bluebird
        * @memberof module:WebApiClient
        * @alias WebApiClient.Promise
        */
        WebApiClient.Promise = require("bluebird").noConflict();
        // Attach requests to core
        WebApiClient.Requests = require("./WebApiClient.Requests.js");
        // Attach batch to core
        WebApiClient.Batch = require("./WebApiClient.Batch.js");
        // Attach changeSet to core
        WebApiClient.ChangeSet = require("./WebApiClient.ChangeSet.js");
        // Attach batchRequest to core
        WebApiClient.BatchRequest = require("./WebApiClient.BatchRequest.js");
        // Attach batchResponse to core
        WebApiClient.BatchResponse = require("./WebApiClient.BatchResponse.js");
        // Attach response to core
        WebApiClient.Response = require("./WebApiClient.Response.js");
        // Export complete WebApiClient
        module.exports = WebApiClient;
      })();
    }, {
      "./WebApiClient.Batch.js": 3,
      "./WebApiClient.BatchRequest.js": 4,
      "./WebApiClient.BatchResponse.js": 5,
      "./WebApiClient.ChangeSet.js": 6,
      "./WebApiClient.Core.js": 7,
      "./WebApiClient.Requests.js": 8,
      "./WebApiClient.Response.js": 9,
      "bluebird": 1
    }]
  }, {}, [10])(10);
});

},{}],"6bpGb":[function(require,module,exports) {
var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "App", function () {
    return App;
  });
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _fluentuiReactLibDetailsList = require('@fluentui/react/lib/DetailsList');
  var _fluentuiReactLibMarqueeSelection = require('@fluentui/react/lib/MarqueeSelection');
  var _fluentuiReactLibStyling = require('@fluentui/react/lib/Styling');
  var _fluentuiReactLibTextField = require('@fluentui/react/lib/TextField');
  var _fluentuiReactLibChoiceGroup = require('@fluentui/react/lib/ChoiceGroup');
  var _fluentuiReactLibAnnounced = require('@fluentui/react/lib/Announced');
  var _fluentuiReactLibButton = require('@fluentui/react/lib/Button');
  var _fluentuiReactLibStack = require('@fluentui/react/lib/Stack');
  var _fluentuiFontIconsMdl = require('@fluentui/font-icons-mdl2');
  var _xrmtoolboxwebCore = require('xrmtoolboxweb-core');
  var _fluentuiReactLibIcon = require("@fluentui/react/lib/Icon");
  var _fluentuiReactLibShimmeredDetailsList = require("@fluentui/react/lib/ShimmeredDetailsList");
  var _webapi = require('./webapi');
  var _jsxFileName = "/Users/softphone/WORKSPACES/GITHUB.me/MSFT/XrmToolboxWeb/packages/RetrieveAllEntities/src/app.tsx";
  _fluentuiFontIconsMdl.initializeIcons();
  const exampleChildClass = _fluentuiReactLibStyling.mergeStyles({
    display: 'block',
    marginBottom: '10px'
  });
  const textFieldStyles = {
    root: {
      maxWidth: '300px'
    }
  };
  /**
  *
  * @param items
  * @returns
  */
  function EntityMetadataList(params) {
    const selection = new _fluentuiReactLibDetailsList.Selection({
      onSelectionChanged: () => {
        // this.setState({ selectionDetails: this._getSelectionDetails() }
        console.log('onSelectionChanged!');
      }
    });
    const copyToClipboard = text => {
      if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => console.log(`text '${text}' copied to clipboard`)).catch(err => console.error('error coping to clipboard', err));
      }
    };
    const renderer = (item, index, col) => {
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibStack.Stack, {
          horizontal: true,
          verticalAlign: "center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 73,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("div", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 74,
            columnNumber: 17
          }
        }, item[col.fieldName]), /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibIcon.Icon, {
          iconName: "Copy",
          styles: {
            root: {
              paddingLeft: 5
            }
          },
          onClick: () => copyToClipboard(item[col.fieldName]),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75,
            columnNumber: 17
          }
        }))
      );
    };
    const columns = [{
      key: 'column1',
      name: 'Name',
      fieldName: 'LogicalName',
      minWidth: 100,
      maxWidth: 200,
      isResizable: true,
      onRender: renderer
    }, {
      key: 'column2',
      name: 'Plural Name',
      fieldName: 'LogicalCollectionName',
      minWidth: 100,
      maxWidth: 200,
      isResizable: true,
      onRender: renderer
    }, {
      key: 'column3',
      name: 'Primary Name',
      fieldName: 'PrimaryIdAttribute',
      minWidth: 100,
      maxWidth: 200,
      isResizable: true,
      onRender: renderer
    }];
    const onItemInvoked = item => {
      alert(`Item invoked: ${item.name}`);
    };
    const items = params.metadata ?? [];
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 118,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibAnnounced.Announced, {
        message: `Number of items: ${items.length}.`,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 125,
          columnNumber: 11
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibMarqueeSelection.MarqueeSelection, {
        selection: selection,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 126,
          columnNumber: 11
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibShimmeredDetailsList.ShimmeredDetailsList, {
        items: items,
        columns: columns,
        enableShimmer: params.loading,
        setKey: "set",
        layoutMode: _fluentuiReactLibDetailsList.DetailsListLayoutMode.justified,
        selection: selection,
        selectionPreservedOnEmptyClick: true,
        ariaLabelForSelectionColumn: "Toggle selection",
        ariaLabelForSelectAllCheckbox: "Toggle selection for all items",
        checkButtonAriaLabel: "select row",
        onItemInvoked: onItemInvoked,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 127,
          columnNumber: 13
        }
      })))
    );
  }
  /**
  *
  * @param enumObject
  * @returns
  */
  function enumToGroups(enumObject) {
    const result = Array();
    for (const [propertyKey, propertyValue] of Object.entries(enumObject)) {
      if (!Number.isNaN(Number(propertyKey))) continue;
      result.push({
        text: propertyKey + '\u00A0\u00A0',
        key: String(propertyValue)
      });
    }
    return result;
  }
  /**
  *
  * @returns
  */
  function Main() {
    const [selectedKey, setSelectedKey] = _react.useState(String(_xrmtoolboxwebCore.EntityFiltersEnum.Entity));
    const [result, setResult] = _react.useState({
      EntityMetadata: []
    });
    const [items, setItems] = _react.useState([]);
    const [loading, setLoading] = _react.useState(false);
    const onChange = _react.useCallback((ev, option) => {
      if (option) setSelectedKey(option.key);
    }, []);
    const options = enumToGroups(_xrmtoolboxwebCore.EntityFiltersEnum);
    const execute = () => {
      const filter = selectedKey;
      setLoading(true);
      _webapi.RetrieveAllEntities.Invoke({
        EntityFilters: filter,
        RetrieveAsIfPublished: false
      }).then(metadata => {
        setResult(metadata);
        setItems(metadata.EntityMetadata);
        setLoading(false);
      }).catch(error => {
        console.error(error);
        setLoading(false);
      });
    };
    const onFilter = (ev, text) => {
      console.log('onFilter', text);
      if (text && result.EntityMetadata) {
        setItems(result.EntityMetadata.filter(md => text.length == 0 || md.LogicalName.toLowerCase().indexOf(text) > -1));
      }
    };
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibStack.Stack, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 202,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibStack.Stack, {
        horizontal: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 203,
          columnNumber: 13
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibChoiceGroup.ChoiceGroup, {
        styles: {
          flexContainer: {
            display: "flex"
          }
        },
        defaultSelectedKey: _xrmtoolboxwebCore.EntityFiltersEnum.Entity,
        options: options,
        onChange: onChange,
        label: "Set Metadata Filter",
        required: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 204,
          columnNumber: 17
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibButton.PrimaryButton, {
        text: "Run",
        onClick: execute,
        allowDisabledFocus: true,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 212,
          columnNumber: 17
        }
      })), /*#__PURE__*/_reactDefault.default.createElement(_fluentuiReactLibTextField.TextField, {
        className: exampleChildClass,
        label: "Filter by name:",
        onChange: onFilter,
        styles: textFieldStyles,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 214,
          columnNumber: 13
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(EntityMetadataList, {
        metadata: items,
        loading: loading,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 220,
          columnNumber: 13
        }
      }))
    );
  }
  function App() {
    const {instance, account, renderAfterLogin} = _xrmtoolboxwebCore.useRenderAfterLogin();
    _react.useEffect(() => {
      if (account) {
        instance.acquireTokenSilent({
          scopes: _xrmtoolboxwebCore.scopes,
          account: account
        }).then(_xrmtoolboxwebCore.prepareWebApiRequest).// .then( () => RetrieveAllEntities( { EntityFilters:{} }) )
        // .then( setResult )
        catch(error => console.error(error));
      }
    }, [account?.localAccountId, instance]);
    return renderAfterLogin(() => /*#__PURE__*/_reactDefault.default.createElement("div", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 249,
        columnNumber: 38
      }
    }, /*#__PURE__*/_reactDefault.default.createElement(Main, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 249,
        columnNumber: 43
      }
    })));
  }
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}

},{"react":"4g1R3","@fluentui/react/lib/DetailsList":"4rsEr","@fluentui/react/lib/MarqueeSelection":"5PnsR","@fluentui/react/lib/Styling":"5q33X","@fluentui/react/lib/TextField":"5Mc0M","@fluentui/react/lib/ChoiceGroup":"2lYcp","@fluentui/react/lib/Announced":"SqCr3","@fluentui/react/lib/Button":"3XFof","@fluentui/react/lib/Stack":"4PdoP","@fluentui/font-icons-mdl2":"4C1Qk","xrmtoolboxweb-core":"3kFhw","@fluentui/react/lib/Icon":"7upjA","@fluentui/react/lib/ShimmeredDetailsList":"72iBT","./webapi":"5XsXs","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP","../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"Q8h6l"}],"4rsEr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsDetailsListIndex = require('./components/DetailsList/index');
_parcelHelpers.exportAll(_componentsDetailsListIndex, exports);

},{"./components/DetailsList/index":"3eXVs","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3eXVs":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Selection = require('../../Selection');
_parcelHelpers.exportAll(_Selection, exports);
var _GroupedListGroupedListTypes = require('../GroupedList/GroupedList.types');
_parcelHelpers.exportAll(_GroupedListGroupedListTypes, exports);
var _DetailsHeader = require('./DetailsHeader');
_parcelHelpers.exportAll(_DetailsHeader, exports);
var _DetailsHeaderBase = require('./DetailsHeader.base');
_parcelHelpers.exportAll(_DetailsHeaderBase, exports);
var _DetailsHeaderTypes = require('./DetailsHeader.types');
_parcelHelpers.exportAll(_DetailsHeaderTypes, exports);
var _DetailsList = require('./DetailsList');
_parcelHelpers.exportAll(_DetailsList, exports);
var _DetailsListBase = require('./DetailsList.base');
_parcelHelpers.exportAll(_DetailsListBase, exports);
var _DetailsListTypes = require('./DetailsList.types');
_parcelHelpers.exportAll(_DetailsListTypes, exports);
var _DetailsRow = require('./DetailsRow');
_parcelHelpers.exportAll(_DetailsRow, exports);
var _DetailsRowBase = require('./DetailsRow.base');
_parcelHelpers.exportAll(_DetailsRowBase, exports);
var _DetailsRowTypes = require('./DetailsRow.types');
_parcelHelpers.exportAll(_DetailsRowTypes, exports);
var _DetailsRowStyles = require('./DetailsRow.styles');
_parcelHelpers.exportAll(_DetailsRowStyles, exports);
var _DetailsRowCheck = require('./DetailsRowCheck');
_parcelHelpers.exportAll(_DetailsRowCheck, exports);
var _DetailsRowCheckTypes = require('./DetailsRowCheck.types');
_parcelHelpers.exportAll(_DetailsRowCheckTypes, exports);
var _DetailsRowFields = require('./DetailsRowFields');
_parcelHelpers.exportAll(_DetailsRowFields, exports);
var _DetailsRowFieldsTypes = require('./DetailsRowFields.types');
_parcelHelpers.exportAll(_DetailsRowFieldsTypes, exports);
var _DetailsFooterTypes = require('./DetailsFooter.types');
_parcelHelpers.exportAll(_DetailsFooterTypes, exports);
var _DetailsColumnBase = require('./DetailsColumn.base');
_parcelHelpers.exportAll(_DetailsColumnBase, exports);
var _DetailsColumnTypes = require('./DetailsColumn.types');
_parcelHelpers.exportAll(_DetailsColumnTypes, exports);

},{"../../Selection":"3dSNL","../GroupedList/GroupedList.types":"c6drL","./DetailsHeader":"2pO8Z","./DetailsHeader.base":"5tWIQ","./DetailsHeader.types":"1RZeD","./DetailsList":"1tXCx","./DetailsList.base":"5m9vJ","./DetailsList.types":"2BjaS","./DetailsRow":"n9tH6","./DetailsRow.base":"740Hf","./DetailsRow.types":"3tBuv","./DetailsRow.styles":"1FMwI","./DetailsRowCheck":"6Nbsm","./DetailsRowCheck.types":"3eyeB","./DetailsRowFields":"1UcUQ","./DetailsRowFields.types":"4fPB0","./DetailsFooter.types":"6Twvz","./DetailsColumn.base":"1zBYv","./DetailsColumn.types":"4Ujpx","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3dSNL":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilitiesSelectionIndex = require('./utilities/selection/index');
_parcelHelpers.exportAll(_utilitiesSelectionIndex, exports);

},{"./utilities/selection/index":"1JDzh","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1JDzh":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _interfaces = require('./interfaces');
_parcelHelpers.exportAll(_interfaces, exports);
var _Selection = require('./Selection');
_parcelHelpers.exportAll(_Selection, exports);
var _SelectionZone = require('./SelectionZone');
_parcelHelpers.exportAll(_SelectionZone, exports);

},{"./interfaces":"7sAlH","./Selection":"5QLgs","./SelectionZone":"3DDIy","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7sAlH":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "SELECTION_CHANGE", function () {
  return _fluentuiUtilities.SELECTION_CHANGE;
});
_parcelHelpers.export(exports, "SelectionDirection", function () {
  return _fluentuiUtilities.SelectionDirection;
});
_parcelHelpers.export(exports, "SelectionMode", function () {
  return _fluentuiUtilities.SelectionMode;
});
var _fluentuiUtilities = require('@fluentui/utilities');

},{"@fluentui/utilities":"2AuOe","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5QLgs":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Selection", function () {
  return _fluentuiUtilities.Selection;
});
var _fluentuiUtilities = require('@fluentui/utilities');

},{"@fluentui/utilities":"2AuOe","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3DDIy":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "SelectionZone", function () {
  return SelectionZone;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _interfaces = require('./interfaces');
// Selection definitions:
// 
// Anchor index: the point from which a range selection starts.
// Focus index: the point from which layout movement originates from.
// 
// These two can differ. Tests:
// 
// If you start at index 5
// Shift click to index 10
// The focus is 10, the anchor is 5.
// If you shift click at index 0
// The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.
// If you click index 8
// The anchor and focus are set to 8.
var SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';
var SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';
var SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';
var SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';
var SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';
var SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';
var SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';
/**
* {@docCategory Selection}
*/
var SelectionZone = /** @class*/
(function (_super) {
  _tslib.__extends(SelectionZone, _super);
  function SelectionZone(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    /**
    * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone
    * react to the event. Note that focus events in IE \<= 11 will occur asynchronously after .focus() has
    * been called on an element, so we need a flag to store the idea that we will bypass the "next"
    * focus event that occurs. This method does that.
    */
    _this.ignoreNextFocus = function () {
      _this._handleNextFocus(false);
    };
    _this._onSelectionChange = function () {
      var selection = _this.props.selection;
      var isModal = selection.isModal && selection.isModal();
      _this.setState({
        isModal: isModal
      });
    };
    _this._onMouseDownCapture = function (ev) {
      var target = ev.target;
      if (document.activeElement !== target && !_Utilities.elementContains(document.activeElement, target)) {
        _this.ignoreNextFocus();
        return;
      }
      if (!_Utilities.elementContains(target, _this._root.current)) {
        return;
      }
      while (target !== _this._root.current) {
        if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
          _this.ignoreNextFocus();
          break;
        }
        target = _Utilities.getParent(target);
      }
    };
    /**
    * When we focus an item, for single/multi select scenarios, we should try to select it immediately
    * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them
    * specially.
    */
    _this._onFocus = function (ev) {
      var target = ev.target;
      var selection = _this.props.selection;
      var isToggleModifierPressed = _this._isCtrlPressed || _this._isMetaPressed;
      var selectionMode = _this._getSelectionMode();
      if (_this._shouldHandleFocus && selectionMode !== _interfaces.SelectionMode.none) {
        var isToggle = _this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);
        var itemRoot = _this._findItemRoot(target);
        if (!isToggle && itemRoot) {
          var index = _this._getItemIndex(itemRoot);
          if (isToggleModifierPressed) {
            // set anchor only.
            selection.setIndexSelected(index, selection.isIndexSelected(index), true);
            if (_this.props.enterModalOnTouch && _this._isTouch && selection.setModal) {
              selection.setModal(true);
              _this._setIsTouch(false);
            }
          } else {
            if (_this.props.isSelectedOnFocus) {
              _this._onItemSurfaceClick(ev, index);
            }
          }
        }
      }
      _this._handleNextFocus(false);
    };
    _this._onMouseDown = function (ev) {
      _this._updateModifiers(ev);
      var target = ev.target;
      var itemRoot = _this._findItemRoot(target);
      // No-op if selection is disabled
      if (_this._isSelectionDisabled(target)) {
        return;
      }
      while (target !== _this._root.current) {
        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {
          break;
        } else if (itemRoot) {
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
            break;
          } else if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
            break;
          } else if ((target === itemRoot || _this._shouldAutoSelect(target)) && !_this._isShiftPressed && !_this._isCtrlPressed && !_this._isMetaPressed) {
            _this._onInvokeMouseDown(ev, _this._getItemIndex(itemRoot));
            break;
          } else if (_this.props.disableAutoSelectOnInputElements && (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')) {
            return;
          }
        }
        target = _Utilities.getParent(target);
      }
    };
    _this._onTouchStartCapture = function (ev) {
      _this._setIsTouch(true);
    };
    _this._onClick = function (ev) {
      var _a = _this.props.enableTouchInvocationTarget, enableTouchInvocationTarget = _a === void 0 ? false : _a;
      _this._updateModifiers(ev);
      var target = ev.target;
      var itemRoot = _this._findItemRoot(target);
      var isSelectionDisabled = _this._isSelectionDisabled(target);
      while (target !== _this._root.current) {
        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {
          if (!isSelectionDisabled) {
            _this._onToggleAllClick(ev);
          }
          break;
        } else if (itemRoot) {
          var index = _this._getItemIndex(itemRoot);
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
            if (!isSelectionDisabled) {
              if (_this._isShiftPressed) {
                _this._onItemSurfaceClick(ev, index);
              } else {
                _this._onToggleClick(ev, index);
              }
            }
            break;
          } else if (_this._isTouch && enableTouchInvocationTarget && _this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
            // Items should be invokable even if selection is disabled.
            _this._onInvokeClick(ev, index);
            break;
          } else if (target === itemRoot) {
            if (!isSelectionDisabled) {
              _this._onItemSurfaceClick(ev, index);
            }
            break;
          } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {
            return;
          }
        }
        target = _Utilities.getParent(target);
      }
    };
    _this._onContextMenu = function (ev) {
      var target = ev.target;
      var _a = _this.props, onItemContextMenu = _a.onItemContextMenu, selection = _a.selection;
      if (onItemContextMenu) {
        var itemRoot = _this._findItemRoot(target);
        if (itemRoot) {
          var index = _this._getItemIndex(itemRoot);
          _this._onInvokeMouseDown(ev, index);
          var skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);
          // In order to keep back compat, if the value here is undefined, then we should still
          // call preventDefault(). Only in the case where true is explicitly returned should
          // the call be skipped.
          if (!skipPreventDefault) {
            ev.preventDefault();
          }
        }
      }
    };
    /**
    * In multi selection, if you double click within an item's root (but not within the invoke element or
    * input elements), we should execute the invoke handler.
    */
    _this._onDoubleClick = function (ev) {
      var target = ev.target;
      var onItemInvoked = _this.props.onItemInvoked;
      var itemRoot = _this._findItemRoot(target);
      if (itemRoot && onItemInvoked && !_this._isInputElement(target)) {
        var index = _this._getItemIndex(itemRoot);
        while (target !== _this._root.current) {
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
            break;
          } else if (target === itemRoot) {
            _this._onInvokeClick(ev, index);
            break;
          }
          target = _Utilities.getParent(target);
        }
        target = _Utilities.getParent(target);
      }
    };
    _this._onKeyDownCapture = function (ev) {
      _this._updateModifiers(ev);
      _this._handleNextFocus(true);
    };
    _this._onKeyDown = function (ev) {
      _this._updateModifiers(ev);
      var target = ev.target;
      var isSelectionDisabled = _this._isSelectionDisabled(target);
      var selection = _this.props.selection;
      // eslint-disable-next-line deprecation/deprecation
      var isSelectAllKey = ev.which === _Utilities.KeyCodes.a && (_this._isCtrlPressed || _this._isMetaPressed);
      // eslint-disable-next-line deprecation/deprecation
      var isClearSelectionKey = ev.which === _Utilities.KeyCodes.escape;
      // Ignore key downs from input elements.
      if (_this._isInputElement(target)) {
        // A key was pressed while an item in this zone was focused.
        return;
      }
      var selectionMode = _this._getSelectionMode();
      // If ctrl-a is pressed, select all (if all are not already selected.)
      if (isSelectAllKey && selectionMode === _interfaces.SelectionMode.multiple && !selection.isAllSelected()) {
        if (!isSelectionDisabled) {
          selection.setAllSelected(true);
        }
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }
      // If escape is pressed, clear selection (if any are selected.)
      if (isClearSelectionKey && selection.getSelectedCount() > 0) {
        if (!isSelectionDisabled) {
          selection.setAllSelected(false);
        }
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }
      var itemRoot = _this._findItemRoot(target);
      // If a key was pressed within an item, we should treat "enters" as invokes and "space" as toggle
      if (itemRoot) {
        var index = _this._getItemIndex(itemRoot);
        while (target !== _this._root.current) {
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
            // For toggle elements, assuming they are rendered as buttons, they will generate a click event,
            // so we can no-op for any keydowns in this case.
            break;
          } else if (_this._shouldAutoSelect(target)) {
            if (!isSelectionDisabled) {
              // If the event went to an element which should trigger auto-select, select it and then let
              // the default behavior kick in.
              _this._onInvokeMouseDown(ev, index);
            }
            break;
          } else if (// eslint-disable-next-line deprecation/deprecation
          (ev.which === _Utilities.KeyCodes.enter || ev.which === _Utilities.KeyCodes.space) && (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')) {
            return false;
          } else if (target === itemRoot) {
            // eslint-disable-next-line deprecation/deprecation
            if (ev.which === _Utilities.KeyCodes.enter) {
              // Items should be invokable even if selection is disabled.
              _this._onInvokeClick(ev, index);
              ev.preventDefault();
              return;
            } else if (ev.which === _Utilities.KeyCodes.space) {
              if (!isSelectionDisabled) {
                _this._onToggleClick(ev, index);
              }
              ev.preventDefault();
              return;
            }
            break;
          }
          target = _Utilities.getParent(target);
        }
      }
    };
    _this._events = new _Utilities.EventGroup(_this);
    _this._async = new _Utilities.Async(_this);
    _Utilities.initializeComponentRef(_this);
    var selection = _this.props.selection;
    // Reflect the initial modal state of selection into the state.
    var isModal = selection.isModal && selection.isModal();
    _this.state = {
      isModal: isModal
    };
    return _this;
  }
  SelectionZone.getDerivedStateFromProps = function (nextProps, prevState) {
    var isModal = nextProps.selection.isModal && nextProps.selection.isModal();
    return _tslib.__assign(_tslib.__assign({}, prevState), {
      isModal: isModal
    });
  };
  SelectionZone.prototype.componentDidMount = function () {
    var win = _Utilities.getWindow(this._root.current);
    // Track the latest modifier keys globally.
    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);
    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);
    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);
    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);
    // Subscribe to the selection to keep modal state updated.
    this._events.on(this.props.selection, 'change', this._onSelectionChange);
  };
  SelectionZone.prototype.render = function () {
    var isModal = this.state.isModal;
    return _react.createElement("div", {
      className: _Utilities.css('ms-SelectionZone', this.props.className, {
        'ms-SelectionZone--modal': !!isModal
      }),
      ref: this._root,
      onKeyDown: this._onKeyDown,
      onMouseDown: this._onMouseDown,
      onKeyDownCapture: this._onKeyDownCapture,
      onClick: this._onClick,
      role: "presentation",
      onDoubleClick: this._onDoubleClick,
      onContextMenu: this._onContextMenu,
      onMouseDownCapture: this._onMouseDownCapture,
      onFocusCapture: this._onFocus,
      "data-selection-is-modal": isModal ? true : undefined
    }, this.props.children, _react.createElement(_Utilities.FocusRects, null));
  };
  SelectionZone.prototype.componentDidUpdate = function (previousProps) {
    var selection = this.props.selection;
    if (selection !== previousProps.selection) {
      // Whenever selection changes, update the subscripton to keep modal state updated.
      this._events.off(previousProps.selection);
      this._events.on(selection, 'change', this._onSelectionChange);
    }
  };
  SelectionZone.prototype.componentWillUnmount = function () {
    this._events.dispose();
    this._async.dispose();
  };
  SelectionZone.prototype._isSelectionDisabled = function (target) {
    if (this._getSelectionMode() === _interfaces.SelectionMode.none) {
      return true;
    }
    while (target !== this._root.current) {
      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {
        return true;
      }
      target = _Utilities.getParent(target);
    }
    return false;
  };
  SelectionZone.prototype._onToggleAllClick = function (ev) {
    var selection = this.props.selection;
    var selectionMode = this._getSelectionMode();
    if (selectionMode === _interfaces.SelectionMode.multiple) {
      selection.toggleAllSelected();
      ev.stopPropagation();
      ev.preventDefault();
    }
  };
  SelectionZone.prototype._onToggleClick = function (ev, index) {
    var selection = this.props.selection;
    var selectionMode = this._getSelectionMode();
    selection.setChangeEvents(false);
    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {
      selection.setModal(true);
      this._setIsTouch(false);
    }
    if (selectionMode === _interfaces.SelectionMode.multiple) {
      selection.toggleIndexSelected(index);
    } else if (selectionMode === _interfaces.SelectionMode.single) {
      var isSelected = selection.isIndexSelected(index);
      var isModal = selection.isModal && selection.isModal();
      selection.setAllSelected(false);
      selection.setIndexSelected(index, !isSelected, true);
      if (isModal && selection.setModal) {
        // Since the above call to setAllSelected(false) clears modal state,
        // restore it. This occurs because the SelectionMode of the Selection
        // may differ from the SelectionZone.
        selection.setModal(true);
      }
    } else {
      selection.setChangeEvents(true);
      return;
    }
    selection.setChangeEvents(true);
    ev.stopPropagation();
  };
  SelectionZone.prototype._onInvokeClick = function (ev, index) {
    var _a = this.props, selection = _a.selection, onItemInvoked = _a.onItemInvoked;
    if (onItemInvoked) {
      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);
      ev.preventDefault();
      ev.stopPropagation();
    }
  };
  SelectionZone.prototype._onItemSurfaceClick = function (ev, index) {
    var selection = this.props.selection;
    var isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;
    var selectionMode = this._getSelectionMode();
    if (selectionMode === _interfaces.SelectionMode.multiple) {
      if (this._isShiftPressed && !this._isTabPressed) {
        selection.selectToIndex(index, !isToggleModifierPressed);
      } else if (isToggleModifierPressed) {
        selection.toggleIndexSelected(index);
      } else {
        this._clearAndSelectIndex(index);
      }
    } else if (selectionMode === _interfaces.SelectionMode.single) {
      this._clearAndSelectIndex(index);
    }
  };
  SelectionZone.prototype._onInvokeMouseDown = function (ev, index) {
    var selection = this.props.selection;
    // Only do work if item is not selected.
    if (selection.isIndexSelected(index)) {
      return;
    }
    this._clearAndSelectIndex(index);
  };
  /**
  * To avoid high startup cost of traversing the DOM on component mount,
  * defer finding the scrollable parent until a click interaction.
  *
  * The styles will probably already calculated since we're running in a click handler,
  * so this is less likely to cause layout thrashing then doing it in mount.
  */
  SelectionZone.prototype._findScrollParentAndTryClearOnEmptyClick = function (ev) {
    var scrollParent = _Utilities.findScrollableParent(this._root.current);
    // unbind this handler and replace binding with a binding on the actual scrollable parent
    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);
    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);
    // If we clicked inside the scrollable parent, call through to the handler on this click.
    if (scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target) || scrollParent === ev.target) {
      this._tryClearOnEmptyClick(ev);
    }
  };
  SelectionZone.prototype._tryClearOnEmptyClick = function (ev) {
    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target)) {
      this.props.selection.setAllSelected(false);
    }
  };
  SelectionZone.prototype._clearAndSelectIndex = function (index) {
    var selection = this.props.selection;
    var isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);
    if (!isAlreadySingleSelected) {
      var isModal = selection.isModal && selection.isModal();
      selection.setChangeEvents(false);
      selection.setAllSelected(false);
      selection.setIndexSelected(index, true, true);
      if (isModal || this.props.enterModalOnTouch && this._isTouch) {
        if (selection.setModal) {
          selection.setModal(true);
        }
        if (this._isTouch) {
          this._setIsTouch(false);
        }
      }
      selection.setChangeEvents(true);
    }
  };
  /**
  * We need to track the modifier key states so that when focus events occur, which do not contain
  * modifier states in the Event object, we know how to behave.
  */
  SelectionZone.prototype._updateModifiers = function (ev) {
    this._isShiftPressed = ev.shiftKey;
    this._isCtrlPressed = ev.ctrlKey;
    this._isMetaPressed = ev.metaKey;
    var keyCode = ev.keyCode;
    this._isTabPressed = keyCode ? keyCode === _Utilities.KeyCodes.tab : false;
  };
  SelectionZone.prototype._findItemRoot = function (target) {
    var selection = this.props.selection;
    while (target !== this._root.current) {
      var indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);
      var index = Number(indexValue);
      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {
        break;
      }
      target = _Utilities.getParent(target);
    }
    if (target === this._root.current) {
      return undefined;
    }
    return target;
  };
  SelectionZone.prototype._getItemIndex = function (itemRoot) {
    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));
  };
  SelectionZone.prototype._shouldAutoSelect = function (element) {
    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);
  };
  SelectionZone.prototype._hasAttribute = function (element, attributeName) {
    var isToggle = false;
    while (!isToggle && element !== this._root.current) {
      isToggle = element.getAttribute(attributeName) === 'true';
      element = _Utilities.getParent(element);
    }
    return isToggle;
  };
  SelectionZone.prototype._isInputElement = function (element) {
    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';
  };
  SelectionZone.prototype._isNonHandledClick = function (element) {
    var doc = _Utilities.getDocument();
    if (doc && element) {
      while (element && element !== doc.documentElement) {
        if (_Utilities.isElementTabbable(element)) {
          return false;
        }
        element = _Utilities.getParent(element);
      }
    }
    return true;
  };
  SelectionZone.prototype._handleNextFocus = function (handleFocus) {
    var _this = this;
    if (this._shouldHandleFocusTimeoutId) {
      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);
      this._shouldHandleFocusTimeoutId = undefined;
    }
    this._shouldHandleFocus = handleFocus;
    if (handleFocus) {
      this._async.setTimeout(function () {
        _this._shouldHandleFocus = false;
      }, 100);
    }
  };
  SelectionZone.prototype._setIsTouch = function (isTouch) {
    var _this = this;
    if (this._isTouchTimeoutId) {
      this._async.clearTimeout(this._isTouchTimeoutId);
      this._isTouchTimeoutId = undefined;
    }
    this._isTouch = true;
    if (isTouch) {
      this._async.setTimeout(function () {
        _this._isTouch = false;
      }, 300);
    }
  };
  SelectionZone.prototype._getSelectionMode = function () {
    var selection = this.props.selection;
    var _a = this.props.selectionMode, selectionMode = _a === void 0 ? selection ? selection.mode : _interfaces.SelectionMode.none : _a;
    return selectionMode;
  };
  SelectionZone.defaultProps = {
    isSelectedOnFocus: true,
    selectionMode: _interfaces.SelectionMode.multiple
  };
  return SelectionZone;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./interfaces":"7sAlH","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"c6drL":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CollapseAllVisibility", function () {
  return CollapseAllVisibility;
});
var CollapseAllVisibility;
(function (CollapseAllVisibility) {
  CollapseAllVisibility[CollapseAllVisibility["hidden"] = 0] = "hidden";
  CollapseAllVisibility[CollapseAllVisibility["visible"] = 1] = "visible";
})(CollapseAllVisibility || (CollapseAllVisibility = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2pO8Z":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsHeader", function () {
  return DetailsHeader;
});
var _Utilities = require('../../Utilities');
var _DetailsHeaderBase = require('./DetailsHeader.base');
var _DetailsHeaderStyles = require('./DetailsHeader.styles');
var DetailsHeader = _Utilities.styled(_DetailsHeaderBase.DetailsHeaderBase, _DetailsHeaderStyles.getStyles, undefined, {
  scope: 'DetailsHeader'
});

},{"../../Utilities":"1439N","./DetailsHeader.base":"5tWIQ","./DetailsHeader.styles":"1psIN","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5tWIQ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsHeaderBase", function () {
  return DetailsHeaderBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _DetailsListTypes = require('./DetailsList.types');
var _FocusZone = require('../../FocusZone');
var _Icon = require('../../Icon');
var _Layer = require('../../Layer');
var _GroupedListGroupSpacer = require('../GroupedList/GroupSpacer');
var _GroupedList = require('../../GroupedList');
var _DetailsRowCheck = require('./DetailsRowCheck');
var _Selection = require('../../Selection');
var _DragDrop = require('../../DragDrop');
var _componentsDetailsListDetailsColumn = require('../../components/DetailsList/DetailsColumn');
var _DetailsHeaderTypes = require('./DetailsHeader.types');
var getClassNames = _Utilities.classNamesFunction();
var MOUSEDOWN_PRIMARY_BUTTON = 0;
// for mouse down event we are using ev.button property, 0 means left button
var MOUSEMOVE_PRIMARY_BUTTON = 1;
// for mouse move event we are using ev.buttons property, 1 means left button
var NO_COLUMNS = [];
var DetailsHeaderBase = /** @class*/
(function (_super) {
  _tslib.__extends(DetailsHeaderBase, _super);
  function DetailsHeaderBase(props) {
    var _this = _super.call(this, props) || this;
    _this._rootElement = _react.createRef();
    _this._rootComponent = _react.createRef();
    _this._draggedColumnIndex = -1;
    _this._dropHintDetails = {};
    _this._updateDroppingState = function (newValue, event) {
      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {
        _this._resetDropHints();
      }
    };
    _this._onDragOver = function (item, event) {
      if (_this._draggedColumnIndex >= 0) {
        event.stopPropagation();
        _this._computeDropHintToBeShown(event.clientX);
      }
    };
    _this._onDrop = function (item, event) {
      // Safe to assume this is defined since we're handling a drop event
      var columnReorderProps = _this._getColumnReorderProps();
      // Target index will not get changed if draggeditem is after target item.
      if (_this._draggedColumnIndex >= 0 && event) {
        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;
        var isValidDrop = _this._isValidCurrentDropHintIndex();
        event.stopPropagation();
        if (isValidDrop) {
          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;
          _this._onDropIndexInfo.targetIndex = targetIndex;
          if (columnReorderProps.onColumnDrop) {
            var dragDropDetails = {
              draggedIndex: _this._draggedColumnIndex,
              targetIndex: targetIndex
            };
            columnReorderProps.onColumnDrop(dragDropDetails);
          } else if (columnReorderProps.handleColumnReorder) {
            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);
          }
        }
      }
      _this._resetDropHints();
      _this._dropHintDetails = {};
      _this._draggedColumnIndex = -1;
    };
    _this._updateDragInfo = function (props, event) {
      // Safe to assume this is defined since we're handling a drag event
      var columnReorderProps = _this._getColumnReorderProps();
      var itemIndex = props.itemIndex;
      if (itemIndex >= 0) {
        // Column index is set based on the checkbox
        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;
        _this._getDropHintPositions();
        if (columnReorderProps.onColumnDragStart) {
          columnReorderProps.onColumnDragStart(true);
        }
      } else if (event && _this._draggedColumnIndex >= 0) {
        _this._resetDropHints();
        _this._draggedColumnIndex = -1;
        _this._dropHintDetails = {};
        if (columnReorderProps.onColumnDragEnd) {
          var columnDragEndLocation = _this._isEventOnHeader(event);
          columnReorderProps.onColumnDragEnd({
            dropLocation: columnDragEndLocation
          }, event);
        }
      }
    };
    _this._getDropHintPositions = function () {
      var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
      // Safe to assume this is defined since we're handling a drag/drop event
      var columnReorderProps = _this._getColumnReorderProps();
      var prevX = 0;
      var prevMid = 0;
      var prevRef;
      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;
      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;
      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {
        if (_this._rootElement.current) {
          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];
          if (dropHintElement) {
            if (i === frozenColumnCountFromStart) {
              prevX = dropHintElement.offsetLeft;
              prevMid = dropHintElement.offsetLeft;
              prevRef = dropHintElement;
            } else {
              var newMid = (dropHintElement.offsetLeft + prevX) / 2;
              _this._dropHintDetails[i - 1] = {
                originX: prevX,
                startX: prevMid,
                endX: newMid,
                dropHintElementRef: prevRef
              };
              prevMid = newMid;
              prevRef = dropHintElement;
              prevX = dropHintElement.offsetLeft;
              if (i === columns.length - frozenColumnCountFromEnd) {
                _this._dropHintDetails[i] = {
                  originX: prevX,
                  startX: prevMid,
                  endX: dropHintElement.offsetLeft,
                  dropHintElementRef: prevRef
                };
              }
            }
          }
        }
      }
    };
    /**
    * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible
    */
    _this._computeDropHintToBeShown = function (clientX) {
      var isRtl = _Utilities.getRTL(_this.props.theme);
      if (_this._rootElement.current) {
        var clientRect = _this._rootElement.current.getBoundingClientRect();
        var headerOriginX = clientRect.left;
        var eventXRelativePosition = clientX - headerOriginX;
        var currentDropHintIndex = _this._currentDropHintIndex;
        if (_this._isValidCurrentDropHintIndex()) {
          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {
            return;
          }
        }
        var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
        // Safe to assume this is defined since we're handling a drag/drop event
        var columnReorderProps = _this._getColumnReorderProps();
        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;
        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;
        var currentIndex = frozenColumnCountFromStart;
        var lastValidColumn = columns.length - frozenColumnCountFromEnd;
        var indexToUpdate = -1;
        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {
          indexToUpdate = currentIndex;
        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {
          indexToUpdate = lastValidColumn;
        } else if (_this._isValidCurrentDropHintIndex()) {
          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {
            indexToUpdate = currentDropHintIndex + 1;
          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {
            indexToUpdate = currentDropHintIndex - 1;
          }
        }
        if (indexToUpdate === -1) {
          var startIndex = frozenColumnCountFromStart;
          var endIndex = lastValidColumn;
          while (startIndex < endIndex) {
            var middleIndex = Math.ceil((endIndex + startIndex) / 2);
            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {
              indexToUpdate = middleIndex;
              break;
            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {
              endIndex = middleIndex;
            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {
              startIndex = middleIndex;
            }
          }
        }
        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {
          if (_this._isValidCurrentDropHintIndex()) {
            _this._resetDropHints();
          }
        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {
          _this._resetDropHints();
          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');
          _this._currentDropHintIndex = indexToUpdate;
        }
      }
    };
    _this._renderColumnSizer = function (_a) {
      var _b;
      var columnIndex = _a.columnIndex;
      var _c = _this.props.columns, columns = _c === void 0 ? NO_COLUMNS : _c;
      var column = columns[columnIndex];
      var columnResizeDetails = _this.state.columnResizeDetails;
      var classNames = _this._classNames;
      return column.isResizable ? _react.createElement("div", {
        key: column.key + "_sizer",
        "aria-hidden": true,
        role: "button",
        "data-is-focusable": false,
        onClick: _stopPropagation,
        "data-sizer-index": columnIndex,
        onBlur: _this._onSizerBlur,
        className: _Utilities.css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),
        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)
      }) : null;
    };
    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {
      return _react.createElement("span", {
        className: tooltipHostProps.hostClassName
      }, tooltipHostProps.children);
    };
    /**
    * Called when the select all toggle is clicked.
    */
    _this._onSelectAllClicked = function () {
      var selection = _this.props.selection;
      if (selection) {
        selection.toggleAllSelected();
      }
    };
    _this._onRootMouseDown = function (ev) {
      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');
      var columnIndex = Number(columnIndexAttr);
      var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {
        // Ignore anything except the primary button.
        return;
      }
      _this.setState({
        columnResizeDetails: {
          columnIndex: columnIndex,
          columnMinWidth: columns[columnIndex].calculatedWidth,
          originX: ev.clientX
        }
      });
      ev.preventDefault();
      ev.stopPropagation();
    };
    _this._onRootMouseMove = function (ev) {
      var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;
      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {
        _this.setState({
          isSizing: true
        });
      }
    };
    _this._onRootKeyDown = function (ev) {
      var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;
      var _b = _this.props, _c = _b.columns, columns = _c === void 0 ? NO_COLUMNS : _c, onColumnResized = _b.onColumnResized;
      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');
      if (!columnIndexAttr || isSizing) {
        return;
      }
      var columnIndex = Number(columnIndexAttr);
      if (!columnResizeDetails) {
        // eslint-disable-next-line deprecation/deprecation
        if (ev.which === _Utilities.KeyCodes.enter) {
          _this.setState({
            columnResizeDetails: {
              columnIndex: columnIndex,
              columnMinWidth: columns[columnIndex].calculatedWidth
            }
          });
          ev.preventDefault();
          ev.stopPropagation();
        }
      } else {
        var increment = void 0;
        // eslint-disable-next-line deprecation/deprecation
        if (ev.which === _Utilities.KeyCodes.enter) {
          _this.setState({
            columnResizeDetails: undefined
          });
          ev.preventDefault();
          ev.stopPropagation();
        } else if (ev.which === _Utilities.KeyCodes.left) {
          increment = _Utilities.getRTL(_this.props.theme) ? 1 : -1;
        } else if (ev.which === _Utilities.KeyCodes.right) {
          increment = _Utilities.getRTL(_this.props.theme) ? -1 : 1;
        }
        if (increment) {
          if (!ev.shiftKey) {
            increment *= 10;
          }
          _this.setState({
            columnResizeDetails: _tslib.__assign(_tslib.__assign({}, columnResizeDetails), {
              columnMinWidth: columnResizeDetails.columnMinWidth + increment
            })
          });
          if (onColumnResized) {
            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);
          }
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    /**
    * mouse move event handler in the header
    * it will set isSizing state to true when user clicked on the sizer and move the mouse.
    *
    * @param ev - mouse move event
    */
    _this._onSizerMouseMove = function (ev) {
      var // use buttons property here since ev.button in some edge case is not upding well during the move.
      // but firefox doesn't support it, so we set the default value when it is not defined.
      buttons = ev.buttons;
      var _a = _this.props, onColumnIsSizingChanged = _a.onColumnIsSizingChanged, onColumnResized = _a.onColumnResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b;
      var columnResizeDetails = _this.state.columnResizeDetails;
      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {
        // cancel mouse down event and return early when the primary button is not pressed
        _this._onSizerMouseUp(ev);
        return;
      }
      if (ev.clientX !== columnResizeDetails.originX) {
        if (onColumnIsSizingChanged) {
          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);
        }
      }
      if (onColumnResized) {
        var movement = ev.clientX - columnResizeDetails.originX;
        if (_Utilities.getRTL(_this.props.theme)) {
          movement = -movement;
        }
        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);
      }
    };
    _this._onSizerBlur = function (ev) {
      var columnResizeDetails = _this.state.columnResizeDetails;
      if (columnResizeDetails) {
        _this.setState({
          columnResizeDetails: undefined,
          isSizing: false
        });
      }
    };
    /**
    * mouse up event handler in the header
    * clear the resize related state.
    * This is to ensure we can catch double click event
    *
    * @param ev - mouse up event
    */
    _this._onSizerMouseUp = function (ev) {
      var _a = _this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, onColumnIsSizingChanged = _a.onColumnIsSizingChanged;
      var columnResizeDetails = _this.state.columnResizeDetails;
      _this.setState({
        columnResizeDetails: undefined,
        isSizing: false
      });
      if (onColumnIsSizingChanged) {
        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);
      }
    };
    _this._onToggleCollapseAll = function () {
      var onToggleCollapseAll = _this.props.onToggleCollapseAll;
      var newCollapsed = !_this.state.isAllCollapsed;
      _this.setState({
        isAllCollapsed: newCollapsed
      });
      if (onToggleCollapseAll) {
        onToggleCollapseAll(newCollapsed);
      }
    };
    _Utilities.initializeComponentRef(_this);
    _this._events = new _Utilities.EventGroup(_this);
    _this.state = {
      columnResizeDetails: undefined,
      isAllCollapsed: _this.props.isAllCollapsed,
      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()
    };
    _this._onDropIndexInfo = {
      sourceIndex: -1,
      targetIndex: -1
    };
    _this._id = _Utilities.getId('header');
    _this._currentDropHintIndex = -1;
    // The drag drop handler won't do any work until subscribe() is called,
    // so always set it up for convenience
    _this._dragDropHelper = new _DragDrop.DragDropHelper({
      selection: {
        getSelection: function () {
          return;
        }
      },
      minimumPixelsForDrag: _this.props.minimumPixelsForDrag
    });
    return _this;
  }
  DetailsHeaderBase.prototype.componentDidMount = function () {
    var selection = this.props.selection;
    this._events.on(selection, _Selection.SELECTION_CHANGE, this._onSelectionChanged);
    // this._rootElement.current will be null in tests using react-test-renderer
    if (this._rootElement.current) {
      // We need to use native on this to prevent MarqueeSelection from handling the event before us.
      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);
      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);
      if (this._getColumnReorderProps()) {
        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());
      }
    }
  };
  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {
    if (this._getColumnReorderProps()) {
      if (!this._subscriptionObject && this._rootElement.current) {
        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());
      }
    } else if (this._subscriptionObject) {
      this._subscriptionObject.dispose();
      delete this._subscriptionObject;
    }
    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {
      var _a = prevProps.columns, previousColumns = _a === void 0 ? NO_COLUMNS : _a;
      var _b = this.props.columns, columns = _b === void 0 ? NO_COLUMNS : _b;
      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {
        this._onDropIndexInfo = {
          sourceIndex: -1,
          targetIndex: -1
        };
      }
    }
    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {
      this.setState({
        isAllCollapsed: this.props.isAllCollapsed
      });
    }
  };
  DetailsHeaderBase.prototype.componentWillUnmount = function () {
    if (this._subscriptionObject) {
      this._subscriptionObject.dispose();
      delete this._subscriptionObject;
    }
    this._dragDropHelper.dispose();
    this._events.dispose();
  };
  DetailsHeaderBase.prototype.render = function () {
    var _this = this;
    var _a = this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, ariaLabel = _a.ariaLabel, ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton, ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox, selectAllVisibility = _a.selectAllVisibility, ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn, indentWidth = _a.indentWidth, onColumnClick = _a.onColumnClick, onColumnContextMenu = _a.onColumnContextMenu, _c = _a.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c, styles = _a.styles, selectionMode = _a.selectionMode, theme = _a.theme, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, groupNestingDepth = _a.groupNestingDepth, useFastIcons = _a.useFastIcons, checkboxVisibility = _a.checkboxVisibility, className = _a.className;
    var _d = this.state, isAllSelected = _d.isAllSelected, columnResizeDetails = _d.columnResizeDetails, isSizing = _d.isSizing, isAllCollapsed = _d.isAllCollapsed;
    var showCheckbox = selectAllVisibility !== _DetailsHeaderTypes.SelectAllVisibility.none;
    var isCheckboxHidden = selectAllVisibility === _DetailsHeaderTypes.SelectAllVisibility.hidden;
    var isCheckboxAlwaysVisible = checkboxVisibility === _DetailsListTypes.CheckboxVisibility.always;
    var columnReorderProps = this._getColumnReorderProps();
    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;
    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;
    this._classNames = getClassNames(styles, {
      theme: theme,
      isAllSelected: isAllSelected,
      isSelectAllHidden: selectAllVisibility === _DetailsHeaderTypes.SelectAllVisibility.hidden,
      isResizingColumn: !!columnResizeDetails && isSizing,
      isSizing: isSizing,
      isAllCollapsed: isAllCollapsed,
      isCheckboxHidden: isCheckboxHidden,
      className: className
    });
    var classNames = this._classNames;
    var IconComponent = useFastIcons ? _Icon.FontIcon : _Icon.Icon;
    var isRTL = _Utilities.getRTL(theme);
    return _react.createElement(_FocusZone.FocusZone, {
      role: "row",
      "aria-label": ariaLabel,
      className: classNames.root,
      componentRef: this._rootComponent,
      elementRef: this._rootElement,
      onMouseMove: this._onRootMouseMove,
      "data-automationid": "DetailsHeader",
      direction: _FocusZone.FocusZoneDirection.horizontal
    }, showCheckbox ? [_react.createElement("div", {
      key: "__checkbox",
      className: classNames.cellIsCheck,
      "aria-labelledby": this._id + "-check",
      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,
      "aria-colindex": 1,
      role: 'columnheader'
    }, onRenderColumnHeaderTooltip({
      hostClassName: classNames.checkTooltip,
      id: this._id + "-checkTooltip",
      setAriaDescribedBy: false,
      content: ariaLabelForSelectAllCheckbox,
      children: _react.createElement(_DetailsRowCheck.DetailsRowCheck, {
        id: this._id + "-check",
        "aria-label": selectionMode === _Selection.SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,
        "aria-describedby": !isCheckboxHidden ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip ? this._id + "-checkTooltip" : undefined : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip ? this._id + "-checkTooltip" : undefined,
        "data-is-focusable": !isCheckboxHidden || undefined,
        isHeader: true,
        selected: isAllSelected,
        anySelected: false,
        canSelect: !isCheckboxHidden,
        className: classNames.check,
        onRenderDetailsCheckbox: onRenderDetailsCheckbox,
        useFastIcons: useFastIcons,
        isVisible: isCheckboxAlwaysVisible
      })
    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? _react.createElement("label", {
      key: "__checkboxLabel",
      id: this._id + "-checkTooltip",
      className: classNames.accessibleLabel,
      "aria-hidden": true
    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? _react.createElement("label", {
      key: "__checkboxLabel",
      id: this._id + "-checkTooltip",
      className: classNames.accessibleLabel,
      "aria-hidden": true
    }, ariaLabelForSelectionColumn) : null : null] : null, groupNestingDepth > 0 && this.props.collapseAllVisibility === _GroupedList.CollapseAllVisibility.visible ? _react.createElement("div", {
      className: classNames.cellIsGroupExpander,
      onClick: this._onToggleCollapseAll,
      "data-is-focusable": true,
      "aria-label": ariaLabelForToggleAllGroupsButton,
      "aria-expanded": !isAllCollapsed,
      role: "columnheader"
    }, _react.createElement(IconComponent, {
      className: classNames.collapseButton,
      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'
    })) : null, _react.createElement(_GroupedListGroupSpacer.GroupSpacer, {
      indentWidth: indentWidth,
      role: "gridcell",
      count: groupNestingDepth - 1
    }), columns.map(function (column, columnIndex) {
      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;
      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), _react.createElement(_componentsDetailsListDetailsColumn.DetailsColumn, {
        column: column,
        styles: column.styles,
        key: column.key,
        columnIndex: (showCheckbox ? 2 : 1) + columnIndex,
        parentId: _this._id,
        isDraggable: _isDraggable,
        updateDragInfo: _this._updateDragInfo,
        dragDropHelper: _this._dragDropHelper,
        onColumnClick: onColumnClick,
        onColumnContextMenu: onColumnContextMenu,
        // Do not render tooltips by default, but allow for override via props.
        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,
        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,
        cellStyleProps: _this.props.cellStyleProps,
        useFastIcons: useFastIcons
      }), _this._renderColumnDivider(columnIndex)];
    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && _react.createElement(_Layer.Layer, null, _react.createElement("div", {
      className: classNames.sizingOverlay,
      onMouseMove: this._onSizerMouseMove,
      onMouseUp: this._onSizerMouseUp
    })));
  };
  /** Set focus to the active thing in the focus area.*/
  DetailsHeaderBase.prototype.focus = function () {
    var _a;
    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());
  };
  /**
  * Gets column reorder props from this.props. If the calling code is part of setting up or
  * handling drag/drop events, it's safe to assume that this method's return value is defined
  * (because drag/drop handling will only be set up if reorder props are given).
  */
  DetailsHeaderBase.prototype._getColumnReorderProps = function () {
    var _a = this.props, columnReorderOptions = _a.columnReorderOptions, columnReorderProps = _a.columnReorderProps;
    return columnReorderProps || columnReorderOptions && _tslib.__assign(_tslib.__assign({}, columnReorderOptions), {
      onColumnDragEnd: undefined
    });
  };
  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {
    var options = {
      selectionIndex: 1,
      context: {
        data: this,
        index: 0
      },
      canDrag: function () {
        return false;
      },
      canDrop: function () {
        return true;
      },
      onDragStart: function () {
        return undefined;
      },
      updateDropState: this._updateDroppingState,
      onDrop: this._onDrop,
      onDragEnd: function () {
        return undefined;
      },
      onDragOver: this._onDragOver
    };
    return options;
  };
  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {
    return this._currentDropHintIndex >= 0;
  };
  /**
  * @returns whether or not the "Select All" checkbox column is hidden.
  */
  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {
    var _a = this.props, selectionMode = _a.selectionMode, checkboxVisibility = _a.checkboxVisibility;
    return selectionMode === _Selection.SelectionMode.none || checkboxVisibility === _DetailsListTypes.CheckboxVisibility.hidden;
  };
  DetailsHeaderBase.prototype._resetDropHints = function () {
    if (this._currentDropHintIndex >= 0) {
      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');
      this._currentDropHintIndex = -1;
    }
  };
  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {
    element.childNodes[1].style.display = displayProperty;
    element.childNodes[0].style.display = displayProperty;
  };
  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {
    if (this._rootElement.current) {
      var clientRect = this._rootElement.current.getBoundingClientRect();
      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {
        return _DetailsListTypes.ColumnDragEndLocation.header;
      }
    }
  };
  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {
    var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
    var column = columns[columnIndex];
    var onRenderDivider = column.onRenderDivider;
    return onRenderDivider ? onRenderDivider({
      column: column,
      columnIndex: columnIndex
    }, this._renderColumnSizer) : this._renderColumnSizer({
      column: column,
      columnIndex: columnIndex
    });
  };
  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {
    var classNames = this._classNames;
    var IconComponent = this.props.useFastIcons ? _Icon.FontIcon : _Icon.Icon;
    return _react.createElement("div", {
      key: 'dropHintKey',
      className: classNames.dropHintStyle,
      id: "columnDropHint_" + dropHintIndex
    }, _react.createElement("div", {
      role: "presentation",
      key: "dropHintCircleKey",
      className: classNames.dropHintCaretStyle,
      "data-is-focusable": false,
      "data-sizer-index": dropHintIndex,
      "aria-hidden": true
    }, _react.createElement(IconComponent, {
      iconName: 'CircleShapeSolid'
    })), _react.createElement("div", {
      key: "dropHintLineKey",
      "aria-hidden": true,
      "data-is-focusable": false,
      "data-sizer-index": dropHintIndex,
      className: classNames.dropHintLineStyle
    }));
  };
  /**
  * double click on the column sizer will auto ajust column width
  * to fit the longest content among current rendered rows.
  *
  * @param columnIndex - index of the column user double clicked
  * @param ev - mouse double click event
  */
  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {
    var _a = this.props, onColumnAutoResized = _a.onColumnAutoResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b;
    if (onColumnAutoResized) {
      onColumnAutoResized(columns[columnIndex], columnIndex);
    }
  };
  DetailsHeaderBase.prototype._onSelectionChanged = function () {
    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();
    if (this.state.isAllSelected !== isAllSelected) {
      this.setState({
        isAllSelected: isAllSelected
      });
    }
  };
  DetailsHeaderBase.defaultProps = {
    selectAllVisibility: _DetailsHeaderTypes.SelectAllVisibility.visible,
    collapseAllVisibility: _GroupedList.CollapseAllVisibility.visible,
    useFastIcons: true
  };
  return DetailsHeaderBase;
})(_react.Component);
function _liesBetween(rtl, target, left, right) {
  return rtl ? target <= left && target >= right : target >= left && target <= right;
}
function _isBefore(rtl, a, b) {
  return rtl ? a >= b : a <= b;
}
function _isAfter(rtl, a, b) {
  return rtl ? a <= b : a >= b;
}
function _stopPropagation(ev) {
  ev.stopPropagation();
}

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./DetailsList.types":"2BjaS","../../FocusZone":"1FMTL","../../Icon":"7upjA","../../Layer":"6Nb0d","../GroupedList/GroupSpacer":"3Oub4","../../GroupedList":"77y1q","./DetailsRowCheck":"6Nbsm","../../Selection":"3dSNL","../../DragDrop":"2XDjF","../../components/DetailsList/DetailsColumn":"1NE2k","./DetailsHeader.types":"1RZeD","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2BjaS":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ColumnActionsMode", function () {
  return ColumnActionsMode;
});
_parcelHelpers.export(exports, "ConstrainMode", function () {
  return ConstrainMode;
});
_parcelHelpers.export(exports, "ColumnDragEndLocation", function () {
  return ColumnDragEndLocation;
});
_parcelHelpers.export(exports, "DetailsListLayoutMode", function () {
  return DetailsListLayoutMode;
});
_parcelHelpers.export(exports, "CheckboxVisibility", function () {
  return CheckboxVisibility;
});
var ColumnActionsMode;
(function (ColumnActionsMode) {
  /** Renders the column header as disabled.*/
  ColumnActionsMode[ColumnActionsMode["disabled"] = 0] = "disabled";
  /** Renders the column header as clickable. Default value.*/
  ColumnActionsMode[ColumnActionsMode["clickable"] = 1] = "clickable";
  /** Renders the column header as clickable and displays the dropdown chevron.*/
  ColumnActionsMode[ColumnActionsMode["hasDropdown"] = 2] = "hasDropdown";
})(ColumnActionsMode || (ColumnActionsMode = {}));
var ConstrainMode;
(function (ConstrainMode) {
  /** Lets the content grow which allows the page to manage scrolling.*/
  ConstrainMode[ConstrainMode["unconstrained"] = 0] = "unconstrained";
  /** Constrains the list to the given layout space.*/
  ConstrainMode[ConstrainMode["horizontalConstrained"] = 1] = "horizontalConstrained";
})(ConstrainMode || (ConstrainMode = {}));
var ColumnDragEndLocation;
(function (ColumnDragEndLocation) {
  /** Drag ended outside of current list*/
  ColumnDragEndLocation[ColumnDragEndLocation["outside"] = 0] = "outside";
  /** Drag ended within current list*/
  ColumnDragEndLocation[ColumnDragEndLocation["surface"] = 1] = "surface";
  /** Drag ended on header*/
  ColumnDragEndLocation[ColumnDragEndLocation["header"] = 2] = "header";
})(ColumnDragEndLocation || (ColumnDragEndLocation = {}));
var DetailsListLayoutMode;
(function (DetailsListLayoutMode) {
  /**
  * Lets the user resize columns and makes not attempt to fit them.
  */
  DetailsListLayoutMode[DetailsListLayoutMode["fixedColumns"] = 0] = "fixedColumns";
  /**
  * Manages which columns are visible, tries to size them according to their min/max rules and drops
  * off columns that can't fit and have isCollapsible set.
  */
  DetailsListLayoutMode[DetailsListLayoutMode["justified"] = 1] = "justified";
})(DetailsListLayoutMode || (DetailsListLayoutMode = {}));
var CheckboxVisibility;
(function (CheckboxVisibility) {
  /** Visible on hover.*/
  CheckboxVisibility[CheckboxVisibility["onHover"] = 0] = "onHover";
  /** Visible always.*/
  CheckboxVisibility[CheckboxVisibility["always"] = 1] = "always";
  /** Hide checkboxes.*/
  CheckboxVisibility[CheckboxVisibility["hidden"] = 2] = "hidden";
})(CheckboxVisibility || (CheckboxVisibility = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3Oub4":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "SPACER_WIDTH", function () {
  return SPACER_WIDTH;
});
_parcelHelpers.export(exports, "GroupSpacer", function () {
  return GroupSpacer;
});
var _react = require('react');
var SPACER_WIDTH = 36;
var GroupSpacer = function (props) {
  var count = props.count, _a = props.indentWidth, indentWidth = _a === void 0 ? SPACER_WIDTH : _a, _b = props.role, role = _b === void 0 ? 'presentation' : _b;
  var width = count * indentWidth;
  return count > 0 ? _react.createElement("span", {
    className: 'ms-GroupSpacer',
    style: {
      display: 'inline-block',
      width: width
    },
    role: role
  }) : null;
};

},{"react":"4g1R3","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"77y1q":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsGroupedListIndex = require('./components/GroupedList/index');
_parcelHelpers.exportAll(_componentsGroupedListIndex, exports);

},{"./components/GroupedList/index":"1KXm6","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1KXm6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupSpacer", function () {
  return _GroupSpacer.GroupSpacer;
});
var _GroupedList = require('./GroupedList');
_parcelHelpers.exportAll(_GroupedList, exports);
var _GroupedListBase = require('./GroupedList.base');
_parcelHelpers.exportAll(_GroupedListBase, exports);
var _GroupedListTypes = require('./GroupedList.types');
_parcelHelpers.exportAll(_GroupedListTypes, exports);
var _GroupHeader = require('./GroupHeader');
_parcelHelpers.exportAll(_GroupHeader, exports);
var _GroupFooter = require('./GroupFooter');
_parcelHelpers.exportAll(_GroupFooter, exports);
var _GroupShowAll = require('./GroupShowAll');
_parcelHelpers.exportAll(_GroupShowAll, exports);
var _GroupSpacer = require('./GroupSpacer');
var _GroupSpacerTypes = require('./GroupSpacer.types');
_parcelHelpers.exportAll(_GroupSpacerTypes, exports);
var _GroupedListSection = require('./GroupedListSection');
_parcelHelpers.exportAll(_GroupedListSection, exports);

},{"./GroupedList":"5kf69","./GroupedList.base":"5JaD4","./GroupedList.types":"c6drL","./GroupHeader":"1iAcl","./GroupFooter":"x8OH1","./GroupShowAll":"2QYe8","./GroupSpacer":"3Oub4","./GroupSpacer.types":"2N9hr","./GroupedListSection":"2KGwA","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5kf69":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupedList", function () {
  return GroupedList;
});
var _Utilities = require('../../Utilities');
var _GroupedListStyles = require('./GroupedList.styles');
var _GroupedListBase = require('./GroupedList.base');
var GroupedList = _Utilities.styled(_GroupedListBase.GroupedListBase, _GroupedListStyles.getStyles, undefined, {
  scope: 'GroupedList'
});

},{"../../Utilities":"1439N","./GroupedList.styles":"3n1NA","./GroupedList.base":"5JaD4","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3n1NA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var GlobalClassNames = {
  root: 'ms-GroupedList',
  compact: 'ms-GroupedList--Compact',
  group: 'ms-GroupedList-group',
  link: 'ms-Link',
  listCell: 'ms-List-cell'
};
var beziers = {
  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)'
};
var getStyles = function (props) {
  var _a, _b;
  var theme = props.theme, className = props.className, compact = props.compact;
  var palette = theme.palette;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, theme.fonts.small, {
      position: 'relative',
      selectors: (_a = {}, _a["." + classNames.listCell] = {
        minHeight: 38
      }, _a)
    }, compact && [classNames.compact, {
      selectors: (_b = {}, _b["." + classNames.listCell] = {
        minHeight: 32
      }, _b)
    }], className],
    group: [classNames.group, {
      transition: "background-color " + _Styling.AnimationVariables.durationValue2 + " " + beziers.easeInOutSine
    }],
    groupIsDropping: {
      backgroundColor: palette.neutralLight
    }
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5JaD4":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupedListBase", function () {
  return GroupedListBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _GroupedListSection = require('./GroupedListSection');
var _List = require('../../List');
var _Selection = require('../../Selection');
var _DetailsListDetailsRowStyles = require('../DetailsList/DetailsRow.styles');
var _FocusZone = require('../../FocusZone');
var getClassNames = _Utilities.classNamesFunction();
var ROW_HEIGHT = _DetailsListDetailsRowStyles.DEFAULT_ROW_HEIGHTS.rowHeight, COMPACT_ROW_HEIGHT = _DetailsListDetailsRowStyles.DEFAULT_ROW_HEIGHTS.compactRowHeight;
var GroupedListBase = /** @class*/
(function (_super) {
  _tslib.__extends(GroupedListBase, _super);
  function GroupedListBase(props) {
    var _this = _super.call(this, props) || this;
    _this._list = _react.createRef();
    _this._renderGroup = function (group, groupIndex) {
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, groupProps = _a.groupProps, items = _a.items, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selectionMode = _a.selectionMode, selection = _a.selection, viewport = _a.viewport, onShouldVirtualize = _a.onShouldVirtualize, groups = _a.groups, compact = _a.compact;
      // override group header/footer props as needed
      var dividerProps = {
        onToggleSelectGroup: _this._onToggleSelectGroup,
        onToggleCollapse: _this._onToggleCollapse,
        onToggleSummarize: _this._onToggleSummarize
      };
      var headerProps = _tslib.__assign(_tslib.__assign({}, groupProps.headerProps), dividerProps);
      var showAllProps = _tslib.__assign(_tslib.__assign({}, groupProps.showAllProps), dividerProps);
      var footerProps = _tslib.__assign(_tslib.__assign({}, groupProps.footerProps), dividerProps);
      var groupNestingDepth = _this._getGroupNestingDepth();
      if (!groupProps.showEmptyGroups && group && group.count === 0) {
        return null;
      }
      var finalListProps = _tslib.__assign(_tslib.__assign({}, listProps || ({})), {
        version: _this.state.version
      });
      return _react.createElement(_GroupedListSection.GroupedListSection, {
        key: _this._getGroupKey(group, groupIndex),
        dragDropEvents: dragDropEvents,
        dragDropHelper: dragDropHelper,
        eventsToRegister: eventsToRegister,
        footerProps: footerProps,
        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,
        group: group,
        groupIndex: groupIndex,
        groupNestingDepth: groupNestingDepth,
        groupProps: groupProps,
        headerProps: headerProps,
        listProps: finalListProps,
        items: items,
        onRenderCell: onRenderCell,
        onRenderGroupHeader: groupProps.onRenderHeader,
        onRenderGroupShowAll: groupProps.onRenderShowAll,
        onRenderGroupFooter: groupProps.onRenderFooter,
        selectionMode: selectionMode,
        selection: selection,
        showAllProps: showAllProps,
        viewport: viewport,
        onShouldVirtualize: onShouldVirtualize,
        groupedListClassNames: _this._classNames,
        groups: groups,
        compact: compact
      });
    };
    _this._getDefaultGroupItemLimit = function (group) {
      return group.count;
    };
    _this._getGroupItemLimit = function (group) {
      var groupProps = _this.props.groupProps;
      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;
      return getGroupItemLimit(group);
    };
    _this._getGroupHeight = function (group) {
      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;
      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));
    };
    _this._getPageHeight = function (itemIndex) {
      var groups = _this.state.groups;
      var _a = _this.props.getGroupHeight, getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;
      var pageGroup = groups && groups[itemIndex];
      if (pageGroup) {
        return getGroupHeight(pageGroup, itemIndex);
      } else {
        return 0;
      }
    };
    _this._onToggleCollapse = function (group) {
      var groupProps = _this.props.groupProps;
      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;
      if (group) {
        if (onToggleCollapse) {
          onToggleCollapse(group);
        }
        group.isCollapsed = !group.isCollapsed;
        _this._updateIsSomeGroupExpanded();
        _this.forceUpdate();
      }
    };
    _this._onToggleSelectGroup = function (group) {
      var _a = _this.props, selection = _a.selection, selectionMode = _a.selectionMode;
      if (group && selection && selectionMode === _Selection.SelectionMode.multiple) {
        selection.toggleRangeSelected(group.startIndex, group.count);
      }
    };
    _this._isInnerZoneKeystroke = function (ev) {
      // eslint-disable-next-line deprecation/deprecation
      return ev.which === _Utilities.getRTLSafeKeyCode(_Utilities.KeyCodes.right);
    };
    _this._onToggleSummarize = function (group) {
      var groupProps = _this.props.groupProps;
      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;
      if (onToggleSummarize) {
        onToggleSummarize(group);
      } else {
        if (group) {
          group.isShowingAll = !group.isShowingAll;
        }
        _this.forceUpdate();
      }
    };
    _this._getPageSpecification = function (itemIndex) {
      var groups = _this.state.groups;
      var pageGroup = groups && groups[itemIndex];
      return {
        key: pageGroup && pageGroup.key
      };
    };
    _Utilities.initializeComponentRef(_this);
    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);
    var _a = props.listProps, _b = _a === void 0 ? {} : _a, _c = _b.version, version = _c === void 0 ? {} : _c;
    _this.state = {
      groups: props.groups,
      items: props.items,
      listProps: props.listProps,
      version: version
    };
    return _this;
  }
  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {
    var groups = nextProps.groups, selectionMode = nextProps.selectionMode, compact = nextProps.compact, items = nextProps.items, listProps = nextProps.listProps;
    var listVersion = listProps && listProps.version;
    var nextState = _tslib.__assign(_tslib.__assign({}, previousState), {
      selectionMode: selectionMode,
      compact: compact,
      groups: groups,
      listProps: listProps
    });
    var shouldForceUpdates = false;
    var previousListVersion = previousState.listProps && previousState.listProps.version;
    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {
      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,
      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale
      // data.
      shouldForceUpdates = true;
    }
    if (groups !== previousState.groups) {
      nextState = _tslib.__assign(_tslib.__assign({}, nextState), {
        groups: groups
      });
    }
    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {
      shouldForceUpdates = true;
    }
    if (shouldForceUpdates) {
      nextState = _tslib.__assign(_tslib.__assign({}, nextState), {
        version: {}
      });
    }
    return nextState;
  };
  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {
    if (this._list.current) {
      this._list.current.scrollToIndex(index, measureItem, scrollToMode);
    }
  };
  GroupedListBase.prototype.getStartItemIndexInView = function () {
    return this._list.current.getStartItemIndexInView() || 0;
  };
  GroupedListBase.prototype.componentDidMount = function () {
    var _a = this.props, groupProps = _a.groupProps, _b = _a.groups, groups = _b === void 0 ? [] : _b;
    if (groupProps && groupProps.isAllGroupsCollapsed) {
      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);
    }
  };
  GroupedListBase.prototype.render = function () {
    var _a = this.props, className = _a.className, usePageCache = _a.usePageCache, onShouldVirtualize = _a.onShouldVirtualize, theme = _a.theme, _b = _a.role, role = _b === void 0 ? 'treegrid' : _b, styles = _a.styles, compact = _a.compact, _c = _a.focusZoneProps, focusZoneProps = _c === void 0 ? {} : _c, _d = _a.rootListProps, rootListProps = _d === void 0 ? {} : _d;
    var _e = this.state, groups = _e.groups, version = _e.version;
    this._classNames = getClassNames(styles, {
      theme: theme,
      className: className,
      compact: compact
    });
    var _f = focusZoneProps.shouldEnterInnerZone, shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;
    return _react.createElement(_FocusZone.FocusZone, _tslib.__assign({
      direction: _FocusZone.FocusZoneDirection.vertical,
      "data-automationid": "GroupedList",
      "data-is-scrollable": "false",
      role: "presentation"
    }, focusZoneProps, {
      shouldEnterInnerZone: shouldEnterInnerZone,
      className: _Utilities.css(this._classNames.root, focusZoneProps.className)
    }), !groups ? this._renderGroup(undefined, 0) : _react.createElement(_List.List, _tslib.__assign({
      ref: this._list,
      role: role,
      items: groups,
      onRenderCell: this._renderGroup,
      getItemCountForPage: this._returnOne,
      getPageHeight: this._getPageHeight,
      getPageSpecification: this._getPageSpecification,
      usePageCache: usePageCache,
      onShouldVirtualize: onShouldVirtualize,
      version: version
    }, rootListProps)));
  };
  GroupedListBase.prototype.forceUpdate = function () {
    _super.prototype.forceUpdate.call(this);
    this._forceListUpdates();
  };
  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {
    var _a = this.state.groups, groups = _a === void 0 ? [] : _a;
    var groupProps = this.props.groupProps;
    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;
    if (groups.length > 0) {
      if (onToggleCollapseAll) {
        onToggleCollapseAll(allCollapsed);
      }
      this._setGroupsCollapsedState(groups, allCollapsed);
      this._updateIsSomeGroupExpanded();
      this.forceUpdate();
    }
  };
  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {
    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {
      groups[groupIndex].isCollapsed = isCollapsed;
    }
  };
  GroupedListBase.prototype._returnOne = function () {
    return 1;
  };
  GroupedListBase.prototype._getGroupKey = function (group, index) {
    return 'group-' + (group && group.key ? group.key : String(index));
  };
  GroupedListBase.prototype._getGroupNestingDepth = function () {
    var groups = this.state.groups;
    var level = 0;
    var groupsInLevel = groups;
    while (groupsInLevel && groupsInLevel.length > 0) {
      level++;
      groupsInLevel = groupsInLevel[0].children;
    }
    return level;
  };
  GroupedListBase.prototype._forceListUpdates = function (groups) {
    this.setState({
      version: {}
    });
  };
  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {
    var _this = this;
    return !!(groups && groups.some(function (group) {
      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;
    }));
  };
  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {
    var groups = this.state.groups;
    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;
    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);
    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {
      if (onGroupExpandStateChanged) {
        onGroupExpandStateChanged(newIsSomeGroupExpanded);
      }
      this._isSomeGroupExpanded = newIsSomeGroupExpanded;
    }
  };
  GroupedListBase.defaultProps = {
    selectionMode: _Selection.SelectionMode.multiple,
    isHeaderVisible: true,
    groupProps: {},
    compact: false
  };
  return GroupedListBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./GroupedListSection":"2KGwA","../../List":"5uzfZ","../../Selection":"3dSNL","../DetailsList/DetailsRow.styles":"1FMwI","../../FocusZone":"1FMTL","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2KGwA":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupedListSection", function () {
  return GroupedListSection;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Selection = require('../../Selection');
var _GroupHeader = require('./GroupHeader');
var _GroupShowAll = require('./GroupShowAll');
var _GroupFooter = require('./GroupFooter');
var _List = require('../../List');
var DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';
var GroupedListSection = /** @class*/
(function (_super) {
  _tslib.__extends(GroupedListSection, _super);
  function GroupedListSection(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    _this._list = _react.createRef();
    _this._subGroupRefs = {};
    _this._droppingClassName = '';
    _this._onRenderGroupHeader = function (props) {
      return _react.createElement(_GroupHeader.GroupHeader, _tslib.__assign({}, props));
    };
    _this._onRenderGroupShowAll = function (props) {
      return _react.createElement(_GroupShowAll.GroupShowAll, _tslib.__assign({}, props));
    };
    _this._onRenderGroupFooter = function (props) {
      return _react.createElement(_GroupFooter.GroupFooter, _tslib.__assign({}, props));
    };
    _this._renderSubGroup = function (subGroup, subGroupIndex) {
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, getGroupItemLimit = _a.getGroupItemLimit, groupNestingDepth = _a.groupNestingDepth, groupProps = _a.groupProps, items = _a.items, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selection = _a.selection, selectionMode = _a.selectionMode, viewport = _a.viewport, onRenderGroupHeader = _a.onRenderGroupHeader, onRenderGroupShowAll = _a.onRenderGroupShowAll, onRenderGroupFooter = _a.onRenderGroupFooter, onShouldVirtualize = _a.onShouldVirtualize, group = _a.group, compact = _a.compact;
      var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;
      return !subGroup || subGroup.count > 0 || groupProps && groupProps.showEmptyGroups ? _react.createElement(GroupedListSection, {
        ref: function (ref) {
          return _this._subGroupRefs['subGroup_' + subGroupIndex] = ref;
        },
        key: _this._getGroupKey(subGroup, subGroupIndex),
        dragDropEvents: dragDropEvents,
        dragDropHelper: dragDropHelper,
        eventsToRegister: eventsToRegister,
        footerProps: footerProps,
        getGroupItemLimit: getGroupItemLimit,
        group: subGroup,
        groupIndex: subGroupIndex,
        groupNestingDepth: nestingDepth,
        groupProps: groupProps,
        headerProps: headerProps,
        items: items,
        listProps: listProps,
        onRenderCell: onRenderCell,
        selection: selection,
        selectionMode: selectionMode,
        showAllProps: showAllProps,
        viewport: viewport,
        onRenderGroupHeader: onRenderGroupHeader,
        onRenderGroupShowAll: onRenderGroupShowAll,
        onRenderGroupFooter: onRenderGroupFooter,
        onShouldVirtualize: onShouldVirtualize,
        groups: group ? group.children : [],
        compact: compact
      }) : null;
    };
    /**
    * collect all the data we need to enable drag/drop for a group
    */
    _this._getGroupDragDropOptions = function () {
      var _a = _this.props, group = _a.group, groupIndex = _a.groupIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;
      var options = {
        eventMap: eventsToRegister,
        selectionIndex: -1,
        context: {
          data: group,
          index: groupIndex,
          isGroup: true
        },
        updateDropState: _this._updateDroppingState,
        canDrag: dragDropEvents.canDrag,
        canDrop: dragDropEvents.canDrop,
        onDrop: dragDropEvents.onDrop,
        onDragStart: dragDropEvents.onDragStart,
        onDragEnter: dragDropEvents.onDragEnter,
        onDragLeave: dragDropEvents.onDragLeave,
        onDragEnd: dragDropEvents.onDragEnd,
        onDragOver: dragDropEvents.onDragOver
      };
      return options;
    };
    /**
    * update groupIsDropping state based on the input value, which is used to change style during drag and drop
    *
    * @param newValue - new isDropping state value
    * @param event - the event trigger dropping state change which can be dragenter, dragleave etc
    */
    _this._updateDroppingState = function (newIsDropping, event) {
      var isDropping = _this.state.isDropping;
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, group = _a.group;
      if (isDropping !== newIsDropping) {
        if (isDropping) {
          if (dragDropEvents && dragDropEvents.onDragLeave) {
            dragDropEvents.onDragLeave(group, event);
          }
        } else {
          if (dragDropEvents && dragDropEvents.onDragEnter) {
            _this._droppingClassName = dragDropEvents.onDragEnter(group, event);
          }
        }
        _this.setState({
          isDropping: newIsDropping
        });
      }
    };
    var selection = props.selection, group = props.group;
    _Utilities.initializeComponentRef(_this);
    _this._id = _Utilities.getId('GroupedListSection');
    _this.state = {
      isDropping: false,
      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false
    };
    _this._events = new _Utilities.EventGroup(_this);
    return _this;
  }
  GroupedListSection.prototype.componentDidMount = function () {
    var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection;
    if (dragDropHelper && this._root.current) {
      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());
    }
    if (selection) {
      this._events.on(selection, _Selection.SELECTION_CHANGE, this._onSelectionChange);
    }
  };
  GroupedListSection.prototype.componentWillUnmount = function () {
    this._events.dispose();
    if (this._dragDropSubscription) {
      this._dragDropSubscription.dispose();
    }
  };
  GroupedListSection.prototype.componentDidUpdate = function (previousProps) {
    if (this.props.group !== previousProps.group || this.props.groupIndex !== previousProps.groupIndex || this.props.dragDropHelper !== previousProps.dragDropHelper) {
      if (this._dragDropSubscription) {
        this._dragDropSubscription.dispose();
        delete this._dragDropSubscription;
      }
      if (this.props.dragDropHelper && this._root.current) {
        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());
      }
    }
  };
  GroupedListSection.prototype.render = function () {
    var _a = this.props, getGroupItemLimit = _a.getGroupItemLimit, group = _a.group, groupIndex = _a.groupIndex, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, viewport = _a.viewport, selectionMode = _a.selectionMode, _b = _a.onRenderGroupHeader, onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b, _c = _a.onRenderGroupShowAll, onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c, _d = _a.onRenderGroupFooter, onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d, onShouldVirtualize = _a.onShouldVirtualize, groupedListClassNames = _a.groupedListClassNames, groups = _a.groups, compact = _a.compact, _e = _a.listProps, listProps = _e === void 0 ? {} : _e;
    var isSelected = this.state.isSelected;
    var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;
    var isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);
    var hasNestedGroups = group && group.children && group.children.length > 0;
    var version = listProps.version;
    var dividerProps = {
      group: group,
      groupIndex: groupIndex,
      groupLevel: group ? group.level : 0,
      isSelected: isSelected,
      selected: isSelected,
      viewport: viewport,
      selectionMode: selectionMode,
      groups: groups,
      compact: compact
    };
    var ariaControlsProps = {
      groupedListId: this._id,
      ariaSetSize: groups ? groups.length : undefined,
      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined
    };
    var groupHeaderProps = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, headerProps), dividerProps), ariaControlsProps);
    var groupShowAllProps = _tslib.__assign(_tslib.__assign({}, showAllProps), dividerProps);
    var groupFooterProps = _tslib.__assign(_tslib.__assign({}, footerProps), dividerProps);
    var isDraggable = !!this.props.dragDropHelper && this._getGroupDragDropOptions().canDrag(group) && !!this.props.dragDropEvents.canDragGroups;
    return _react.createElement("div", _tslib.__assign({
      ref: this._root
    }, isDraggable && ({
      draggable: true
    }), {
      className: _Utilities.css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()),
      role: "presentation"
    }), onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader), group && group.isCollapsed ? null : hasNestedGroups ? _react.createElement(_List.List, {
      role: "presentation",
      ref: this._list,
      items: group ? group.children : [],
      onRenderCell: this._renderSubGroup,
      getItemCountForPage: this._returnOne,
      onShouldVirtualize: onShouldVirtualize,
      version: version,
      id: this._id
    }) : this._onRenderGroup(renderCount), group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll), onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter));
  };
  GroupedListSection.prototype.forceUpdate = function () {
    _super.prototype.forceUpdate.call(this);
    this.forceListUpdate();
  };
  GroupedListSection.prototype.forceListUpdate = function () {
    var group = this.props.group;
    if (this._list.current) {
      this._list.current.forceUpdate();
      if (group && group.children && group.children.length > 0) {
        var subGroupCount = group.children.length;
        for (var i = 0; i < subGroupCount; i++) {
          var subGroup = this._list.current.pageRefs['subGroup_' + String(i)];
          if (subGroup) {
            subGroup.forceListUpdate();
          }
        }
      }
    } else {
      var subGroup = this._subGroupRefs['subGroup_' + String(0)];
      if (subGroup) {
        subGroup.forceListUpdate();
      }
    }
  };
  GroupedListSection.prototype._onSelectionChange = function () {
    var _a = this.props, group = _a.group, selection = _a.selection;
    if (selection && group) {
      var isSelected = selection.isRangeSelected(group.startIndex, group.count);
      if (isSelected !== this.state.isSelected) {
        this.setState({
          isSelected: isSelected
        });
      }
    }
  };
  GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth, group) {
    return function (item, itemIndex) {
      return onRenderCell(groupNestingDepth, item, itemIndex, group);
    };
  };
  GroupedListSection.prototype._onRenderGroup = function (renderCount) {
    var _a = this.props, group = _a.group, items = _a.items, onRenderCell = _a.onRenderCell, listProps = _a.listProps, groupNestingDepth = _a.groupNestingDepth, onShouldVirtualize = _a.onShouldVirtualize, groupProps = _a.groupProps;
    var count = group && !group.isShowingAll ? group.count : items.length;
    var startIndex = group ? group.startIndex : 0;
    return _react.createElement(_List.List, _tslib.__assign({
      role: groupProps && groupProps.role ? groupProps.role : 'rowgroup',
      "aria-label": group === null || group === void 0 ? void 0 : group.name,
      items: items,
      onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth, group),
      ref: this._list,
      renderCount: Math.min(count, renderCount),
      startIndex: startIndex,
      onShouldVirtualize: onShouldVirtualize,
      id: this._id
    }, listProps));
  };
  GroupedListSection.prototype._returnOne = function () {
    return 1;
  };
  GroupedListSection.prototype._getGroupKey = function (group, index) {
    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));
  };
  /**
  * get the correct css class to reflect the dropping state for a given group
  *
  * If the group is the current drop target, return the default dropping class name
  * Otherwise, return '';
  *
  */
  GroupedListSection.prototype._getDroppingClassName = function () {
    var isDropping = this.state.isDropping;
    var _a = this.props, group = _a.group, groupedListClassNames = _a.groupedListClassNames;
    isDropping = !!(group && isDropping);
    return _Utilities.css(isDropping && this._droppingClassName, isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);
  };
  return GroupedListSection;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../../Selection":"3dSNL","./GroupHeader":"1iAcl","./GroupShowAll":"2QYe8","./GroupFooter":"x8OH1","../../List":"5uzfZ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1iAcl":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupHeader", function () {
  return GroupHeader;
});
var _Utilities = require('../../Utilities');
var _GroupHeaderStyles = require('./GroupHeader.styles');
var _GroupHeaderBase = require('./GroupHeader.base');
var GroupHeader = _Utilities.styled(_GroupHeaderBase.GroupHeaderBase, _GroupHeaderStyles.getStyles, undefined, {
  scope: 'GroupHeader'
});

},{"../../Utilities":"1439N","./GroupHeader.styles":"4N1yk","./GroupHeader.base":"4SELr","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4N1yk":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var _DetailsListDetailsRowStyles = require('../DetailsList/DetailsRow.styles');
var _DetailsListDetailsRowCheckStyles = require('../DetailsList/DetailsRowCheck.styles');
var _GroupSpacer = require('./GroupSpacer');
var GlobalClassNames = {
  root: 'ms-GroupHeader',
  compact: 'ms-GroupHeader--compact',
  check: 'ms-GroupHeader-check',
  dropIcon: 'ms-GroupHeader-dropIcon',
  expand: 'ms-GroupHeader-expand',
  isCollapsed: 'is-collapsed',
  title: 'ms-GroupHeader-title',
  isSelected: 'is-selected',
  iconTag: 'ms-Icon--Tag',
  group: 'ms-GroupedList-group',
  isDropping: 'is-dropping'
};
var beziers = {
  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',
  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',
  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)'
};
var DEFAULT_GROUP_HEADER_HEIGHT = 48;
var COMPACT_GROUP_HEADER_HEIGHT = 40;
var getStyles = function (props) {
  var _a, _b, _c, _d, _e;
  var theme = props.theme, className = props.className, selected = props.selected, isCollapsed = props.isCollapsed, compact = props.compact;
  // padding from the source to align GroupHeader title with DetailsRow's first cell.
  var cellLeftPadding = _DetailsListDetailsRowStyles.DEFAULT_CELL_STYLE_PROPS.cellLeftPadding;
  var finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;
  var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var checkExpandResetStyles = [_Styling.getFocusStyle(theme), {
    cursor: 'default',
    background: 'none',
    backgroundColor: 'transparent',
    border: 'none',
    padding: 0
  }];
  return {
    root: [classNames.root, _Styling.getFocusStyle(theme), theme.fonts.medium, {
      // keep the border for height but color it so it's invisible.
      borderBottom: "1px solid " + semanticColors.listBackground,
      cursor: 'default',
      userSelect: 'none',
      selectors: (_a = {
        ':hover': {
          background: semanticColors.listItemBackgroundHovered,
          color: semanticColors.actionLinkHovered
        }
      }, _a["&:hover ." + classNames.check] = {
        opacity: 1
      }, _a["." + _Utilities.IsFocusVisibleClassName + " &:focus ." + classNames.check] = {
        opacity: 1
      }, _a[":global(." + classNames.group + "." + classNames.isDropping + ")"] = {
        selectors: (_b = {}, _b["& > ." + classNames.root + " ." + classNames.dropIcon] = {
          transition: "transform " + _Styling.AnimationVariables.durationValue4 + " " + beziers.easeOutCirc + " " + ("opacity " + _Styling.AnimationVariables.durationValue1 + " " + beziers.easeOutSine),
          transitionDelay: _Styling.AnimationVariables.durationValue3,
          opacity: 1,
          transform: "rotate(0.2deg) scale(1);"
        }, _b["." + classNames.check] = {
          opacity: 0
        }, _b)
      }, _a)
    }, selected && [classNames.isSelected, {
      background: semanticColors.listItemBackgroundChecked,
      selectors: (_c = {
        ':hover': {
          background: semanticColors.listItemBackgroundCheckedHovered
        }
      }, _c["" + classNames.check] = {
        opacity: 1
      }, _c)
    }], compact && [classNames.compact, {
      border: 'none'
    }], className],
    groupHeaderContainer: [{
      display: 'flex',
      alignItems: 'center',
      height: finalRowHeight
    }],
    headerCount: [{
      padding: '0px 4px'
    }],
    check: [classNames.check, checkExpandResetStyles, {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.
      // Ensure that the check cell covers the top border of the cell.
      // This ensures the click target does not leave a spot which would
      // cause other items to be deselected.
      paddingTop: 1,
      marginTop: -1,
      opacity: 0,
      width: _DetailsListDetailsRowCheckStyles.CHECK_CELL_WIDTH,
      height: finalRowHeight,
      selectors: (_d = {}, _d["." + _Utilities.IsFocusVisibleClassName + " &:focus"] = {
        opacity: 1
      }, _d)
    }],
    expand: [classNames.expand, checkExpandResetStyles, {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: fonts.small.fontSize,
      width: _GroupSpacer.SPACER_WIDTH,
      height: finalRowHeight,
      color: selected ? palette.neutralPrimary : palette.neutralSecondary,
      selectors: {
        ':hover': {
          backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight
        },
        ':active': {
          backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt
        }
      }
    }],
    expandIsCollapsed: [isCollapsed ? [classNames.isCollapsed, {
      transform: 'rotate(0deg)',
      transformOrigin: '50% 50%',
      transition: 'transform .1s linear'
    }] : {
      transform: _Utilities.getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',
      transformOrigin: '50% 50%',
      transition: 'transform .1s linear'
    }],
    title: [classNames.title, {
      paddingLeft: cellLeftPadding,
      fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,
      fontWeight: isCollapsed ? _Styling.FontWeights.regular : _Styling.FontWeights.semibold,
      cursor: 'pointer',
      outline: 0,
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis'
    }],
    dropIcon: [classNames.dropIcon, {
      position: 'absolute',
      left: -26,
      fontSize: _Styling.IconFontSizes.large,
      color: palette.neutralSecondary,
      transition: "transform " + _Styling.AnimationVariables.durationValue2 + " " + beziers.easeInBack + ", " + ("opacity " + _Styling.AnimationVariables.durationValue4 + " " + beziers.easeOutSine),
      opacity: 0,
      transform: 'rotate(0.2deg) scale(0.65)',
      transformOrigin: '10px 10px',
      selectors: (_e = {}, _e[":global(." + classNames.iconTag + ")"] = {
        position: 'absolute'
      }, _e)
    }]
  };
};

},{"../../Styling":"5q33X","../../Utilities":"1439N","../DetailsList/DetailsRow.styles":"1FMwI","../DetailsList/DetailsRowCheck.styles":"a5qAi","./GroupSpacer":"3Oub4","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1FMwI":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsRowGlobalClassNames", function () {
  return DetailsRowGlobalClassNames;
});
_parcelHelpers.export(exports, "DEFAULT_CELL_STYLE_PROPS", function () {
  return DEFAULT_CELL_STYLE_PROPS;
});
_parcelHelpers.export(exports, "DEFAULT_ROW_HEIGHTS", function () {
  return DEFAULT_ROW_HEIGHTS;
});
_parcelHelpers.export(exports, "getDetailsRowStyles", function () {
  return getDetailsRowStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var DetailsRowGlobalClassNames = {
  root: 'ms-DetailsRow',
  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.
  compact: 'ms-DetailsList--Compact',
  cell: 'ms-DetailsRow-cell',
  cellAnimation: 'ms-DetailsRow-cellAnimation',
  cellCheck: 'ms-DetailsRow-cellCheck',
  check: 'ms-DetailsRow-check',
  cellMeasurer: 'ms-DetailsRow-cellMeasurer',
  listCellFirstChild: 'ms-List-cell:first-child',
  isContentUnselectable: 'is-contentUnselectable',
  isSelected: 'is-selected',
  isCheckVisible: 'is-check-visible',
  isRowHeader: 'is-row-header',
  fields: 'ms-DetailsRow-fields'
};
var IsFocusableSelector = "[data-is-focusable='true']";
var DEFAULT_CELL_STYLE_PROPS = {
  cellLeftPadding: 12,
  cellRightPadding: 8,
  cellExtraRightPadding: 24
};
var DEFAULT_ROW_HEIGHTS = {
  rowHeight: 42,
  compactRowHeight: 32
};
// Constant values
var values = _tslib.__assign(_tslib.__assign({}, DEFAULT_ROW_HEIGHTS), {
  rowVerticalPadding: 11,
  compactRowVerticalPadding: 6
});
var getDetailsRowStyles = function (props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
  var theme = props.theme, isSelected = props.isSelected, canSelect = props.canSelect, droppingClassName = props.droppingClassName, anySelected = props.anySelected, isCheckVisible = props.isCheckVisible, checkboxCellClassName = props.checkboxCellClassName, compact = props.compact, className = props.className, _o = props.cellStyleProps, cellStyleProps = _o === void 0 ? DEFAULT_CELL_STYLE_PROPS : _o, enableUpdateAnimations = props.enableUpdateAnimations;
  var palette = theme.palette, fonts = theme.fonts;
  var neutralPrimary = palette.neutralPrimary, white = palette.white, neutralSecondary = palette.neutralSecondary, neutralLighter = palette.neutralLighter, neutralLight = palette.neutralLight, neutralDark = palette.neutralDark, neutralQuaternaryAlt = palette.neutralQuaternaryAlt;
  var focusBorder = theme.semanticColors.focusBorder;
  var classNames = _Styling.getGlobalClassNames(DetailsRowGlobalClassNames, theme);
  var colors = {
    // Default
    defaultHeaderText: neutralPrimary,
    defaultMetaText: neutralSecondary,
    defaultBackground: white,
    // Default Hover
    defaultHoverHeaderText: neutralDark,
    defaultHoverMetaText: neutralPrimary,
    defaultHoverBackground: neutralLighter,
    // Selected
    selectedHeaderText: neutralDark,
    selectedMetaText: neutralPrimary,
    selectedBackground: neutralLight,
    // Selected Hover
    selectedHoverHeaderText: neutralDark,
    selectedHoverMetaText: neutralPrimary,
    selectedHoverBackground: neutralQuaternaryAlt,
    // Focus
    focusHeaderText: neutralDark,
    focusMetaText: neutralPrimary,
    focusBackground: neutralLight,
    focusHoverBackground: neutralQuaternaryAlt
  };
  var rowHighContrastFocus = {
    top: 2,
    right: 2,
    bottom: 2,
    left: 2
  };
  // Selected row styles
  var selectedStyles = [_Styling.getFocusStyle(theme, {
    inset: -1,
    borderColor: focusBorder,
    outlineColor: white,
    highContrastStyle: rowHighContrastFocus
  }), classNames.isSelected, {
    color: colors.selectedMetaText,
    background: colors.selectedBackground,
    borderBottom: "1px solid " + white,
    selectors: (_a = {
      '&:before': {
        position: 'absolute',
        display: 'block',
        top: -1,
        height: 1,
        bottom: 0,
        left: 0,
        right: 0,
        content: '',
        borderTop: "1px solid " + white
      },
      // Selected State hover
      '&:hover': {
        background: colors.selectedHoverBackground,
        color: colors.selectedHoverMetaText,
        selectors: (_b = {}, // Selected State hover meta cell
        _b["." + classNames.cell + " " + _Styling.HighContrastSelector] = {
          color: 'HighlightText',
          selectors: {
            '> a': {
              color: 'HighlightText'
            }
          }
        }, // Selected State hover Header cell
        _b["." + classNames.isRowHeader] = {
          color: colors.selectedHoverHeaderText,
          selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
            color: 'HighlightText'
          }, _c)
        }, // Ensure high-contrast mode overrides default hover background
        _b[_Styling.HighContrastSelector] = {
          background: 'Highlight'
        }, _b)
      },
      // Focus state
      '&:focus': {
        background: colors.focusBackground,
        selectors: (_d = {}, // Selected State hover meta cell
        _d["." + classNames.cell] = {
          color: colors.focusMetaText,
          selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
            color: 'HighlightText',
            selectors: {
              '> a': {
                color: 'HighlightText'
              }
            }
          }, _e)
        }, // Row header cell
        _d["." + classNames.isRowHeader] = {
          color: colors.focusHeaderText,
          selectors: (_f = {}, _f[_Styling.HighContrastSelector] = {
            color: 'HighlightText'
          }, _f)
        }, // Ensure high-contrast mode overrides default focus background
        _d[_Styling.HighContrastSelector] = {
          background: 'Highlight'
        }, _d)
      }
    }, _a[_Styling.HighContrastSelector] = _tslib.__assign(_tslib.__assign({
      background: 'Highlight',
      color: 'HighlightText'
    }, _Styling.getHighContrastNoAdjustStyle()), {
      selectors: {
        a: {
          color: 'HighlightText'
        }
      }
    }), // Focus and hover state
    _a['&:focus:hover'] = {
      background: colors.focusHoverBackground
    }, _a)
  }];
  var cannotSelectStyles = [classNames.isContentUnselectable, {
    userSelect: 'none',
    cursor: 'default'
  }];
  var rootCompactStyles = {
    minHeight: values.compactRowHeight,
    border: 0
  };
  var cellCompactStyles = {
    minHeight: values.compactRowHeight,
    paddingTop: values.compactRowVerticalPadding,
    paddingBottom: values.compactRowVerticalPadding,
    paddingLeft: cellStyleProps.cellLeftPadding + "px"
  };
  var defaultCellStyles = [_Styling.getFocusStyle(theme, {
    inset: -1
  }), classNames.cell, {
    display: 'inline-block',
    position: 'relative',
    boxSizing: 'border-box',
    minHeight: values.rowHeight,
    verticalAlign: 'top',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    paddingTop: values.rowVerticalPadding,
    paddingBottom: values.rowVerticalPadding,
    paddingLeft: cellStyleProps.cellLeftPadding + "px",
    selectors: (_g = {
      '& > button': {
        maxWidth: '100%'
      }
    }, _g[IsFocusableSelector] = _Styling.getFocusStyle(theme, {
      inset: -1,
      borderColor: neutralSecondary,
      outlineColor: white
    }), _g)
  }, isSelected && ({
    selectors: (_h = {}, _h[_Styling.HighContrastSelector] = _tslib.__assign(_tslib.__assign({
      background: 'Highlight',
      color: 'HighlightText'
    }, _Styling.getHighContrastNoAdjustStyle()), {
      selectors: {
        a: {
          color: 'HighlightText'
        }
      }
    }), _h)
  }), compact && cellCompactStyles];
  return {
    root: [classNames.root, _Styling.AnimationClassNames.fadeIn400, droppingClassName, theme.fonts.small, isCheckVisible && classNames.isCheckVisible, _Styling.getFocusStyle(theme, {
      borderColor: focusBorder,
      outlineColor: white
    }), {
      borderBottom: "1px solid " + neutralLighter,
      background: colors.defaultBackground,
      color: colors.defaultMetaText,
      // This ensures that the row always tries to consume is minimum width and does not compress.
      display: 'inline-flex',
      minWidth: '100%',
      minHeight: values.rowHeight,
      whiteSpace: 'nowrap',
      padding: 0,
      boxSizing: 'border-box',
      verticalAlign: 'top',
      textAlign: 'left',
      selectors: (_j = {}, _j["." + classNames.listCellFirstChild + " &:before"] = {
        display: 'none'
      }, _j['&:hover'] = {
        background: colors.defaultHoverBackground,
        color: colors.defaultHoverMetaText,
        selectors: (_k = {}, _k["." + classNames.isRowHeader] = {
          color: colors.defaultHoverHeaderText
        }, _k)
      }, _j["&:hover ." + classNames.check] = {
        opacity: 1
      }, _j["." + _Utilities.IsFocusVisibleClassName + " &:focus ." + classNames.check] = {
        opacity: 1
      }, _j['.ms-GroupSpacer'] = {
        flexShrink: 0,
        flexGrow: 0
      }, _j)
    }, isSelected && selectedStyles, !canSelect && cannotSelectStyles, compact && rootCompactStyles, className],
    cellUnpadded: {
      paddingRight: cellStyleProps.cellRightPadding + "px"
    },
    cellPadded: {
      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding + "px",
      selectors: (_l = {}, _l["&." + classNames.cellCheck] = {
        paddingRight: 0
      }, _l)
    },
    cell: defaultCellStyles,
    cellAnimation: enableUpdateAnimations && _Styling.AnimationStyles.slideLeftIn40,
    cellMeasurer: [classNames.cellMeasurer, {
      overflow: 'visible',
      whiteSpace: 'nowrap'
    }],
    checkCell: [defaultCellStyles, classNames.cellCheck, checkboxCellClassName, {
      padding: 0,
      // Ensure that the check cell covers the top border of the cell.
      // This ensures the click target does not leave a spot which would
      // cause other items to be deselected.
      paddingTop: 1,
      marginTop: -1,
      flexShrink: 0
    }],
    checkCover: {
      position: 'absolute',
      top: -1,
      left: 0,
      bottom: 0,
      right: 0,
      display: anySelected ? 'block' : 'none'
    },
    fields: [classNames.fields, {
      display: 'flex',
      alignItems: 'stretch'
    }],
    isRowHeader: [classNames.isRowHeader, {
      color: colors.defaultHeaderText,
      fontSize: fonts.medium.fontSize
    }, isSelected && ({
      color: colors.selectedHeaderText,
      fontWeight: _Styling.FontWeights.semibold,
      selectors: (_m = {}, _m[_Styling.HighContrastSelector] = {
        color: 'HighlightText'
      }, _m)
    })],
    isMultiline: [defaultCellStyles, {
      whiteSpace: 'normal',
      wordBreak: 'break-word',
      textOverflow: 'clip'
    }],
    check: [classNames.check]
  };
};

},{"tslib":"6ZIET","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"a5qAi":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CHECK_CELL_WIDTH", function () {
  return CHECK_CELL_WIDTH;
});
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var _DetailsRowStyles = require('./DetailsRow.styles');
var _DetailsHeaderStyles = require('./DetailsHeader.styles');
var _componentsCheckCheckStyles = require('../../components/Check/Check.styles');
var GlobalClassNames = {
  root: 'ms-DetailsRow-check',
  isDisabled: 'ms-DetailsRow-check--isDisabled',
  isHeader: 'ms-DetailsRow-check--isHeader'
};
var CHECK_CELL_WIDTH = 48;
var getStyles = function (props) {
  var theme = props.theme, className = props.className, isHeader = props.isHeader, selected = props.selected, anySelected = props.anySelected, canSelect = props.canSelect, compact = props.compact, isVisible = props.isVisible;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var rowHeight = _DetailsRowStyles.DEFAULT_ROW_HEIGHTS.rowHeight, compactRowHeight = _DetailsRowStyles.DEFAULT_ROW_HEIGHTS.compactRowHeight;
  var height = isHeader ? _DetailsHeaderStyles.HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;
  var isCheckVisible = isVisible || selected || anySelected;
  return {
    root: [classNames.root, className],
    check: [!canSelect && classNames.isDisabled, isHeader && classNames.isHeader, _Styling.getFocusStyle(theme), theme.fonts.small, _componentsCheckCheckStyles.CheckGlobalClassNames.checkHost, {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: 'default',
      boxSizing: 'border-box',
      verticalAlign: 'top',
      background: 'none',
      backgroundColor: 'transparent',
      border: 'none',
      opacity: isCheckVisible ? 1 : 0,
      height: height,
      width: CHECK_CELL_WIDTH,
      padding: 0,
      margin: 0
    }],
    isDisabled: []
  };
};

},{"../../Styling":"5q33X","./DetailsRow.styles":"1FMwI","./DetailsHeader.styles":"1psIN","../../components/Check/Check.styles":"yED6T","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1psIN":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "HEADER_HEIGHT", function () {
  return HEADER_HEIGHT;
});
_parcelHelpers.export(exports, "getCellStyles", function () {
  return getCellStyles;
});
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var _DetailsRowStyles = require('./DetailsRow.styles');
var _GroupedListGroupSpacer = require('../GroupedList/GroupSpacer');
var GlobalClassNames = {
  tooltipHost: 'ms-TooltipHost',
  root: 'ms-DetailsHeader',
  cell: 'ms-DetailsHeader-cell',
  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',
  collapseButton: 'ms-DetailsHeader-collapseButton',
  isCollapsed: 'is-collapsed',
  isAllSelected: 'is-allSelected',
  isSelectAllHidden: 'is-selectAllHidden',
  isResizingColumn: 'is-resizingColumn',
  cellSizer: 'ms-DetailsHeader-cellSizer',
  isResizing: 'is-resizing',
  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',
  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',
  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',
  cellTitle: 'ms-DetailsHeader-cellTitle',
  cellName: 'ms-DetailsHeader-cellName',
  filterChevron: 'ms-DetailsHeader-filterChevron',
  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',
  checkTooltip: 'ms-DetailsHeader-checkTooltip',
  check: 'ms-DetailsHeader-check'
};
var HEADER_HEIGHT = 42;
var getCellStyles = function (props) {
  var theme = props.theme, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _a;
  var semanticColors = theme.semanticColors;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return [classNames.cell, _Styling.getFocusStyle(theme), {
    color: semanticColors.bodyText,
    position: 'relative',
    display: 'inline-block',
    boxSizing: 'border-box',
    padding: "0 " + cellStyleProps.cellRightPadding + "px 0 " + cellStyleProps.cellLeftPadding + "px",
    lineHeight: 'inherit',
    margin: '0',
    height: HEADER_HEIGHT,
    verticalAlign: 'top',
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    textAlign: 'left'
  }];
};
var getStyles = function (props) {
  var _a, _b, _c, _d;
  var theme = props.theme, className = props.className, isAllSelected = props.isAllSelected, isResizingColumn = props.isResizingColumn, isSizing = props.isSizing, isAllCollapsed = props.isAllCollapsed, _e = props.cellStyleProps, cellStyleProps = _e === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _e;
  var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var colors = {
    iconForegroundColor: semanticColors.bodySubtext,
    headerForegroundColor: semanticColors.bodyText,
    headerBackgroundColor: semanticColors.bodyBackground,
    resizerColor: palette.neutralTertiaryAlt
  };
  var cellSizerFadeInStyles = {
    opacity: 1,
    transition: 'opacity 0.3s linear'
  };
  var cellStyles = getCellStyles(props);
  return {
    root: [classNames.root, fonts.small, {
      display: 'inline-block',
      background: colors.headerBackgroundColor,
      position: 'relative',
      minWidth: '100%',
      verticalAlign: 'top',
      height: HEADER_HEIGHT,
      lineHeight: HEADER_HEIGHT,
      whiteSpace: 'nowrap',
      boxSizing: 'content-box',
      paddingBottom: '1px',
      paddingTop: '16px',
      borderBottom: "1px solid " + semanticColors.bodyDivider,
      cursor: 'default',
      userSelect: 'none',
      selectors: (_a = {}, _a["&:hover ." + classNames.check] = {
        opacity: 1
      }, _a["& ." + classNames.tooltipHost + " ." + classNames.checkTooltip] = {
        display: 'block'
      }, _a)
    }, isAllSelected && classNames.isAllSelected, isResizingColumn && classNames.isResizingColumn, className],
    check: [classNames.check, {
      height: HEADER_HEIGHT
    }, {
      selectors: (_b = {}, _b["." + _Utilities.IsFocusVisibleClassName + " &:focus"] = {
        opacity: 1
      }, _b)
    }],
    cellWrapperPadded: {
      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding
    },
    cellIsCheck: [cellStyles, classNames.cellIsCheck, {
      position: 'relative',
      padding: 0,
      margin: 0,
      display: 'inline-flex',
      alignItems: 'center',
      border: 'none'
    }, isAllSelected && ({
      opacity: 1
    })],
    cellIsGroupExpander: [cellStyles, {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: fonts.small.fontSize,
      padding: 0,
      border: 'none',
      width: _GroupedListGroupSpacer.SPACER_WIDTH,
      color: palette.neutralSecondary,
      selectors: {
        ':hover': {
          backgroundColor: palette.neutralLighter
        },
        ':active': {
          backgroundColor: palette.neutralLight
        }
      }
    }],
    cellIsActionable: {
      selectors: {
        ':hover': {
          color: semanticColors.bodyText,
          background: semanticColors.listHeaderBackgroundHovered
        },
        ':active': {
          background: semanticColors.listHeaderBackgroundPressed
        }
      }
    },
    cellIsEmpty: {
      textOverflow: 'clip'
    },
    cellSizer: [classNames.cellSizer, _Styling.focusClear(), {
      display: 'inline-block',
      position: 'relative',
      cursor: 'ew-resize',
      bottom: 0,
      top: 0,
      overflow: 'hidden',
      height: 'inherit',
      background: 'transparent',
      zIndex: 1,
      width: 16,
      selectors: (_c = {
        ':after': {
          content: '""',
          position: 'absolute',
          top: 0,
          bottom: 0,
          width: 1,
          background: colors.resizerColor,
          opacity: 0,
          left: '50%'
        },
        ':focus:after': cellSizerFadeInStyles,
        ':hover:after': cellSizerFadeInStyles
      }, _c["&." + classNames.isResizing + ":after"] = [cellSizerFadeInStyles, {
        boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)'
      }], _c)
    }],
    cellIsResizing: classNames.isResizing,
    cellSizerStart: {
      margin: '0 -8px'
    },
    cellSizerEnd: {
      margin: 0,
      marginLeft: -16
    },
    collapseButton: [classNames.collapseButton, {
      transformOrigin: '50% 50%',
      transition: 'transform .1s linear'
    }, isAllCollapsed ? [classNames.isCollapsed, {
      transform: 'rotate(0deg)'
    }] : {
      transform: _Utilities.getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)'
    }],
    checkTooltip: classNames.checkTooltip,
    sizingOverlay: isSizing && ({
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      cursor: 'ew-resize',
      background: 'rgba(255, 255, 255, 0)',
      selectors: (_d = {}, _d[_Styling.HighContrastSelector] = _tslib.__assign({
        background: 'transparent'
      }, _Styling.getHighContrastNoAdjustStyle()), _d)
    }),
    accessibleLabel: _Styling.hiddenContentStyle,
    dropHintCircleStyle: [classNames.dropHintCircleStyle, {
      display: 'inline-block',
      visibility: 'hidden',
      position: 'absolute',
      bottom: 0,
      height: 9,
      width: 9,
      borderRadius: '50%',
      marginLeft: -5,
      top: 34,
      overflow: 'visible',
      zIndex: 10,
      border: "1px solid " + palette.themePrimary,
      background: palette.white
    }],
    dropHintCaretStyle: [classNames.dropHintCaretStyle, {
      display: 'none',
      position: 'absolute',
      top: -28,
      left: -6.5,
      fontSize: fonts.medium.fontSize,
      color: palette.themePrimary,
      overflow: 'visible',
      zIndex: 10
    }],
    dropHintLineStyle: [classNames.dropHintLineStyle, {
      display: 'none',
      position: 'absolute',
      bottom: 0,
      top: 0,
      overflow: 'hidden',
      height: 42,
      width: 1,
      background: palette.themePrimary,
      zIndex: 10
    }],
    dropHintStyle: {
      display: 'inline-block',
      position: 'absolute'
    }
  };
};

},{"tslib":"6ZIET","../../Styling":"5q33X","../../Utilities":"1439N","./DetailsRow.styles":"1FMwI","../GroupedList/GroupSpacer":"3Oub4","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"yED6T":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CheckGlobalClassNames", function () {
  return CheckGlobalClassNames;
});
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var CheckGlobalClassNames = {
  root: 'ms-Check',
  circle: 'ms-Check-circle',
  check: 'ms-Check-check',
  /** Must be manually applied to the parent element of the check.*/
  checkHost: 'ms-Check-checkHost'
};
var getStyles = function (props) {
  var _a, _b, _c, _d, _e;
  // eslint-disable-next-line deprecation/deprecation
  var _f = props.height, height = _f === void 0 ? props.checkBoxHeight || '18px' : _f, checked = props.checked, className = props.className, theme = props.theme;
  var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
  var isRTL = _Utilities.getRTL(theme);
  var classNames = _Styling.getGlobalClassNames(CheckGlobalClassNames, theme);
  var sharedCircleCheck = {
    fontSize: height,
    position: 'absolute',
    left: 0,
    top: 0,
    width: height,
    height: height,
    textAlign: 'center',
    verticalAlign: 'middle'
  };
  return {
    root: [classNames.root, fonts.medium, {
      // lineHeight currently needs to be a string to output without 'px'
      lineHeight: '1',
      width: height,
      height: height,
      verticalAlign: 'top',
      position: 'relative',
      userSelect: 'none',
      selectors: (_a = {
        ':before': {
          content: '""',
          position: 'absolute',
          top: '1px',
          right: '1px',
          bottom: '1px',
          left: '1px',
          borderRadius: '50%',
          opacity: 1,
          background: semanticColors.bodyBackground
        }
      }, _a["." + classNames.checkHost + ":hover &, ." + classNames.checkHost + ":focus &, &:hover, &:focus"] = {
        opacity: 1
      }, _a)
    }, checked && ['is-checked', {
      selectors: {
        ':before': {
          background: palette.themePrimary,
          opacity: 1,
          selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
            background: 'Window'
          }, _b)
        }
      }
    }], className],
    circle: [classNames.circle, sharedCircleCheck, {
      color: palette.neutralSecondary,
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
        color: 'WindowText'
      }, _c)
    }, checked && ({
      color: palette.white
    })],
    check: [classNames.check, sharedCircleCheck, {
      opacity: 0,
      color: palette.neutralSecondary,
      fontSize: _Styling.IconFontSizes.medium,
      left: isRTL ? '-0.5px' : '.5px',
      selectors: (_d = {
        ':hover': {
          opacity: 1
        }
      }, _d[_Styling.HighContrastSelector] = _tslib.__assign({}, _Styling.getHighContrastNoAdjustStyle()), _d)
    }, checked && ({
      opacity: 1,
      color: palette.white,
      fontWeight: 900,
      selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
        border: 'none',
        color: 'WindowText'
      }, _e)
    })],
    checkHost: classNames.checkHost
  };
};

},{"tslib":"6ZIET","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4SELr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupHeaderBase", function () {
  return GroupHeaderBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Selection = require('../../Selection');
var _Check = require('../../Check');
var _Icon = require('../../Icon');
var _GroupSpacer = require('./GroupSpacer');
var _Spinner = require('../../Spinner');
var _DetailsListDetailsRowCheckStyles = require('../DetailsList/DetailsRowCheck.styles');
var getClassNames = _Utilities.classNamesFunction();
var GroupHeaderBase = /** @class*/
(function (_super) {
  _tslib.__extends(GroupHeaderBase, _super);
  function GroupHeaderBase(props) {
    var _this = _super.call(this, props) || this;
    _this._toggleCollapse = function () {
      var _a = _this.props, group = _a.group, onToggleCollapse = _a.onToggleCollapse, isGroupLoading = _a.isGroupLoading;
      var isCollapsed = _this.state.isCollapsed;
      var newCollapsed = !isCollapsed;
      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);
      _this.setState({
        isCollapsed: newCollapsed,
        isLoadingVisible: newLoadingVisible
      });
      if (onToggleCollapse) {
        onToggleCollapse(group);
      }
    };
    _this._onKeyUp = function (ev) {
      var _a = _this.props, group = _a.group, onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;
      if (onGroupHeaderKeyUp) {
        onGroupHeaderKeyUp(ev, group);
      }
      if (!ev.defaultPrevented) {
        // eslint-disable-next-line deprecation/deprecation
        var shouldOpen = _this.state.isCollapsed && ev.which === _Utilities.getRTLSafeKeyCode(_Utilities.KeyCodes.right, _this.props.theme);
        // eslint-disable-next-line deprecation/deprecation
        var shouldClose = !_this.state.isCollapsed && ev.which === _Utilities.getRTLSafeKeyCode(_Utilities.KeyCodes.left, _this.props.theme);
        if (shouldClose || shouldOpen) {
          _this._toggleCollapse();
          ev.stopPropagation();
          ev.preventDefault();
        }
      }
    };
    _this._onToggleClick = function (ev) {
      _this._toggleCollapse();
      ev.stopPropagation();
      ev.preventDefault();
    };
    _this._onToggleSelectGroupClick = function (ev) {
      var _a = _this.props, onToggleSelectGroup = _a.onToggleSelectGroup, group = _a.group;
      if (onToggleSelectGroup) {
        onToggleSelectGroup(group);
      }
      ev.preventDefault();
      ev.stopPropagation();
    };
    _this._onHeaderClick = function () {
      var _a = _this.props, group = _a.group, onGroupHeaderClick = _a.onGroupHeaderClick, onToggleSelectGroup = _a.onToggleSelectGroup;
      if (onGroupHeaderClick) {
        onGroupHeaderClick(group);
      } else if (onToggleSelectGroup) {
        onToggleSelectGroup(group);
      }
    };
    _this._onRenderTitle = function (props) {
      var group = props.group, ariaColSpan = props.ariaColSpan;
      if (!group) {
        return null;
      }
      return _react.createElement("div", {
        className: _this._classNames.title,
        id: _this._id,
        role: "gridcell",
        "aria-colspan": ariaColSpan
      }, _react.createElement("span", null, group.name), _react.createElement("span", {
        className: _this._classNames.headerCount
      }, "(", group.count, group.hasMoreData && '+', ")"));
    };
    _this._id = _Utilities.getId('GroupHeader');
    _this.state = {
      isCollapsed: _this.props.group && _this.props.group.isCollapsed,
      isLoadingVisible: false
    };
    return _this;
  }
  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {
    if (nextProps.group) {
      var newCollapsed = nextProps.group.isCollapsed;
      var isGroupLoading = nextProps.isGroupLoading;
      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);
      return _tslib.__assign(_tslib.__assign({}, previousState), {
        isCollapsed: newCollapsed || false,
        isLoadingVisible: newLoadingVisible || false
      });
    }
    return previousState;
  };
  GroupHeaderBase.prototype.render = function () {
    var _a = this.props, group = _a.group, _b = _a.groupLevel, groupLevel = _b === void 0 ? 0 : _b, viewport = _a.viewport, selectionMode = _a.selectionMode, loadingText = _a.loadingText, // eslint-disable-next-line deprecation/deprecation
    _c = _a.isSelected, // eslint-disable-next-line deprecation/deprecation
    isSelected = _c === void 0 ? false : _c, _d = _a.selected, selected = _d === void 0 ? false : _d, indentWidth = _a.indentWidth, _e = _a.onRenderTitle, onRenderTitle = _e === void 0 ? this._onRenderTitle : _e, onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox, _f = _a.isCollapsedGroupSelectVisible, isCollapsedGroupSelectVisible = _f === void 0 ? true : _f, expandButtonProps = _a.expandButtonProps, expandButtonIcon = _a.expandButtonIcon, selectAllButtonProps = _a.selectAllButtonProps, theme = _a.theme, styles = _a.styles, className = _a.className, compact = _a.compact, ariaPosInSet = _a.ariaPosInSet, ariaSetSize = _a.ariaSetSize, ariaRowIndex = _a.ariaRowIndex, useFastIcons = _a.useFastIcons;
    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;
    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? _Utilities.composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;
    var _g = this.state, isCollapsed = _g.isCollapsed, isLoadingVisible = _g.isLoadingVisible;
    var canSelectGroup = selectionMode === _Selection.SelectionMode.multiple;
    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));
    var currentlySelected = selected || isSelected;
    var isRTL = _Utilities.getRTL(theme);
    this._classNames = getClassNames(styles, {
      theme: theme,
      className: className,
      selected: currentlySelected,
      isCollapsed: isCollapsed,
      compact: compact
    });
    if (!group) {
      return null;
    }
    return _react.createElement("div", {
      className: this._classNames.root,
      style: viewport ? {
        minWidth: viewport.width
      } : {},
      onClick: this._onHeaderClick,
      role: "row",
      "aria-setsize": ariaSetSize,
      "aria-posinset": ariaPosInSet,
      "aria-rowindex": ariaRowIndex,
      "data-is-focusable": true,
      onKeyUp: this._onKeyUp,
      "aria-label": group.ariaLabel,
      "aria-labelledby": group.ariaLabel ? undefined : this._id,
      "aria-expanded": !this.state.isCollapsed,
      "aria-selected": canSelectGroup ? currentlySelected : undefined,
      "aria-level": groupLevel + 1
    }, _react.createElement("div", {
      className: this._classNames.groupHeaderContainer,
      role: "presentation"
    }, isSelectionCheckVisible ? _react.createElement("div", {
      role: "gridcell"
    }, _react.createElement("button", _tslib.__assign({
      "data-is-focusable": false,
      type: "button",
      className: this._classNames.check,
      role: "checkbox",
      id: this._id + "-check",
      "aria-checked": currentlySelected,
      "aria-labelledby": this._id + "-check " + this._id,
      "data-selection-toggle": true,
      onClick: this._onToggleSelectGroupClick
    }, selectAllButtonProps), onRenderCheckbox({
      checked: currentlySelected,
      theme: theme
    }, onRenderCheckbox))) : // To make the group header align properly with the column headers, this spacer
    // needs to be the same width as the check cell in the column header.
    selectionMode !== _Selection.SelectionMode.none && _react.createElement(_GroupSpacer.GroupSpacer, {
      indentWidth: _DetailsListDetailsRowCheckStyles.CHECK_CELL_WIDTH,
      count: 1
    }), _react.createElement(_GroupSpacer.GroupSpacer, {
      indentWidth: indentWidth,
      count: groupLevel
    }), _react.createElement("div", {
      className: this._classNames.dropIcon,
      role: "presentation"
    }, _react.createElement(_Icon.Icon, {
      iconName: "Tag"
    })), _react.createElement("div", {
      role: "gridcell"
    }, _react.createElement("button", _tslib.__assign({
      "data-is-focusable": false,
      type: "button",
      className: this._classNames.expand,
      onClick: this._onToggleClick,
      "aria-expanded": !this.state.isCollapsed
    }, expandButtonProps), _react.createElement(_Icon.Icon, {
      className: this._classNames.expandIsCollapsed,
      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')
    }))), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && _react.createElement(_Spinner.Spinner, {
      label: loadingText
    })));
  };
  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {
    return _react.createElement(_Check.Check, {
      checked: checkboxProps.checked
    });
  };
  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {
    return _react.createElement(FastCheck, {
      theme: checkboxProps.theme,
      checked: checkboxProps.checked
    });
  };
  GroupHeaderBase.defaultProps = {
    expandButtonProps: {
      'aria-label': 'expand collapse group'
    }
  };
  return GroupHeaderBase;
})(_react.Component);
var FastCheck = _react.memo(function (props) {
  return _react.createElement(_Check.Check, {
    theme: props.theme,
    checked: props.checked,
    className: props.className,
    useFastIcons: true
  });
});

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../../Selection":"3dSNL","../../Check":"4KgEH","../../Icon":"7upjA","./GroupSpacer":"3Oub4","../../Spinner":"5puVh","../DetailsList/DetailsRowCheck.styles":"a5qAi","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4KgEH":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsCheckIndex = require('./components/Check/index');
_parcelHelpers.exportAll(_componentsCheckIndex, exports);

},{"./components/Check/index":"41G74","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"41G74":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Check = require('./Check');
_parcelHelpers.exportAll(_Check, exports);
var _CheckBase = require('./Check.base');
_parcelHelpers.exportAll(_CheckBase, exports);
var _CheckTypes = require('./Check.types');
_parcelHelpers.exportAll(_CheckTypes, exports);

},{"./Check":"1G3ti","./Check.base":"RAtVt","./Check.types":"44V3F","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1G3ti":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Check", function () {
  return Check;
});
var _Utilities = require('../../Utilities');
var _CheckBase = require('./Check.base');
var _CheckStyles = require('./Check.styles');
var Check = _Utilities.styled(_CheckBase.CheckBase, _CheckStyles.getStyles, undefined, {
  scope: 'Check'
}, true);

},{"../../Utilities":"1439N","./Check.base":"RAtVt","./Check.styles":"yED6T","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"RAtVt":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "CheckBase", function () {
  return CheckBase;
});
var _react = require('react');
var _Icon = require('../../Icon');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var CheckBase = _react.forwardRef(function (props, ref) {
  var _a = props.checked, checked = _a === void 0 ? false : _a, className = props.className, theme = props.theme, styles = props.styles, _b = props.useFastIcons, useFastIcons = _b === void 0 ? true : _b;
  var classNames = getClassNames(styles, {
    theme: theme,
    className: className,
    checked: checked
  });
  var IconComponent = useFastIcons ? _Icon.FontIcon : _Icon.Icon;
  return _react.createElement("div", {
    className: classNames.root,
    ref: ref
  }, _react.createElement(IconComponent, {
    iconName: "CircleRing",
    className: classNames.circle
  }), _react.createElement(IconComponent, {
    iconName: "StatusCircleCheckmark",
    className: classNames.check
  }));
});
CheckBase.displayName = 'CheckBase';

},{"react":"4g1R3","../../Icon":"7upjA","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"44V3F":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5puVh":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsSpinnerIndex = require('./components/Spinner/index');
_parcelHelpers.exportAll(_componentsSpinnerIndex, exports);

},{"./components/Spinner/index":"52wda","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"52wda":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Spinner = require('./Spinner');
_parcelHelpers.exportAll(_Spinner, exports);
var _SpinnerBase = require('./Spinner.base');
_parcelHelpers.exportAll(_SpinnerBase, exports);
var _SpinnerTypes = require('./Spinner.types');
_parcelHelpers.exportAll(_SpinnerTypes, exports);

},{"./Spinner":"thSqi","./Spinner.base":"6u21k","./Spinner.types":"28MDF","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"thSqi":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Spinner", function () {
  return Spinner;
});
var _Utilities = require('../../Utilities');
var _SpinnerBase = require('./Spinner.base');
var _SpinnerStyles = require('./Spinner.styles');
var Spinner = _Utilities.styled(_SpinnerBase.SpinnerBase, _SpinnerStyles.getStyles, undefined, {
  scope: 'Spinner'
});

},{"../../Utilities":"1439N","./Spinner.base":"6u21k","./Spinner.styles":"4GHZ2","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6u21k":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "SpinnerBase", function () {
  return SpinnerBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _SpinnerTypes = require('./Spinner.types');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var SpinnerBase = /** @class*/
(function (_super) {
  _tslib.__extends(SpinnerBase, _super);
  function SpinnerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SpinnerBase.prototype.render = function () {
    // eslint-disable-next-line deprecation/deprecation
    var _a = this.props, type = _a.type, size = _a.size, ariaLabel = _a.ariaLabel, ariaLive = _a.ariaLive, styles = _a.styles, label = _a.label, theme = _a.theme, className = _a.className, labelPosition = _a.labelPosition;
    var statusMessage = ariaLabel;
    var nativeProps = _Utilities.getNativeProps(this.props, _Utilities.divProperties, ['size']);
    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the
    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType
    // finally goes away we should delete this.
    var styleSize = size;
    if (styleSize === undefined && type !== undefined) {
      // eslint-disable-next-line deprecation/deprecation
      styleSize = type === _SpinnerTypes.SpinnerType.large ? _SpinnerTypes.SpinnerSize.large : _SpinnerTypes.SpinnerSize.medium;
    }
    var classNames = getClassNames(styles, {
      theme: theme,
      size: styleSize,
      className: className,
      labelPosition: labelPosition
    });
    return _react.createElement("div", _tslib.__assign({}, nativeProps, {
      className: classNames.root
    }), _react.createElement("div", {
      className: classNames.circle
    }), label && _react.createElement("div", {
      className: classNames.label
    }, label), statusMessage && _react.createElement("div", {
      role: "status",
      "aria-live": ariaLive
    }, _react.createElement(_Utilities.DelayedRender, null, _react.createElement("div", {
      className: classNames.screenReaderText
    }, statusMessage))));
  };
  SpinnerBase.defaultProps = {
    size: _SpinnerTypes.SpinnerSize.medium,
    ariaLive: 'polite',
    labelPosition: 'bottom'
  };
  return SpinnerBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","./Spinner.types":"28MDF","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"28MDF":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "SpinnerSize", function () {
  return SpinnerSize;
});
_parcelHelpers.export(exports, "SpinnerType", function () {
  return SpinnerType;
});
var SpinnerSize;
(function (SpinnerSize) {
  /**
  * 12px Spinner diameter
  */
  SpinnerSize[SpinnerSize["xSmall"] = 0] = "xSmall";
  /**
  * 16px Spinner diameter
  */
  SpinnerSize[SpinnerSize["small"] = 1] = "small";
  /**
  * 20px Spinner diameter
  */
  SpinnerSize[SpinnerSize["medium"] = 2] = "medium";
  /**
  * 28px Spinner diameter
  */
  SpinnerSize[SpinnerSize["large"] = 3] = "large";
})(SpinnerSize || (SpinnerSize = {}));
var SpinnerType;
(function (SpinnerType) {
  /**
  * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \>= 2.0.0.
  */
  SpinnerType[SpinnerType["normal"] = 0] = "normal";
  /**
  * @deprecated Use `SpinnerSize.large` instead. Will be removed at \>= 2.0.0.
  */
  SpinnerType[SpinnerType["large"] = 1] = "large";
})(SpinnerType || (SpinnerType = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4GHZ2":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _SpinnerTypes = require('./Spinner.types');
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var GlobalClassNames = {
  root: 'ms-Spinner',
  circle: 'ms-Spinner-circle',
  label: 'ms-Spinner-label'
};
var spinAnimation = _Utilities.memoizeFunction(function () {
  return _Styling.keyframes({
    '0%': {
      transform: 'rotate(0deg)'
    },
    '100%': {
      transform: 'rotate(360deg)'
    }
  });
});
var getStyles = function (props) {
  var _a;
  var theme = props.theme, size = props.size, className = props.className, labelPosition = props.labelPosition;
  var palette = theme.palette;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center'
    }, labelPosition === 'top' && ({
      flexDirection: 'column-reverse'
    }), labelPosition === 'right' && ({
      flexDirection: 'row'
    }), labelPosition === 'left' && ({
      flexDirection: 'row-reverse'
    }), className],
    circle: [classNames.circle, {
      boxSizing: 'border-box',
      borderRadius: '50%',
      border: '1.5px solid ' + palette.themeLight,
      borderTopColor: palette.themePrimary,
      animationName: spinAnimation(),
      animationDuration: '1.3s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
        borderTopColor: 'Highlight'
      }, _Styling.getHighContrastNoAdjustStyle()), _a)
    }, size === _SpinnerTypes.SpinnerSize.xSmall && ['ms-Spinner--xSmall', {
      width: 12,
      height: 12
    }], size === _SpinnerTypes.SpinnerSize.small && ['ms-Spinner--small', {
      width: 16,
      height: 16
    }], size === _SpinnerTypes.SpinnerSize.medium && ['ms-Spinner--medium', {
      width: 20,
      height: 20
    }], size === _SpinnerTypes.SpinnerSize.large && ['ms-Spinner--large', {
      width: 28,
      height: 28
    }]],
    label: [classNames.label, theme.fonts.small, {
      color: palette.themePrimary,
      margin: '8px 0 0',
      textAlign: 'center'
    }, labelPosition === 'top' && ({
      margin: '0 0 8px'
    }), labelPosition === 'right' && ({
      margin: '0 0 0 8px'
    }), labelPosition === 'left' && ({
      margin: '0 8px 0 0'
    })],
    screenReaderText: _Styling.hiddenContentStyle
  };
};

},{"tslib":"6ZIET","./Spinner.types":"28MDF","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2QYe8":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupShowAll", function () {
  return GroupShowAll;
});
var _Utilities = require('../../Utilities');
var _GroupShowAllStyles = require('./GroupShowAll.styles');
var _GroupShowAllBase = require('./GroupShowAll.base');
var GroupShowAll = _Utilities.styled(_GroupShowAllBase.GroupShowAllBase, _GroupShowAllStyles.getStyles, undefined, {
  scope: 'GroupShowAll'
});

},{"../../Utilities":"1439N","./GroupShowAll.styles":"4mrkx","./GroupShowAll.base":"721Cc","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4mrkx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var GlobalClassNames = {
  root: 'ms-GroupShowAll',
  link: 'ms-Link'
};
var getStyles = function (props) {
  var _a;
  var theme = props.theme;
  var fonts = theme.fonts;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, {
      position: 'relative',
      padding: '10px 84px',
      cursor: 'pointer',
      selectors: (_a = {}, _a["." + classNames.link] = {
        fontSize: fonts.small.fontSize
      }, _a)
    }]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"721Cc":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupShowAllBase", function () {
  return GroupShowAllBase;
});
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Link = require('../../Link');
var _GroupSpacer = require('./GroupSpacer');
var getClassNames = _Utilities.classNamesFunction();
var GroupShowAllBase = function (props) {
  var group = props.group, groupLevel = props.groupLevel, _a = props.showAllLinkText, showAllLinkText = _a === void 0 ? 'Show All' : _a, styles = props.styles, theme = props.theme, onToggleSummarize = props.onToggleSummarize;
  var classNames = getClassNames(styles, {
    theme: theme
  });
  var memoizedOnClick = _react.useCallback(function (ev) {
    onToggleSummarize(group);
    ev.stopPropagation();
    ev.preventDefault();
  }, [onToggleSummarize, group]);
  if (group) {
    return _react.createElement("div", {
      className: classNames.root
    }, _react.createElement(_GroupSpacer.GroupSpacer, {
      count: groupLevel
    }), _react.createElement(_Link.Link, {
      onClick: memoizedOnClick
    }, showAllLinkText));
  }
  return null;
};

},{"react":"4g1R3","../../Utilities":"1439N","../../Link":"ilTOr","./GroupSpacer":"3Oub4","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"ilTOr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
require('./version');
var _componentsLinkIndex = require('./components/Link/index');
_parcelHelpers.exportAll(_componentsLinkIndex, exports);

},{"./version":"4GWvB","./components/Link/index":"3ZN4P","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3ZN4P":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Link = require('./Link');
_parcelHelpers.exportAll(_Link, exports);
var _LinkBase = require('./Link.base');
_parcelHelpers.exportAll(_LinkBase, exports);
var _LinkTypes = require('./Link.types');
_parcelHelpers.exportAll(_LinkTypes, exports);

},{"./Link":"5ytcg","./Link.base":"4kRYH","./Link.types":"47nyz","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5ytcg":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Link", function () {
  return Link;
});
var _fluentuiUtilities = require('@fluentui/utilities');
var _LinkBase = require('./Link.base');
var _LinkStyles = require('./Link.styles');
var Link = _fluentuiUtilities.styled(_LinkBase.LinkBase, _LinkStyles.getStyles, undefined, {
  scope: 'Link'
});

},{"@fluentui/utilities":"2AuOe","./Link.base":"4kRYH","./Link.styles":"4v9cx","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4kRYH":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LinkBase", function () {
  return LinkBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _useLink = require('./useLink');
var LinkBase = _react.forwardRef(function (props, ref) {
  var _a = _useLink.useLink(props, ref), slots = _a.slots, slotProps = _a.slotProps;
  return _react.createElement(slots.root, _tslib.__assign({}, slotProps.root));
});
LinkBase.displayName = 'LinkBase';

},{"tslib":"6ZIET","react":"4g1R3","./useLink":"1CzLx","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1CzLx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "useLink", function () {
  return useLink;
});
var _tslib = require("tslib");
var _react = require('react');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var _fluentuiUtilities = require('@fluentui/utilities');
var getClassNames = _fluentuiUtilities.classNamesFunction();
var useLink = function (props, forwardedRef) {
  var as = props.as, className = props.className, disabled = props.disabled, href = props.href, onClick = props.onClick, styles = props.styles, theme = props.theme, underline = props.underline;
  var rootRef = _react.useRef(null);
  var mergedRootRefs = _fluentuiReactHooks.useMergedRefs(rootRef, forwardedRef);
  useComponentRef(props, rootRef);
  _fluentuiUtilities.useFocusRects(rootRef);
  var classNames = getClassNames(styles, {
    className: className,
    isButton: !href,
    isDisabled: disabled,
    isUnderlined: underline,
    theme: theme
  });
  var _onClick = function (ev) {
    if (disabled) {
      ev.preventDefault();
    } else if (onClick) {
      onClick(ev);
    }
  };
  var rootType = as ? as : href ? 'a' : 'button';
  var state = {};
  var slots = {
    root: rootType
  };
  var slotProps = {
    root: _tslib.__assign(_tslib.__assign({}, adjustPropsForRootType(rootType, props)), {
      'aria-disabled': disabled,
      className: classNames.root,
      onClick: _onClick,
      ref: mergedRootRefs
    })
  };
  return {
    state: state,
    slots: slots,
    slotProps: slotProps
  };
};
var useComponentRef = function (props, link) {
  _react.useImperativeHandle(props.componentRef, function () {
    return {
      focus: function () {
        if (link.current) {
          link.current.focus();
        }
      }
    };
  }, [link]);
};
var adjustPropsForRootType = function (RootType, props) {
  // Deconstruct the props so we remove props like `as`, `theme` and `styles`
  // as those will always be removed. We also take some props that are optional
  // based on the RootType.
  var as = props.as, disabled = props.disabled, target = props.target, href = props.href, theme = props.theme, getStyles = props.getStyles, styles = props.styles, componentRef = props.componentRef, underline = props.underline, restProps = _tslib.__rest(props, ["as", "disabled", "target", "href", "theme", "getStyles", "styles", "componentRef", "underline"]);
  // RootType will be a string if we're dealing with an html component
  if (typeof RootType === 'string') {
    // Remove the disabled prop for anchor elements
    if (RootType === 'a') {
      return _tslib.__assign({
        target: target,
        href: disabled ? undefined : href
      }, restProps);
    }
    // Add the type='button' prop for button elements
    if (RootType === 'button') {
      return _tslib.__assign({
        type: 'button',
        disabled: disabled
      }, restProps);
    }
    // Remove the target and href props for all other non anchor elements
    return _tslib.__assign(_tslib.__assign({}, restProps), {
      disabled: disabled
    });
  }
  // Retain all props except 'as' for ReactComponents
  return _tslib.__assign({
    target: target,
    href: href,
    disabled: disabled
  }, restProps);
};

},{"tslib":"6ZIET","react":"4g1R3","@fluentui/react-hooks":"1pHwU","@fluentui/utilities":"2AuOe","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4v9cx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _fluentuiStyleUtilities = require('@fluentui/style-utilities');
var GlobalClassNames = {
  root: 'ms-Link'
};
var getStyles = function (props) {
  var _a, _b, _c, _d, _e, _f;
  var className = props.className, isButton = props.isButton, isDisabled = props.isDisabled, isUnderlined = props.isUnderlined, theme = props.theme;
  var semanticColors = theme.semanticColors;
  // Tokens
  var linkColor = semanticColors.link;
  var linkInteractedColor = semanticColors.linkHovered;
  var linkDisabledColor = semanticColors.disabledText;
  var focusBorderColor = semanticColors.focusBorder;
  var classNames = _fluentuiStyleUtilities.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, theme.fonts.medium, {
      color: linkColor,
      outline: 'none',
      fontSize: 'inherit',
      fontWeight: 'inherit',
      textDecoration: isUnderlined ? 'underline' : 'none',
      selectors: (_a = {
        '.ms-Fabric--isFocusVisible &:focus': {
          // Can't use getFocusStyle because it doesn't support wrapping links
          // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543
          // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines
          // and helps the focus rect avoid getting clipped.
          boxShadow: "0 0 0 1px " + focusBorderColor + " inset",
          outline: "1px auto " + focusBorderColor,
          selectors: (_b = {}, _b[_fluentuiStyleUtilities.HighContrastSelector] = {
            outline: '1px solid WindowText'
          }, _b)
        }
      }, _a[_fluentuiStyleUtilities.HighContrastSelector] = {
        // For IE high contrast mode
        borderBottom: 'none'
      }, _a)
    }, isButton && ({
      background: 'none',
      backgroundColor: 'transparent',
      border: 'none',
      cursor: 'pointer',
      display: 'inline',
      margin: 0,
      overflow: 'inherit',
      padding: 0,
      textAlign: 'left',
      textOverflow: 'inherit',
      userSelect: 'text',
      borderBottom: '1px solid transparent',
      selectors: (_c = {}, _c[_fluentuiStyleUtilities.HighContrastSelector] = {
        color: 'LinkText',
        forcedColorAdjust: 'none'
      }, _c)
    }), !isButton && ({
      selectors: (_d = {}, _d[_fluentuiStyleUtilities.HighContrastSelector] = {
        // This is mainly for MessageBar, which sets MsHighContrastAdjust: none by default
        MsHighContrastAdjust: 'auto',
        forcedColorAdjust: 'auto'
      }, _d)
    }), isDisabled && ['is-disabled', {
      color: linkDisabledColor,
      cursor: 'default'
    }, {
      selectors: {
        '&:link, &:visited': {
          pointerEvents: 'none'
        }
      }
    }], !isDisabled && ({
      selectors: {
        '&:active, &:hover, &:active:hover': {
          color: linkInteractedColor,
          textDecoration: 'underline',
          selectors: (_e = {}, _e[_fluentuiStyleUtilities.HighContrastSelector] = {
            color: 'LinkText'
          }, _e)
        },
        '&:focus': {
          color: linkColor,
          selectors: (_f = {}, _f[_fluentuiStyleUtilities.HighContrastSelector] = {
            color: 'LinkText'
          }, _f)
        }
      }
    }), classNames.root, className]
  };
};

},{"@fluentui/style-utilities":"J5I0J","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"47nyz":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"x8OH1":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupFooter", function () {
  return GroupFooter;
});
var _Utilities = require('../../Utilities');
var _GroupFooterStyles = require('./GroupFooter.styles');
var _GroupFooterBase = require('./GroupFooter.base');
var GroupFooter = _Utilities.styled(_GroupFooterBase.GroupFooterBase, _GroupFooterStyles.getStyles, undefined, {
  scope: 'GroupFooter'
});

},{"../../Utilities":"1439N","./GroupFooter.styles":"7tlzX","./GroupFooter.base":"3d1gC","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7tlzX":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var GlobalClassNames = {
  root: 'ms-groupFooter'
};
var getStyles = function (props) {
  var theme = props.theme, className = props.className;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [theme.fonts.medium, classNames.root, {
      position: 'relative',
      padding: '5px 38px'
    }, className]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3d1gC":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GroupFooterBase", function () {
  return GroupFooterBase;
});
var _react = require('react');
var _Utilities = require('../../Utilities');
var _GroupSpacer = require('./GroupSpacer');
var getClassNames = _Utilities.classNamesFunction();
var GroupFooterBase = function (props) {
  var group = props.group, groupLevel = props.groupLevel, footerText = props.footerText, indentWidth = props.indentWidth, styles = props.styles, theme = props.theme;
  var classNames = getClassNames(styles, {
    theme: theme
  });
  if (group && footerText) {
    return _react.createElement("div", {
      className: classNames.root
    }, _react.createElement(_GroupSpacer.GroupSpacer, {
      indentWidth: indentWidth,
      count: groupLevel
    }), footerText);
  }
  return null;
};

},{"react":"4g1R3","../../Utilities":"1439N","./GroupSpacer":"3Oub4","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5uzfZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsListIndex = require('./components/List/index');
_parcelHelpers.exportAll(_componentsListIndex, exports);

},{"./components/List/index":"2rVJl","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2rVJl":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _List = require('./List');
_parcelHelpers.exportAll(_List, exports);
var _ListTypes = require('./List.types');
_parcelHelpers.exportAll(_ListTypes, exports);

},{"./List":"5pyvp","./List.types":"6YDDx","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5pyvp":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "List", function () {
  return List;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _ListTypes = require('./List.types');
var RESIZE_DELAY = 16;
var MIN_SCROLL_UPDATE_DELAY = 100;
var MAX_SCROLL_UPDATE_DELAY = 500;
var IDLE_DEBOUNCE_DELAY = 200;
// The amount of time to wait before declaring that the list isn't scrolling
var DONE_SCROLLING_WAIT = 500;
var DEFAULT_ITEMS_PER_PAGE = 10;
var DEFAULT_PAGE_HEIGHT = 30;
var DEFAULT_RENDERED_WINDOWS_BEHIND = 2;
var DEFAULT_RENDERED_WINDOWS_AHEAD = 2;
var PAGE_KEY_PREFIX = 'page-';
var SPACER_KEY_PREFIX = 'spacer-';
var EMPTY_RECT = {
  top: -1,
  bottom: -1,
  left: -1,
  right: -1,
  width: 0,
  height: 0
};
// Naming expensive measures so that they're named in profiles.
var _measurePageRect = function (element) {
  return element.getBoundingClientRect();
};
var _measureSurfaceRect = _measurePageRect;
var _measureScrollRect = _measurePageRect;
/**
* The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback
* if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if
* provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.
*
* The algorithm for rendering pages works like this:
*
* 1. Predict visible pages based on "current measure data" (page heights, surface position, visible window)
* 2. If changes are necessary, apply changes (add/remove pages)
* 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect
* 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously
*
* Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that
* we can avoid re-measuring during operations that should not alter heights, like scrolling.
*
* To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,
* List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.
* And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.
*
* However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,
* or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion
* number, which we associate with cached measurements and use to determine if a remeasure should occur.
*/
var List = /** @class*/
(function (_super) {
  _tslib.__extends(List, _super);
  function List(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    _this._surface = _react.createRef();
    _this._pageRefs = {};
    _this._getDerivedStateFromProps = function (nextProps, previousState) {
      if (nextProps.items !== _this.props.items || nextProps.renderCount !== _this.props.renderCount || nextProps.startIndex !== _this.props.startIndex || nextProps.version !== _this.props.version) {
        // We have received new items so we want to make sure that initially we only render a single window to
        // fill the currently visible rect, and then later render additional windows.
        _this._resetRequiredWindows();
        _this._requiredRect = null;
        _this._measureVersion++;
        _this._invalidatePageCache();
        return _this._updatePages(nextProps, previousState);
      }
      return previousState;
    };
    _this._onRenderRoot = function (props) {
      var rootRef = props.rootRef, surfaceElement = props.surfaceElement, divProps = props.divProps;
      return _react.createElement("div", _tslib.__assign({
        ref: rootRef
      }, divProps), surfaceElement);
    };
    _this._onRenderSurface = function (props) {
      var surfaceRef = props.surfaceRef, pageElements = props.pageElements, divProps = props.divProps;
      return _react.createElement("div", _tslib.__assign({
        ref: surfaceRef
      }, divProps), pageElements);
    };
    _this._onRenderPage = function (pageProps, defaultRender) {
      var _a = _this.props, onRenderCell = _a.onRenderCell, role = _a.role;
      var _b = pageProps.page, _c = _b.items, items = _c === void 0 ? [] : _c, startIndex = _b.startIndex, divProps = _tslib.__rest(pageProps, ["page"]);
      // only assign list item role if no role is assigned
      var cellRole = role === undefined ? 'listitem' : 'presentation';
      var cells = [];
      for (var i = 0; i < items.length; i++) {
        var index = startIndex + i;
        var item = items[i];
        var itemKey = _this.props.getKey ? _this.props.getKey(item, index) : item && item.key;
        if (itemKey === null || itemKey === undefined) {
          itemKey = index;
        }
        cells.push(_react.createElement("div", {
          role: cellRole,
          className: 'ms-List-cell',
          key: itemKey,
          "data-list-index": index,
          "data-automationid": "ListCell"
        }, onRenderCell && onRenderCell(item, index, !_this.props.ignoreScrollingState ? _this.state.isScrolling : undefined)));
      }
      return _react.createElement("div", _tslib.__assign({}, divProps), cells);
    };
    _Utilities.initializeComponentRef(_this);
    _this.state = {
      pages: [],
      isScrolling: false,
      getDerivedStateFromProps: _this._getDerivedStateFromProps
    };
    _this._async = new _Utilities.Async(_this);
    _this._events = new _Utilities.EventGroup(_this);
    _this._estimatedPageHeight = 0;
    _this._totalEstimates = 0;
    _this._requiredWindowsAhead = 0;
    _this._requiredWindowsBehind = 0;
    // Track the measure version for everything.
    _this._measureVersion = 0;
    // Ensure that scrolls are lazy updated.
    _this._onAsyncScroll = _this._async.debounce(_this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {
      leading: false,
      maxWait: MAX_SCROLL_UPDATE_DELAY
    });
    _this._onAsyncIdle = _this._async.debounce(_this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {
      leading: false
    });
    _this._onAsyncResize = _this._async.debounce(_this._onAsyncResize, RESIZE_DELAY, {
      leading: false
    });
    _this._onScrollingDone = _this._async.debounce(_this._onScrollingDone, DONE_SCROLLING_WAIT, {
      leading: false
    });
    _this._cachedPageHeights = {};
    _this._estimatedPageHeight = 0;
    _this._focusedIndex = -1;
    _this._pageCache = {};
    return _this;
  }
  List.getDerivedStateFromProps = function (nextProps, previousState) {
    return previousState.getDerivedStateFromProps(nextProps, previousState);
  };
  Object.defineProperty(List.prototype, "pageRefs", {
    get: function () {
      return this._pageRefs;
    },
    enumerable: false,
    configurable: true
  });
  /**
  * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback
  * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.
  *
  * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling
  * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.
  *
  * @param index - Index of item to scroll to
  * @param measureItem - Optional callback to measure the height of an individual item
  * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling
  */
  List.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {
    if (scrollToMode === void 0) {
      scrollToMode = _ListTypes.ScrollToMode.auto;
    }
    var startIndex = this.props.startIndex;
    var renderCount = this._getRenderCount();
    var endIndex = startIndex + renderCount;
    var allowedRect = this._allowedRect;
    var scrollTop = 0;
    var itemsPerPage = 1;
    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {
      var pageSpecification = this._getPageSpecification(itemIndex, allowedRect);
      var pageHeight = pageSpecification.height;
      itemsPerPage = pageSpecification.itemCount;
      var requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;
      if (requestedIndexIsInPage) {
        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in
        // just the given item, otherwise we'll only bring the page into view
        if (measureItem && this._scrollElement) {
          var scrollRect = _measureScrollRect(this._scrollElement);
          var scrollWindow = {
            top: this._scrollElement.scrollTop,
            bottom: this._scrollElement.scrollTop + scrollRect.height
          };
          // Adjust for actual item position within page
          var itemPositionWithinPage = index - itemIndex;
          for (var itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {
            scrollTop += measureItem(itemIndex + itemIndexInPage);
          }
          var scrollBottom = scrollTop + measureItem(index);
          // If scrollToMode is set to something other than auto, we always want to
          // scroll the item into a specific position on the page.
          switch (scrollToMode) {
            case _ListTypes.ScrollToMode.top:
              this._scrollElement.scrollTop = scrollTop;
              return;
            case _ListTypes.ScrollToMode.bottom:
              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;
              return;
            case _ListTypes.ScrollToMode.center:
              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;
              return;
            case _ListTypes.ScrollToMode.auto:
            default:
              break;
          }
          var itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;
          if (itemIsFullyVisible) {
            // Item is already visible, do nothing.
            return;
          }
          var itemIsPartiallyAbove = scrollTop < scrollWindow.top;
          var itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;
          if (itemIsPartiallyAbove) {} else if (itemIsPartiallyBelow) {
            // Adjust scrollTop position to just bring in the element
            // .------.  - scrollTop
            // |      |
            // | .------.
            // '-|----' | - scrollWindow.bottom
            // | Item |
            // '------' - scrollBottom
            scrollTop = scrollBottom - scrollRect.height;
          }
        }
        if (this._scrollElement) {
          this._scrollElement.scrollTop = scrollTop;
        }
        return;
      }
      scrollTop += pageHeight;
    }
  };
  List.prototype.getStartItemIndexInView = function (measureItem) {
    var pages = this.state.pages || [];
    for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {
      var page = pages_1[_i];
      var isPageVisible = !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;
      if (isPageVisible) {
        if (!measureItem) {
          var rowHeight = Math.floor(page.height / page.itemCount);
          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);
        } else {
          var totalRowHeight = 0;
          for (var itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {
            var rowHeight = measureItem(itemIndex);
            if (page.top + totalRowHeight <= this._scrollTop && this._scrollTop < page.top + totalRowHeight + rowHeight) {
              return itemIndex;
            } else {
              totalRowHeight += rowHeight;
            }
          }
        }
      }
    }
    return 0;
  };
  List.prototype.componentDidMount = function () {
    this.setState(this._updatePages(this.props, this.state));
    this._measureVersion++;
    this._scrollElement = _Utilities.findScrollableParent(this._root.current);
    this._events.on(window, 'resize', this._onAsyncResize);
    if (this._root.current) {
      this._events.on(this._root.current, 'focus', this._onFocus, true);
    }
    if (this._scrollElement) {
      this._events.on(this._scrollElement, 'scroll', this._onScroll);
      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);
    }
  };
  List.prototype.componentDidUpdate = function () {
    // Multiple updates may have been queued, so the callback will reflect all of them.
    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.
    var finalProps = this.props;
    var finalState = this.state;
    // If we weren't provided with the page height, measure the pages
    if (!finalProps.getPageHeight) {
      // If measured version is invalid since we've updated the DOM
      var heightsChanged = this._updatePageMeasurements(finalState.pages);
      // On first render, we should re-measure so that we don't get a visual glitch.
      if (heightsChanged) {
        this._materializedRect = null;
        if (!this._hasCompletedFirstRender) {
          this._hasCompletedFirstRender = true;
          this.setState(this._updatePages(finalProps, finalState));
        } else {
          this._onAsyncScroll();
        }
      } else {
        // Enqueue an idle bump.
        this._onAsyncIdle();
      }
    } else {
      // Enqueue an idle bump
      this._onAsyncIdle();
    }
    // Notify the caller that rendering the new pages has completed
    if (finalProps.onPagesUpdated) {
      finalProps.onPagesUpdated(finalState.pages);
    }
  };
  List.prototype.componentWillUnmount = function () {
    this._async.dispose();
    this._events.dispose();
    delete this._scrollElement;
  };
  List.prototype.shouldComponentUpdate = function (newProps, newState) {
    var oldPages = this.state.pages;
    var newPages = newState.pages;
    var shouldComponentUpdate = false;
    // Update if the page stops scrolling
    if (!newState.isScrolling && this.state.isScrolling) {
      return true;
    }
    if (newProps.version !== this.props.version) {
      return true;
    }
    if (newProps.items === this.props.items && oldPages.length === newPages.length) {
      for (var i = 0; i < oldPages.length; i++) {
        var oldPage = oldPages[i];
        var newPage = newPages[i];
        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {
          shouldComponentUpdate = true;
          break;
        }
      }
    } else {
      shouldComponentUpdate = true;
    }
    return shouldComponentUpdate;
  };
  List.prototype.forceUpdate = function () {
    this._invalidatePageCache();
    // Ensure that when the list is force updated we update the pages first before render.
    this._updateRenderRects(this.props, this.state, true);
    this.setState(this._updatePages(this.props, this.state));
    this._measureVersion++;
    _super.prototype.forceUpdate.call(this);
  };
  /**
  * Get the current height the list and it's pages.
  */
  List.prototype.getTotalListHeight = function () {
    return this._surfaceRect.height;
  };
  List.prototype.render = function () {
    var _a = this.props, className = _a.className, _b = _a.role, role = _b === void 0 ? 'list' : _b, onRenderSurface = _a.onRenderSurface, onRenderRoot = _a.onRenderRoot;
    var _c = this.state.pages, pages = _c === void 0 ? [] : _c;
    var pageElements = [];
    var divProps = _Utilities.getNativeProps(this.props, _Utilities.divProperties);
    for (var _i = 0, pages_2 = pages; _i < pages_2.length; _i++) {
      var page = pages_2[_i];
      pageElements.push(this._renderPage(page));
    }
    var finalOnRenderSurface = onRenderSurface ? _Utilities.composeRenderFunction(onRenderSurface, this._onRenderSurface) : this._onRenderSurface;
    var finalOnRenderRoot = onRenderRoot ? _Utilities.composeRenderFunction(onRenderRoot, this._onRenderRoot) : this._onRenderRoot;
    return finalOnRenderRoot({
      rootRef: this._root,
      pages: pages,
      surfaceElement: finalOnRenderSurface({
        surfaceRef: this._surface,
        pages: pages,
        pageElements: pageElements,
        divProps: {
          role: 'presentation',
          className: 'ms-List-surface'
        }
      }),
      divProps: _tslib.__assign(_tslib.__assign({}, divProps), {
        className: _Utilities.css('ms-List', className),
        role: pageElements.length > 0 ? role : undefined
      })
    });
  };
  List.prototype._shouldVirtualize = function (props) {
    if (props === void 0) {
      props = this.props;
    }
    var onShouldVirtualize = props.onShouldVirtualize;
    return !onShouldVirtualize || onShouldVirtualize(props);
  };
  /**
  * when props.items change or forceUpdate called, throw away cached pages
  */
  List.prototype._invalidatePageCache = function () {
    this._pageCache = {};
  };
  List.prototype._renderPage = function (page) {
    var _this = this;
    var usePageCache = this.props.usePageCache;
    var cachedPage;
    // if usePageCache is set and cached page element can be found, just return cached page
    if (usePageCache) {
      cachedPage = this._pageCache[page.key];
      if (cachedPage && cachedPage.pageElement) {
        return cachedPage.pageElement;
      }
    }
    var pageStyle = this._getPageStyle(page);
    var _a = this.props.onRenderPage, onRenderPage = _a === void 0 ? this._onRenderPage : _a;
    var pageElement = onRenderPage({
      page: page,
      className: 'ms-List-page',
      key: page.key,
      ref: function (newRef) {
        _this._pageRefs[page.key] = newRef;
      },
      style: pageStyle,
      role: 'presentation'
    }, this._onRenderPage);
    // cache the first page for now since it is re-rendered a lot times unnecessarily.
    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.
    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the
    // first 30 items did not change, we still re-rendered all of them in this props.items change.
    if (usePageCache && page.startIndex === 0) {
      this._pageCache[page.key] = {
        page: page,
        pageElement: pageElement
      };
    }
    return pageElement;
  };
  /** Generate the style object for the page.*/
  List.prototype._getPageStyle = function (page) {
    var getPageStyle = this.props.getPageStyle;
    return _tslib.__assign(_tslib.__assign({}, getPageStyle ? getPageStyle(page) : {}), !page.items ? {
      height: page.height
    } : {});
  };
  /** Track the last item index focused so that we ensure we keep it rendered.*/
  List.prototype._onFocus = function (ev) {
    var target = ev.target;
    while (target !== this._surface.current) {
      var indexString = target.getAttribute('data-list-index');
      if (indexString) {
        this._focusedIndex = Number(indexString);
        break;
      }
      target = _Utilities.getParent(target);
    }
  };
  /**
  * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,
  * we will call onAsyncIdle which will reset it back to it's correct value.
  */
  List.prototype._onScroll = function () {
    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {
      this.setState({
        isScrolling: true
      });
    }
    this._resetRequiredWindows();
    this._onScrollingDone();
  };
  List.prototype._resetRequiredWindows = function () {
    this._requiredWindowsAhead = 0;
    this._requiredWindowsBehind = 0;
  };
  /**
  * Debounced method to asynchronously update the visible region on a scroll event.
  */
  List.prototype._onAsyncScroll = function () {
    this._updateRenderRects(this.props, this.state);
    // Only update pages when the visible rect falls outside of the materialized rect.
    if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {
      this.setState(this._updatePages(this.props, this.state));
    } else {}
  };
  /**
  * This is an async debounced method that will try and increment the windows we render. If we can increment
  * either, we increase the amount we render and re-evaluate.
  */
  List.prototype._onAsyncIdle = function () {
    var _a = this.props, renderedWindowsAhead = _a.renderedWindowsAhead, renderedWindowsBehind = _a.renderedWindowsBehind;
    var _b = this, requiredWindowsAhead = _b._requiredWindowsAhead, requiredWindowsBehind = _b._requiredWindowsBehind;
    var windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);
    var windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);
    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {
      // console.log('idling', windowsBehind, windowsAhead);
      this._requiredWindowsAhead = windowsAhead;
      this._requiredWindowsBehind = windowsBehind;
      this._updateRenderRects(this.props, this.state);
      this.setState(this._updatePages(this.props, this.state));
    }
    if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {
      // Async increment on next tick.
      this._onAsyncIdle();
    }
  };
  /**
  * Function to call when the list is done scrolling.
  * This function is debounced.
  */
  List.prototype._onScrollingDone = function () {
    if (!this.props.ignoreScrollingState) {
      this.setState({
        isScrolling: false
      });
    }
  };
  List.prototype._onAsyncResize = function () {
    this.forceUpdate();
  };
  List.prototype._updatePages = function (nextProps, previousState) {
    // console.log('updating pages');
    if (!this._requiredRect) {
      this._updateRenderRects(nextProps, previousState);
    }
    var newListState = this._buildPages(nextProps, previousState);
    var oldListPages = previousState.pages;
    this._notifyPageChanges(oldListPages, newListState.pages, this.props);
    return _tslib.__assign(_tslib.__assign({}, previousState), newListState);
  };
  /**
  * Notify consumers that the rendered pages have changed
  * @param oldPages - The old pages
  * @param newPages - The new pages
  * @param props - The props to use
  */
  List.prototype._notifyPageChanges = function (oldPages, newPages, props) {
    var onPageAdded = props.onPageAdded, onPageRemoved = props.onPageRemoved;
    if (onPageAdded || onPageRemoved) {
      var renderedIndexes = {};
      for (var _i = 0, oldPages_1 = oldPages; _i < oldPages_1.length; _i++) {
        var page = oldPages_1[_i];
        if (page.items) {
          renderedIndexes[page.startIndex] = page;
        }
      }
      for (var _a = 0, newPages_1 = newPages; _a < newPages_1.length; _a++) {
        var page = newPages_1[_a];
        if (page.items) {
          if (!renderedIndexes[page.startIndex]) {
            this._onPageAdded(page);
          } else {
            delete renderedIndexes[page.startIndex];
          }
        }
      }
      for (var index in renderedIndexes) {
        if (renderedIndexes.hasOwnProperty(index)) {
          this._onPageRemoved(renderedIndexes[index]);
        }
      }
    }
  };
  List.prototype._updatePageMeasurements = function (pages) {
    var heightChanged = false;
    // when not in virtualize mode, we render all the items without page measurement
    if (!this._shouldVirtualize()) {
      return heightChanged;
    }
    for (var i = 0; i < pages.length; i++) {
      var page = pages[i];
      if (page.items) {
        heightChanged = this._measurePage(page) || heightChanged;
      }
    }
    return heightChanged;
  };
  /**
  * Given a page, measure its dimensions, update cache.
  * @returns True if the height has changed.
  */
  List.prototype._measurePage = function (page) {
    var hasChangedHeight = false;
    var pageElement = this._pageRefs[page.key];
    var cachedHeight = this._cachedPageHeights[page.startIndex];
    // console.log('   * measure attempt', page.startIndex, cachedHeight);
    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {
      var newClientRect = {
        width: pageElement.clientWidth,
        height: pageElement.clientHeight
      };
      if (newClientRect.height || newClientRect.width) {
        hasChangedHeight = page.height !== newClientRect.height;
        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);
        page.height = newClientRect.height;
        this._cachedPageHeights[page.startIndex] = {
          height: newClientRect.height,
          measureVersion: this._measureVersion
        };
        this._estimatedPageHeight = Math.round((this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1));
        this._totalEstimates++;
      }
    }
    return hasChangedHeight;
  };
  /** Called when a page has been added to the DOM.*/
  List.prototype._onPageAdded = function (page) {
    var onPageAdded = this.props.onPageAdded;
    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));
    if (onPageAdded) {
      onPageAdded(page);
    }
  };
  /** Called when a page has been removed from the DOM.*/
  List.prototype._onPageRemoved = function (page) {
    var onPageRemoved = this.props.onPageRemoved;
    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));
    if (onPageRemoved) {
      onPageRemoved(page);
    }
  };
  /** Build up the pages that should be rendered.*/
  List.prototype._buildPages = function (props, state) {
    var renderCount = props.renderCount;
    var items = props.items, startIndex = props.startIndex, getPageHeight = props.getPageHeight;
    renderCount = this._getRenderCount(props);
    var materializedRect = _tslib.__assign({}, EMPTY_RECT);
    var pages = [];
    var itemsPerPage = 1;
    var pageTop = 0;
    var currentSpacer = null;
    var focusedIndex = this._focusedIndex;
    var endIndex = startIndex + renderCount;
    var shouldVirtualize = this._shouldVirtualize(props);
    // First render is very important to track; when we render cells, we have no idea of estimated page height.
    // So we should default to rendering only the first page so that we can get information.
    // However if the user provides a measure function, let's just assume they know the right heights.
    var isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;
    var allowedRect = this._allowedRect;
    var _loop_1 = function (itemIndex) {
      var pageSpecification = this_1._getPageSpecification(itemIndex, allowedRect);
      var pageHeight = pageSpecification.height;
      var pageData = pageSpecification.data;
      var key = pageSpecification.key;
      itemsPerPage = pageSpecification.itemCount;
      var pageBottom = pageTop + pageHeight - 1;
      var isPageRendered = _Utilities.findIndex(state.pages, function (page) {
        return !!page.items && page.startIndex === itemIndex;
      }) > -1;
      var isPageInAllowedRange = !allowedRect || pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom;
      var isPageInRequiredRange = !this_1._requiredRect || pageBottom >= this_1._requiredRect.top && pageTop <= this_1._requiredRect.bottom;
      var isPageVisible = !isFirstRender && (isPageInRequiredRange || isPageInAllowedRange && isPageRendered) || !shouldVirtualize;
      var isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;
      var isFirstPage = itemIndex === startIndex;
      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +
      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);
      // Only render whats visible, focused, or first page,
      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages
      if (isPageVisible || isPageFocused || isFirstPage) {
        if (currentSpacer) {
          pages.push(currentSpacer);
          currentSpacer = null;
        }
        var itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);
        var newPage = this_1._createPage(key, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);
        newPage.top = pageTop;
        newPage.height = pageHeight;
        if (this_1._visibleRect && this_1._visibleRect.bottom) {
          newPage.isVisible = pageBottom >= this_1._visibleRect.top && pageTop <= this_1._visibleRect.bottom;
        }
        pages.push(newPage);
        if (isPageInRequiredRange && this_1._allowedRect) {
          _mergeRect(materializedRect, {
            top: pageTop,
            bottom: pageBottom,
            height: pageHeight,
            left: allowedRect.left,
            right: allowedRect.right,
            width: allowedRect.width
          });
        }
      } else {
        if (!currentSpacer) {
          currentSpacer = this_1._createPage(SPACER_KEY_PREFIX + itemIndex, undefined, itemIndex, 0, undefined, pageData, true);
        }
        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;
        currentSpacer.itemCount += itemsPerPage;
      }
      pageTop += pageBottom - pageTop + 1;
      // in virtualized mode, we render need to render first page then break and measure,
      // otherwise, we render all items without measurement to make rendering fast
      if (isFirstRender && shouldVirtualize) {
        return "break";
      }
    };
    var this_1 = this;
    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {
      var state_1 = _loop_1(itemIndex);
      if (state_1 === "break") break;
    }
    if (currentSpacer) {
      currentSpacer.key = SPACER_KEY_PREFIX + 'end';
      pages.push(currentSpacer);
    }
    this._materializedRect = materializedRect;
    // console.log('materialized: ', materializedRect);
    return _tslib.__assign(_tslib.__assign({}, state), {
      pages: pages,
      measureVersion: this._measureVersion
    });
  };
  List.prototype._getPageSpecification = function (itemIndex, visibleRect) {
    var getPageSpecification = this.props.getPageSpecification;
    if (getPageSpecification) {
      var pageData = getPageSpecification(itemIndex, visibleRect);
      var _a = pageData.itemCount, itemCount = _a === void 0 ? this._getItemCountForPage(itemIndex, visibleRect) : _a;
      var _b = pageData.height, height = _b === void 0 ? this._getPageHeight(itemIndex, visibleRect, itemCount) : _b;
      return {
        itemCount: itemCount,
        height: height,
        data: pageData.data,
        key: pageData.key
      };
    } else {
      var itemCount = this._getItemCountForPage(itemIndex, visibleRect);
      return {
        itemCount: itemCount,
        height: this._getPageHeight(itemIndex, visibleRect, itemCount)
      };
    }
  };
  /**
  * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to
  * cached height, or estimated page height, or default page height.
  */
  List.prototype._getPageHeight = function (itemIndex, visibleRect, itemsPerPage) {
    if (this.props.getPageHeight) {
      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);
    } else {
      var cachedHeight = this._cachedPageHeights[itemIndex];
      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;
    }
  };
  List.prototype._getItemCountForPage = function (itemIndex, visibileRect) {
    var itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;
    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;
  };
  List.prototype._createPage = function (pageKey, items, startIndex, count, style, data, isSpacer) {
    if (startIndex === void 0) {
      startIndex = -1;
    }
    if (count === void 0) {
      count = items ? items.length : 0;
    }
    if (style === void 0) {
      style = {};
    }
    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;
    var cachedPage = this._pageCache[pageKey];
    if (cachedPage && cachedPage.page) {
      return cachedPage.page;
    }
    return {
      key: pageKey,
      startIndex: startIndex,
      itemCount: count,
      items: items,
      style: style,
      top: 0,
      height: 0,
      data: data,
      isSpacer: isSpacer || false
    };
  };
  List.prototype._getRenderCount = function (props) {
    var _a = props || this.props, items = _a.items, startIndex = _a.startIndex, renderCount = _a.renderCount;
    return renderCount === undefined ? items ? items.length - startIndex : 0 : renderCount;
  };
  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list.*/
  List.prototype._updateRenderRects = function (props, state, forceUpdate) {
    var renderedWindowsAhead = props.renderedWindowsAhead, renderedWindowsBehind = props.renderedWindowsBehind;
    var pages = state.pages;
    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf
    if (!this._shouldVirtualize(props)) {
      return;
    }
    var surfaceRect = this._surfaceRect || _tslib.__assign({}, EMPTY_RECT);
    var scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;
    var scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;
    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.
    // This needs to be called to recalculate when new pages should be loaded.
    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.
    if (this._surface.current && (forceUpdate || !pages || !this._surfaceRect || !scrollHeight || scrollHeight !== this._scrollHeight || Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)) {
      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);
      this._scrollTop = scrollTop;
    }
    // If the scroll height has changed, something in the container likely resized and
    // we should redo the page heights incase their content resized.
    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {
      this._measureVersion++;
    }
    this._scrollHeight = scrollHeight || 0;
    // If the surface is above the container top or below the container bottom, or if this is not the first
    // render return empty rect.
    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is
    // used to calculate the width of the list items.
    var visibleTop = Math.max(0, -surfaceRect.top);
    var win = _Utilities.getWindow(this._root.current);
    var visibleRect = {
      top: visibleTop,
      left: surfaceRect.left,
      bottom: visibleTop + win.innerHeight,
      right: surfaceRect.right,
      width: surfaceRect.width,
      height: win.innerHeight
    };
    // The required/allowed rects are adjusted versions of the visible rect.
    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);
    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead);
    // store the visible rect for later use.
    this._visibleRect = visibleRect;
  };
  List.defaultProps = {
    startIndex: 0,
    onRenderCell: function (item, index, containsFocus) {
      return _react.createElement(_react.Fragment, null, item && item.name || '');
    },
    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,
    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND
  };
  return List;
})(_react.Component);
function _expandRect(rect, pagesBefore, pagesAfter) {
  var top = rect.top - pagesBefore * rect.height;
  var height = rect.height + (pagesBefore + pagesAfter) * rect.height;
  return {
    top: top,
    bottom: top + height,
    height: height,
    left: rect.left,
    right: rect.right,
    width: rect.width
  };
}
function _isContainedWithin(innerRect, outerRect) {
  return innerRect.top >= outerRect.top && innerRect.left >= outerRect.left && innerRect.bottom <= outerRect.bottom && innerRect.right <= outerRect.right;
}
function _mergeRect(targetRect, newRect) {
  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;
  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;
  targetRect.bottom = newRect.bottom > targetRect.bottom || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;
  targetRect.right = newRect.right > targetRect.right || targetRect.right === -1 ? newRect.right : targetRect.right;
  targetRect.width = targetRect.right - targetRect.left + 1;
  targetRect.height = targetRect.bottom - targetRect.top + 1;
  return targetRect;
}

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./List.types":"6YDDx","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6YDDx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ScrollToMode", function () {
  return ScrollToMode;
});
var ScrollToMode = {
  /**
  * Does not make any consideration to where in the viewport the item should align to.
  */
  auto: 0,
  /**
  * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.
  */
  top: 1,
  /**
  * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.
  */
  bottom: 2,
  /**
  * Attempts to scroll the list so the desired item is in the exact center of the viewport.
  */
  center: 3
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2N9hr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6Nbsm":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsRowCheck", function () {
  return DetailsRowCheck;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Check = require('../../Check');
var _DetailsRowCheckStyles = require('./DetailsRowCheck.styles');
var getClassNames = _Utilities.classNamesFunction();
var DetailsRowCheckBase = function (props) {
  var _a = props.isVisible, isVisible = _a === void 0 ? false : _a, _b = props.canSelect, canSelect = _b === void 0 ? false : _b, _c = props.anySelected, anySelected = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, _e = props.isHeader, isHeader = _e === void 0 ? false : _e, className = props.className, checkClassName = props.checkClassName, styles = props.styles, theme = props.theme, compact = props.compact, onRenderDetailsCheckbox = props.onRenderDetailsCheckbox, _f = props.useFastIcons, useFastIcons = _f === void 0 ? true : _f, // must be removed from buttonProps
  buttonProps = _tslib.__rest(props, ["isVisible", "canSelect", "anySelected", "selected", "isHeader", "className", "checkClassName", "styles", "theme", "compact", "onRenderDetailsCheckbox", "useFastIcons"]);
  var defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;
  var onRenderCheckbox = onRenderDetailsCheckbox ? _Utilities.composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender) : defaultCheckboxRender;
  var classNames = getClassNames(styles, {
    theme: theme,
    canSelect: canSelect,
    selected: selected,
    anySelected: anySelected,
    className: className,
    isHeader: isHeader,
    isVisible: isVisible,
    compact: compact
  });
  var detailsCheckboxProps = {
    checked: selected,
    theme: theme
  };
  return canSelect ? _react.createElement("div", _tslib.__assign({}, buttonProps, {
    role: "checkbox",
    // eslint-disable-next-line deprecation/deprecation
    className: _Utilities.css(classNames.root, classNames.check),
    "aria-checked": selected,
    "data-selection-toggle": true,
    "data-automationid": "DetailsRowCheck",
    tabIndex: -1
  }), onRenderCheckbox(detailsCheckboxProps)) : // eslint-disable-next-line deprecation/deprecation
  _react.createElement("div", _tslib.__assign({}, buttonProps, {
    className: _Utilities.css(classNames.root, classNames.check)
  }));
};
var FastCheck = _react.memo(function (props) {
  return _react.createElement(_Check.Check, {
    theme: props.theme,
    checked: props.checked,
    className: props.className,
    useFastIcons: true
  });
});
function _defaultCheckboxRender(checkboxProps) {
  return _react.createElement(_Check.Check, {
    checked: checkboxProps.checked
  });
}
function _fastDefaultCheckboxRender(checkboxProps) {
  return _react.createElement(FastCheck, {
    theme: checkboxProps.theme,
    checked: checkboxProps.checked
  });
}
var DetailsRowCheck = _Utilities.styled(DetailsRowCheckBase, _DetailsRowCheckStyles.getStyles, undefined, {
  scope: 'DetailsRowCheck'
}, true);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../../Check":"4KgEH","./DetailsRowCheck.styles":"a5qAi","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2XDjF":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilitiesDragdropIndex = require('./utilities/dragdrop/index');
_parcelHelpers.exportAll(_utilitiesDragdropIndex, exports);

},{"./utilities/dragdrop/index":"2I7io","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2I7io":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _interfaces = require('./interfaces');
_parcelHelpers.exportAll(_interfaces, exports);
var _DragDropHelper = require('./DragDropHelper');
_parcelHelpers.exportAll(_DragDropHelper, exports);

},{"./interfaces":"6K6qr","./DragDropHelper":"35Dvj","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6K6qr":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"35Dvj":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DragDropHelper", function () {
  return DragDropHelper;
});
var _Utilities = require('../../Utilities');
var MOUSEDOWN_PRIMARY_BUTTON = 0;
// for mouse down event we are using ev.button property, 0 means left button
var MOUSEMOVE_PRIMARY_BUTTON = 1;
// for mouse move event we are using ev.buttons property, 1 means left button
var DragDropHelper = /** @class*/
(function () {
  function DragDropHelper(params) {
    this._selection = params.selection;
    this._dragEnterCounts = {};
    this._activeTargets = {};
    this._lastId = 0;
    // To make this class cheap to create, which allows simplifying some logic elsewhere,
    // only initialize the event group and global event handlers as needed.
    this._initialized = false;
  }
  DragDropHelper.prototype.dispose = function () {
    if (this._events) {
      this._events.dispose();
    }
  };
  DragDropHelper.prototype.subscribe = function (root, events, dragDropOptions) {
    var _this = this;
    if (!this._initialized) {
      this._events = new _Utilities.EventGroup(this);
      var doc = _Utilities.getDocument();
      // clear drag data when mouse up, use capture event to ensure it will be run
      if (doc) {
        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);
        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);
      }
      this._initialized = true;
    }
    var _a = dragDropOptions.key, key = _a === void 0 ? "" + ++this._lastId : _a;
    var handlers = [];
    var onDragStart;
    var onDragLeave;
    var onDragEnter;
    var onDragEnd;
    var onDrop;
    var onDragOver;
    var onMouseDown;
    var isDraggable;
    var isDroppable;
    var activeTarget;
    if (dragDropOptions && root) {
      var eventMap = dragDropOptions.eventMap, context = dragDropOptions.context, updateDropState_1 = dragDropOptions.updateDropState;
      var dragDropTarget = {
        root: root,
        options: dragDropOptions,
        key: key
      };
      isDraggable = this._isDraggable(dragDropTarget);
      isDroppable = this._isDroppable(dragDropTarget);
      if (isDraggable || isDroppable) {
        if (eventMap) {
          for (var _i = 0, eventMap_1 = eventMap; _i < eventMap_1.length; _i++) {
            var event_1 = eventMap_1[_i];
            var handler = {
              callback: event_1.callback.bind(null, context),
              eventName: event_1.eventName
            };
            handlers.push(handler);
            this._events.on(root, handler.eventName, handler.callback);
          }
        }
      }
      if (isDroppable) {
        // If the target is droppable, wire up global event listeners to track drop-related events.
        onDragLeave = function (event) {
          if (!event.isHandled) {
            event.isHandled = true;
            _this._dragEnterCounts[key]--;
            if (_this._dragEnterCounts[key] === 0) {
              updateDropState_1(false, /*isDropping*/
              event);
            }
          }
        };
        onDragEnter = function (event) {
          event.preventDefault();
          // needed for IE
          if (!event.isHandled) {
            event.isHandled = true;
            _this._dragEnterCounts[key]++;
            if (_this._dragEnterCounts[key] === 1) {
              updateDropState_1(true, /*isDropping*/
              event);
            }
          }
        };
        onDragEnd = function (event) {
          _this._dragEnterCounts[key] = 0;
          updateDropState_1(false, /*isDropping*/
          event);
        };
        onDrop = function (event) {
          _this._dragEnterCounts[key] = 0;
          updateDropState_1(false, /*isDropping*/
          event);
          if (dragDropOptions.onDrop) {
            dragDropOptions.onDrop(dragDropOptions.context.data, event);
          }
        };
        onDragOver = function (event) {
          event.preventDefault();
          if (dragDropOptions.onDragOver) {
            dragDropOptions.onDragOver(dragDropOptions.context.data, event);
          }
        };
        this._dragEnterCounts[key] = 0;
        // dragenter and dragleave will be fired when hover to the child element
        // but we only want to change state when enter or leave the current element
        // use the count to ensure it.
        events.on(root, 'dragenter', onDragEnter);
        events.on(root, 'dragleave', onDragLeave);
        events.on(root, 'dragend', onDragEnd);
        events.on(root, 'drop', onDrop);
        events.on(root, 'dragover', onDragOver);
      }
      if (isDraggable) {
        // If the target is draggable, wire up local event listeners for mouse events.
        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);
        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);
        // We need to add in data so that on Firefox we show the ghost element when dragging
        onDragStart = function (event) {
          var options = dragDropOptions;
          if (options && options.onDragStart) {
            options.onDragStart(options.context.data, options.context.index, _this._selection.getSelection(), event);
          }
          _this._isDragging = true;
          if (event.dataTransfer) {
            event.dataTransfer.setData('id', root.id);
          }
        };
        events.on(root, 'dragstart', onDragStart);
        events.on(root, 'mousedown', onMouseDown);
        events.on(root, 'dragend', onDragEnd);
      }
      activeTarget = {
        target: dragDropTarget,
        dispose: function () {
          if (_this._activeTargets[key] === activeTarget) {
            delete _this._activeTargets[key];
          }
          if (root) {
            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
              var handler = handlers_1[_i];
              _this._events.off(root, handler.eventName, handler.callback);
            }
            if (isDroppable) {
              events.off(root, 'dragenter', onDragEnter);
              events.off(root, 'dragleave', onDragLeave);
              events.off(root, 'dragend', onDragEnd);
              events.off(root, 'dragover', onDragOver);
              events.off(root, 'drop', onDrop);
            }
            if (isDraggable) {
              events.off(root, 'dragstart', onDragStart);
              events.off(root, 'mousedown', onMouseDown);
              events.off(root, 'dragend', onDragEnd);
            }
          }
        }
      };
      this._activeTargets[key] = activeTarget;
    }
    return {
      key: key,
      dispose: function () {
        if (activeTarget) {
          activeTarget.dispose();
        }
      }
    };
  };
  DragDropHelper.prototype.unsubscribe = function (root, key) {
    var activeTarget = this._activeTargets[key];
    if (activeTarget) {
      activeTarget.dispose();
    }
  };
  DragDropHelper.prototype._onDragEnd = function (target, event) {
    var options = target.options;
    if (options.onDragEnd) {
      options.onDragEnd(options.context.data, event);
    }
  };
  /**
  * clear drag data when mouse up on body
  */
  DragDropHelper.prototype._onMouseUp = function (event) {
    this._isDragging = false;
    if (this._dragData) {
      for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {
        var key = _a[_i];
        var activeTarget = this._activeTargets[key];
        if (activeTarget.target.root) {
          this._events.off(activeTarget.target.root, 'mousemove');
          this._events.off(activeTarget.target.root, 'mouseleave');
        }
      }
      if (this._dragData.dropTarget) {
        // raise dragleave event to let dropTarget know it need to remove dropping style
        _Utilities.EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');
        _Utilities.EventGroup.raise(this._dragData.dropTarget.root, 'drop');
      }
    }
    this._dragData = null;
  };
  /**
  * clear drag data when mouse up outside of the document
  */
  DragDropHelper.prototype._onDocumentMouseUp = function (event) {
    var doc = _Utilities.getDocument();
    if (doc && event.target === doc.documentElement) {
      this._onMouseUp(event);
    }
  };
  /**
  * when mouse move over a new drop target while dragging some items,
  * fire dragleave on the old target and fire dragenter to the new target
  * The target will handle style change on dragenter and dragleave events.
  */
  DragDropHelper.prototype._onMouseMove = function (target, event) {
    var // use buttons property here since ev.button in some edge case is not updating well during the move.
    // but firefox doesn't support it, so we set the default value when it is not defined.
    _a = event.buttons, // use buttons property here since ev.button in some edge case is not updating well during the move.
    // but firefox doesn't support it, so we set the default value when it is not defined.
    buttons = _a === void 0 ? MOUSEMOVE_PRIMARY_BUTTON : _a;
    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {
      // cancel mouse down event and return early when the primary button is not pressed
      this._onMouseUp(event);
      return;
    }
    var root = target.root, key = target.key;
    if (this._isDragging) {
      if (this._isDroppable(target)) {
        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into
        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the
        // outer target too, and we need to prevent the outer one from taking over.
        // So, check if the last dropTarget is not a child of the current.
        if (this._dragData) {
          if (this._dragData.dropTarget && this._dragData.dropTarget.key !== key && !this._isChild(root, this._dragData.dropTarget.root)) {
            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {
              _Utilities.EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');
              _Utilities.EventGroup.raise(root, 'dragenter');
              this._dragData.dropTarget = target;
            }
          }
        }
      }
    }
  };
  /**
  * when mouse leave a target while dragging some items, fire dragleave to the target
  */
  DragDropHelper.prototype._onMouseLeave = function (target, event) {
    if (this._isDragging) {
      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {
        _Utilities.EventGroup.raise(target.root, 'dragleave');
        this._dragData.dropTarget = undefined;
      }
    }
  };
  /**
  * when mouse down on a draggable item, we start to track dragdata.
  */
  DragDropHelper.prototype._onMouseDown = function (target, event) {
    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {
      // Ignore anything except the primary button.
      return;
    }
    if (this._isDraggable(target)) {
      this._dragData = {
        clientX: event.clientX,
        clientY: event.clientY,
        eventTarget: event.target,
        dragTarget: target
      };
      for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {
        var key = _a[_i];
        var activeTarget = this._activeTargets[key];
        if (activeTarget.target.root) {
          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));
          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));
        }
      }
    } else {
      this._dragData = null;
    }
  };
  /**
  * determine whether the child target is a descendant of the parent
  */
  DragDropHelper.prototype._isChild = function (parentElement, childElement) {
    while (childElement && childElement.parentElement) {
      if (childElement.parentElement === parentElement) {
        return true;
      }
      childElement = childElement.parentElement;
    }
    return false;
  };
  DragDropHelper.prototype._isDraggable = function (target) {
    var options = target.options;
    return !!(options.canDrag && options.canDrag(options.context.data));
  };
  DragDropHelper.prototype._isDroppable = function (target) {
    // TODO: take the drag item into consideration to prevent dragging an item into the same group
    var options = target.options;
    var dragContext = this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;
    return !!(options.canDrop && options.canDrop(options.context, dragContext));
  };
  return DragDropHelper;
})();

},{"../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1NE2k":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsColumn", function () {
  return DetailsColumn;
});
var _Utilities = require('../../Utilities');
var _DetailsColumnBase = require('./DetailsColumn.base');
var _DetailsColumnStyles = require('./DetailsColumn.styles');
var DetailsColumn = _Utilities.styled(_DetailsColumnBase.DetailsColumnBase, _DetailsColumnStyles.getStyles, undefined, {
  scope: 'DetailsColumn'
});

},{"../../Utilities":"1439N","./DetailsColumn.base":"1zBYv","./DetailsColumn.styles":"3zbxH","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1zBYv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsColumnBase", function () {
  return DetailsColumnBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Icon = require('../../Icon');
var _Utilities = require('../../Utilities');
var _DetailsListTypes = require('./DetailsList.types');
var _DetailsRowStyles = require('./DetailsRow.styles');
var MOUSEDOWN_PRIMARY_BUTTON = 0;
// for mouse down event we are using ev.button property, 0 means left button
var getClassNames = _Utilities.classNamesFunction();
var TRANSITION_DURATION_DRAG = 200;
// ms
var TRANSITION_DURATION_DROP = 1500;
// ms
var CLASSNAME_ADD_INTERVAL = 20;
// ms
var defaultOnRenderHeader = function (classNames) {
  return function (props) {
    if (!props) {
      return null;
    }
    if (props.column.isIconOnly) {
      return _react.createElement("span", {
        className: classNames.accessibleLabel
      }, props.column.name);
    }
    return _react.createElement(_react.Fragment, null, props.column.name);
  };
};
/**
* Component for rendering columns in a `DetailsList`.
*
* {@docCategory DetailsList}
*/
var DetailsColumnBase = /** @class*/
(function (_super) {
  _tslib.__extends(DetailsColumnBase, _super);
  function DetailsColumnBase(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {
      return _react.createElement("span", {
        className: tooltipHostProps.hostClassName
      }, tooltipHostProps.children);
    };
    _this._onColumnClick = function (ev) {
      var _a = _this.props, onColumnClick = _a.onColumnClick, column = _a.column;
      if (column.columnActionsMode === _DetailsListTypes.ColumnActionsMode.disabled) {
        return;
      }
      if (column.onColumnClick) {
        column.onColumnClick(ev, column);
      }
      if (onColumnClick) {
        onColumnClick(ev, column);
      }
    };
    _this._onDragStart = function (item, itemIndex, selectedItems, event) {
      var classNames = _this._classNames;
      if (itemIndex) {
        _this._updateHeaderDragInfo(itemIndex);
        _this._root.current.classList.add(classNames.borderWhileDragging);
        _this._async.setTimeout(function () {
          if (_this._root.current) {
            _this._root.current.classList.add(classNames.noBorderWhileDragging);
          }
        }, CLASSNAME_ADD_INTERVAL);
      }
    };
    _this._onDragEnd = function (item, event) {
      var classNames = _this._classNames;
      if (event) {
        _this._updateHeaderDragInfo(-1, event);
      }
      _this._root.current.classList.remove(classNames.borderWhileDragging);
      _this._root.current.classList.remove(classNames.noBorderWhileDragging);
    };
    _this._updateHeaderDragInfo = function (itemIndex, event) {
      /*eslint-disable deprecation/deprecation*/
      if (_this.props.setDraggedItemIndex) {
        _this.props.setDraggedItemIndex(itemIndex);
      }
      /*eslint-enable deprecation/deprecation*/
      if (_this.props.updateDragInfo) {
        _this.props.updateDragInfo({
          itemIndex: itemIndex
        }, event);
      }
    };
    _this._onColumnContextMenu = function (ev) {
      var _a = _this.props, onColumnContextMenu = _a.onColumnContextMenu, column = _a.column;
      if (column.onColumnContextMenu) {
        column.onColumnContextMenu(column, ev);
        ev.preventDefault();
      }
      if (onColumnContextMenu) {
        onColumnContextMenu(column, ev);
        ev.preventDefault();
      }
    };
    _this._onRootMouseDown = function (ev) {
      var isDraggable = _this.props.isDraggable;
      // Ignore anything except the primary button.
      if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {
        ev.stopPropagation();
      }
    };
    _Utilities.initializeComponentRef(_this);
    _this._async = new _Utilities.Async(_this);
    _this._events = new _Utilities.EventGroup(_this);
    return _this;
  }
  DetailsColumnBase.prototype.render = function () {
    var _a = this.props, column = _a.column, columnIndex = _a.columnIndex, parentId = _a.parentId, isDraggable = _a.isDraggable, styles = _a.styles, theme = _a.theme, _b = _a.cellStyleProps, cellStyleProps = _b === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _b, _c = _a.useFastIcons, useFastIcons = _c === void 0 ? true : _c;
    var _d = this.props.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _d === void 0 ? this._onRenderColumnHeaderTooltip : _d;
    this._classNames = getClassNames(styles, {
      theme: theme,
      headerClassName: column.headerClassName,
      iconClassName: column.iconClassName,
      isActionable: column.columnActionsMode !== _DetailsListTypes.ColumnActionsMode.disabled,
      isEmpty: !column.name,
      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,
      isPadded: column.isPadded,
      isIconOnly: column.isIconOnly,
      cellStyleProps: cellStyleProps,
      transitionDurationDrag: TRANSITION_DURATION_DRAG,
      transitionDurationDrop: TRANSITION_DURATION_DROP
    });
    var classNames = this._classNames;
    var IconComponent = useFastIcons ? _Icon.FontIcon : _Icon.Icon;
    var onRenderHeader = column.onRenderHeader ? _Utilities.composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames)) : defaultOnRenderHeader(this._classNames);
    var hasInnerButton = column.columnActionsMode !== _DetailsListTypes.ColumnActionsMode.disabled && (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);
    var accNameDescription = {
      'aria-label': column.isIconOnly ? column.name : undefined,
      'aria-labelledby': column.isIconOnly ? undefined : parentId + "-" + column.key + "-name",
      'aria-describedby': !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel() ? parentId + "-" + column.key + "-tooltip" : undefined
    };
    return _react.createElement(_react.Fragment, null, _react.createElement("div", _tslib.__assign({
      key: column.key,
      ref: this._root,
      role: 'columnheader'
    }, !hasInnerButton && accNameDescription, {
      "aria-sort": column.isSorted ? column.isSortedDescending ? 'descending' : 'ascending' : 'none',
      "aria-colindex": columnIndex,
      className: classNames.root,
      "data-is-draggable": isDraggable,
      draggable: isDraggable,
      style: {
        width: column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)
      },
      "data-automationid": 'ColumnsHeaderColumn',
      "data-item-key": column.key
    }), isDraggable && _react.createElement(IconComponent, {
      iconName: "GripperBarVertical",
      className: classNames.gripperBarVerticalStyle
    }), onRenderColumnHeaderTooltip({
      hostClassName: classNames.cellTooltip,
      id: parentId + "-" + column.key + "-tooltip",
      setAriaDescribedBy: false,
      column: column,
      content: column.columnActionsMode !== _DetailsListTypes.ColumnActionsMode.disabled ? column.ariaLabel : '',
      children: _react.createElement("span", _tslib.__assign({
        id: parentId + "-" + column.key,
        className: classNames.cellTitle,
        "data-is-focusable": column.columnActionsMode !== _DetailsListTypes.ColumnActionsMode.disabled,
        role: hasInnerButton ? 'button' : undefined
      }, hasInnerButton && accNameDescription, {
        onContextMenu: this._onColumnContextMenu,
        onClick: this._onColumnClick,
        "aria-haspopup": column.columnActionsMode === _DetailsListTypes.ColumnActionsMode.hasDropdown,
        "aria-expanded": column.columnActionsMode === _DetailsListTypes.ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined
      }), _react.createElement("span", {
        id: parentId + "-" + column.key + "-name",
        className: classNames.cellName
      }, (column.iconName || column.iconClassName) && _react.createElement(IconComponent, {
        className: classNames.iconClassName,
        iconName: column.iconName
      }), onRenderHeader(this.props)), column.isFiltered && _react.createElement(IconComponent, {
        className: classNames.nearIcon,
        iconName: "Filter"
      }), column.isSorted && _react.createElement(IconComponent, {
        className: classNames.sortIcon,
        iconName: column.isSortedDescending ? 'SortDown' : 'SortUp'
      }), column.isGrouped && _react.createElement(IconComponent, {
        className: classNames.nearIcon,
        iconName: "GroupedDescending"
      }), column.columnActionsMode === _DetailsListTypes.ColumnActionsMode.hasDropdown && !column.isIconOnly && _react.createElement(IconComponent, {
        "aria-hidden": true,
        className: classNames.filterChevron,
        iconName: "ChevronDown"
      }))
    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null);
  };
  DetailsColumnBase.prototype.componentDidMount = function () {
    var _this = this;
    if (this.props.dragDropHelper && this.props.isDraggable) {
      this._addDragDropHandling();
    }
    var classNames = this._classNames;
    if (this.props.isDropped) {
      if (this._root.current) {
        this._root.current.classList.add(classNames.borderAfterDropping);
        this._async.setTimeout(function () {
          if (_this._root.current) {
            _this._root.current.classList.add(classNames.noBorderAfterDropping);
          }
        }, CLASSNAME_ADD_INTERVAL);
      }
      this._async.setTimeout(function () {
        if (_this._root.current) {
          _this._root.current.classList.remove(classNames.borderAfterDropping);
          _this._root.current.classList.remove(classNames.noBorderAfterDropping);
        }
      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);
    }
  };
  DetailsColumnBase.prototype.componentWillUnmount = function () {
    if (this._dragDropSubscription) {
      this._dragDropSubscription.dispose();
      delete this._dragDropSubscription;
    }
    this._async.dispose();
    this._events.dispose();
  };
  DetailsColumnBase.prototype.componentDidUpdate = function () {
    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {
      this._addDragDropHandling();
    }
    if (this._dragDropSubscription && !this.props.isDraggable) {
      this._dragDropSubscription.dispose();
      this._events.off(this._root.current, 'mousedown');
      delete this._dragDropSubscription;
    }
  };
  DetailsColumnBase.prototype._getColumnDragDropOptions = function () {
    var _this = this;
    var columnIndex = this.props.columnIndex;
    var options = {
      selectionIndex: columnIndex,
      context: {
        data: columnIndex,
        index: columnIndex
      },
      canDrag: function () {
        return _this.props.isDraggable;
      },
      canDrop: function () {
        return false;
      },
      onDragStart: this._onDragStart,
      updateDropState: function () {
        return undefined;
      },
      onDrop: function () {
        return undefined;
      },
      onDragEnd: this._onDragEnd
    };
    return options;
  };
  DetailsColumnBase.prototype._hasAccessibleLabel = function () {
    var column = this.props.column;
    return !!(column.ariaLabel || column.filterAriaLabel || column.sortAscendingAriaLabel || column.sortDescendingAriaLabel || column.groupAriaLabel);
  };
  DetailsColumnBase.prototype._renderAccessibleLabel = function () {
    var _a = this.props, column = _a.column, parentId = _a.parentId;
    var classNames = this._classNames;
    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? _react.createElement("label", {
      key: column.key + "_label",
      id: parentId + "-" + column.key + "-tooltip",
      className: classNames.accessibleLabel
    }, column.ariaLabel, column.isFiltered && column.filterAriaLabel || null, column.isSorted && (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel) || null, column.isGrouped && column.groupAriaLabel || null) : null;
  };
  DetailsColumnBase.prototype._addDragDropHandling = function () {
    this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getColumnDragDropOptions());
    // We need to use native on this to prevent MarqueeSelection from handling the event before us.
    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);
  };
  return DetailsColumnBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Icon":"7upjA","../../Utilities":"1439N","./DetailsList.types":"2BjaS","./DetailsRow.styles":"1FMwI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3zbxH":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _DetailsRowStyles = require('./DetailsRow.styles');
var _DetailsHeaderStyles = require('./DetailsHeader.styles');
var GlobalClassNames = {
  isActionable: 'is-actionable',
  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',
  collapseButton: 'ms-DetailsHeader-collapseButton',
  isCollapsed: 'is-collapsed',
  isAllSelected: 'is-allSelected',
  isSelectAllHidden: 'is-selectAllHidden',
  isResizingColumn: 'is-resizingColumn',
  isEmpty: 'is-empty',
  isIconVisible: 'is-icon-visible',
  cellSizer: 'ms-DetailsHeader-cellSizer',
  isResizing: 'is-resizing',
  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',
  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',
  cellTitle: 'ms-DetailsHeader-cellTitle',
  cellName: 'ms-DetailsHeader-cellName',
  filterChevron: 'ms-DetailsHeader-filterChevron',
  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',
  nearIcon: 'ms-DetailsColumn-nearIcon'
};
var getStyles = function (props) {
  var _a;
  var theme = props.theme, headerClassName = props.headerClassName, iconClassName = props.iconClassName, isActionable = props.isActionable, isEmpty = props.isEmpty, isIconVisible = props.isIconVisible, isPadded = props.isPadded, isIconOnly = props.isIconOnly, _b = props.cellStyleProps, cellStyleProps = _b === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _b, transitionDurationDrag = props.transitionDurationDrag, transitionDurationDrop = props.transitionDurationDrop;
  var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var colors = {
    iconForegroundColor: semanticColors.bodySubtext,
    headerForegroundColor: semanticColors.bodyText,
    headerBackgroundColor: semanticColors.bodyBackground,
    dropdownChevronForegroundColor: palette.neutralSecondary,
    resizerColor: palette.neutralTertiaryAlt
  };
  var nearIconStyle = {
    color: colors.iconForegroundColor,
    opacity: 1,
    paddingLeft: 8
  };
  var borderWhileDragging = {
    outline: "1px solid " + palette.themePrimary
  };
  var borderAfterDragOrDrop = {
    outlineColor: 'transparent'
  };
  return {
    root: [_DetailsHeaderStyles.getCellStyles(props), fonts.small, isActionable && [classNames.isActionable, {
      selectors: {
        ':hover': {
          color: semanticColors.bodyText,
          background: semanticColors.listHeaderBackgroundHovered
        },
        ':active': {
          background: semanticColors.listHeaderBackgroundPressed
        }
      }
    }], isEmpty && [classNames.isEmpty, {
      textOverflow: 'clip'
    }], isIconVisible && classNames.isIconVisible, isPadded && ({
      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding
    }), {
      selectors: {
        ':hover i[data-icon-name="GripperBarVertical"]': {
          display: 'block'
        }
      }
    }, headerClassName],
    gripperBarVerticalStyle: {
      display: 'none',
      position: 'absolute',
      textAlign: 'left',
      color: palette.neutralTertiary,
      left: 1
    },
    nearIcon: [classNames.nearIcon, nearIconStyle],
    sortIcon: [nearIconStyle, {
      paddingLeft: 4,
      position: 'relative',
      top: 1
    }],
    iconClassName: [{
      color: colors.iconForegroundColor,
      opacity: 1
    }, iconClassName],
    filterChevron: [classNames.filterChevron, {
      color: colors.dropdownChevronForegroundColor,
      paddingLeft: 6,
      verticalAlign: 'middle',
      fontSize: fonts.small.fontSize
    }],
    cellTitle: [classNames.cellTitle, _Styling.getFocusStyle(theme), _tslib.__assign({
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'stretch',
      boxSizing: 'border-box',
      overflow: 'hidden',
      padding: "0 " + cellStyleProps.cellRightPadding + "px 0 " + cellStyleProps.cellLeftPadding + "px"
    }, isIconOnly ? {
      alignContent: 'flex-end',
      maxHeight: '100%',
      flexWrap: 'wrap-reverse'
    } : {})],
    cellName: [classNames.cellName, {
      flex: '0 1 auto',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      fontWeight: _Styling.FontWeights.semibold,
      fontSize: fonts.medium.fontSize
    }, isIconOnly && ({
      selectors: (_a = {}, _a["." + classNames.nearIcon] = {
        paddingLeft: 0
      }, _a)
    })],
    cellTooltip: {
      display: 'block',
      position: 'absolute',
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    },
    accessibleLabel: _Styling.hiddenContentStyle,
    borderWhileDragging: borderWhileDragging,
    noBorderWhileDragging: [borderAfterDragOrDrop, {
      transition: "outline " + transitionDurationDrag + "ms ease"
    }],
    borderAfterDropping: borderWhileDragging,
    noBorderAfterDropping: [borderAfterDragOrDrop, {
      transition: "outline  " + transitionDurationDrop + "ms ease"
    }]
  };
};

},{"tslib":"6ZIET","../../Styling":"5q33X","./DetailsRow.styles":"1FMwI","./DetailsHeader.styles":"1psIN","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1RZeD":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "SelectAllVisibility", function () {
  return SelectAllVisibility;
});
var SelectAllVisibility;
(function (SelectAllVisibility) {
  SelectAllVisibility[SelectAllVisibility["none"] = 0] = "none";
  SelectAllVisibility[SelectAllVisibility["hidden"] = 1] = "hidden";
  SelectAllVisibility[SelectAllVisibility["visible"] = 2] = "visible";
})(SelectAllVisibility || (SelectAllVisibility = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1tXCx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsList", function () {
  return DetailsList;
});
var _Utilities = require('../../Utilities');
var _DetailsListBase = require('./DetailsList.base');
var _DetailsListStyles = require('./DetailsList.styles');
var DetailsList = _Utilities.styled(_DetailsListBase.DetailsListBase, _DetailsListStyles.getStyles, undefined, {
  scope: 'DetailsList'
});

},{"../../Utilities":"1439N","./DetailsList.base":"5m9vJ","./DetailsList.styles":"2y7VH","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5m9vJ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "buildColumns", function () {
  return buildColumns;
});
_parcelHelpers.export(exports, "DetailsListBase", function () {
  return DetailsListBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _DetailsListDetailsListTypes = require('../DetailsList/DetailsList.types');
var _DetailsListDetailsHeader = require('../DetailsList/DetailsHeader');
var _DetailsListDetailsHeaderTypes = require('../DetailsList/DetailsHeader.types');
var _DetailsListDetailsRow = require('../DetailsList/DetailsRow');
var _FocusZone = require('../../FocusZone');
var _Selection = require('../../Selection');
var _DragDrop = require('../../DragDrop');
var _GroupedList = require('../../GroupedList');
var _List = require('../../List');
var _utilitiesDecoratorsWithViewport = require('../../utilities/decorators/withViewport');
var _utilitiesGroupedListGroupedListUtility = require('../../utilities/groupedList/GroupedListUtility');
var _DetailsRowStyles = require('./DetailsRow.styles');
var _DetailsRowCheckStyles = require('./DetailsRowCheck.styles');
var _GroupedListGroupSpacer = require('../GroupedList/GroupSpacer');
var _fluentuiUtilities = require('@fluentui/utilities');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var getClassNames = _Utilities.classNamesFunction();
var MIN_COLUMN_WIDTH = 100;
// this is the global min width
var DEFAULT_RENDERED_WINDOWS_AHEAD = 2;
var DEFAULT_RENDERED_WINDOWS_BEHIND = 2;
/**
* Hooks-based implementation of DetailsList.
* Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,
* this inner component handles rendering while the outer maintains compatibility.
*/
var DetailsListInner = function (props) {
  var selection = props.selection;
  var ariaLabelForListHeader = props.ariaLabelForListHeader, ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox, ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn, className = props.className, checkboxVisibility = props.checkboxVisibility, compact = props.compact, constrainMode = props.constrainMode, dragDropEvents = props.dragDropEvents, groups = props.groups, groupProps = props.groupProps, indentWidth = props.indentWidth, items = props.items, isPlaceholderData = props.isPlaceholderData, isHeaderVisible = props.isHeaderVisible, layoutMode = props.layoutMode, onItemInvoked = props.onItemInvoked, onItemContextMenu = props.onItemContextMenu, onColumnHeaderClick = props.onColumnHeaderClick, onColumnHeaderContextMenu = props.onColumnHeaderContextMenu, _a = props.selectionMode, selectionMode = _a === void 0 ? selection.mode : _a, selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick, selectionZoneProps = props.selectionZoneProps, ariaLabel = props.ariaLabel, ariaLabelForGrid = props.ariaLabelForGrid, rowElementEventMap = props.rowElementEventMap, _b = props.shouldApplyApplicationRole, shouldApplyApplicationRole = _b === void 0 ? false : _b, getKey = props.getKey, listProps = props.listProps, usePageCache = props.usePageCache, onShouldVirtualize = props.onShouldVirtualize, viewport = props.viewport, minimumPixelsForDrag = props.minimumPixelsForDrag, getGroupHeight = props.getGroupHeight, styles = props.styles, theme = props.theme, _c = props.cellStyleProps, cellStyleProps = _c === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _c, onRenderCheckbox = props.onRenderCheckbox, useFastIcons = props.useFastIcons, dragDropHelper = props.dragDropHelper, adjustedColumns = props.adjustedColumns, isCollapsed = props.isCollapsed, isSizing = props.isSizing, isSomeGroupExpanded = props.isSomeGroupExpanded, version = props.version, rootRef = props.rootRef, listRef = props.listRef, focusZoneRef = props.focusZoneRef, columnReorderOptions = props.columnReorderOptions, groupedListRef = props.groupedListRef, headerRef = props.headerRef, onGroupExpandStateChanged = props.onGroupExpandStateChanged, onColumnIsSizingChanged = props.onColumnIsSizingChanged, onRowDidMount = props.onRowDidMount, onRowWillUnmount = props.onRowWillUnmount, disableSelectionZone = props.disableSelectionZone, onColumnResized = props.onColumnResized, onColumnAutoResized = props.onColumnAutoResized, onToggleCollapse = props.onToggleCollapse, onActiveRowChanged = props.onActiveRowChanged, onBlur = props.onBlur, eventsToRegister = props.rowElementEventMap, onRenderMissingItem = props.onRenderMissingItem, onRenderItemColumn = props.onRenderItemColumn, getCellValueKey = props.getCellValueKey, getRowAriaLabel = props.getRowAriaLabel, getRowAriaDescribedBy = props.getRowAriaDescribedBy, checkButtonAriaLabel = props.checkButtonAriaLabel, checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel, checkboxCellClassName = props.checkboxCellClassName, useReducedRowRenderer = props.useReducedRowRenderer, enableUpdateAnimations = props.enableUpdateAnimations, enterModalSelectionOnTouch = props.enterModalSelectionOnTouch, onRenderDefaultRow = props.onRenderDefaultRow, selectionZoneRef = props.selectionZoneRef;
  var defaultRole = 'grid';
  var role = props.role ? props.role : defaultRole;
  var rowId = _fluentuiUtilities.getId('row');
  var groupNestingDepth = getGroupNestingDepth(groups);
  var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);
  var additionalListProps = _react.useMemo(function () {
    return _tslib.__assign({
      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,
      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,
      getKey: getKey,
      version: version
    }, listProps);
  }, [isSizing, getKey, version, listProps]);
  var selectAllVisibility = _DetailsListDetailsHeaderTypes.SelectAllVisibility.none;
  // for SelectionMode.none
  if (selectionMode === _Selection.SelectionMode.single) {
    selectAllVisibility = _DetailsListDetailsHeaderTypes.SelectAllVisibility.hidden;
  }
  if (selectionMode === _Selection.SelectionMode.multiple) {
    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups
    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;
    if (isCollapsedGroupSelectVisible === undefined) {
      isCollapsedGroupSelectVisible = true;
    }
    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;
    selectAllVisibility = isSelectAllVisible ? _DetailsListDetailsHeaderTypes.SelectAllVisibility.visible : _DetailsListDetailsHeaderTypes.SelectAllVisibility.hidden;
  }
  if (checkboxVisibility === _DetailsListDetailsListTypes.CheckboxVisibility.hidden) {
    selectAllVisibility = _DetailsListDetailsHeaderTypes.SelectAllVisibility.none;
  }
  var defaultOnRenderDetailsHeader = _react.useCallback(function (detailsHeaderProps) {
    return _react.createElement(_DetailsListDetailsHeader.DetailsHeader, _tslib.__assign({}, detailsHeaderProps));
  }, []);
  var defaultOnRenderDetailsFooter = _react.useCallback(function () {
    return null;
  }, []);
  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;
  var onRenderDetailsHeader = _react.useMemo(function () {
    return propsOnRenderDetailsHeader ? _fluentuiUtilities.composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;
  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);
  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;
  var onRenderDetailsFooter = _react.useMemo(function () {
    return propsOnRenderDetailsFooter ? _fluentuiUtilities.composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;
  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);
  var detailsFooterProps = _react.useMemo(function () {
    return {
      columns: adjustedColumns,
      groupNestingDepth: groupNestingDepth,
      selection: selection,
      selectionMode: selectionMode,
      viewport: viewport,
      checkboxVisibility: checkboxVisibility,
      indentWidth: indentWidth,
      cellStyleProps: cellStyleProps
    };
  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);
  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;
  var onColumnDragEnd = _react.useCallback(function (_a, event) {
    var dropLocation = _a.dropLocation;
    var finalDropLocation = _DetailsListDetailsListTypes.ColumnDragEndLocation.outside;
    if (columnReorderOnDragEnd) {
      if (dropLocation && dropLocation !== _DetailsListDetailsListTypes.ColumnDragEndLocation.header) {
        finalDropLocation = dropLocation;
      } else if (rootRef.current) {
        var clientRect = rootRef.current.getBoundingClientRect();
        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {
          finalDropLocation = _DetailsListDetailsListTypes.ColumnDragEndLocation.surface;
        }
      }
      columnReorderOnDragEnd(finalDropLocation);
    }
  }, [columnReorderOnDragEnd, rootRef]);
  var columnReorderProps = _react.useMemo(function () {
    if (columnReorderOptions) {
      return _tslib.__assign(_tslib.__assign({}, columnReorderOptions), {
        onColumnDragEnd: onColumnDragEnd
      });
    }
  }, [columnReorderOptions, onColumnDragEnd]);
  var rowCount = (isHeaderVisible ? 1 : 0) + _utilitiesGroupedListGroupedListUtility.GetGroupCount(groups) + (items ? items.length : 0);
  var colCount = (selectAllVisibility !== _DetailsListDetailsHeaderTypes.SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);
  var classNames = _react.useMemo(function () {
    return getClassNames(styles, {
      theme: theme,
      compact: compact,
      isFixed: layoutMode === _DetailsListDetailsListTypes.DetailsListLayoutMode.fixedColumns,
      isHorizontalConstrained: constrainMode === _DetailsListDetailsListTypes.ConstrainMode.horizontalConstrained,
      className: className
    });
  }, [styles, theme, compact, layoutMode, constrainMode, className]);
  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;
  var finalOnRenderDetailsGroupFooter = _react.useMemo(function () {
    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {
      return onRenderDetailsGroupFooter(_tslib.__assign(_tslib.__assign({}, groupFooterProps), {
        columns: adjustedColumns,
        groupNestingDepth: groupNestingDepth,
        indentWidth: indentWidth,
        selection: selection,
        selectionMode: selectionMode,
        viewport: viewport,
        checkboxVisibility: checkboxVisibility,
        cellStyleProps: cellStyleProps
      }), defaultRender);
    } : undefined;
  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);
  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;
  var finalOnRenderDetailsGroupHeader = _react.useMemo(function () {
    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {
      var _a, _b;
      var groupIndex = groupHeaderProps.groupIndex;
      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;
      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;
      return onRenderDetailsGroupHeader(_tslib.__assign(_tslib.__assign({}, groupHeaderProps), {
        columns: adjustedColumns,
        groupNestingDepth: groupNestingDepth,
        indentWidth: indentWidth,
        selection: selection,
        selectionMode: checkboxVisibility !== _DetailsListDetailsListTypes.CheckboxVisibility.hidden ? selectionMode : _Selection.SelectionMode.none,
        viewport: viewport,
        checkboxVisibility: checkboxVisibility,
        cellStyleProps: cellStyleProps,
        ariaColSpan: adjustedColumns.length,
        ariaPosInSet: undefined,
        ariaSetSize: undefined,
        ariaRowCount: undefined,
        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined
      }), defaultRender);
    } : function (groupHeaderProps, defaultRender) {
      var _a, _b;
      var groupIndex = groupHeaderProps.groupIndex;
      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;
      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;
      return defaultRender(_tslib.__assign(_tslib.__assign({}, groupHeaderProps), {
        ariaColSpan: adjustedColumns.length,
        ariaPosInSet: undefined,
        ariaSetSize: undefined,
        ariaRowCount: undefined,
        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined
      }));
    };
  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps, groupedDetailsListIndexMap]);
  var finalGroupProps = _react.useMemo(function () {
    return _tslib.__assign(_tslib.__assign({}, groupProps), {
      role: role === defaultRole ? 'rowgroup' : 'presentation',
      onRenderFooter: finalOnRenderDetailsGroupFooter,
      onRenderHeader: finalOnRenderDetailsGroupHeader,
      // pass through custom group header checkbox label
      headerProps: _tslib.__assign({
        selectAllButtonProps: {
          'aria-label': checkButtonGroupAriaLabel
        }
      }, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps)
    });
  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);
  var sumColumnWidths = _fluentuiReactHooks.useConst(function () {
    return _Utilities.memoizeFunction(function (columns) {
      var totalWidth = 0;
      columns.forEach(function (column) {
        return totalWidth += column.calculatedWidth || column.minWidth;
      });
      return totalWidth;
    });
  });
  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;
  var rowWidth = _react.useMemo(function () {
    return sumColumnWidths(adjustedColumns);
  }, [adjustedColumns, sumColumnWidths]);
  var onRenderCell = _react.useCallback(function (nestingDepth, item, index, group) {
    var finalOnRenderRow = props.onRenderRow ? _fluentuiUtilities.composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;
    var groupKey = group ? group.key : undefined;
    var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem : 0;
    var rowRole = role === defaultRole ? undefined : 'presentation';
    var rowProps = {
      item: item,
      itemIndex: index,
      flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,
      compact: compact,
      columns: adjustedColumns,
      groupNestingDepth: nestingDepth,
      id: rowId + "-" + index,
      selectionMode: selectionMode,
      selection: selection,
      onDidMount: onRowDidMount,
      onWillUnmount: onRowWillUnmount,
      onRenderItemColumn: onRenderItemColumn,
      getCellValueKey: getCellValueKey,
      eventsToRegister: eventsToRegister,
      dragDropEvents: dragDropEvents,
      dragDropHelper: dragDropHelper,
      viewport: viewport,
      checkboxVisibility: checkboxVisibility,
      collapseAllVisibility: collapseAllVisibility,
      getRowAriaLabel: getRowAriaLabel,
      getRowAriaDescribedBy: getRowAriaDescribedBy,
      checkButtonAriaLabel: checkButtonAriaLabel,
      checkboxCellClassName: checkboxCellClassName,
      useReducedRowRenderer: useReducedRowRenderer,
      indentWidth: indentWidth,
      cellStyleProps: cellStyleProps,
      onRenderDetailsCheckbox: onRenderCheckbox,
      enableUpdateAnimations: enableUpdateAnimations,
      rowWidth: rowWidth,
      useFastIcons: useFastIcons,
      role: rowRole
    };
    if (!item) {
      if (onRenderMissingItem) {
        return onRenderMissingItem(index, rowProps);
      }
      return null;
    }
    return finalOnRenderRow(rowProps);
  }, [compact, adjustedColumns, selectionMode, selection, rowId, onRowDidMount, onRowWillUnmount, onRenderItemColumn, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, isHeaderVisible, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth, role, groupedDetailsListIndexMap]);
  var onRenderListCell = _react.useCallback(function (nestingDepth) {
    return function (item, itemIndex) {
      return onRenderCell(nestingDepth, item, itemIndex);
    };
  }, [onRenderCell]);
  var isRightArrow = _react.useCallback(function (event) {
    // eslint-disable-next-line deprecation/deprecation
    return event.which === _Utilities.getRTLSafeKeyCode(_Utilities.KeyCodes.right, theme);
  }, [theme]);
  var focusZoneProps = {
    componentRef: focusZoneRef,
    className: classNames.focusZone,
    direction: _FocusZone.FocusZoneDirection.vertical,
    shouldEnterInnerZone: isRightArrow,
    onActiveElementChanged: onActiveRowChanged,
    shouldRaiseClicks: false,
    onBlur: onBlur
  };
  var list = groups ? _react.createElement(_GroupedList.GroupedList, {
    focusZoneProps: focusZoneProps,
    componentRef: groupedListRef,
    groups: groups,
    groupProps: finalGroupProps,
    items: items,
    onRenderCell: onRenderCell,
    role: "presentation",
    selection: selection,
    selectionMode: checkboxVisibility !== _DetailsListDetailsListTypes.CheckboxVisibility.hidden ? selectionMode : _Selection.SelectionMode.none,
    dragDropEvents: dragDropEvents,
    dragDropHelper: dragDropHelper,
    eventsToRegister: rowElementEventMap,
    listProps: additionalListProps,
    onGroupExpandStateChanged: onGroupExpandStateChanged,
    usePageCache: usePageCache,
    onShouldVirtualize: onShouldVirtualize,
    getGroupHeight: getGroupHeight,
    compact: compact
  }) : _react.createElement(_FocusZone.FocusZone, _tslib.__assign({}, focusZoneProps), _react.createElement(_List.List, _tslib.__assign({
    ref: listRef,
    role: "presentation",
    items: items,
    onRenderCell: onRenderListCell(0),
    usePageCache: usePageCache,
    onShouldVirtualize: onShouldVirtualize
  }, additionalListProps)));
  var onHeaderKeyDown = _react.useCallback(function (ev) {
    // eslint-disable-next-line deprecation/deprecation
    if (ev.which === _Utilities.KeyCodes.down) {
      if (focusZoneRef.current && focusZoneRef.current.focus()) {
        // select the first item in list after down arrow key event
        // only if nothing was selected; otherwise start with the already-selected item
        if (selection.getSelectedIndices().length === 0) {
          selection.setIndexSelected(0, true, false);
        }
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  }, [selection, focusZoneRef]);
  var onContentKeyDown = _react.useCallback(function (ev) {
    // eslint-disable-next-line deprecation/deprecation
    if (ev.which === _Utilities.KeyCodes.up && !ev.altKey) {
      if (headerRef.current && headerRef.current.focus()) {
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  }, [headerRef]);
  return (
    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work
    // with JAWS.
    _react.createElement("div", _tslib.__assign({
      ref: rootRef,
      className: classNames.root,
      "data-automationid": "DetailsList",
      "data-is-scrollable": "false",
      "aria-label": ariaLabel
    }, shouldApplyApplicationRole ? {
      role: 'application'
    } : {}), _react.createElement(_Utilities.FocusRects, null), _react.createElement("div", {
      role: role,
      "aria-label": ariaLabelForGrid,
      "aria-rowcount": isPlaceholderData ? -1 : rowCount,
      "aria-colcount": colCount,
      "aria-readonly": "true",
      "aria-busy": isPlaceholderData
    }, _react.createElement("div", {
      onKeyDown: onHeaderKeyDown,
      role: "presentation",
      className: classNames.headerWrapper
    }, isHeaderVisible && onRenderDetailsHeader({
      componentRef: headerRef,
      selectionMode: selectionMode,
      layoutMode: layoutMode,
      selection: selection,
      columns: adjustedColumns,
      onColumnClick: onColumnHeaderClick,
      onColumnContextMenu: onColumnHeaderContextMenu,
      onColumnResized: onColumnResized,
      onColumnIsSizingChanged: onColumnIsSizingChanged,
      onColumnAutoResized: onColumnAutoResized,
      groupNestingDepth: groupNestingDepth,
      isAllCollapsed: isCollapsed,
      onToggleCollapseAll: onToggleCollapse,
      ariaLabel: ariaLabelForListHeader,
      ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,
      ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,
      selectAllVisibility: selectAllVisibility,
      collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,
      viewport: viewport,
      columnReorderProps: columnReorderProps,
      minimumPixelsForDrag: minimumPixelsForDrag,
      cellStyleProps: cellStyleProps,
      checkboxVisibility: checkboxVisibility,
      indentWidth: indentWidth,
      onRenderDetailsCheckbox: onRenderCheckbox,
      rowWidth: sumColumnWidths(adjustedColumns),
      useFastIcons: useFastIcons
    }, onRenderDetailsHeader)), _react.createElement("div", {
      onKeyDown: onContentKeyDown,
      role: "presentation",
      className: classNames.contentWrapper
    }, !disableSelectionZone ? _react.createElement(_Selection.SelectionZone, _tslib.__assign({
      ref: selectionZoneRef,
      selection: selection,
      selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,
      selectionMode: selectionMode,
      onItemInvoked: onItemInvoked,
      onItemContextMenu: onItemContextMenu,
      enterModalOnTouch: enterModalSelectionOnTouch
    }, selectionZoneProps || ({})), list) : list), onRenderDetailsFooter(_tslib.__assign({}, detailsFooterProps))))
  );
};
var DetailsListBase = /** @class*/
(function (_super) {
  _tslib.__extends(DetailsListBase, _super);
  function DetailsListBase(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    _this._header = _react.createRef();
    _this._groupedList = _react.createRef();
    _this._list = _react.createRef();
    _this._focusZone = _react.createRef();
    _this._selectionZone = _react.createRef();
    _this._onRenderRow = function (props, defaultRender) {
      return _react.createElement(_DetailsListDetailsRow.DetailsRow, _tslib.__assign({}, props));
    };
    _this._getDerivedStateFromProps = function (nextProps, previousState) {
      var _a = _this.props, checkboxVisibility = _a.checkboxVisibility, items = _a.items, setKey = _a.setKey, _b = _a.selectionMode, selectionMode = _b === void 0 ? _this._selection.mode : _b, columns = _a.columns, viewport = _a.viewport, compact = _a.compact, dragDropEvents = _a.dragDropEvents;
      var _c = (_this.props.groupProps || ({})).isAllGroupsCollapsed, isAllGroupsCollapsed = _c === void 0 ? undefined : _c;
      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;
      var oldViewportWidth = viewport && viewport.width || 0;
      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;
      var shouldForceUpdates = false;
      if (nextProps.layoutMode !== _this.props.layoutMode) {
        shouldForceUpdates = true;
      }
      var nextState = previousState;
      if (shouldResetSelection) {
        _this._initialFocusedIndex = nextProps.initialFocusedIndex;
        // reset focusedItemIndex when setKey changes
        nextState = _tslib.__assign(_tslib.__assign({}, nextState), {
          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1
        });
      }
      if (!_this.props.disableSelectionZone && nextProps.items !== items) {
        _this._selection.setItems(nextProps.items, shouldResetSelection);
      }
      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {
        shouldForceUpdates = true;
      }
      nextState = _tslib.__assign(_tslib.__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));
      if (nextProps.selectionMode !== selectionMode) {
        shouldForceUpdates = true;
      }
      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {
        nextState = _tslib.__assign(_tslib.__assign({}, nextState), {
          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,
          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed
        });
      }
      if (nextProps.dragDropEvents !== dragDropEvents) {
        _this._dragDropHelper && _this._dragDropHelper.dispose();
        _this._dragDropHelper = nextProps.dragDropEvents ? new _DragDrop.DragDropHelper({
          selection: _this._selection,
          minimumPixelsForDrag: nextProps.minimumPixelsForDrag
        }) : undefined;
        shouldForceUpdates = true;
      }
      if (shouldForceUpdates) {
        nextState = _tslib.__assign(_tslib.__assign({}, nextState), {
          version: {}
        });
      }
      return nextState;
    };
    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {
      _this.setState({
        isSomeGroupExpanded: isSomeGroupExpanded
      });
    };
    _this._onColumnIsSizingChanged = function (column, isSizing) {
      _this.setState({
        isSizing: isSizing
      });
    };
    _this._onRowDidMount = function (row) {
      var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;
      var itemKey = _this._getItemKey(item, itemIndex);
      _this._activeRows[itemKey] = row;
      // this is used for column auto resize
      _this._setFocusToRowIfPending(row);
      var onRowDidMount = _this.props.onRowDidMount;
      if (onRowDidMount) {
        onRowDidMount(item, itemIndex);
      }
    };
    _this._onRowWillUnmount = function (row) {
      var onRowWillUnmount = _this.props.onRowWillUnmount;
      var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;
      var itemKey = _this._getItemKey(item, itemIndex);
      delete _this._activeRows[itemKey];
      if (onRowWillUnmount) {
        onRowWillUnmount(item, itemIndex);
      }
    };
    _this._onToggleCollapse = function (collapsed) {
      _this.setState({
        isCollapsed: collapsed
      });
      if (_this._groupedList.current) {
        _this._groupedList.current.toggleCollapseAll(collapsed);
      }
    };
    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {
      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);
      if (_this.props.onColumnResize) {
        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);
      }
      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);
      _this.setState(_tslib.__assign(_tslib.__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {
        version: {}
      }));
    };
    /**
    * Callback function when double clicked on the details header column resizer
    * which will measure the column cells of all the active rows and resize the
    * column to the max cell width.
    *
    * @param column - double clicked column definition
    * @param columnIndex - double clicked column index
    * TODO: min width 100 should be changed to const value and should be consistent with the
    * value used on _onSizerMove method in DetailsHeader
    */
    _this._onColumnAutoResized = function (column, columnIndex) {
      var max = 0;
      var count = 0;
      var totalCount = Object.keys(_this._activeRows).length;
      for (var key in _this._activeRows) {
        if (_this._activeRows.hasOwnProperty(key)) {
          var currentRow = _this._activeRows[key];
          currentRow.measureCell(columnIndex, function (width) {
            max = Math.max(max, width);
            count++;
            if (count === totalCount) {
              _this._onColumnResized(column, max, columnIndex);
            }
          });
        }
      }
    };
    /**
    * Call back function when an element in FocusZone becomes active. It will translate it into item
    * and call onActiveItemChanged callback if specified.
    *
    * @param row - element that became active in Focus Zone
    * @param focus - event from Focus Zone
    */
    _this._onActiveRowChanged = function (el, ev) {
      var _a = _this.props, items = _a.items, onActiveItemChanged = _a.onActiveItemChanged;
      if (!el) {
        return;
      }
      // Check and assign index only if the event was raised from any DetailsRow element
      if (el.getAttribute('data-item-index')) {
        var index = Number(el.getAttribute('data-item-index'));
        if (index >= 0) {
          if (onActiveItemChanged) {
            onActiveItemChanged(items[index], index, ev);
          }
          _this.setState({
            focusedItemIndex: index
          });
        }
      }
    };
    _this._onBlur = function (event) {
      _this.setState({
        focusedItemIndex: -1
      });
    };
    _Utilities.initializeComponentRef(_this);
    _this._async = new _Utilities.Async(_this);
    _this._activeRows = {};
    _this._columnOverrides = {};
    _this.state = {
      focusedItemIndex: -1,
      lastWidth: 0,
      adjustedColumns: _this._getAdjustedColumns(props, undefined),
      isSizing: false,
      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,
      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,
      version: {},
      getDerivedStateFromProps: _this._getDerivedStateFromProps
    };
    _this._selection = props.selection || new _Selection.Selection({
      onSelectionChanged: undefined,
      getKey: props.getKey,
      selectionMode: props.selectionMode
    });
    if (!_this.props.disableSelectionZone) {
      _this._selection.setItems(props.items, false);
    }
    _this._dragDropHelper = props.dragDropEvents ? new _DragDrop.DragDropHelper({
      selection: _this._selection,
      minimumPixelsForDrag: props.minimumPixelsForDrag
    }) : undefined;
    _this._initialFocusedIndex = props.initialFocusedIndex;
    return _this;
  }
  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {
    return previousState.getDerivedStateFromProps(nextProps, previousState);
  };
  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {
    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);
    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);
  };
  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    var item = this.props.items[index];
    if (item) {
      this.scrollToIndex(index, measureItem, scrollToMode);
      var itemKey = this._getItemKey(item, index);
      var row = this._activeRows[itemKey];
      if (row) {
        this._setFocusToRow(row, forceIntoFirstElement);
      }
    }
  };
  DetailsListBase.prototype.getStartItemIndexInView = function () {
    if (this._list && this._list.current) {
      return this._list.current.getStartItemIndexInView();
    } else if (this._groupedList && this._groupedList.current) {
      return this._groupedList.current.getStartItemIndexInView();
    }
    return 0;
  };
  DetailsListBase.prototype.componentWillUnmount = function () {
    if (this._dragDropHelper) {
      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.
      this._dragDropHelper.dispose();
    }
    this._async.dispose();
  };
  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {
    this._notifyColumnsResized();
    if (this._initialFocusedIndex !== undefined) {
      var item = this.props.items[this._initialFocusedIndex];
      if (item) {
        var itemKey = this._getItemKey(item, this._initialFocusedIndex);
        var row = this._activeRows[itemKey];
        if (row) {
          this._setFocusToRowIfPending(row);
        }
      }
    }
    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !_Utilities.elementContains(this._root.current, document.activeElement, false)) {
      // Item set has changed and previously-focused item is gone.
      // Set focus to item at index of previously-focused item if it is in range,
      // else set focus to the last item.
      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;
      var item = this.props.items[index];
      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);
      var row = this._activeRows[itemKey];
      if (row) {
        this._setFocusToRow(row);
      } else {
        this._initialFocusedIndex = index;
      }
    }
    if (this.props.onDidUpdate) {
      this.props.onDidUpdate(this);
    }
  };
  DetailsListBase.prototype.render = function () {
    return _react.createElement(DetailsListInner, _tslib.__assign({}, this.props, this.state, {
      selection: this._selection,
      dragDropHelper: this._dragDropHelper,
      rootRef: this._root,
      listRef: this._list,
      groupedListRef: this._groupedList,
      focusZoneRef: this._focusZone,
      headerRef: this._header,
      selectionZoneRef: this._selectionZone,
      onGroupExpandStateChanged: this._onGroupExpandStateChanged,
      onColumnIsSizingChanged: this._onColumnIsSizingChanged,
      onRowDidMount: this._onRowDidMount,
      onRowWillUnmount: this._onRowWillUnmount,
      onColumnResized: this._onColumnResized,
      onColumnAutoResized: this._onColumnAutoResized,
      onToggleCollapse: this._onToggleCollapse,
      onActiveRowChanged: this._onActiveRowChanged,
      onBlur: this._onBlur,
      onRenderDefaultRow: this._onRenderRow
    }));
  };
  DetailsListBase.prototype.forceUpdate = function () {
    _super.prototype.forceUpdate.call(this);
    this._forceListUpdates();
  };
  DetailsListBase.prototype._getGroupNestingDepth = function () {
    var groups = this.props.groups;
    var level = 0;
    var groupsInLevel = groups;
    while (groupsInLevel && groupsInLevel.length > 0) {
      level++;
      groupsInLevel = groupsInLevel[0].children;
    }
    return level;
  };
  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {
    var itemIndex = row.props.itemIndex;
    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {
      this._setFocusToRow(row);
      delete this._initialFocusedIndex;
    }
  };
  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    if (this._selectionZone.current) {
      this._selectionZone.current.ignoreNextFocus();
    }
    this._async.setTimeout(function () {
      row.focus(forceIntoFirstElement);
    }, 0);
  };
  DetailsListBase.prototype._forceListUpdates = function () {
    if (this._groupedList.current) {
      this._groupedList.current.forceUpdate();
    }
    if (this._list.current) {
      this._list.current.forceUpdate();
    }
  };
  DetailsListBase.prototype._notifyColumnsResized = function () {
    this.state.adjustedColumns.forEach(function (column) {
      if (column.onColumnResize) {
        column.onColumnResize(column.currentWidth);
      }
    });
  };
  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {
    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);
    var viewport = this.props.viewport;
    var viewportWidth = viewport && viewport.width ? viewport.width : 0;
    return _tslib.__assign(_tslib.__assign({}, previousState), {
      adjustedColumns: adjustedColumns,
      lastWidth: viewportWidth
    });
  };
  /** Returns adjusted columns, given the viewport size and layout mode.*/
  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {
    var _this = this;
    var newItems = newProps.items, layoutMode = newProps.layoutMode, selectionMode = newProps.selectionMode, viewport = newProps.viewport;
    var viewportWidth = viewport && viewport.width ? viewport.width : 0;
    var newColumns = newProps.columns;
    var columns = this.props ? this.props.columns : [];
    var lastWidth = previousState ? previousState.lastWidth : -1;
    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;
    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {
      return newColumns || [];
    }
    newColumns = newColumns || buildColumns(newItems, true);
    var adjustedColumns;
    if (layoutMode === _DetailsListDetailsListTypes.DetailsListLayoutMode.fixedColumns) {
      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);
      // Preserve adjusted column calculated widths.
      adjustedColumns.forEach(function (column) {
        _this._rememberCalculatedWidth(column, column.calculatedWidth);
      });
    } else {
      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);
      adjustedColumns.forEach(function (column) {
        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;
      });
    }
    return adjustedColumns;
  };
  /** Builds a set of columns based on the given columns mixed with the current overrides.*/
  DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {
    var _this = this;
    var _a = this.props, _b = _a.selectionMode, selectionMode = _b === void 0 ? this._selection.mode : _b, checkboxVisibility = _a.checkboxVisibility, flexMargin = _a.flexMargin, skipViewportMeasures = _a.skipViewportMeasures;
    var remainingWidth = viewportWidth - (flexMargin || 0);
    var sumProportionalWidth = 0;
    newColumns.forEach(function (col) {
      if (skipViewportMeasures || !col.flexGrow) {
        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;
      } else {
        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;
        sumProportionalWidth += col.flexGrow;
      }
      remainingWidth -= getPaddedWidth(col, props, true);
    });
    var rowCheckWidth = selectionMode !== _Selection.SelectionMode.none && checkboxVisibility !== _DetailsListDetailsListTypes.CheckboxVisibility.hidden ? _DetailsRowCheckStyles.CHECK_CELL_WIDTH : 0;
    var groupExpandWidth = this._getGroupNestingDepth() * _GroupedListGroupSpacer.SPACER_WIDTH;
    remainingWidth -= rowCheckWidth + groupExpandWidth;
    var widthFraction = remainingWidth / sumProportionalWidth;
    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.
    if (!skipViewportMeasures) {
      newColumns.forEach(function (column) {
        var newColumn = _tslib.__assign(_tslib.__assign({}, column), _this._columnOverrides[column.key]);
        if (newColumn.flexGrow && newColumn.maxWidth) {
          var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;
          var shrinkWidth = fullWidth - newColumn.maxWidth;
          if (shrinkWidth > 0) {
            remainingWidth += shrinkWidth;
            sumProportionalWidth -= shrinkWidth / (fullWidth - newColumn.minWidth) * newColumn.flexGrow;
          }
        }
      });
    }
    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;
    return newColumns.map(function (column) {
      var newColumn = _tslib.__assign(_tslib.__assign({}, column), _this._columnOverrides[column.key]);
      // Delay computation until viewport width is available.
      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {
        return newColumn;
      }
      if (!newColumn.calculatedWidth) {
        if (!skipViewportMeasures && newColumn.flexGrow) {
          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.
          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;
          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);
        } else {
          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;
        }
      }
      return newColumn;
    });
  };
  /** Builds a set of columns to fix within the viewport width.*/
  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {
    var _this = this;
    var _a = props.selectionMode, selectionMode = _a === void 0 ? this._selection.mode : _a, checkboxVisibility = props.checkboxVisibility;
    var rowCheckWidth = selectionMode !== _Selection.SelectionMode.none && checkboxVisibility !== _DetailsListDetailsListTypes.CheckboxVisibility.hidden ? _DetailsRowCheckStyles.CHECK_CELL_WIDTH : 0;
    var groupExpandWidth = this._getGroupNestingDepth() * _GroupedListGroupSpacer.SPACER_WIDTH;
    var totalWidth = 0;
    // offset because we have one less inner padding.
    var minimumWidth = 0;
    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);
    var adjustedColumns = newColumns.map(function (column, i) {
      var baseColumn = _tslib.__assign(_tslib.__assign({}, column), {
        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH
      });
      var newColumn = _tslib.__assign(_tslib.__assign({}, baseColumn), _this._columnOverrides[column.key]);
      // eslint-disable-next-line deprecation/deprecation
      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {
        minimumWidth += getPaddedWidth(baseColumn, props);
      }
      totalWidth += getPaddedWidth(newColumn, props);
      return newColumn;
    });
    if (minimumWidth > availableWidth) {
      return adjustedColumns;
    }
    var lastIndex = adjustedColumns.length - 1;
    // Shrink or remove collapsable columns.
    while (lastIndex >= 0 && totalWidth > availableWidth) {
      var column = adjustedColumns[lastIndex];
      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;
      var overflowWidth = totalWidth - availableWidth;
      // eslint-disable-next-line deprecation/deprecation
      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {
        var originalWidth = column.calculatedWidth;
        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);
        totalWidth -= originalWidth - column.calculatedWidth;
      } else {
        totalWidth -= getPaddedWidth(column, props);
        adjustedColumns.splice(lastIndex, 1);
      }
      lastIndex--;
    }
    // Then expand columns starting at the beginning, until we've filled the width.
    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {
      var column = adjustedColumns[i];
      var isLast = i === adjustedColumns.length - 1;
      var overrides = this._columnOverrides[column.key];
      if (overrides && overrides.calculatedWidth && !isLast) {
        continue;
      }
      var spaceLeft = availableWidth - totalWidth;
      var increment = void 0;
      if (isLast) {
        increment = spaceLeft;
      } else {
        var maxWidth = column.maxWidth;
        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;
        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;
      }
      column.calculatedWidth = column.calculatedWidth + increment;
      totalWidth += increment;
    }
    return adjustedColumns;
  };
  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {
    var overrides = this._getColumnOverride(column.key);
    overrides.calculatedWidth = newCalculatedWidth;
    overrides.currentWidth = newCalculatedWidth;
  };
  DetailsListBase.prototype._getColumnOverride = function (key) {
    return this._columnOverrides[key] = this._columnOverrides[key] || ({});
  };
  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {
    var getKey = this.props.getKey;
    var itemKey = undefined;
    if (item) {
      itemKey = item.key;
    }
    if (getKey) {
      itemKey = getKey(item, itemIndex);
    }
    if (!itemKey) {
      itemKey = itemIndex;
    }
    return itemKey;
  };
  DetailsListBase.defaultProps = {
    layoutMode: _DetailsListDetailsListTypes.DetailsListLayoutMode.justified,
    selectionMode: _Selection.SelectionMode.multiple,
    constrainMode: _DetailsListDetailsListTypes.ConstrainMode.horizontalConstrained,
    checkboxVisibility: _DetailsListDetailsListTypes.CheckboxVisibility.onHover,
    isHeaderVisible: true,
    compact: false,
    useFastIcons: true
  };
  DetailsListBase = _tslib.__decorate([_utilitiesDecoratorsWithViewport.withViewport], DetailsListBase);
  return DetailsListBase;
})(_react.Component);
function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline) {
  var columns = [];
  if (items && items.length) {
    var firstItem = items[0];
    for (var propName in firstItem) {
      if (firstItem.hasOwnProperty(propName)) {
        columns.push({
          key: propName,
          name: propName,
          fieldName: propName,
          minWidth: MIN_COLUMN_WIDTH,
          maxWidth: 300,
          isCollapsable: !!columns.length,
          isCollapsible: !!columns.length,
          isMultiline: isMultiline === undefined ? false : isMultiline,
          isSorted: sortedColumnKey === propName,
          isSortedDescending: !!isSortedDescending,
          isRowHeader: false,
          columnActionsMode: _DetailsListDetailsListTypes.ColumnActionsMode.clickable,
          isResizable: canResizeColumns,
          onColumnClick: onColumnClick,
          isGrouped: groupedColumnKey === propName
        });
      }
    }
  }
  return columns;
}
function getPaddedWidth(column, props, paddingOnly) {
  var _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _a;
  return (paddingOnly ? 0 : column.calculatedWidth) + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);
}
function getGroupNestingDepth(groups) {
  var level = 0;
  var groupsInLevel = groups;
  while (groupsInLevel && groupsInLevel.length > 0) {
    level++;
    groupsInLevel = groupsInLevel[0].children;
  }
  return level;
}
function useGroupedDetailsListIndexMap(groups) {
  return _react.useMemo(function () {
    var indexMap = {};
    if (groups) {
      var rowCount = 1;
      var numGroupHeaders = 1;
      for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
        var group = groups_1[_i];
        var key = group.key;
        indexMap[key] = {
          numOfGroupHeadersBeforeItem: numGroupHeaders,
          totalRowCount: rowCount
        };
        numGroupHeaders++;
        rowCount += group.count + 1;
      }
    }
    return indexMap;
  }, [groups]);
}

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../DetailsList/DetailsList.types":"2BjaS","../DetailsList/DetailsHeader":"2pO8Z","../DetailsList/DetailsHeader.types":"1RZeD","../DetailsList/DetailsRow":"n9tH6","../../FocusZone":"1FMTL","../../Selection":"3dSNL","../../DragDrop":"2XDjF","../../GroupedList":"77y1q","../../List":"5uzfZ","../../utilities/decorators/withViewport":"5mxRV","../../utilities/groupedList/GroupedListUtility":"doq6E","./DetailsRow.styles":"1FMwI","./DetailsRowCheck.styles":"a5qAi","../GroupedList/GroupSpacer":"3Oub4","@fluentui/utilities":"2AuOe","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"n9tH6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsRow", function () {
  return DetailsRow;
});
var _Utilities = require('../../Utilities');
var _DetailsRowBase = require('./DetailsRow.base');
var _DetailsRowStyles = require('./DetailsRow.styles');
var DetailsRow = _Utilities.styled(_DetailsRowBase.DetailsRowBase, _DetailsRowStyles.getDetailsRowStyles, undefined, {
  scope: 'DetailsRow'
});

},{"../../Utilities":"1439N","./DetailsRow.base":"740Hf","./DetailsRow.styles":"1FMwI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"740Hf":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsRowBase", function () {
  return DetailsRowBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _DetailsListTypes = require('./DetailsList.types');
var _DetailsRowCheck = require('./DetailsRowCheck');
var _GroupedListGroupSpacer = require('../GroupedList/GroupSpacer');
var _DetailsRowFields = require('./DetailsRowFields');
var _FocusZone = require('../../FocusZone');
var _Selection = require('../../Selection');
var _GroupedList = require('../../GroupedList');
var getClassNames = _Utilities.classNamesFunction();
var DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';
var NO_COLUMNS = [];
var DetailsRowBase = /** @class*/
(function (_super) {
  _tslib.__extends(DetailsRowBase, _super);
  function DetailsRowBase(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    _this._cellMeasurer = _react.createRef();
    _this._focusZone = _react.createRef();
    _this._onSelectionChanged = function () {
      var selectionState = getSelectionState(_this.props);
      if (!_Utilities.shallowCompare(selectionState, _this.state.selectionState)) {
        _this.setState({
          selectionState: selectionState
        });
      }
    };
    /**
    * update isDropping state based on the input value, which is used to change style during drag and drop
    *
    * when change to true, that means drag enter. we will add default dropping class name
    * or the custom dropping class name (return result from onDragEnter) to the root elemet.
    *
    * when change to false, that means drag leave. we will remove the dropping class name from root element.
    *
    * @param newValue - New isDropping state value
    * @param event - The event trigger dropping state change which can be dragenter, dragleave etc
    */
    _this._updateDroppingState = function (newValue, event) {
      var isDropping = _this.state.isDropping;
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, item = _a.item;
      if (!newValue) {
        if (dragDropEvents.onDragLeave) {
          dragDropEvents.onDragLeave(item, event);
        }
      } else if (dragDropEvents.onDragEnter) {
        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);
      }
      if (isDropping !== newValue) {
        _this.setState({
          isDropping: newValue
        });
      }
    };
    _Utilities.initializeComponentRef(_this);
    _this._events = new _Utilities.EventGroup(_this);
    _this.state = {
      selectionState: getSelectionState(props),
      columnMeasureInfo: undefined,
      isDropping: false
    };
    _this._droppingClassNames = '';
    return _this;
  }
  DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {
    return _tslib.__assign(_tslib.__assign({}, previousState), {
      selectionState: getSelectionState(nextProps)
    });
  };
  DetailsRowBase.prototype.componentDidMount = function () {
    var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection, item = _a.item, onDidMount = _a.onDidMount;
    if (dragDropHelper && this._root.current) {
      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());
    }
    if (selection) {
      this._events.on(selection, _Selection.SELECTION_CHANGE, this._onSelectionChanged);
    }
    if (onDidMount && item) {
      // If the item appears later, we should wait for it before calling this method.
      this._onDidMountCalled = true;
      onDidMount(this);
    }
  };
  DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {
    var state = this.state;
    var _a = this.props, item = _a.item, onDidMount = _a.onDidMount;
    var columnMeasureInfo = state.columnMeasureInfo;
    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {
      if (this._dragDropSubscription) {
        this._dragDropSubscription.dispose();
        delete this._dragDropSubscription;
      }
      if (this.props.dragDropHelper && this._root.current) {
        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());
      }
    }
    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {
      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;
      columnMeasureInfo.onMeasureDone(newWidth);
      this.setState({
        columnMeasureInfo: undefined
      });
    }
    if (item && onDidMount && !this._onDidMountCalled) {
      this._onDidMountCalled = true;
      onDidMount(this);
    }
  };
  DetailsRowBase.prototype.componentWillUnmount = function () {
    var _a = this.props, item = _a.item, onWillUnmount = _a.onWillUnmount;
    // Only call the onWillUnmount callback if we have an item.
    if (onWillUnmount && item) {
      onWillUnmount(this);
    }
    if (this._dragDropSubscription) {
      this._dragDropSubscription.dispose();
      delete this._dragDropSubscription;
    }
    this._events.dispose();
  };
  DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {
    if (this.props.useReducedRowRenderer) {
      var newSelectionState = getSelectionState(nextProps);
      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {
        return true;
      }
      return !_Utilities.shallowCompare(this.props, nextProps);
    } else {
      return true;
    }
  };
  DetailsRowBase.prototype.render = function () {
    var _a = this.props, className = _a.className, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, dragDropEvents = _a.dragDropEvents, item = _a.item, itemIndex = _a.itemIndex, id = _a.id, _c = _a.flatIndexOffset, flatIndexOffset = _c === void 0 ? 2 : _c, _d = _a.onRenderCheck, onRenderCheck = _d === void 0 ? this._onRenderCheck : _d, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, onRenderItemColumn = _a.onRenderItemColumn, getCellValueKey = _a.getCellValueKey, selectionMode = _a.selectionMode, _e = _a.rowWidth, rowWidth = _e === void 0 ? 0 : _e, checkboxVisibility = _a.checkboxVisibility, getRowAriaLabel = _a.getRowAriaLabel, getRowAriaDescribedBy = _a.getRowAriaDescribedBy, checkButtonAriaLabel = _a.checkButtonAriaLabel, checkboxCellClassName = _a.checkboxCellClassName, /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist*/
    _f = _a.rowFieldsAs, /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist*/
    RowFields = _f === void 0 ? _DetailsRowFields.DetailsRowFields : _f, selection = _a.selection, indentWidth = _a.indentWidth, enableUpdateAnimations = _a.enableUpdateAnimations, compact = _a.compact, theme = _a.theme, styles = _a.styles, cellsByColumn = _a.cellsByColumn, groupNestingDepth = _a.groupNestingDepth, _g = _a.useFastIcons, useFastIcons = _g === void 0 ? true : _g, cellStyleProps = _a.cellStyleProps, group = _a.group;
    var _h = this.state, columnMeasureInfo = _h.columnMeasureInfo, isDropping = _h.isDropping;
    var _j = this.state.selectionState, _k = _j.isSelected, isSelected = _k === void 0 ? false : _k, _l = _j.isSelectionModal, isSelectionModal = _l === void 0 ? false : _l;
    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;
    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';
    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;
    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;
    var canSelect = !!selection && selection.canSelectItem(item, itemIndex);
    var isContentUnselectable = selectionMode === _Selection.SelectionMode.multiple;
    var showCheckbox = selectionMode !== _Selection.SelectionMode.none && checkboxVisibility !== _DetailsListTypes.CheckboxVisibility.hidden;
    var ariaSelected = selectionMode === _Selection.SelectionMode.none ? undefined : isSelected;
    var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;
    var ariaSetSize = group ? group.count : undefined;
    this._classNames = _tslib.__assign(_tslib.__assign({}, this._classNames), getClassNames(styles, {
      theme: theme,
      isSelected: isSelected,
      canSelect: !isContentUnselectable,
      anySelected: isSelectionModal,
      checkboxCellClassName: checkboxCellClassName,
      droppingClassName: droppingClassName,
      className: className,
      compact: compact,
      enableUpdateAnimations: enableUpdateAnimations,
      cellStyleProps: cellStyleProps
    }));
    var rowClassNames = {
      isMultiline: this._classNames.isMultiline,
      isRowHeader: this._classNames.isRowHeader,
      cell: this._classNames.cell,
      cellAnimation: this._classNames.cellAnimation,
      cellPadded: this._classNames.cellPadded,
      cellUnpadded: this._classNames.cellUnpadded,
      fields: this._classNames.fields
    };
    // Only re-assign rowClassNames when classNames have changed.
    // Otherwise, they will cause DetailsRowFields to unnecessarily
    // re-render, see https://github.com/microsoft/fluentui/pull/8799.
    // Refactor DetailsRowFields to generate own styles to remove need for this.
    if (!_Utilities.shallowCompare(this._rowClassNames || ({}), rowClassNames)) {
      this._rowClassNames = rowClassNames;
    }
    var rowFields = _react.createElement(RowFields, {
      rowClassNames: this._rowClassNames,
      rowHeaderId: id + "-header",
      cellsByColumn: cellsByColumn,
      columns: columns,
      item: item,
      itemIndex: itemIndex,
      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0),
      onRenderItemColumn: onRenderItemColumn,
      getCellValueKey: getCellValueKey,
      enableUpdateAnimations: enableUpdateAnimations,
      cellStyleProps: cellStyleProps
    });
    var defaultRole = 'row';
    var role = this.props.role ? this.props.role : defaultRole;
    return _react.createElement(_FocusZone.FocusZone, _tslib.__assign({
      "data-is-focusable": true
    }, _Utilities.getNativeProps(this.props, _Utilities.divProperties), typeof isDraggable === 'boolean' ? {
      'data-is-draggable': isDraggable,
      draggable: isDraggable
    } : {}, {
      direction: _FocusZone.FocusZoneDirection.horizontal,
      elementRef: this._root,
      componentRef: this._focusZone,
      role: role,
      "aria-label": ariaLabel,
      "aria-describedby": ariaDescribedBy,
      className: this._classNames.root,
      "data-selection-index": itemIndex,
      "data-selection-touch-invoke": true,
      "data-item-index": itemIndex,
      "aria-rowindex": ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined,
      "aria-level": groupNestingDepth && groupNestingDepth + 1 || undefined,
      "aria-posinset": ariaPositionInSet,
      "aria-setsize": ariaSetSize,
      "data-automationid": "DetailsRow",
      style: {
        minWidth: rowWidth
      },
      "aria-selected": ariaSelected,
      allowFocusRoot: true
    }), showCheckbox && _react.createElement("div", {
      role: "gridcell",
      "aria-colindex": 1,
      "data-selection-toggle": true,
      className: this._classNames.checkCell
    }, onRenderCheck({
      id: id ? id + "-checkbox" : undefined,
      selected: isSelected,
      anySelected: isSelectionModal,
      'aria-label': checkButtonAriaLabel,
      'aria-labelledby': id ? id + "-checkbox " + id + "-header" : undefined,
      canSelect: canSelect,
      compact: compact,
      className: this._classNames.check,
      theme: theme,
      isVisible: checkboxVisibility === _DetailsListTypes.CheckboxVisibility.always,
      onRenderDetailsCheckbox: onRenderDetailsCheckbox,
      useFastIcons: useFastIcons
    })), _react.createElement(_GroupedListGroupSpacer.GroupSpacer, {
      indentWidth: indentWidth,
      role: "gridcell",
      count: groupNestingDepth - (this.props.collapseAllVisibility === _GroupedList.CollapseAllVisibility.hidden ? 1 : 0)
    }), item && rowFields, columnMeasureInfo && _react.createElement("span", {
      role: "presentation",
      className: _Utilities.css(this._classNames.cellMeasurer, this._classNames.cell),
      ref: this._cellMeasurer
    }, _react.createElement(RowFields, {
      rowClassNames: this._rowClassNames,
      rowHeaderId: id + "-header",
      columns: [columnMeasureInfo.column],
      item: item,
      itemIndex: itemIndex,
      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length,
      onRenderItemColumn: onRenderItemColumn,
      getCellValueKey: getCellValueKey
    })), _react.createElement("span", {
      role: "checkbox",
      className: this._classNames.checkCover,
      "aria-checked": isSelected,
      "data-selection-toggle": true
    }));
  };
  /**
  * measure cell at index. and call the call back with the measured cell width when finish measure
  *
  * @param index - The cell index
  * @param onMeasureDone - The call back function when finish measure
  */
  DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {
    var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
    var column = _tslib.__assign({}, columns[index]);
    column.minWidth = 0;
    column.maxWidth = 999999;
    delete column.calculatedWidth;
    this.setState({
      columnMeasureInfo: {
        index: index,
        column: column,
        onMeasureDone: onMeasureDone
      }
    });
  };
  DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {
    var _a;
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));
  };
  DetailsRowBase.prototype._onRenderCheck = function (props) {
    return _react.createElement(_DetailsRowCheck.DetailsRowCheck, _tslib.__assign({}, props));
  };
  DetailsRowBase.prototype._getRowDragDropOptions = function () {
    var _a = this.props, item = _a.item, itemIndex = _a.itemIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;
    var options = {
      eventMap: eventsToRegister,
      selectionIndex: itemIndex,
      context: {
        data: item,
        index: itemIndex
      },
      canDrag: dragDropEvents.canDrag,
      canDrop: dragDropEvents.canDrop,
      onDragStart: dragDropEvents.onDragStart,
      updateDropState: this._updateDroppingState,
      onDrop: dragDropEvents.onDrop,
      onDragEnd: dragDropEvents.onDragEnd,
      onDragOver: dragDropEvents.onDragOver
    };
    return options;
  };
  return DetailsRowBase;
})(_react.Component);
function getSelectionState(props) {
  var _a;
  var itemIndex = props.itemIndex, selection = props.selection;
  return {
    isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),
    isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection))
  };
}

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./DetailsList.types":"2BjaS","./DetailsRowCheck":"6Nbsm","../GroupedList/GroupSpacer":"3Oub4","./DetailsRowFields":"1UcUQ","../../FocusZone":"1FMTL","../../Selection":"3dSNL","../../GroupedList":"77y1q","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1UcUQ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DetailsRowFields", function () {
  return DetailsRowFields;
});
var _react = require('react');
var _Utilities = require('../../Utilities');
var _DetailsRowStyles = require('./DetailsRow.styles');
var getCellText = function (item, column) {
  var value = item && column && column.fieldName ? item[column.fieldName] : '';
  if (value === null || value === undefined) {
    value = '';
  }
  if (typeof value === 'boolean') {
    return value.toString();
  }
  return value;
};
var DetailsRowFields = function (props) {
  var columns = props.columns, columnStartIndex = props.columnStartIndex, rowClassNames = props.rowClassNames, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _a, item = props.item, itemIndex = props.itemIndex, onRenderItemColumn = props.onRenderItemColumn, getCellValueKey = props.getCellValueKey, cellsByColumn = props.cellsByColumn, enableUpdateAnimations = props.enableUpdateAnimations, rowHeaderId = props.rowHeaderId;
  var cellValueKeysRef = _react.useRef();
  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});
  return _react.createElement("div", {
    className: rowClassNames.fields,
    "data-automationid": "DetailsRowFields",
    role: "presentation"
  }, columns.map(function (column, columnIndex) {
    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);
    var _a = column.onRender, onRender = _a === void 0 ? onRenderItemColumn : _a, _b = column.getValueKey, getValueKey = _b === void 0 ? getCellValueKey : _b;
    var cellContentsRender = cellsByColumn && (column.key in cellsByColumn) ? cellsByColumn[column.key] : onRender ? onRender(item, itemIndex, column) : getCellText(item, column);
    var previousValueKey = cellValueKeys[column.key];
    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;
    var showAnimation = false;
    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {
      showAnimation = true;
    }
    cellValueKeys[column.key] = cellValueKey;
    // generate a key that auto-dirties when content changes, to force the container to re-render,
    // to trigger animation
    var key = "" + column.key + (cellValueKey !== undefined ? "-" + cellValueKey : '');
    return _react.createElement("div", {
      key: key,
      id: column.isRowHeader ? rowHeaderId : undefined,
      role: column.isRowHeader ? 'rowheader' : 'gridcell',
      "aria-readonly": true,
      "aria-colindex": columnIndex + columnStartIndex + 1,
      className: _Utilities.css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, showAnimation && rowClassNames.cellAnimation),
      style: {
        width: width
      },
      "data-automationid": "DetailsRowCell",
      "data-automation-key": column.key
    }, cellContentsRender);
  }));
};

},{"react":"4g1R3","../../Utilities":"1439N","./DetailsRow.styles":"1FMwI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5mxRV":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "withViewport", function () {
  return withViewport;
});
var _tslib = require("tslib");
var _react = require('react');
var _BaseDecorator = require('./BaseDecorator');
var _Utilities = require('../../Utilities');
var RESIZE_DELAY = 500;
var MAX_RESIZE_ATTEMPTS = 3;
function withViewport(ComposedComponent) {
  return (
    /** @class*/
    (function (_super) {
      _tslib.__extends(WithViewportComponent, _super);
      function WithViewportComponent(props) {
        var _this = _super.call(this, props) || this;
        _this._root = _react.createRef();
        _this._registerResizeObserver = function () {
          var win = _Utilities.getWindow(_this._root.current);
          _this._viewportResizeObserver = new win.ResizeObserver(_this._onAsyncResize);
          _this._viewportResizeObserver.observe(_this._root.current);
        };
        _this._unregisterResizeObserver = function () {
          if (_this._viewportResizeObserver) {
            _this._viewportResizeObserver.disconnect();
            delete _this._viewportResizeObserver;
          }
        };
        /*Note: using lambda here because decorators don't seem to work in decorators.*/
        _this._updateViewport = function (withForceUpdate) {
          var viewport = _this.state.viewport;
          var viewportElement = _this._root.current;
          var scrollElement = _Utilities.findScrollableParent(viewportElement);
          var scrollRect = _Utilities.getRect(scrollElement);
          var clientRect = _Utilities.getRect(viewportElement);
          var updateComponent = function () {
            if (withForceUpdate && _this._composedComponentInstance) {
              _this._composedComponentInstance.forceUpdate();
            }
          };
          var isSizeChanged = (clientRect && clientRect.width) !== viewport.width || (scrollRect && scrollRect.height) !== viewport.height;
          if (isSizeChanged && _this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {
            _this._resizeAttempts++;
            _this.setState({
              viewport: {
                width: clientRect.width,
                height: scrollRect.height
              }
            }, function () {
              _this._updateViewport(withForceUpdate);
            });
          } else {
            _this._resizeAttempts = 0;
            updateComponent();
          }
        };
        _this._async = new _Utilities.Async(_this);
        _this._events = new _Utilities.EventGroup(_this);
        _this._resizeAttempts = 0;
        _this.state = {
          viewport: {
            width: 0,
            height: 0
          }
        };
        return _this;
      }
      WithViewportComponent.prototype.componentDidMount = function () {
        var _a = this.props, skipViewportMeasures = _a.skipViewportMeasures, disableResizeObserver = _a.disableResizeObserver;
        var win = _Utilities.getWindow(this._root.current);
        this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {
          leading: false
        });
        if (!skipViewportMeasures) {
          if (!disableResizeObserver && this._isResizeObserverAvailable()) {
            this._registerResizeObserver();
          } else {
            this._events.on(win, 'resize', this._onAsyncResize);
          }
          this._updateViewport();
        }
      };
      WithViewportComponent.prototype.componentDidUpdate = function (previousProps) {
        var previousSkipViewportMeasures = previousProps.skipViewportMeasures;
        var _a = this.props, skipViewportMeasures = _a.skipViewportMeasures, disableResizeObserver = _a.disableResizeObserver;
        var win = _Utilities.getWindow(this._root.current);
        if (skipViewportMeasures !== previousSkipViewportMeasures) {
          if (!skipViewportMeasures) {
            if (!disableResizeObserver && this._isResizeObserverAvailable()) {
              if (!this._viewportResizeObserver) {
                this._registerResizeObserver();
              }
            } else {
              this._events.on(win, 'resize', this._onAsyncResize);
            }
            this._updateViewport();
          } else {
            this._unregisterResizeObserver();
            this._events.off(win, 'resize', this._onAsyncResize);
          }
        }
      };
      WithViewportComponent.prototype.componentWillUnmount = function () {
        this._events.dispose();
        this._async.dispose();
        this._unregisterResizeObserver();
      };
      WithViewportComponent.prototype.render = function () {
        var viewport = this.state.viewport;
        var newViewport = viewport.width > 0 && viewport.height > 0 ? viewport : undefined;
        return _react.createElement("div", {
          className: "ms-Viewport",
          ref: this._root,
          style: {
            minWidth: 1,
            minHeight: 1
          }
        }, _react.createElement(ComposedComponent, _tslib.__assign({
          ref: this._updateComposedComponentRef,
          viewport: newViewport
        }, this.props)));
      };
      WithViewportComponent.prototype.forceUpdate = function () {
        this._updateViewport(true);
      };
      WithViewportComponent.prototype._onAsyncResize = function () {
        this._updateViewport();
      };
      WithViewportComponent.prototype._isResizeObserverAvailable = function () {
        var win = _Utilities.getWindow(this._root.current);
        return win && win.ResizeObserver;
      };
      return WithViewportComponent;
    })(_BaseDecorator.BaseDecorator)
  );
}

},{"tslib":"6ZIET","react":"4g1R3","./BaseDecorator":"5zmwU","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"doq6E":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "GetGroupCount", function () {
  return GetGroupCount;
});
var _tslib = require("tslib");
var GetGroupCount = function (groups) {
  var total = 0;
  if (groups) {
    var remainingGroups = _tslib.__spreadArrays(groups);
    var currentGroup = void 0;
    while (remainingGroups && remainingGroups.length > 0) {
      ++total;
      currentGroup = remainingGroups.pop();
      if (currentGroup && currentGroup.children) {
        remainingGroups.push.apply(remainingGroups, currentGroup.children);
      }
    }
  }
  return total;
};

},{"tslib":"6ZIET","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2y7VH":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var GlobalClassNames = {
  root: 'ms-DetailsList',
  compact: 'ms-DetailsList--Compact',
  contentWrapper: 'ms-DetailsList-contentWrapper',
  headerWrapper: 'ms-DetailsList-headerWrapper',
  isFixed: 'is-fixed',
  isHorizontalConstrained: 'is-horizontalConstrained',
  listCell: 'ms-List-cell'
};
var getStyles = function (props) {
  var _a, _b;
  var theme = props.theme, className = props.className, isHorizontalConstrained = props.isHorizontalConstrained, compact = props.compact, isFixed = props.isFixed;
  var semanticColors = theme.semanticColors;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, theme.fonts.small, {
      position: 'relative',
      color: semanticColors.listText,
      selectors: (_a = {}, _a["& ." + classNames.listCell] = {
        minHeight: 38,
        wordBreak: 'break-word'
      }, _a)
    }, isFixed && classNames.isFixed, compact && [classNames.compact, {
      selectors: (_b = {}, _b["." + classNames.listCell] = {
        minHeight: 32
      }, _b)
    }], isHorizontalConstrained && [classNames.isHorizontalConstrained, {
      overflowX: 'auto',
      overflowY: 'visible',
      WebkitOverflowScrolling: 'touch'
    }], className],
    focusZone: [{
      display: 'inline-block',
      minWidth: '100%',
      minHeight: 1
    }],
    headerWrapper: classNames.headerWrapper,
    contentWrapper: classNames.contentWrapper
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3tBuv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3eyeB":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4fPB0":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6Twvz":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4Ujpx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5PnsR":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsMarqueeSelectionMarqueeSelection = require('./components/MarqueeSelection/MarqueeSelection');
_parcelHelpers.exportAll(_componentsMarqueeSelectionMarqueeSelection, exports);
var _componentsMarqueeSelectionMarqueeSelectionTypes = require('./components/MarqueeSelection/MarqueeSelection.types');
_parcelHelpers.exportAll(_componentsMarqueeSelectionMarqueeSelectionTypes, exports);
var _utilitiesSelectionIndex = require('./utilities/selection/index');
_parcelHelpers.exportAll(_utilitiesSelectionIndex, exports);

},{"./components/MarqueeSelection/MarqueeSelection":"5TC9O","./components/MarqueeSelection/MarqueeSelection.types":"2jgwy","./utilities/selection/index":"1JDzh","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5TC9O":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "MarqueeSelection", function () {
  return MarqueeSelection;
});
var _Utilities = require('../../Utilities');
var _MarqueeSelectionBase = require('./MarqueeSelection.base');
var _MarqueeSelectionStyles = require('./MarqueeSelection.styles');
var MarqueeSelection = // TODO: MarqueeSelectionBase defaultProps are not lining up with IMarqueeSelectionProps, so we have to be explicit
// with styled here. defaultProps.rootTagName doesn't appear to be used anywhere and defaultProps.rootProps is not
// in IMarqueeSelectionProps.
_Utilities.styled(_MarqueeSelectionBase.MarqueeSelectionBase, _MarqueeSelectionStyles.getStyles, undefined, {
  scope: 'MarqueeSelection'
});

},{"../../Utilities":"1439N","./MarqueeSelection.base":"2Kw5T","./MarqueeSelection.styles":"3BcGY","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2Kw5T":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "MarqueeSelectionBase", function () {
  return MarqueeSelectionBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start
// the drag even if they just click an item without moving.
var MIN_DRAG_DISTANCE = 5;
/**
* MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.
* Elements which have data-selectable-index attributes are queried and measured once to determine if they
* fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization
* so if the items change sizes while dragging, that could cause incorrect results.
*/
var MarqueeSelectionBase = /** @class*/
(function (_super) {
  _tslib.__extends(MarqueeSelectionBase, _super);
  function MarqueeSelectionBase(props) {
    var _this = _super.call(this, props) || this;
    _this._root = _react.createRef();
    _this._onMouseDown = function (ev) {
      var _a = _this.props, isEnabled = _a.isEnabled, onShouldStartSelection = _a.onShouldStartSelection;
      // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.
      if (_this._isMouseEventOnScrollbar(ev)) {
        return;
      }
      if (_this._isInSelectionToggle(ev)) {
        return;
      }
      if (!_this._isTouch && isEnabled && !_this._isDragStartInSelection(ev) && (!onShouldStartSelection || onShouldStartSelection(ev))) {
        if (_this._scrollableSurface && ev.button === 0 && _this._root.current) {
          _this._selectedIndicies = {};
          _this._preservedIndicies = undefined;
          _this._events.on(window, 'mousemove', _this._onAsyncMouseMove, true);
          _this._events.on(_this._scrollableParent, 'scroll', _this._onAsyncMouseMove);
          _this._events.on(window, 'click', _this._onMouseUp, true);
          _this._autoScroll = new _Utilities.AutoScroll(_this._root.current);
          _this._scrollTop = _this._scrollableSurface.scrollTop;
          _this._scrollLeft = _this._scrollableSurface.scrollLeft;
          _this._rootRect = _this._root.current.getBoundingClientRect();
          _this._onMouseMove(ev);
        }
      }
    };
    _this._onTouchStart = function (ev) {
      _this._isTouch = true;
      _this._async.setTimeout(function () {
        _this._isTouch = false;
      }, 0);
    };
    _this._onPointerDown = function (ev) {
      if (ev.pointerType === 'touch') {
        _this._isTouch = true;
        _this._async.setTimeout(function () {
          _this._isTouch = false;
        }, 0);
      }
    };
    _Utilities.initializeComponentRef(_this);
    _this._async = new _Utilities.Async(_this);
    _this._events = new _Utilities.EventGroup(_this);
    _this.state = {
      dragRect: undefined
    };
    return _this;
  }
  MarqueeSelectionBase.prototype.componentDidMount = function () {
    this._scrollableParent = _Utilities.findScrollableParent(this._root.current);
    this._scrollableSurface = this._scrollableParent === window ? document.body : this._scrollableParent;
    // When scroll events come from window, we need to read scrollTop values from the body.
    var hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;
    this._events.on(hitTarget, 'mousedown', this._onMouseDown);
    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);
    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);
  };
  MarqueeSelectionBase.prototype.componentWillUnmount = function () {
    if (this._autoScroll) {
      this._autoScroll.dispose();
    }
    delete this._scrollableParent;
    delete this._scrollableSurface;
    this._events.dispose();
    this._async.dispose();
  };
  MarqueeSelectionBase.prototype.render = function () {
    var _a = this.props, rootProps = _a.rootProps, children = _a.children, theme = _a.theme, className = _a.className, styles = _a.styles;
    var dragRect = this.state.dragRect;
    var classNames = getClassNames(styles, {
      theme: theme,
      className: className
    });
    return _react.createElement("div", _tslib.__assign({}, rootProps, {
      className: classNames.root,
      ref: this._root
    }), children, dragRect && _react.createElement("div", {
      className: classNames.dragMask
    }), dragRect && _react.createElement("div", {
      className: classNames.box,
      style: dragRect
    }, _react.createElement("div", {
      className: classNames.boxFill
    })));
  };
  /** Determine if the mouse event occured on a scrollbar of the target element.*/
  MarqueeSelectionBase.prototype._isMouseEventOnScrollbar = function (ev) {
    var targetElement = ev.target;
    var targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;
    if (targetScrollbarWidth) {
      var targetRect = targetElement.getBoundingClientRect();
      // Check vertical scroll
      if (_Utilities.getRTL(this.props.theme)) {
        if (ev.clientX < targetRect.left + targetScrollbarWidth) {
          return true;
        }
      } else {
        if (ev.clientX > targetRect.left + targetElement.clientWidth) {
          return true;
        }
      }
      // Check horizontal scroll
      if (ev.clientY > targetRect.top + targetElement.clientHeight) {
        return true;
      }
    }
    return false;
  };
  MarqueeSelectionBase.prototype._getRootRect = function () {
    return {
      left: this._rootRect.left + (this._scrollableSurface ? this._scrollLeft - this._scrollableSurface.scrollLeft : this._scrollLeft),
      top: this._rootRect.top + (this._scrollableSurface ? this._scrollTop - this._scrollableSurface.scrollTop : this._scrollTop),
      width: this._rootRect.width,
      height: this._rootRect.height
    };
  };
  MarqueeSelectionBase.prototype._onAsyncMouseMove = function (ev) {
    var _this = this;
    this._async.requestAnimationFrame(function () {
      _this._onMouseMove(ev);
    });
    ev.stopPropagation();
    ev.preventDefault();
  };
  MarqueeSelectionBase.prototype._onMouseMove = function (ev) {
    if (!this._autoScroll) {
      return;
    }
    if (ev.clientX !== undefined) {
      this._lastMouseEvent = ev;
    }
    var rootRect = this._getRootRect();
    var currentPoint = {
      left: ev.clientX - rootRect.left,
      top: ev.clientY - rootRect.top
    };
    if (!this._dragOrigin) {
      this._dragOrigin = currentPoint;
    }
    if (ev.buttons !== undefined && ev.buttons === 0) {
      this._onMouseUp(ev);
    } else {
      if (this.state.dragRect || _Utilities.getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {
        if (!this.state.dragRect) {
          var selection = this.props.selection;
          if (!ev.shiftKey) {
            selection.setAllSelected(false);
          }
          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();
        }
        // We need to constrain the current point to the rootRect boundaries.
        var constrainedPoint = this.props.isDraggingConstrainedToRoot ? {
          left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent.clientX - rootRect.left)),
          top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent.clientY - rootRect.top))
        } : {
          left: this._lastMouseEvent.clientX - rootRect.left,
          top: this._lastMouseEvent.clientY - rootRect.top
        };
        var dragRect = {
          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),
          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),
          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),
          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0))
        };
        this._evaluateSelection(dragRect, rootRect);
        this.setState({
          dragRect: dragRect
        });
      }
    }
    return false;
  };
  MarqueeSelectionBase.prototype._onMouseUp = function (ev) {
    this._events.off(window);
    this._events.off(this._scrollableParent, 'scroll');
    if (this._autoScroll) {
      this._autoScroll.dispose();
    }
    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;
    this._selectedIndicies = this._itemRectCache = undefined;
    if (this.state.dragRect) {
      this.setState({
        dragRect: undefined
      });
      ev.preventDefault();
      ev.stopPropagation();
    }
  };
  MarqueeSelectionBase.prototype._isPointInRectangle = function (rectangle, point) {
    return !!point.top && rectangle.top < point.top && rectangle.bottom > point.top && !!point.left && rectangle.left < point.left && rectangle.right > point.left;
  };
  /**
  * We do not want to start the marquee if we're trying to marquee
  * from within an existing marquee selection.
  */
  MarqueeSelectionBase.prototype._isDragStartInSelection = function (ev) {
    var selection = this.props.selection;
    if (!this._root.current || selection && selection.getSelectedCount() === 0) {
      return false;
    }
    var allElements = this._root.current.querySelectorAll('[data-selection-index]');
    for (var i = 0; i < allElements.length; i++) {
      var element = allElements[i];
      var index = Number(element.getAttribute('data-selection-index'));
      if (selection.isIndexSelected(index)) {
        var itemRect = element.getBoundingClientRect();
        if (this._isPointInRectangle(itemRect, {
          left: ev.clientX,
          top: ev.clientY
        })) {
          return true;
        }
      }
    }
    return false;
  };
  MarqueeSelectionBase.prototype._isInSelectionToggle = function (ev) {
    var element = ev.target;
    while (element && element !== this._root.current) {
      if (element.getAttribute('data-selection-toggle') === 'true') {
        return true;
      }
      element = element.parentElement;
    }
    return false;
  };
  MarqueeSelectionBase.prototype._evaluateSelection = function (dragRect, rootRect) {
    // Break early if we don't need to evaluate.
    if (!dragRect || !this._root.current) {
      return;
    }
    var selection = this.props.selection;
    var allElements = this._root.current.querySelectorAll('[data-selection-index]');
    if (!this._itemRectCache) {
      this._itemRectCache = {};
    }
    for (var i = 0; i < allElements.length; i++) {
      var element = allElements[i];
      var index = element.getAttribute('data-selection-index');
      // Pull the memoized rectangle for the item, or the get the rect and memoize.
      var itemRect = this._itemRectCache[index];
      if (!itemRect) {
        itemRect = element.getBoundingClientRect();
        // Normalize the item rect to the dragRect coordinates.
        itemRect = {
          left: itemRect.left - rootRect.left,
          top: itemRect.top - rootRect.top,
          width: itemRect.width,
          height: itemRect.height,
          right: itemRect.left - rootRect.left + itemRect.width,
          bottom: itemRect.top - rootRect.top + itemRect.height
        };
        if (itemRect.width > 0 && itemRect.height > 0) {
          this._itemRectCache[index] = itemRect;
        }
      }
      if (itemRect.top < dragRect.top + dragRect.height && itemRect.bottom > dragRect.top && itemRect.left < dragRect.left + dragRect.width && itemRect.right > dragRect.left) {
        this._selectedIndicies[index] = true;
      } else {
        delete this._selectedIndicies[index];
      }
    }
    // set previousSelectedIndices to be all of the selected indices from last time
    var previousSelectedIndices = this._allSelectedIndices || ({});
    this._allSelectedIndices = {};
    // set all indices that are supposed to be selected in _allSelectedIndices
    for (var index in this._selectedIndicies) {
      if (this._selectedIndicies.hasOwnProperty(index)) {
        this._allSelectedIndices[index] = true;
      }
    }
    if (this._preservedIndicies) {
      for (var _i = 0, _a = this._preservedIndicies; _i < _a.length; _i++) {
        var index = _a[_i];
        this._allSelectedIndices[index] = true;
      }
    }
    // check if needs to update selection, only when current _allSelectedIndices
    // is different than previousSelectedIndices
    var needToUpdate = false;
    for (var index in this._allSelectedIndices) {
      if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {
        needToUpdate = true;
        break;
      }
    }
    if (!needToUpdate) {
      for (var index in previousSelectedIndices) {
        if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {
          needToUpdate = true;
          break;
        }
      }
    }
    // only update selection when needed
    if (needToUpdate) {
      // Stop change events, clear selection to re-populate.
      selection.setChangeEvents(false);
      selection.setAllSelected(false);
      for (var _b = 0, _c = Object.keys(this._allSelectedIndices); _b < _c.length; _b++) {
        var index = _c[_b];
        selection.setIndexSelected(Number(index), true, false);
      }
      selection.setChangeEvents(true);
    }
  };
  MarqueeSelectionBase.defaultProps = {
    rootTagName: 'div',
    rootProps: {},
    isEnabled: true
  };
  return MarqueeSelectionBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3BcGY":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var getStyles = function (props) {
  var _a, _b, _c;
  var theme = props.theme, className = props.className;
  var palette = theme.palette;
  return {
    root: [className, {
      position: 'relative',
      cursor: 'default'
    }],
    dragMask: [{
      position: 'absolute',
      background: 'rgba(255, 0, 0, 0)',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        background: 'none',
        backgroundColor: 'transparent'
      }, _a)
    }],
    box: [{
      position: 'absolute',
      boxSizing: 'border-box',
      border: "1px solid " + palette.themePrimary,
      pointerEvents: 'none',
      zIndex: 10,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        borderColor: 'Highlight'
      }, _b)
    }],
    boxFill: [{
      position: 'absolute',
      boxSizing: 'border-box',
      backgroundColor: palette.themePrimary,
      opacity: 0.1,
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
        background: 'none',
        backgroundColor: 'transparent'
      }, _c)
    }]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2jgwy":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5Mc0M":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsTextFieldIndex = require('./components/TextField/index');
_parcelHelpers.exportAll(_componentsTextFieldIndex, exports);

},{"./components/TextField/index":"2XXsj","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2XXsj":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _TextField = require('./TextField');
_parcelHelpers.exportAll(_TextField, exports);
var _TextFieldBase = require('./TextField.base');
_parcelHelpers.exportAll(_TextFieldBase, exports);
var _TextFieldTypes = require('./TextField.types');
_parcelHelpers.exportAll(_TextFieldTypes, exports);
var _MaskedTextFieldMaskedTextField = require('./MaskedTextField/MaskedTextField');
_parcelHelpers.exportAll(_MaskedTextFieldMaskedTextField, exports);

},{"./TextField":"4TsXJ","./TextField.base":"2rpsF","./TextField.types":"VkLbQ","./MaskedTextField/MaskedTextField":"1Dp05","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4TsXJ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "TextField", function () {
  return TextField;
});
var _Utilities = require('../../Utilities');
var _TextFieldBase = require('./TextField.base');
var _TextFieldStyles = require('./TextField.styles');
var TextField = _Utilities.styled(_TextFieldBase.TextFieldBase, _TextFieldStyles.getStyles, undefined, {
  scope: 'TextField'
});

},{"../../Utilities":"1439N","./TextField.base":"2rpsF","./TextField.styles":"24bep","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2rpsF":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "TextFieldBase", function () {
  return TextFieldBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Label = require('../../Label');
var _Icon = require('../../Icon');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var DEFAULT_STATE_VALUE = '';
var COMPONENT_NAME = 'TextField';
var REVEAL_ICON_NAME = 'RedEye';
var HIDE_ICON_NAME = 'Hide';
var TextFieldBase = /** @class*/
(function (_super) {
  _tslib.__extends(TextFieldBase, _super);
  function TextFieldBase(props) {
    var _this = _super.call(this, props) || this;
    _this._textElement = _react.createRef();
    _this._onFocus = function (ev) {
      if (_this.props.onFocus) {
        _this.props.onFocus(ev);
      }
      _this.setState({
        isFocused: true
      }, function () {
        if (_this.props.validateOnFocusIn) {
          _this._validate(_this.value);
        }
      });
    };
    _this._onBlur = function (ev) {
      if (_this.props.onBlur) {
        _this.props.onBlur(ev);
      }
      _this.setState({
        isFocused: false
      }, function () {
        if (_this.props.validateOnFocusOut) {
          _this._validate(_this.value);
        }
      });
    };
    _this._onRenderLabel = function (props) {
      var label = props.label, required = props.required;
      // IProcessedStyleSet definition requires casting for what Label expects as its styles prop
      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;
      if (label) {
        return _react.createElement(_Label.Label, {
          required: required,
          htmlFor: _this._id,
          styles: labelStyles,
          disabled: props.disabled,
          id: _this._labelId
        }, props.label);
      }
      return null;
    };
    _this._onRenderDescription = function (props) {
      if (props.description) {
        return _react.createElement("span", {
          className: _this._classNames.description
        }, props.description);
      }
      return null;
    };
    _this._onRevealButtonClick = function (event) {
      _this.setState(function (prevState) {
        return {
          isRevealingPassword: !prevState.isRevealingPassword
        };
      });
    };
    _this._onInputChange = function (event) {
      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,
      // which have *probably* been fixed now:
      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)
      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)
      var _a, _b;
      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for
      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.
      var element = event.target;
      var value = element.value;
      // Ignore this event if any of the following are true:
      // - the value is undefined (in case one of the IE bugs comes back)
      // - it's a duplicate event (important since onInputChange is called twice per actual user event)
      // - it's the same as the previous value
      var previousValue = _getValue(_this.props, _this.state) || '';
      if (value === undefined || value === _this._lastChangeValue || value === previousValue) {
        _this._lastChangeValue = undefined;
        return;
      }
      _this._lastChangeValue = value;
      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);
      if (!_this._isControlled) {
        // ONLY if this is an uncontrolled component, update the displayed value.
        // (Controlled components must update the `value` prop from `onChange`.)
        _this.setState({
          uncontrolledValue: value
        });
      }
    };
    _Utilities.initializeComponentRef(_this);
    _this._async = new _Utilities.Async(_this);
    if ("development" !== 'production') {
      _Utilities.warnMutuallyExclusive(COMPONENT_NAME, props, {
        errorMessage: 'onGetErrorMessage'
      });
    }
    _this._fallbackId = _Utilities.getId(COMPONENT_NAME);
    _this._descriptionId = _Utilities.getId(COMPONENT_NAME + 'Description');
    _this._labelId = _Utilities.getId(COMPONENT_NAME + 'Label');
    _this._warnControlledUsage();
    var _a = props.defaultValue, defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;
    if (typeof defaultValue === 'number') {
      // This isn't allowed per the props, but happens anyway.
      defaultValue = String(defaultValue);
    }
    _this.state = {
      uncontrolledValue: _this._isControlled ? undefined : defaultValue,
      isFocused: false,
      errorMessage: ''
    };
    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);
    _this._lastValidation = 0;
    return _this;
  }
  Object.defineProperty(TextFieldBase.prototype, "value", {
    /**
    * Gets the current value of the text field.
    */
    get: function () {
      return _getValue(this.props, this.state);
    },
    enumerable: false,
    configurable: true
  });
  TextFieldBase.prototype.componentDidMount = function () {
    this._adjustInputHeight();
    if (this.props.validateOnLoad) {
      this._validate(this.value);
    }
  };
  TextFieldBase.prototype.componentWillUnmount = function () {
    this._async.dispose();
  };
  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {
    return {
      selection: [this.selectionStart, this.selectionEnd]
    };
  };
  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {
    var props = this.props;
    var _a = (snapshot || ({})).selection, selection = _a === void 0 ? [null, null] : _a;
    var start = selection[0], end = selection[1];
    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {
      // The text field has just changed between single- and multi-line, so we need to reset focus
      // and selection/cursor.
      this.focus();
      if (start !== null && end !== null && start >= 0 && end >= 0) {
        this.setSelectionRange(start, end);
      }
    }
    if (prevProps.value !== props.value) {
      // Only if the value in props changed, reset the record of the last value seen by a
      // change/input event (don't do this if the value in state changed, since at least in tests
      // the state update may happen before the second event in a series)
      this._lastChangeValue = undefined;
    }
    var prevValue = _getValue(prevProps, prevState);
    var value = this.value;
    if (prevValue !== value) {
      // Handle controlled/uncontrolled warnings and status
      this._warnControlledUsage(prevProps);
      // Clear error message if needed
      // TODO: is there any way to do this without an extra render?
      if (this.state.errorMessage && !props.errorMessage) {
        this.setState({
          errorMessage: ''
        });
      }
      // Adjust height if needed based on new value
      this._adjustInputHeight();
      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.
      // This seems a bit odd and hard to integrate with the new approach.
      // (Starting to think we should just put the validation logic in a separate wrapper component...?)
      if (_shouldValidateAllChanges(props)) {
        this._delayedValidate(value);
      }
    }
  };
  TextFieldBase.prototype.render = function () {
    var _a = this.props, borderless = _a.borderless, className = _a.className, disabled = _a.disabled, iconProps = _a.iconProps, inputClassName = _a.inputClassName, label = _a.label, multiline = _a.multiline, required = _a.required, underlined = _a.underlined, prefix = _a.prefix, resizable = _a.resizable, suffix = _a.suffix, theme = _a.theme, styles = _a.styles, autoAdjustHeight = _a.autoAdjustHeight, canRevealPassword = _a.canRevealPassword, revealPasswordAriaLabel = _a.revealPasswordAriaLabel, type = _a.type, _b = _a.onRenderPrefix, onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b, _c = _a.onRenderSuffix, onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c, _d = _a.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, _e = _a.onRenderDescription, onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;
    var _f = this.state, isFocused = _f.isFocused, isRevealingPassword = _f.isRevealingPassword;
    var errorMessage = this._errorMessage;
    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();
    var classNames = this._classNames = getClassNames(styles, {
      theme: theme,
      className: className,
      disabled: disabled,
      focused: isFocused,
      required: required,
      multiline: multiline,
      hasLabel: !!label,
      hasErrorMessage: !!errorMessage,
      borderless: borderless,
      resizable: resizable,
      hasIcon: !!iconProps,
      underlined: underlined,
      inputClassName: inputClassName,
      autoAdjustHeight: autoAdjustHeight,
      hasRevealButton: hasRevealButton
    });
    return (
      // eslint-disable-next-line deprecation/deprecation
      _react.createElement("div", {
        ref: this.props.elementRef,
        className: classNames.root
      }, _react.createElement("div", {
        className: classNames.wrapper
      }, onRenderLabel(this.props, this._onRenderLabel), _react.createElement("div", {
        className: classNames.fieldGroup
      }, (prefix !== undefined || this.props.onRenderPrefix) && _react.createElement("div", {
        className: classNames.prefix
      }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && _react.createElement(_Icon.Icon, _tslib.__assign({
        className: classNames.icon
      }, iconProps)), hasRevealButton && // Explicitly set type="button" since the default button type within a form is "submit"
      _react.createElement("button", {
        "aria-label": revealPasswordAriaLabel,
        className: classNames.revealButton,
        onClick: this._onRevealButtonClick,
        "aria-pressed": !!isRevealingPassword,
        type: "button"
      }, _react.createElement("span", {
        className: classNames.revealSpan
      }, _react.createElement(_Icon.Icon, {
        className: classNames.revealIcon,
        iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME
      }))), (suffix !== undefined || this.props.onRenderSuffix) && _react.createElement("div", {
        className: classNames.suffix
      }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && _react.createElement("span", {
        id: this._descriptionId
      }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && _react.createElement("div", {
        role: "alert"
      }, _react.createElement(_Utilities.DelayedRender, null, this._renderErrorMessage()))))
    );
  };
  /**
  * Sets focus on the text field
  */
  TextFieldBase.prototype.focus = function () {
    if (this._textElement.current) {
      this._textElement.current.focus();
    }
  };
  /**
  * Blurs the text field.
  */
  TextFieldBase.prototype.blur = function () {
    if (this._textElement.current) {
      this._textElement.current.blur();
    }
  };
  /**
  * Selects the text field
  */
  TextFieldBase.prototype.select = function () {
    if (this._textElement.current) {
      this._textElement.current.select();
    }
  };
  /**
  * Sets the selection start of the text field to a specified value
  */
  TextFieldBase.prototype.setSelectionStart = function (value) {
    if (this._textElement.current) {
      this._textElement.current.selectionStart = value;
    }
  };
  /**
  * Sets the selection end of the text field to a specified value
  */
  TextFieldBase.prototype.setSelectionEnd = function (value) {
    if (this._textElement.current) {
      this._textElement.current.selectionEnd = value;
    }
  };
  Object.defineProperty(TextFieldBase.prototype, "selectionStart", {
    /**
    * Gets the selection start of the text field
    */
    get: function () {
      return this._textElement.current ? this._textElement.current.selectionStart : -1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(TextFieldBase.prototype, "selectionEnd", {
    /**
    * Gets the selection end of the text field
    */
    get: function () {
      return this._textElement.current ? this._textElement.current.selectionEnd : -1;
    },
    enumerable: false,
    configurable: true
  });
  /**
  * Sets the start and end positions of a selection in a text field.
  * @param start - Index of the start of the selection.
  * @param end - Index of the end of the selection.
  */
  TextFieldBase.prototype.setSelectionRange = function (start, end) {
    if (this._textElement.current) {
      this._textElement.current.setSelectionRange(start, end);
    }
  };
  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {
    // Show warnings if props are being used in an invalid way
    _Utilities.warnControlledUsage({
      componentId: this._id,
      componentName: COMPONENT_NAME,
      props: this.props,
      oldProps: prevProps,
      valueProp: 'value',
      defaultValueProp: 'defaultValue',
      onChangeProp: 'onChange',
      readOnlyProp: 'readOnly'
    });
    if (this.props.value === null && !this._hasWarnedNullValue) {
      this._hasWarnedNullValue = true;
      _Utilities.warn("Warning: 'value' prop on '" + COMPONENT_NAME + "' should not be null. Consider using an " + 'empty string to clear the component or undefined to indicate an uncontrolled component.');
    }
  };
  Object.defineProperty(TextFieldBase.prototype, "_id", {
    /** Returns `props.id` if available, or a fallback if not.*/
    get: function () {
      return this.props.id || this._fallbackId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(TextFieldBase.prototype, "_isControlled", {
    get: function () {
      return _Utilities.isControlled(this.props, 'value');
    },
    enumerable: false,
    configurable: true
  });
  TextFieldBase.prototype._onRenderPrefix = function (props) {
    var prefix = props.prefix;
    return _react.createElement("span", {
      style: {
        paddingBottom: '1px'
      }
    }, prefix);
  };
  TextFieldBase.prototype._onRenderSuffix = function (props) {
    var suffix = props.suffix;
    return _react.createElement("span", {
      style: {
        paddingBottom: '1px'
      }
    }, suffix);
  };
  Object.defineProperty(TextFieldBase.prototype, "_errorMessage", {
    /**
    * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.
    *
    * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.
    * - If we have done the validation and there is validation error, errorMessage is the validation error message.
    */
    get: function () {
      var _a = this.props.errorMessage, errorMessage = _a === void 0 ? this.state.errorMessage : _a;
      return errorMessage || '';
    },
    enumerable: false,
    configurable: true
  });
  /**
  * Renders error message based on the type of the message.
  *
  * - If error message is string, it will render using the built in styles.
  * - If error message is an element, user has full control over how it's rendered.
  */
  TextFieldBase.prototype._renderErrorMessage = function () {
    var errorMessage = this._errorMessage;
    return errorMessage ? typeof errorMessage === 'string' ? _react.createElement("p", {
      className: this._classNames.errorMessage
    }, _react.createElement("span", {
      "data-automation-id": "error-message"
    }, errorMessage)) : _react.createElement("div", {
      className: this._classNames.errorMessage,
      "data-automation-id": "error-message"
    }, errorMessage) : null;
  };
  Object.defineProperty(TextFieldBase.prototype, "_isDescriptionAvailable", {
    /**
    * If a custom description render function is supplied then treat description as always available.
    * Otherwise defer to the presence of description or error message text.
    */
    get: function () {
      var props = this.props;
      return !!(props.onRenderDescription || props.description || this._errorMessage);
    },
    enumerable: false,
    configurable: true
  });
  TextFieldBase.prototype._renderTextArea = function () {
    var textAreaProps = _Utilities.getNativeProps(this.props, _Utilities.textAreaProperties, ['defaultValue']);
    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);
    return _react.createElement("textarea", _tslib.__assign({
      id: this._id
    }, textAreaProps, {
      ref: this._textElement,
      value: this.value || '',
      onInput: this._onInputChange,
      onChange: this._onInputChange,
      className: this._classNames.field,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],
      "aria-invalid": !!this._errorMessage,
      "aria-label": this.props.ariaLabel,
      readOnly: this.props.readOnly,
      onFocus: this._onFocus,
      onBlur: this._onBlur
    }));
  };
  TextFieldBase.prototype._renderInput = function () {
    var _a;
    var inputProps = _Utilities.getNativeProps(this.props, _Utilities.inputProperties, ['defaultValue', 'type']);
    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);
    var type = this.state.isRevealingPassword ? 'text' : (_a = this.props.type) !== null && _a !== void 0 ? _a : 'text';
    return _react.createElement("input", _tslib.__assign({
      type: type,
      id: this._id,
      "aria-labelledby": ariaLabelledBy
    }, inputProps, {
      ref: this._textElement,
      value: this.value || '',
      onInput: this._onInputChange,
      onChange: this._onInputChange,
      className: this._classNames.field,
      "aria-label": this.props.ariaLabel,
      "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],
      "aria-invalid": !!this._errorMessage,
      readOnly: this.props.readOnly,
      onFocus: this._onFocus,
      onBlur: this._onBlur
    }));
  };
  TextFieldBase.prototype._validate = function (value) {
    var _this = this;
    // In case _validate is called again while validation promise is executing
    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {
      return;
    }
    this._latestValidateValue = value;
    var onGetErrorMessage = this.props.onGetErrorMessage;
    var result = onGetErrorMessage && onGetErrorMessage(value || '');
    if (result !== undefined) {
      if (typeof result === 'string' || !(('then' in result))) {
        this.setState({
          errorMessage: result
        });
        this._notifyAfterValidate(value, result);
      } else {
        var currentValidation_1 = ++this._lastValidation;
        result.then(function (errorMessage) {
          if (currentValidation_1 === _this._lastValidation) {
            _this.setState({
              errorMessage: errorMessage
            });
          }
          _this._notifyAfterValidate(value, errorMessage);
        });
      }
    } else {
      this._notifyAfterValidate(value, '');
    }
  };
  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {
    if (value === this.value && this.props.onNotifyValidationResult) {
      this.props.onNotifyValidationResult(errorMessage, value);
    }
  };
  TextFieldBase.prototype._adjustInputHeight = function () {
    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {
      var textField = this._textElement.current;
      textField.style.height = '';
      textField.style.height = textField.scrollHeight + 'px';
    }
  };
  TextFieldBase.defaultProps = {
    resizable: true,
    deferredValidationTime: 200,
    validateOnLoad: true
  };
  return TextFieldBase;
})(_react.Component);
/** Get the value from the given state and props (converting from number to string if needed)*/
function _getValue(props, state) {
  var _a = props.value, value = _a === void 0 ? state.uncontrolledValue : _a;
  if (typeof value === 'number') {
    // not allowed per typings, but happens anyway
    return String(value);
  }
  return value;
}
/**
* If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.
* Otherwise, validation should run on every change.
*/
function _shouldValidateAllChanges(props) {
  return !(props.validateOnFocusIn || props.validateOnFocusOut);
}
// Only calculate this once across all TextFields, since will stay the same
var __browserNeedsRevealButton;
function _browserNeedsRevealButton() {
  if (typeof __browserNeedsRevealButton !== 'boolean') {
    var win = _Utilities.getWindow();
    if (win === null || win === void 0 ? void 0 : win.navigator) {
      // Edge, Chromium Edge
      var isEdge = (/^Edg/).test(win.navigator.userAgent || '');
      __browserNeedsRevealButton = !(_Utilities.isIE11() || isEdge);
    } else {
      __browserNeedsRevealButton = true;
    }
  }
  return __browserNeedsRevealButton;
}

},{"tslib":"6ZIET","react":"4g1R3","../../Label":"6RBc6","../../Icon":"7upjA","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6RBc6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsLabelIndex = require('./components/Label/index');
_parcelHelpers.exportAll(_componentsLabelIndex, exports);

},{"./components/Label/index":"26wdl","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"26wdl":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _LabelBase = require('./Label.base');
_parcelHelpers.exportAll(_LabelBase, exports);
var _LabelTypes = require('./Label.types');
_parcelHelpers.exportAll(_LabelTypes, exports);
var _Label = require('./Label');
_parcelHelpers.exportAll(_Label, exports);

},{"./Label.base":"2sZRw","./Label.types":"ewlY4","./Label":"3YSCg","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2sZRw":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "LabelBase", function () {
  return LabelBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction({
  // Label is used a lot by other components.
  // It's likely to see expected cases which pass different className to the Label.
  // Therefore setting a larger cache size.
  cacheSize: 100
});
var LabelBase = /** @class*/
(function (_super) {
  _tslib.__extends(LabelBase, _super);
  function LabelBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LabelBase.prototype.render = function () {
    var _a = this.props, _b = _a.as, RootType = _b === void 0 ? 'label' : _b, children = _a.children, className = _a.className, disabled = _a.disabled, styles = _a.styles, required = _a.required, theme = _a.theme;
    var classNames = getClassNames(styles, {
      className: className,
      disabled: disabled,
      required: required,
      theme: theme
    });
    return _react.createElement(RootType, _tslib.__assign({}, _Utilities.getNativeProps(this.props, _Utilities.divProperties), {
      className: classNames.root
    }), children);
  };
  return LabelBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"ewlY4":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3YSCg":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Label", function () {
  return Label;
});
var _Utilities = require('../../Utilities');
var _LabelBase = require('./Label.base');
var _LabelStyles = require('./Label.styles');
var Label = _Utilities.styled(_LabelBase.LabelBase, _LabelStyles.getStyles, undefined, {
  scope: 'Label'
});

},{"../../Utilities":"1439N","./Label.base":"2sZRw","./Label.styles":"O0EPf","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"O0EPf":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var getStyles = function (props) {
  var _a;
  var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;
  var semanticColors = theme.semanticColors;
  // Tokens
  var labelFontWeight = _Styling.FontWeights.semibold;
  var labelColor = semanticColors.bodyText;
  var labelDisabledColor = semanticColors.disabledBodyText;
  var labelRequiredStarColor = semanticColors.errorText;
  return {
    root: ['ms-Label', theme.fonts.medium, {
      fontWeight: labelFontWeight,
      color: labelColor,
      boxSizing: 'border-box',
      boxShadow: 'none',
      margin: 0,
      display: 'block',
      padding: '5px 0',
      wordWrap: 'break-word',
      overflowWrap: 'break-word'
    }, disabled && ({
      color: labelDisabledColor,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
        color: 'GrayText'
      }, _Styling.getHighContrastNoAdjustStyle()), _a)
    }), required && ({
      selectors: {
        '::after': {
          content: "' *'",
          color: labelRequiredStarColor,
          paddingRight: 12
        }
      }
    }), className]
  };
};

},{"tslib":"6ZIET","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"24bep":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var globalClassNames = {
  root: 'ms-TextField',
  description: 'ms-TextField-description',
  errorMessage: 'ms-TextField-errorMessage',
  field: 'ms-TextField-field',
  fieldGroup: 'ms-TextField-fieldGroup',
  prefix: 'ms-TextField-prefix',
  suffix: 'ms-TextField-suffix',
  wrapper: 'ms-TextField-wrapper',
  revealButton: 'ms-TextField-reveal',
  multiline: 'ms-TextField--multiline',
  borderless: 'ms-TextField--borderless',
  underlined: 'ms-TextField--underlined',
  unresizable: 'ms-TextField--unresizable',
  required: 'is-required',
  disabled: 'is-disabled',
  active: 'is-active'
};
function getLabelStyles(props) {
  var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;
  var palette = theme.palette, fonts = theme.fonts;
  return function () {
    var _a;
    return {
      root: [underlined && disabled && ({
        color: palette.neutralTertiary
      }), underlined && ({
        fontSize: fonts.medium.fontSize,
        marginRight: 8,
        paddingLeft: 12,
        paddingRight: 0,
        lineHeight: '22px',
        height: 32
      }), underlined && focused && ({
        selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
          height: 31
        }, _a)
      })]
    };
  };
}
function getStyles(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
  var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight, hasRevealButton = props.hasRevealButton;
  var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
  var classNames = _Styling.getGlobalClassNames(globalClassNames, theme);
  var fieldPrefixSuffix = {
    // Suffix/Prefix are not editable so the disabled slot perfectly fits.
    background: semanticColors.disabledBackground,
    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,
    display: 'flex',
    alignItems: 'center',
    padding: '0 10px',
    lineHeight: 1,
    whiteSpace: 'nowrap',
    flexShrink: 0,
    selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
      background: 'Window',
      color: disabled ? 'GrayText' : 'WindowText'
    }, _a)
  };
  // placeholder style constants
  var placeholderStyles = [fonts.medium, {
    color: semanticColors.inputPlaceholderText,
    opacity: 1,
    selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
      color: 'GrayText'
    }, _b)
  }];
  var disabledPlaceholderStyles = {
    color: semanticColors.disabledText,
    selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
      color: 'GrayText'
    }, _c)
  };
  return {
    root: [classNames.root, fonts.medium, required && classNames.required, disabled && classNames.disabled, focused && classNames.active, multiline && classNames.multiline, borderless && classNames.borderless, underlined && classNames.underlined, _Styling.normalize, {
      position: 'relative'
    }, className],
    wrapper: [classNames.wrapper, underlined && [{
      display: 'flex',
      borderBottom: "1px solid " + (!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),
      width: '100%'
    }, disabled && ({
      borderBottomColor: semanticColors.disabledBackground,
      selectors: (_d = {}, _d[_Styling.HighContrastSelector] = _tslib.__assign({
        borderColor: 'GrayText'
      }, _Styling.getHighContrastNoAdjustStyle()), _d)
    }), !disabled && ({
      selectors: {
        ':hover': {
          borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,
          selectors: (_e = {}, _e[_Styling.HighContrastSelector] = _tslib.__assign({
            borderBottomColor: 'Highlight'
          }, _Styling.getHighContrastNoAdjustStyle()), _e)
        }
      }
    }), focused && [{
      position: 'relative'
    }, _Styling.getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, 'borderBottom')]]],
    fieldGroup: [classNames.fieldGroup, _Styling.normalize, {
      border: "1px solid " + semanticColors.inputBorder,
      borderRadius: effects.roundedCorner2,
      background: semanticColors.inputBackground,
      cursor: 'text',
      height: 32,
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'stretch',
      position: 'relative'
    }, multiline && ({
      minHeight: '60px',
      height: 'auto',
      display: 'flex'
    }), !focused && !disabled && ({
      selectors: {
        ':hover': {
          borderColor: semanticColors.inputBorderHovered,
          selectors: (_f = {}, _f[_Styling.HighContrastSelector] = _tslib.__assign({
            borderColor: 'Highlight'
          }, _Styling.getHighContrastNoAdjustStyle()), _f)
        }
      }
    }), focused && !underlined && _Styling.getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2), disabled && ({
      borderColor: semanticColors.disabledBackground,
      selectors: (_g = {}, _g[_Styling.HighContrastSelector] = _tslib.__assign({
        borderColor: 'GrayText'
      }, _Styling.getHighContrastNoAdjustStyle()), _g),
      cursor: 'default'
    }), borderless && ({
      border: 'none'
    }), borderless && focused && ({
      border: 'none',
      selectors: {
        ':after': {
          border: 'none'
        }
      }
    }), underlined && ({
      flex: '1 1 0px',
      border: 'none',
      textAlign: 'left'
    }), underlined && disabled && ({
      backgroundColor: 'transparent'
    }), hasErrorMessage && !underlined && ({
      borderColor: semanticColors.errorText,
      selectors: {
        '&:hover': {
          borderColor: semanticColors.errorText
        }
      }
    }), !hasLabel && required && ({
      selectors: (_h = {
        ':before': {
          content: "'*'",
          color: semanticColors.errorText,
          position: 'absolute',
          top: -5,
          right: -10
        }
      }, _h[_Styling.HighContrastSelector] = {
        selectors: {
          ':before': {
            color: 'WindowText',
            right: -14
          }
        }
      }, _h)
    })],
    field: [fonts.medium, classNames.field, _Styling.normalize, {
      borderRadius: 0,
      border: 'none',
      background: 'none',
      backgroundColor: 'transparent',
      color: semanticColors.inputText,
      padding: '0 8px',
      width: '100%',
      minWidth: 0,
      textOverflow: 'ellipsis',
      outline: 0,
      selectors: (_j = {
        '&:active, &:focus, &:hover': {
          outline: 0
        },
        '::-ms-clear': {
          display: 'none'
        }
      }, _j[_Styling.HighContrastSelector] = {
        background: 'Window',
        color: disabled ? 'GrayText' : 'WindowText'
      }, _j)
    }, _Styling.getPlaceholderStyles(placeholderStyles), multiline && !resizable && [classNames.unresizable, {
      resize: 'none'
    }], multiline && ({
      minHeight: 'inherit',
      lineHeight: 17,
      flexGrow: 1,
      paddingTop: 6,
      paddingBottom: 6,
      overflow: 'auto',
      width: '100%'
    }), multiline && autoAdjustHeight && ({
      overflow: 'hidden'
    }), hasIcon && !hasRevealButton && ({
      paddingRight: 24
    }), multiline && hasIcon && ({
      paddingRight: 40
    }), disabled && [{
      backgroundColor: semanticColors.disabledBackground,
      color: semanticColors.disabledText,
      borderColor: semanticColors.disabledBackground
    }, _Styling.getPlaceholderStyles(disabledPlaceholderStyles)], underlined && ({
      textAlign: 'left'
    }), focused && !borderless && ({
      selectors: (_k = {}, _k[_Styling.HighContrastSelector] = {
        paddingLeft: 11,
        paddingRight: 11
      }, _k)
    }), focused && multiline && !borderless && ({
      selectors: (_l = {}, _l[_Styling.HighContrastSelector] = {
        paddingTop: 4
      }, _l)
    }), inputClassName],
    icon: [multiline && ({
      paddingRight: 24,
      alignItems: 'flex-end'
    }), {
      pointerEvents: 'none',
      position: 'absolute',
      bottom: 6,
      right: 8,
      top: 'auto',
      fontSize: _Styling.IconFontSizes.medium,
      lineHeight: 18
    }, disabled && ({
      color: semanticColors.disabledText
    })],
    description: [classNames.description, {
      color: semanticColors.bodySubtext,
      fontSize: fonts.xSmall.fontSize
    }],
    errorMessage: [classNames.errorMessage, _Styling.AnimationClassNames.slideDownIn20, fonts.small, {
      color: semanticColors.errorText,
      margin: 0,
      paddingTop: 5,
      display: 'flex',
      alignItems: 'center'
    }],
    prefix: [classNames.prefix, fieldPrefixSuffix],
    suffix: [classNames.suffix, fieldPrefixSuffix],
    revealButton: [classNames.revealButton, 'ms-Button', 'ms-Button--icon', {
      height: 30,
      width: 32,
      border: 'none',
      padding: '0px 4px',
      backgroundColor: 'transparent',
      color: semanticColors.link,
      selectors: {
        ':hover': {
          outline: 0,
          color: semanticColors.primaryButtonBackgroundHovered,
          backgroundColor: semanticColors.buttonBackgroundHovered,
          selectors: (_m = {}, _m[_Styling.HighContrastSelector] = {
            borderColor: 'Highlight',
            color: 'Highlight'
          }, _m)
        },
        ':focus': {
          outline: 0
        }
      }
    }, hasIcon && ({
      marginRight: 28
    })],
    revealSpan: {
      display: 'flex',
      height: '100%',
      alignItems: 'center'
    },
    revealIcon: {
      margin: '0px 4px',
      pointerEvents: 'none',
      bottom: 6,
      right: 8,
      top: 'auto',
      fontSize: _Styling.IconFontSizes.medium,
      lineHeight: 18
    },
    subComponentStyles: {
      label: getLabelStyles(props)
    }
  };
}

},{"tslib":"6ZIET","../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"VkLbQ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1Dp05":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DEFAULT_MASK_CHAR", function () {
  return DEFAULT_MASK_CHAR;
});
_parcelHelpers.export(exports, "MaskedTextField", function () {
  return MaskedTextField;
});
var _tslib = require("tslib");
var _react = require('react');
var _TextField = require('../TextField');
var _Utilities = require('../../../Utilities');
var _inputMask = require('./inputMask');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var COMPONENT_NAME = 'MaskedTextField';
var useComponentRef = function (componentRef, internalState, textField) {
  _react.useImperativeHandle(componentRef, function () {
    return {
      get value() {
        var value = '';
        for (var i = 0; i < internalState.maskCharData.length; i++) {
          if (!internalState.maskCharData[i].value) {
            return undefined;
          }
          value += internalState.maskCharData[i].value;
        }
        return value;
      },
      get selectionStart() {
        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;
      },
      get selectionEnd() {
        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;
      },
      focus: function () {
        textField.current && textField.current.focus();
      },
      blur: function () {
        textField.current && textField.current.blur();
      },
      select: function () {
        textField.current && textField.current.select();
      },
      setSelectionStart: function (value) {
        textField.current && textField.current.setSelectionStart(value);
      },
      setSelectionEnd: function (value) {
        textField.current && textField.current.setSelectionEnd(value);
      },
      setSelectionRange: function (start, end) {
        textField.current && textField.current.setSelectionRange(start, end);
      }
    };
  }, [internalState, textField]);
};
var DEFAULT_MASK_CHAR = '_';
var MaskedTextField = _react.forwardRef(function (props, ref) {
  var textField = _react.useRef(null);
  var componentRef = props.componentRef, onFocus = props.onFocus, onBlur = props.onBlur, onMouseDown = props.onMouseDown, onMouseUp = props.onMouseUp, onChange = props.onChange, onPaste = props.onPaste, onKeyDown = props.onKeyDown, mask = props.mask, _a = props.maskChar, maskChar = _a === void 0 ? DEFAULT_MASK_CHAR : _a, _b = props.maskFormat, maskFormat = _b === void 0 ? _inputMask.DEFAULT_MASK_FORMAT_CHARS : _b, value = props.value;
  var internalState = _fluentuiReactHooks.useConst(function () {
    return {
      maskCharData: _inputMask.parseMask(mask, maskFormat),
      isFocused: false,
      moveCursorOnMouseUp: false,
      changeSelectionData: null
    };
  });
  /** The index into the rendered value of the first unfilled format character*/
  var _c = _react.useState(), maskCursorPosition = _c[0], setMaskCursorPosition = _c[1];
  /**
  * The mask string formatted with the input value.
  * This is what is displayed inside the TextField
  * @example
  *  `Phone Number: 12_ - 4___`
  */
  var _d = _react.useState(function () {
    return _inputMask.getMaskDisplay(mask, internalState.maskCharData, maskChar);
  }), displayValue = _d[0], setDisplayValue = _d[1];
  var setValue = _react.useCallback(function (newValue) {
    var valueIndex = 0;
    var charDataIndex = 0;
    while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {
      // Test if the next character in the new value fits the next format character
      var testVal = newValue[valueIndex];
      if (internalState.maskCharData[charDataIndex].format.test(testVal)) {
        internalState.maskCharData[charDataIndex].value = testVal;
        charDataIndex++;
      }
      valueIndex++;
    }
  }, [internalState]);
  var handleFocus = _react.useCallback(function (ev) {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(ev);
    internalState.isFocused = true;
    // Move the cursor position to the leftmost unfilled position
    for (var i = 0; i < internalState.maskCharData.length; i++) {
      if (!internalState.maskCharData[i].value) {
        setMaskCursorPosition(internalState.maskCharData[i].displayIndex);
        break;
      }
    }
  }, [internalState, onFocus]);
  var handleBlur = _react.useCallback(function (ev) {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(ev);
    internalState.isFocused = false;
    internalState.moveCursorOnMouseUp = true;
  }, [internalState, onBlur]);
  var handleMouseDown = _react.useCallback(function (ev) {
    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(ev);
    if (!internalState.isFocused) {
      internalState.moveCursorOnMouseUp = true;
    }
  }, [internalState, onMouseDown]);
  var handleMouseUp = _react.useCallback(function (ev) {
    onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(ev);
    // Move the cursor on mouseUp after focusing the textField
    if (internalState.moveCursorOnMouseUp) {
      internalState.moveCursorOnMouseUp = false;
      // Move the cursor position to the rightmost unfilled position
      for (var i = 0; i < internalState.maskCharData.length; i++) {
        if (!internalState.maskCharData[i].value) {
          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);
          break;
        }
      }
    }
  }, [internalState, onMouseUp]);
  var handleInputChange = _react.useCallback(function (ev, inputValue) {
    if (internalState.changeSelectionData === null && textField.current) {
      internalState.changeSelectionData = {
        changeType: 'default',
        selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,
        selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1
      };
    }
    if (!internalState.changeSelectionData) {
      return;
    }
    // The initial value of cursorPos does not matter
    var cursorPos = 0;
    var _a = internalState.changeSelectionData, changeType = _a.changeType, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;
    if (changeType === 'textPasted') {
      var charsSelected = selectionEnd - selectionStart;
      var charCount = inputValue.length + charsSelected - displayValue.length;
      var startPos = selectionStart;
      var pastedString = inputValue.substr(startPos, charCount);
      // Clear any selected characters
      if (charsSelected) {
        internalState.maskCharData = _inputMask.clearRange(internalState.maskCharData, selectionStart, charsSelected);
      }
      cursorPos = _inputMask.insertString(internalState.maskCharData, startPos, pastedString);
    } else if (changeType === 'delete' || changeType === 'backspace') {
      // isDel is true If the characters are removed LTR, otherwise RTL
      var isDel = changeType === 'delete';
      var charCount = selectionEnd - selectionStart;
      if (charCount) {
        // charCount is > 0 if range was deleted
        internalState.maskCharData = _inputMask.clearRange(internalState.maskCharData, selectionStart, charCount);
        cursorPos = _inputMask.getRightFormatIndex(internalState.maskCharData, selectionStart);
      } else {
        // If charCount === 0, there was no selection and a single character was deleted
        if (isDel) {
          internalState.maskCharData = _inputMask.clearNext(internalState.maskCharData, selectionStart);
          cursorPos = _inputMask.getRightFormatIndex(internalState.maskCharData, selectionStart);
        } else {
          internalState.maskCharData = _inputMask.clearPrev(internalState.maskCharData, selectionStart);
          cursorPos = _inputMask.getLeftFormatIndex(internalState.maskCharData, selectionStart);
        }
      }
    } else if (inputValue.length > displayValue.length) {
      // This case is if the user added characters
      var charCount = inputValue.length - displayValue.length;
      var startPos = selectionEnd - charCount;
      var enteredString = inputValue.substr(startPos, charCount);
      cursorPos = _inputMask.insertString(internalState.maskCharData, startPos, enteredString);
    } else if (inputValue.length <= displayValue.length) {
      /**
      * This case is reached only if the user has selected a block of 1 or more
      * characters and input a character replacing the characters they've selected.
      */
      var charCount = 1;
      var selectCount = displayValue.length + charCount - inputValue.length;
      var startPos = selectionEnd - charCount;
      var enteredString = inputValue.substr(startPos, charCount);
      // Clear the selected range
      internalState.maskCharData = _inputMask.clearRange(internalState.maskCharData, startPos, selectCount);
      // Insert the printed character
      cursorPos = _inputMask.insertString(internalState.maskCharData, startPos, enteredString);
    }
    internalState.changeSelectionData = null;
    var newValue = _inputMask.getMaskDisplay(mask, internalState.maskCharData, maskChar);
    setDisplayValue(newValue);
    setMaskCursorPosition(cursorPos);
    // Perform onChange after input has been processed. Return value is expected to be the displayed text
    onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);
  }, [displayValue.length, internalState, mask, maskChar, onChange]);
  var handleKeyDown = _react.useCallback(function (ev) {
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);
    internalState.changeSelectionData = null;
    if (textField.current && textField.current.value) {
      var keyCode = ev.keyCode, ctrlKey = ev.ctrlKey, metaKey = ev.metaKey;
      // Ignore ctrl and meta keydown
      if (ctrlKey || metaKey) {
        return;
      }
      // On backspace or delete, store the selection and the keyCode
      if (keyCode === _Utilities.KeyCodes.backspace || keyCode === _Utilities.KeyCodes.del) {
        var selectionStart = ev.target.selectionStart;
        var selectionEnd = ev.target.selectionEnd;
        // Check if backspace or delete press is valid.
        if (!(keyCode === _Utilities.KeyCodes.backspace && selectionEnd && selectionEnd > 0) && !(keyCode === _Utilities.KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)) {
          return;
        }
        internalState.changeSelectionData = {
          changeType: keyCode === _Utilities.KeyCodes.backspace ? 'backspace' : 'delete',
          selectionStart: selectionStart !== null ? selectionStart : -1,
          selectionEnd: selectionEnd !== null ? selectionEnd : -1
        };
      }
    }
  }, [internalState, onKeyDown]);
  var handlePaste = _react.useCallback(function (ev) {
    onPaste === null || onPaste === void 0 ? void 0 : onPaste(ev);
    var selectionStart = ev.target.selectionStart;
    var selectionEnd = ev.target.selectionEnd;
    // Store the paste selection range
    internalState.changeSelectionData = {
      changeType: 'textPasted',
      selectionStart: selectionStart !== null ? selectionStart : -1,
      selectionEnd: selectionEnd !== null ? selectionEnd : -1
    };
  }, [internalState, onPaste]);
  // Updates the display value if mask or value props change.
  _react.useEffect(function () {
    internalState.maskCharData = _inputMask.parseMask(mask, maskFormat);
    value !== undefined && setValue(value);
    setDisplayValue(_inputMask.getMaskDisplay(mask, internalState.maskCharData, maskChar));
  }, [mask, value]);
  // Run before browser paint to avoid flickering from selection reset.
  // eslint-disable-next-line no-restricted-properties
  _react.useLayoutEffect(function () {
    // Move the cursor to position before paint.
    if (maskCursorPosition !== undefined && textField.current) {
      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);
    }
  }, [maskCursorPosition]);
  // Run after browser paint.
  _react.useEffect(function () {
    // Move the cursor to the start of the mask format after values update.
    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {
      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);
    }
  });
  useComponentRef(componentRef, internalState, textField);
  return _react.createElement(_TextField.TextField, _tslib.__assign({}, props, {
    elementRef: ref,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onChange: handleInputChange,
    onKeyDown: handleKeyDown,
    onPaste: handlePaste,
    value: displayValue || '',
    componentRef: textField
  }));
});
MaskedTextField.displayName = COMPONENT_NAME;

},{"tslib":"6ZIET","react":"4g1R3","../TextField":"4TsXJ","../../../Utilities":"1439N","./inputMask":"21J7X","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"21J7X":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DEFAULT_MASK_FORMAT_CHARS", function () {
  return DEFAULT_MASK_FORMAT_CHARS;
});
_parcelHelpers.export(exports, "parseMask", function () {
  return parseMask;
});
_parcelHelpers.export(exports, "getMaskDisplay", function () {
  return getMaskDisplay;
});
_parcelHelpers.export(exports, "getRightFormatIndex", function () {
  return getRightFormatIndex;
});
_parcelHelpers.export(exports, "getLeftFormatIndex", function () {
  return getLeftFormatIndex;
});
_parcelHelpers.export(exports, "clearRange", function () {
  return clearRange;
});
_parcelHelpers.export(exports, "clearNext", function () {
  return clearNext;
});
_parcelHelpers.export(exports, "clearPrev", function () {
  return clearPrev;
});
_parcelHelpers.export(exports, "insertString", function () {
  return insertString;
});
var DEFAULT_MASK_FORMAT_CHARS = {
  '9': /[0-9]/,
  a: /[a-zA-Z]/,
  '*': /[a-zA-Z0-9]/
};
function parseMask(mask, formatChars) {
  if (formatChars === void 0) {
    formatChars = DEFAULT_MASK_FORMAT_CHARS;
  }
  if (!mask) {
    return [];
  }
  var maskCharData = [];
  // Count the escape characters in the mask string.
  var escapedChars = 0;
  for (var i = 0; i + escapedChars < mask.length; i++) {
    var maskChar = mask.charAt(i + escapedChars);
    if (maskChar === '\\') {
      escapedChars++;
    } else {
      // Check if the maskChar is a format character.
      var maskFormat = formatChars[maskChar];
      if (maskFormat) {
        maskCharData.push({
          /**
          * Do not add escapedChars to the displayIndex.
          * The index refers to a position in the mask's displayValue.
          * Since the backslashes don't appear in the displayValue,
          * we do not add them to the charData displayIndex.
          */
          displayIndex: i,
          format: maskFormat
        });
      }
    }
  }
  return maskCharData;
}
function getMaskDisplay(mask, maskCharData, maskChar) {
  var maskDisplay = mask;
  if (!maskDisplay) {
    return '';
  }
  // Remove all backslashes
  maskDisplay = maskDisplay.replace(/\\/g, '');
  // lastDisplayIndex is is used to truncate the string if necessary.
  var lastDisplayIndex = 0;
  if (maskCharData.length > 0) {
    lastDisplayIndex = maskCharData[0].displayIndex - 1;
  }
  /**
  * For each input value, replace the character in the maskDisplay with the value.
  * If there is no value set for the format character, use the maskChar.
  */
  for (var _i = 0, maskCharData_1 = maskCharData; _i < maskCharData_1.length; _i++) {
    var charData = maskCharData_1[_i];
    var nextChar = ' ';
    if (charData.value) {
      nextChar = charData.value;
      if (charData.displayIndex > lastDisplayIndex) {
        lastDisplayIndex = charData.displayIndex;
      }
    } else {
      if (maskChar) {
        nextChar = maskChar;
      }
    }
    // Insert the character into the maskdisplay at its corresponding index
    maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);
  }
  // Cut off all mask characters after the last filled format value
  if (!maskChar) {
    maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);
  }
  return maskDisplay;
}
function getRightFormatIndex(maskCharData, index) {
  for (var i = 0; i < maskCharData.length; i++) {
    if (maskCharData[i].displayIndex >= index) {
      return maskCharData[i].displayIndex;
    }
  }
  return maskCharData[maskCharData.length - 1].displayIndex;
}
function getLeftFormatIndex(maskCharData, index) {
  for (var i = maskCharData.length - 1; i >= 0; i--) {
    if (maskCharData[i].displayIndex < index) {
      return maskCharData[i].displayIndex;
    }
  }
  return maskCharData[0].displayIndex;
}
function clearRange(maskCharData, selectionStart, selectionCount) {
  for (var i = 0; i < maskCharData.length; i++) {
    if (maskCharData[i].displayIndex >= selectionStart) {
      if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {
        break;
      }
      maskCharData[i].value = undefined;
    }
  }
  return maskCharData;
}
function clearNext(maskCharData, selectionStart) {
  for (var i = 0; i < maskCharData.length; i++) {
    if (maskCharData[i].displayIndex >= selectionStart) {
      maskCharData[i].value = undefined;
      break;
    }
  }
  return maskCharData;
}
function clearPrev(maskCharData, selectionStart) {
  for (var i = maskCharData.length - 1; i >= 0; i--) {
    if (maskCharData[i].displayIndex < selectionStart) {
      maskCharData[i].value = undefined;
      break;
    }
  }
  return maskCharData;
}
function insertString(maskCharData, selectionStart, newString) {
  var stringIndex = 0;
  var nextIndex = 0;
  var isStringInserted = false;
  // Iterate through _maskCharData finding values with a displayIndex after the specified range start
  for (var i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {
    if (maskCharData[i].displayIndex >= selectionStart) {
      isStringInserted = true;
      nextIndex = maskCharData[i].displayIndex;
      // Find the next character in the newString that matches the format
      while (stringIndex < newString.length) {
        // If the character matches the format regexp, set the maskCharData to the new character
        if (maskCharData[i].format.test(newString.charAt(stringIndex))) {
          maskCharData[i].value = newString.charAt(stringIndex++);
          // Set the nextIndex to the display index of the next mask format character.
          if (i + 1 < maskCharData.length) {
            nextIndex = maskCharData[i + 1].displayIndex;
          } else {
            nextIndex++;
          }
          break;
        }
        stringIndex++;
      }
    }
  }
  return isStringInserted ? nextIndex : selectionStart;
}

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2lYcp":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsChoiceGroupIndex = require('./components/ChoiceGroup/index');
_parcelHelpers.exportAll(_componentsChoiceGroupIndex, exports);

},{"./components/ChoiceGroup/index":"qSNc8","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"qSNc8":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _ChoiceGroup = require('./ChoiceGroup');
_parcelHelpers.exportAll(_ChoiceGroup, exports);
var _ChoiceGroupBase = require('./ChoiceGroup.base');
_parcelHelpers.exportAll(_ChoiceGroupBase, exports);
var _ChoiceGroupTypes = require('./ChoiceGroup.types');
_parcelHelpers.exportAll(_ChoiceGroupTypes, exports);
var _ChoiceGroupOptionIndex = require('./ChoiceGroupOption/index');
_parcelHelpers.exportAll(_ChoiceGroupOptionIndex, exports);

},{"./ChoiceGroup":"6DdFm","./ChoiceGroup.base":"7bI3U","./ChoiceGroup.types":"3XYam","./ChoiceGroupOption/index":"5iBSO","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6DdFm":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ChoiceGroup", function () {
  return ChoiceGroup;
});
var _Utilities = require('../../Utilities');
var _ChoiceGroupBase = require('./ChoiceGroup.base');
var _ChoiceGroupStyles = require('./ChoiceGroup.styles');
var ChoiceGroup = _Utilities.styled(_ChoiceGroupBase.ChoiceGroupBase, _ChoiceGroupStyles.getStyles, undefined, {
  scope: 'ChoiceGroup'
});

},{"../../Utilities":"1439N","./ChoiceGroup.base":"7bI3U","./ChoiceGroup.styles":"3xsyf","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7bI3U":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ChoiceGroupBase", function () {
  return ChoiceGroupBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Label = require('../../Label');
var _Utilities = require('../../Utilities');
var _ChoiceGroupOptionIndex = require('./ChoiceGroupOption/index');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var getClassNames = _Utilities.classNamesFunction();
var getOptionId = function (option, id) {
  return id + "-" + option.key;
};
var findOption = function (options, key) {
  return key === undefined ? undefined : _Utilities.find(options, function (value) {
    return value.key === key;
  });
};
var useComponentRef = function (options, keyChecked, id, componentRef) {
  _react.useImperativeHandle(componentRef, function () {
    return {
      get checkedOption() {
        return findOption(options, keyChecked);
      },
      focus: function () {
        var optionToFocus = findOption(options, keyChecked) || options.filter(function (option) {
          return !option.disabled;
        })[0];
        var elementToFocus = optionToFocus && document.getElementById(getOptionId(optionToFocus, id));
        if (elementToFocus) {
          elementToFocus.focus();
          _Utilities.setFocusVisibility(true, elementToFocus);
        }
      }
    };
  }, [options, keyChecked, id]);
};
var COMPONENT_NAME = 'ChoiceGroup';
var ChoiceGroupBase = _react.forwardRef(function (props, forwardedRef) {
  var className = props.className, theme = props.theme, styles = props.styles, _a = props.options, options = _a === void 0 ? [] : _a, label = props.label, required = props.required, disabled = props.disabled, name = props.name, defaultSelectedKey = props.defaultSelectedKey, componentRef = props.componentRef, onChange = props.onChange;
  var id = _fluentuiReactHooks.useId('ChoiceGroup');
  var labelId = _fluentuiReactHooks.useId('ChoiceGroupLabel');
  var divProps = _Utilities.getNativeProps(props, _Utilities.divProperties, ['onChange', 'className', 'required']);
  var classNames = getClassNames(styles, {
    theme: theme,
    className: className,
    optionsContainIconOrImage: options.some(function (option) {
      return !!(option.iconProps || option.imageSrc);
    })
  });
  var ariaLabelledBy = props.ariaLabelledBy || (label ? labelId : props['aria-labelledby']);
  var _b = _fluentuiReactHooks.useControllableValue(props.selectedKey, defaultSelectedKey), keyChecked = _b[0], setKeyChecked = _b[1];
  var _c = _react.useState(), keyFocused = _c[0], setKeyFocused = _c[1];
  useDebugWarnings(props);
  useComponentRef(options, keyChecked, id, componentRef);
  var onFocus = _react.useCallback(function (ev, option) {
    var _a;
    if (option) {
      setKeyFocused(option.itemKey);
      (_a = option.onFocus) === null || _a === void 0 ? void 0 : _a.call(option, ev);
    }
  }, []);
  var onBlur = _react.useCallback(function (ev, option) {
    var _a;
    setKeyFocused(undefined);
    (_a = option === null || option === void 0 ? void 0 : option.onBlur) === null || _a === void 0 ? void 0 : _a.call(option, ev);
  }, []);
  var onOptionChange = _react.useCallback(function (evt, option) {
    var _a;
    if (!option) {
      return;
    }
    setKeyChecked(option.itemKey);
    (_a = option.onChange) === null || _a === void 0 ? void 0 : _a.call(option, evt);
    onChange === null || onChange === void 0 ? void 0 : onChange(evt, findOption(options, option.itemKey));
  }, [onChange, options, setKeyChecked]);
  return _react.createElement("div", _tslib.__assign({
    className: classNames.root
  }, divProps, {
    ref: forwardedRef
  }), _react.createElement("div", _tslib.__assign({
    role: "radiogroup"
  }, ariaLabelledBy && ({
    'aria-labelledby': ariaLabelledBy
  })), label && _react.createElement(_Label.Label, {
    className: classNames.label,
    required: required,
    id: labelId,
    disabled: disabled
  }, label), _react.createElement("div", {
    className: classNames.flexContainer
  }, options.map(function (option) {
    return _react.createElement(_ChoiceGroupOptionIndex.ChoiceGroupOption, _tslib.__assign({
      itemKey: option.key
    }, option, {
      key: option.key,
      onBlur: onBlur,
      onFocus: onFocus,
      onChange: onOptionChange,
      focused: option.key === keyFocused,
      checked: option.key === keyChecked,
      disabled: option.disabled || disabled,
      id: getOptionId(option, id),
      labelId: option.labelId || labelId + "-" + option.key,
      name: name || id,
      required: required
    }));
  }))));
});
ChoiceGroupBase.displayName = COMPONENT_NAME;
function useDebugWarnings(props) {
  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional
    _fluentuiReactHooks.useWarnings({
      name: COMPONENT_NAME,
      props: props,
      mutuallyExclusive: {
        selectedKey: 'defaultSelectedKey'
      }
    });
  }
}

},{"tslib":"6ZIET","react":"4g1R3","../../Label":"6RBc6","../../Utilities":"1439N","./ChoiceGroupOption/index":"5iBSO","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5iBSO":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _ChoiceGroupOption = require('./ChoiceGroupOption');
_parcelHelpers.exportAll(_ChoiceGroupOption, exports);
var _ChoiceGroupOptionTypes = require('./ChoiceGroupOption.types');
_parcelHelpers.exportAll(_ChoiceGroupOptionTypes, exports);

},{"./ChoiceGroupOption":"6Zd2g","./ChoiceGroupOption.types":"6W8g6","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6Zd2g":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ChoiceGroupOption", function () {
  return ChoiceGroupOption;
});
var _Utilities = require('../../../Utilities');
var _ChoiceGroupOptionBase = require('./ChoiceGroupOption.base');
var _ChoiceGroupOptionStyles = require('./ChoiceGroupOption.styles');
var ChoiceGroupOption = _Utilities.styled(_ChoiceGroupOptionBase.ChoiceGroupOptionBase, _ChoiceGroupOptionStyles.getStyles, undefined, {
  scope: 'ChoiceGroupOption'
});

},{"../../../Utilities":"1439N","./ChoiceGroupOption.base":"5XZNb","./ChoiceGroupOption.styles":"YYOsb","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5XZNb":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ChoiceGroupOptionBase", function () {
  return ChoiceGroupOptionBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Image = require('../../../Image');
var _Icon = require('../../../Icon');
var _Utilities = require('../../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var LARGE_IMAGE_SIZE = 71;
var DEFAULT_PROPS = {
  // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.
  imageSize: {
    width: 32,
    height: 32
  }
};
var ChoiceGroupOptionBase = function (propsWithoutDefaults) {
  // Mix the `key` prop back in since custom render functions may be expecting it
  // (React uses `key` internally rather than passing it through to the component)
  var props = _Utilities.getPropsWithDefaults(_tslib.__assign(_tslib.__assign({}, DEFAULT_PROPS), {
    key: propsWithoutDefaults.itemKey
  }), propsWithoutDefaults);
  var ariaLabel = props.ariaLabel, focused = props.focused, required = props.required, theme = props.theme, iconProps = props.iconProps, imageSrc = props.imageSrc, imageSize = props.imageSize, disabled = props.disabled, checked = props.checked, id = props.id, styles = props.styles, name = props.name, rest = _tslib.__rest(props, ["ariaLabel", "focused", "required", "theme", "iconProps", "imageSrc", "imageSize", "disabled", "checked", "id", "styles", "name"]);
  var classNames = getClassNames(styles, {
    theme: theme,
    hasIcon: !!iconProps,
    hasImage: !!imageSrc,
    checked: checked,
    disabled: disabled,
    imageIsLarge: !!imageSrc && (imageSize.width > LARGE_IMAGE_SIZE || imageSize.height > LARGE_IMAGE_SIZE),
    imageSize: imageSize,
    focused: focused
  });
  var _a = _Utilities.getNativeProps(rest, _Utilities.inputProperties), className = _a.className, nativeProps = _tslib.__rest(_a, ["className"]);
  var defaultOnRenderLabel = function () {
    return _react.createElement("span", {
      id: props.labelId,
      className: "ms-ChoiceFieldLabel"
    }, props.text);
  };
  var defaultOnRenderField = function () {
    var _a = props.imageAlt, imageAlt = _a === void 0 ? '' : _a, selectedImageSrc = props.selectedImageSrc;
    var onRenderLabel = props.onRenderLabel ? _Utilities.composeRenderFunction(props.onRenderLabel, defaultOnRenderLabel) : defaultOnRenderLabel;
    var label = onRenderLabel(props);
    return _react.createElement("label", {
      htmlFor: id,
      className: classNames.field
    }, imageSrc && _react.createElement("div", {
      className: classNames.innerField
    }, _react.createElement("div", {
      className: classNames.imageWrapper
    }, _react.createElement(_Image.Image, _tslib.__assign({
      src: imageSrc,
      alt: imageAlt
    }, imageSize))), _react.createElement("div", {
      className: classNames.selectedImageWrapper
    }, _react.createElement(_Image.Image, _tslib.__assign({
      src: selectedImageSrc,
      alt: imageAlt
    }, imageSize)))), iconProps && _react.createElement("div", {
      className: classNames.innerField
    }, _react.createElement("div", {
      className: classNames.iconWrapper
    }, _react.createElement(_Icon.Icon, _tslib.__assign({}, iconProps)))), imageSrc || iconProps ? _react.createElement("div", {
      className: classNames.labelWrapper
    }, label) : label);
  };
  var _b = props.onRenderField, onRenderField = _b === void 0 ? defaultOnRenderField : _b;
  var onChange = function (evt) {
    var _a;
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, evt, props);
  };
  var onBlur = function (evt) {
    var _a;
    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, evt);
  };
  var onFocus = function (evt) {
    var _a;
    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, evt, props);
  };
  return _react.createElement("div", {
    className: classNames.root
  }, _react.createElement("div", {
    className: classNames.choiceFieldWrapper
  }, _react.createElement("input", _tslib.__assign({
    "aria-label": ariaLabel,
    id: id,
    className: _Utilities.css(classNames.input, className),
    type: "radio",
    name: name,
    disabled: disabled,
    checked: checked,
    required: required
  }, nativeProps, {
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur
  })), onRenderField(props, defaultOnRenderField)));
};
ChoiceGroupOptionBase.displayName = 'ChoiceGroupOption';

},{"tslib":"6ZIET","react":"4g1R3","../../../Image":"7AI3v","../../../Icon":"7upjA","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7AI3v":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsImageIndex = require('./components/Image/index');
_parcelHelpers.exportAll(_componentsImageIndex, exports);

},{"./components/Image/index":"6UHPh","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6UHPh":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Image = require('./Image');
_parcelHelpers.exportAll(_Image, exports);
var _ImageBase = require('./Image.base');
_parcelHelpers.exportAll(_ImageBase, exports);
var _ImageTypes = require('./Image.types');
_parcelHelpers.exportAll(_ImageTypes, exports);

},{"./Image":"BD79S","./Image.base":"273J5","./Image.types":"2kbsf","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"YYOsb":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../../Styling');
var _Utilities = require('../../../Utilities');
var GlobalClassNames = {
  root: 'ms-ChoiceField',
  choiceFieldWrapper: 'ms-ChoiceField-wrapper',
  input: 'ms-ChoiceField-input',
  field: 'ms-ChoiceField-field',
  innerField: 'ms-ChoiceField-innerField',
  imageWrapper: 'ms-ChoiceField-imageWrapper',
  iconWrapper: 'ms-ChoiceField-iconWrapper',
  labelWrapper: 'ms-ChoiceField-labelWrapper',
  checked: 'is-checked'
};
var labelWrapperLineHeight = 15;
var labelWrapperHeight = labelWrapperLineHeight * 2 + 2;
// adding 2px height to ensure text doesn't get cutoff
var iconSize = 32;
var choiceFieldSize = 20;
var choiceFieldTransitionDuration = '200ms';
var choiceFieldTransitionTiming = 'cubic-bezier(.4, 0, .23, 1)';
var radioButtonSpacing = 3;
var radioButtonInnerSize = 5;
function getChoiceGroupFocusStyle(focusBorderColor, hasIconOrImage) {
  var _a, _b;
  return ['is-inFocus', {
    selectors: (_a = {}, _a["." + _Utilities.IsFocusVisibleClassName + " &"] = {
      position: 'relative',
      outline: 'transparent',
      selectors: {
        '::-moz-focus-inner': {
          border: 0
        },
        ':after': {
          content: '""',
          top: -2,
          right: -2,
          bottom: -2,
          left: -2,
          pointerEvents: 'none',
          border: "1px solid " + focusBorderColor,
          position: 'absolute',
          selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
            borderColor: 'WindowText',
            borderWidth: hasIconOrImage ? 1 : 2
          }, _b)
        }
      }
    }, _a)
  }];
}
function getImageWrapperStyle(isSelectedImageWrapper, className, checked) {
  return [className, {
    paddingBottom: 2,
    transitionProperty: 'opacity',
    transitionDuration: choiceFieldTransitionDuration,
    transitionTimingFunction: 'ease',
    selectors: {
      '.ms-Image': {
        display: 'inline-block',
        borderStyle: 'none'
      }
    }
  }, (checked ? !isSelectedImageWrapper : isSelectedImageWrapper) && ['is-hidden', {
    position: 'absolute',
    left: 0,
    top: 0,
    width: '100%',
    height: '100%',
    overflow: 'hidden',
    opacity: 0
  }]];
}
var getStyles = function (props) {
  var _a, _b, _c, _d, _e;
  var theme = props.theme, hasIcon = props.hasIcon, hasImage = props.hasImage, checked = props.checked, disabled = props.disabled, imageIsLarge = props.imageIsLarge, focused = props.focused, imageSize = props.imageSize;
  var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  // Tokens
  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder
  var circleBorderColor = palette.neutralPrimary;
  var circleHoveredBorderColor = semanticColors.inputBorderHovered;
  var circleCheckedBorderColor = semanticColors.inputBackgroundChecked;
  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered
  var circleCheckedHoveredBorderColor = palette.themeDark;
  var circleDisabledBorderColor = semanticColors.disabledBodySubtext;
  var circleBackgroundColor = semanticColors.bodyBackground;
  var dotUncheckedHoveredColor = palette.neutralSecondary;
  var dotCheckedColor = semanticColors.inputBackgroundChecked;
  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered
  var dotCheckedHoveredColor = palette.themeDark;
  var dotDisabledColor = semanticColors.disabledBodySubtext;
  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.bodyTextChecked
  var labelHoverFocusColor = palette.neutralDark;
  var focusBorderColor = semanticColors.focusBorder;
  var iconOrImageChoiceBorderUncheckedHoveredColor = semanticColors.inputBorderHovered;
  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered
  var iconOrImageChoiceBorderCheckedColor = semanticColors.inputBackgroundChecked;
  var iconOrImageChoiceBorderCheckedHoveredColor = palette.themeDark;
  var iconOrImageChoiceBackgroundColor = palette.neutralLighter;
  var fieldHoverOrFocusProperties = {
    selectors: {
      '.ms-ChoiceFieldLabel': {
        color: labelHoverFocusColor
      },
      ':before': {
        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor
      },
      ':after': [!hasIcon && !hasImage && !checked && ({
        content: '""',
        transitionProperty: 'background-color',
        left: 5,
        top: 5,
        width: 10,
        height: 10,
        backgroundColor: dotUncheckedHoveredColor
      }), checked && ({
        borderColor: dotCheckedHoveredColor,
        background: dotCheckedHoveredColor
      })]
    }
  };
  var enabledFieldWithImageHoverOrFocusProperties = {
    borderColor: checked ? iconOrImageChoiceBorderCheckedHoveredColor : iconOrImageChoiceBorderUncheckedHoveredColor,
    selectors: {
      ':before': {
        opacity: 1,
        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor
      }
    }
  };
  var circleAreaProperties = [{
    content: '""',
    display: 'inline-block',
    backgroundColor: circleBackgroundColor,
    borderWidth: 1,
    borderStyle: 'solid',
    borderColor: circleBorderColor,
    width: choiceFieldSize,
    height: choiceFieldSize,
    fontWeight: 'normal',
    position: 'absolute',
    top: 0,
    left: 0,
    boxSizing: 'border-box',
    transitionProperty: 'border-color',
    transitionDuration: choiceFieldTransitionDuration,
    transitionTimingFunction: choiceFieldTransitionTiming,
    borderRadius: '50%'
  }, disabled && ({
    borderColor: circleDisabledBorderColor,
    selectors: (_a = {}, _a[_Styling.HighContrastSelector] = _tslib.__assign({
      borderColor: 'GrayText',
      background: 'Window'
    }, _Styling.getHighContrastNoAdjustStyle()), _a)
  }), checked && ({
    borderColor: disabled ? circleDisabledBorderColor : circleCheckedBorderColor,
    selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
      borderColor: 'Highlight',
      background: 'Window',
      forcedColorAdjust: 'none'
    }, _b)
  }), (hasIcon || hasImage) && ({
    top: radioButtonSpacing,
    right: radioButtonSpacing,
    left: 'auto',
    opacity: checked ? 1 : 0
  })];
  var dotAreaProperties = [{
    content: '""',
    width: 0,
    height: 0,
    borderRadius: '50%',
    position: 'absolute',
    left: choiceFieldSize / 2,
    right: 0,
    transitionProperty: 'border-width',
    transitionDuration: choiceFieldTransitionDuration,
    transitionTimingFunction: choiceFieldTransitionTiming,
    boxSizing: 'border-box'
  }, checked && ({
    borderWidth: 5,
    borderStyle: 'solid',
    borderColor: disabled ? dotDisabledColor : dotCheckedColor,
    background: dotCheckedColor,
    left: 5,
    top: 5,
    width: 10,
    height: 10,
    selectors: (_c = {}, _c[_Styling.HighContrastSelector] = {
      borderColor: 'Highlight',
      forcedColorAdjust: 'none'
    }, _c)
  }), checked && (hasIcon || hasImage) && ({
    top: radioButtonSpacing + radioButtonInnerSize,
    right: radioButtonSpacing + radioButtonInnerSize,
    left: 'auto'
  })];
  return {
    root: [classNames.root, theme.fonts.medium, {
      display: 'flex',
      alignItems: 'center',
      boxSizing: 'border-box',
      color: semanticColors.bodyText,
      minHeight: 26,
      border: 'none',
      position: 'relative',
      marginTop: 8,
      selectors: {
        '.ms-ChoiceFieldLabel': {
          display: 'inline-block'
        }
      }
    }, !hasIcon && !hasImage && ({
      selectors: {
        '.ms-ChoiceFieldLabel': {
          paddingLeft: '26px'
        }
      }
    }), hasImage && 'ms-ChoiceField--image', hasIcon && 'ms-ChoiceField--icon', (hasIcon || hasImage) && ({
      display: 'inline-flex',
      fontSize: 0,
      margin: '0 4px 4px 0',
      paddingLeft: 0,
      backgroundColor: iconOrImageChoiceBackgroundColor,
      height: '100%'
    })],
    choiceFieldWrapper: [classNames.choiceFieldWrapper, focused && getChoiceGroupFocusStyle(focusBorderColor, hasIcon || hasImage)],
    // The hidden input
    input: [classNames.input, {
      position: 'absolute',
      opacity: 0,
      top: 0,
      right: 0,
      width: '100%',
      height: '100%',
      margin: 0
    }, disabled && 'is-disabled'],
    field: [classNames.field, checked && classNames.checked, {
      display: 'inline-block',
      cursor: 'pointer',
      marginTop: 0,
      position: 'relative',
      verticalAlign: 'top',
      userSelect: 'none',
      minHeight: 20,
      selectors: {
        ':hover': !disabled && fieldHoverOrFocusProperties,
        ':focus': !disabled && fieldHoverOrFocusProperties,
        // The circle
        ':before': circleAreaProperties,
        // The dot
        ':after': dotAreaProperties
      }
    }, hasIcon && 'ms-ChoiceField--icon', hasImage && 'ms-ChoiceField-field--image', (hasIcon || hasImage) && ({
      boxSizing: 'content-box',
      cursor: 'pointer',
      paddingTop: 22,
      margin: 0,
      textAlign: 'center',
      transitionProperty: 'all',
      transitionDuration: choiceFieldTransitionDuration,
      transitionTimingFunction: 'ease',
      border: '1px solid transparent',
      justifyContent: 'center',
      alignItems: 'center',
      display: 'flex',
      flexDirection: 'column'
    }), checked && ({
      borderColor: iconOrImageChoiceBorderCheckedColor
    }), (hasIcon || hasImage) && !disabled && ({
      selectors: {
        ':hover': enabledFieldWithImageHoverOrFocusProperties,
        ':focus': enabledFieldWithImageHoverOrFocusProperties
      }
    }), disabled && ({
      cursor: 'default',
      selectors: {
        '.ms-ChoiceFieldLabel': {
          color: semanticColors.disabledBodyText,
          selectors: (_d = {}, _d[_Styling.HighContrastSelector] = _tslib.__assign({
            color: 'GrayText'
          }, _Styling.getHighContrastNoAdjustStyle()), _d)
        }
      }
    }), checked && disabled && ({
      borderColor: iconOrImageChoiceBackgroundColor
    })],
    innerField: [classNames.innerField, hasImage && ({
      // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.
      height: imageSize.height,
      width: imageSize.width
    }), (hasIcon || hasImage) && ({
      position: 'relative',
      display: 'inline-block',
      paddingLeft: 30,
      paddingRight: 30
    }), (hasIcon || hasImage) && imageIsLarge && ({
      paddingLeft: 24,
      paddingRight: 24
    }), (hasIcon || hasImage) && disabled && ({
      opacity: 0.25,
      selectors: (_e = {}, _e[_Styling.HighContrastSelector] = {
        color: 'GrayText',
        opacity: 1
      }, _e)
    })],
    imageWrapper: getImageWrapperStyle(false, classNames.imageWrapper, checked),
    selectedImageWrapper: getImageWrapperStyle(true, classNames.imageWrapper, checked),
    iconWrapper: [classNames.iconWrapper, {
      fontSize: iconSize,
      lineHeight: iconSize,
      height: iconSize
    }],
    labelWrapper: [classNames.labelWrapper, fonts.medium, (hasIcon || hasImage) && ({
      display: 'block',
      position: 'relative',
      margin: '4px 8px 2px 8px',
      height: labelWrapperHeight,
      lineHeight: labelWrapperLineHeight,
      // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.
      maxWidth: imageSize.width * 2,
      overflow: 'hidden',
      whiteSpace: 'pre-wrap'
    })]
  };
};

},{"tslib":"6ZIET","../../../Styling":"5q33X","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6W8g6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3xsyf":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var GlobalClassNames = {
  root: 'ms-ChoiceFieldGroup',
  flexContainer: 'ms-ChoiceFieldGroup-flexContainer'
};
var getStyles = function (props) {
  var className = props.className, optionsContainIconOrImage = props.optionsContainIconOrImage, theme = props.theme;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [className, classNames.root, theme.fonts.medium, {
      display: 'block'
    }],
    flexContainer: [classNames.flexContainer, optionsContainIconOrImage && ({
      display: 'flex',
      flexDirection: 'row',
      flexWrap: 'wrap'
    })]
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3XYam":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"SqCr3":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsAnnouncedIndex = require('./components/Announced/index');
_parcelHelpers.exportAll(_componentsAnnouncedIndex, exports);

},{"./components/Announced/index":"4o10z","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4o10z":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Announced = require('./Announced');
_parcelHelpers.exportAll(_Announced, exports);
var _AnnouncedBase = require('./Announced.base');
_parcelHelpers.exportAll(_AnnouncedBase, exports);
var _AnnouncedTypes = require('./Announced.types');
_parcelHelpers.exportAll(_AnnouncedTypes, exports);

},{"./Announced":"2w3ww","./Announced.base":"gtUkl","./Announced.types":"4gs71","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2w3ww":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Announced", function () {
  return Announced;
});
var _Utilities = require('../../Utilities');
var _AnnouncedBase = require('./Announced.base');
var _AnnouncedStyles = require('./Announced.styles');
var Announced = _Utilities.styled(_AnnouncedBase.AnnouncedBase, _AnnouncedStyles.getStyles);

},{"../../Utilities":"1439N","./Announced.base":"gtUkl","./Announced.styles":"5RLZJ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"gtUkl":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "AnnouncedBase", function () {
  return AnnouncedBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
/**
* {@docCategory Announced}
*/
var AnnouncedBase = /** @class*/
(function (_super) {
  _tslib.__extends(AnnouncedBase, _super);
  function AnnouncedBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnnouncedBase.prototype.render = function () {
    var _a = this.props, message = _a.message, styles = _a.styles, _b = _a.as, Root = _b === void 0 ? 'div' : _b, className = _a.className;
    var classNames = getClassNames(styles, {
      className: className
    });
    return _react.createElement(Root, _tslib.__assign({
      role: "status",
      className: classNames.root
    }, _Utilities.getNativeProps(this.props, _Utilities.divProperties, ['className'])), _react.createElement(_Utilities.DelayedRender, null, _react.createElement("div", {
      className: classNames.screenReaderText
    }, message)));
  };
  AnnouncedBase.defaultProps = {
    'aria-live': 'polite'
  };
  return AnnouncedBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5RLZJ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../Styling');
var getStyles = function (props) {
  return {
    root: props.className,
    screenReaderText: _Styling.hiddenContentStyle
  };
};

},{"../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4gs71":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4C1Qk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var fabric_icons_1 = require("./fabric-icons");
var fabric_icons_0_1 = require("./fabric-icons-0");
var fabric_icons_1_1 = require("./fabric-icons-1");
var fabric_icons_2_1 = require("./fabric-icons-2");
var fabric_icons_3_1 = require("./fabric-icons-3");
var fabric_icons_4_1 = require("./fabric-icons-4");
var fabric_icons_5_1 = require("./fabric-icons-5");
var fabric_icons_6_1 = require("./fabric-icons-6");
var fabric_icons_7_1 = require("./fabric-icons-7");
var fabric_icons_8_1 = require("./fabric-icons-8");
var fabric_icons_9_1 = require("./fabric-icons-9");
var fabric_icons_10_1 = require("./fabric-icons-10");
var fabric_icons_11_1 = require("./fabric-icons-11");
var fabric_icons_12_1 = require("./fabric-icons-12");
var fabric_icons_13_1 = require("./fabric-icons-13");
var fabric_icons_14_1 = require("./fabric-icons-14");
var fabric_icons_15_1 = require("./fabric-icons-15");
var fabric_icons_16_1 = require("./fabric-icons-16");
var fabric_icons_17_1 = require("./fabric-icons-17");
var iconAliases_1 = require("./iconAliases");
var DEFAULT_BASE_URL = 'https://spoprod-a.akamaihd.net/files/fabric/assets/icons/';
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = DEFAULT_BASE_URL; }
    [
        fabric_icons_1.initializeIcons,
        fabric_icons_0_1.initializeIcons,
        fabric_icons_1_1.initializeIcons,
        fabric_icons_2_1.initializeIcons,
        fabric_icons_3_1.initializeIcons,
        fabric_icons_4_1.initializeIcons,
        fabric_icons_5_1.initializeIcons,
        fabric_icons_6_1.initializeIcons,
        fabric_icons_7_1.initializeIcons,
        fabric_icons_8_1.initializeIcons,
        fabric_icons_9_1.initializeIcons,
        fabric_icons_10_1.initializeIcons,
        fabric_icons_11_1.initializeIcons,
        fabric_icons_12_1.initializeIcons,
        fabric_icons_13_1.initializeIcons,
        fabric_icons_14_1.initializeIcons,
        fabric_icons_15_1.initializeIcons,
        fabric_icons_16_1.initializeIcons,
        fabric_icons_17_1.initializeIcons,
    ].forEach(function (initialize) { return initialize(baseUrl, options); });
    iconAliases_1.registerIconAliases();
}
exports.initializeIcons = initializeIcons;
require("./version");

},{"./fabric-icons":"519v3","./fabric-icons-0":"2hiRY","./fabric-icons-1":"5UnMm","./fabric-icons-2":"5rotS","./fabric-icons-3":"4KLh5","./fabric-icons-4":"3cBpy","./fabric-icons-5":"3zW1J","./fabric-icons-6":"5dxhu","./fabric-icons-7":"76Gb1","./fabric-icons-8":"31pen","./fabric-icons-9":"7DIQ1","./fabric-icons-10":"52ewW","./fabric-icons-11":"CFJXE","./fabric-icons-12":"3M2Pd","./fabric-icons-13":"70ssx","./fabric-icons-14":"2fulW","./fabric-icons-15":"7w3Zl","./fabric-icons-16":"1h4CH","./fabric-icons-17":"7MH3A","./iconAliases":"4XY5S","./version":"1lIpM"}],"519v3":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none',
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons\"",
            src: "url('" + baseUrl + "fabric-icons-a13498cf.woff') format('woff')",
        },
        icons: {
            GlobalNavButton: '\uE700',
            ChevronDown: '\uE70D',
            ChevronUp: '\uE70E',
            Edit: '\uE70F',
            Add: '\uE710',
            Cancel: '\uE711',
            More: '\uE712',
            Settings: '\uE713',
            Mail: '\uE715',
            Filter: '\uE71C',
            Search: '\uE721',
            Share: '\uE72D',
            BlockedSite: '\uE72F',
            FavoriteStar: '\uE734',
            FavoriteStarFill: '\uE735',
            CheckMark: '\uE73E',
            Delete: '\uE74D',
            ChevronLeft: '\uE76B',
            ChevronRight: '\uE76C',
            Calendar: '\uE787',
            Megaphone: '\uE789',
            Undo: '\uE7A7',
            Flag: '\uE7C1',
            Page: '\uE7C3',
            Pinned: '\uE840',
            View: '\uE890',
            Clear: '\uE894',
            Download: '\uE896',
            Upload: '\uE898',
            Folder: '\uE8B7',
            Sort: '\uE8CB',
            AlignRight: '\uE8E2',
            AlignLeft: '\uE8E4',
            Tag: '\uE8EC',
            AddFriend: '\uE8FA',
            Info: '\uE946',
            SortLines: '\uE9D0',
            List: '\uEA37',
            CircleRing: '\uEA3A',
            Heart: '\uEB51',
            HeartFill: '\uEB52',
            Tiles: '\uECA5',
            Embed: '\uECCE',
            Glimmer: '\uECF4',
            Ascending: '\uEDC0',
            Descending: '\uEDC1',
            SortUp: '\uEE68',
            SortDown: '\uEE69',
            SyncToPC: '\uEE6E',
            LargeGrid: '\uEECB',
            SkypeCheck: '\uEF80',
            SkypeClock: '\uEF81',
            SkypeMinus: '\uEF82',
            ClearFilter: '\uEF8F',
            Flow: '\uEF90',
            StatusCircleCheckmark: '\uF13E',
            MoreVertical: '\uF2BC',
        },
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"2hiRY":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-0\"",
            src: "url('" + baseUrl + "fabric-icons-0-467ee27f.woff') format('woff')"
        },
        icons: {
            'PageLink': '\uE302',
            'CommentSolid': '\uE30E',
            'ChangeEntitlements': '\uE310',
            'Installation': '\uE311',
            'WebAppBuilderModule': '\uE313',
            'WebAppBuilderFragment': '\uE314',
            'WebAppBuilderSlot': '\uE315',
            'BullseyeTargetEdit': '\uE319',
            'WebAppBuilderFragmentCreate': '\uE31B',
            'PageData': '\uE31C',
            'PageHeaderEdit': '\uE31D',
            'ProductList': '\uE31E',
            'UnpublishContent': '\uE31F',
            'DependencyAdd': '\uE344',
            'DependencyRemove': '\uE345',
            'EntitlementPolicy': '\uE346',
            'EntitlementRedemption': '\uE347',
            'SchoolDataSyncLogo': '\uE34C',
            'PinSolid12': '\uE352',
            'PinSolidOff12': '\uE353',
            'AddLink': '\uE35E',
            'SharepointAppIcon16': '\uE365',
            'DataflowsLink': '\uE366',
            'TimePicker': '\uE367',
            'UserWarning': '\uE368',
            'ComplianceAudit': '\uE369',
            'InternetSharing': '\uE704',
            'Brightness': '\uE706',
            'MapPin': '\uE707',
            'Airplane': '\uE709',
            'Tablet': '\uE70A',
            'QuickNote': '\uE70B',
            'Video': '\uE714',
            'People': '\uE716',
            'Phone': '\uE717',
            'Pin': '\uE718',
            'Shop': '\uE719',
            'Stop': '\uE71A',
            'Link': '\uE71B',
            'AllApps': '\uE71D',
            'Zoom': '\uE71E',
            'ZoomOut': '\uE71F',
            'Microphone': '\uE720',
            'Camera': '\uE722',
            'Attach': '\uE723',
            'Send': '\uE724',
            'FavoriteList': '\uE728',
            'PageSolid': '\uE729',
            'Forward': '\uE72A',
            'Back': '\uE72B',
            'Refresh': '\uE72C',
            'Lock': '\uE72E',
            'ReportHacked': '\uE730',
            'EMI': '\uE731',
            'MiniLink': '\uE732',
            'Blocked': '\uE733',
            'ReadingMode': '\uE736',
            'Favicon': '\uE737',
            'Remove': '\uE738',
            'Checkbox': '\uE739',
            'CheckboxComposite': '\uE73A',
            'CheckboxFill': '\uE73B',
            'CheckboxIndeterminate': '\uE73C',
            'CheckboxCompositeReversed': '\uE73D',
            'BackToWindow': '\uE73F',
            'FullScreen': '\uE740',
            'Print': '\uE749',
            'Up': '\uE74A',
            'Down': '\uE74B',
            'OEM': '\uE74C',
            'Save': '\uE74E',
            'ReturnKey': '\uE751',
            'Cloud': '\uE753',
            'Flashlight': '\uE754',
            'CommandPrompt': '\uE756',
            'Sad': '\uE757',
            'RealEstate': '\uE758',
            'SIPMove': '\uE759',
            'EraseTool': '\uE75C',
            'GripperTool': '\uE75E',
            'Dialpad': '\uE75F',
            'PageLeft': '\uE760',
            'PageRight': '\uE761',
            'MultiSelect': '\uE762',
            'KeyboardClassic': '\uE765',
            'Play': '\uE768',
            'Pause': '\uE769',
            'InkingTool': '\uE76D',
            'Emoji2': '\uE76E',
            'GripperBarHorizontal': '\uE76F',
            'System': '\uE770',
            'Personalize': '\uE771',
            'SearchAndApps': '\uE773',
            'Globe': '\uE774',
            'EaseOfAccess': '\uE776',
            'ContactInfo': '\uE779',
            'Unpin': '\uE77A',
            'Contact': '\uE77B',
            'Memo': '\uE77C',
            'IncomingCall': '\uE77E'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"5UnMm":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-1\"",
            src: "url('" + baseUrl + "fabric-icons-1-4d521695.woff') format('woff')"
        },
        icons: {
            'Paste': '\uE77F',
            'WindowsLogo': '\uE782',
            'Error': '\uE783',
            'GripperBarVertical': '\uE784',
            'Unlock': '\uE785',
            'Slideshow': '\uE786',
            'Trim': '\uE78A',
            'AutoEnhanceOn': '\uE78D',
            'AutoEnhanceOff': '\uE78E',
            'Color': '\uE790',
            'SaveAs': '\uE792',
            'Light': '\uE793',
            'Filters': '\uE795',
            'AspectRatio': '\uE799',
            'Contrast': '\uE7A1',
            'Redo': '\uE7A6',
            'Crop': '\uE7A8',
            'PhotoCollection': '\uE7AA',
            'Album': '\uE7AB',
            'Rotate': '\uE7AD',
            'PanoIndicator': '\uE7B0',
            'Translate': '\uE7B2',
            'RedEye': '\uE7B3',
            'ViewOriginal': '\uE7B4',
            'ThumbnailView': '\uE7B6',
            'Package': '\uE7B8',
            'Telemarketer': '\uE7B9',
            'Warning': '\uE7BA',
            'Financial': '\uE7BB',
            'Education': '\uE7BE',
            'ShoppingCart': '\uE7BF',
            'Train': '\uE7C0',
            'Move': '\uE7C2',
            'TouchPointer': '\uE7C9',
            'Merge': '\uE7D5',
            'TurnRight': '\uE7DB',
            'Ferry': '\uE7E3',
            'Highlight': '\uE7E6',
            'PowerButton': '\uE7E8',
            'Tab': '\uE7E9',
            'Admin': '\uE7EF',
            'TVMonitor': '\uE7F4',
            'Speakers': '\uE7F5',
            'Game': '\uE7FC',
            'HorizontalTabKey': '\uE7FD',
            'UnstackSelected': '\uE7FE',
            'StackIndicator': '\uE7FF',
            'Nav2DMapView': '\uE800',
            'StreetsideSplitMinimize': '\uE802',
            'Car': '\uE804',
            'Bus': '\uE806',
            'EatDrink': '\uE807',
            'SeeDo': '\uE808',
            'LocationCircle': '\uE80E',
            'Home': '\uE80F',
            'SwitcherStartEnd': '\uE810',
            'ParkingLocation': '\uE811',
            'IncidentTriangle': '\uE814',
            'Touch': '\uE815',
            'MapDirections': '\uE816',
            'CaretHollow': '\uE817',
            'CaretSolid': '\uE818',
            'History': '\uE81C',
            'Location': '\uE81D',
            'MapLayers': '\uE81E',
            'SearchNearby': '\uE820',
            'Work': '\uE821',
            'Recent': '\uE823',
            'Hotel': '\uE824',
            'Bank': '\uE825',
            'LocationDot': '\uE827',
            'Dictionary': '\uE82D',
            'ChromeBack': '\uE830',
            'FolderOpen': '\uE838',
            'PinnedFill': '\uE842',
            'RevToggleKey': '\uE845',
            'USB': '\uE88E',
            'Previous': '\uE892',
            'Next': '\uE893',
            'Sync': '\uE895',
            'Help': '\uE897',
            'Emoji': '\uE899',
            'MailForward': '\uE89C',
            'ClosePane': '\uE89F',
            'OpenPane': '\uE8A0',
            'PreviewLink': '\uE8A1',
            'ZoomIn': '\uE8A3',
            'Bookmarks': '\uE8A4',
            'Document': '\uE8A5',
            'ProtectedDocument': '\uE8A6',
            'OpenInNewWindow': '\uE8A7',
            'MailFill': '\uE8A8',
            'ViewAll': '\uE8A9',
            'Switch': '\uE8AB',
            'Rename': '\uE8AC',
            'Go': '\uE8AD',
            'Remote': '\uE8AF',
            'SelectAll': '\uE8B3',
            'Orientation': '\uE8B4',
            'Import': '\uE8B5'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"5rotS":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-2\"",
            src: "url('" + baseUrl + "fabric-icons-2-63c99abf.woff') format('woff')"
        },
        icons: {
            'Picture': '\uE8B9',
            'ChromeClose': '\uE8BB',
            'ShowResults': '\uE8BC',
            'Message': '\uE8BD',
            'CalendarDay': '\uE8BF',
            'CalendarWeek': '\uE8C0',
            'MailReplyAll': '\uE8C2',
            'Read': '\uE8C3',
            'Cut': '\uE8C6',
            'PaymentCard': '\uE8C7',
            'Copy': '\uE8C8',
            'Important': '\uE8C9',
            'MailReply': '\uE8CA',
            'GotoToday': '\uE8D1',
            'Font': '\uE8D2',
            'FontColor': '\uE8D3',
            'FolderFill': '\uE8D5',
            'Permissions': '\uE8D7',
            'DisableUpdates': '\uE8D8',
            'Unfavorite': '\uE8D9',
            'Italic': '\uE8DB',
            'Underline': '\uE8DC',
            'Bold': '\uE8DD',
            'MoveToFolder': '\uE8DE',
            'Dislike': '\uE8E0',
            'Like': '\uE8E1',
            'AlignCenter': '\uE8E3',
            'OpenFile': '\uE8E5',
            'ClearSelection': '\uE8E6',
            'FontDecrease': '\uE8E7',
            'FontIncrease': '\uE8E8',
            'FontSize': '\uE8E9',
            'CellPhone': '\uE8EA',
            'RepeatOne': '\uE8ED',
            'RepeatAll': '\uE8EE',
            'Calculator': '\uE8EF',
            'Library': '\uE8F1',
            'PostUpdate': '\uE8F3',
            'NewFolder': '\uE8F4',
            'CalendarReply': '\uE8F5',
            'UnsyncFolder': '\uE8F6',
            'SyncFolder': '\uE8F7',
            'BlockContact': '\uE8F8',
            'Accept': '\uE8FB',
            'BulletedList': '\uE8FD',
            'Preview': '\uE8FF',
            'News': '\uE900',
            'Chat': '\uE901',
            'Group': '\uE902',
            'World': '\uE909',
            'Comment': '\uE90A',
            'DockLeft': '\uE90C',
            'DockRight': '\uE90D',
            'Repair': '\uE90F',
            'Accounts': '\uE910',
            'Street': '\uE913',
            'RadioBullet': '\uE915',
            'Stopwatch': '\uE916',
            'Clock': '\uE917',
            'WorldClock': '\uE918',
            'AlarmClock': '\uE919',
            'Photo': '\uE91B',
            'ActionCenter': '\uE91C',
            'Hospital': '\uE91D',
            'Timer': '\uE91E',
            'FullCircleMask': '\uE91F',
            'LocationFill': '\uE920',
            'ChromeMinimize': '\uE921',
            'ChromeRestore': '\uE923',
            'Annotation': '\uE924',
            'Fingerprint': '\uE928',
            'Handwriting': '\uE929',
            'ChromeFullScreen': '\uE92D',
            'Completed': '\uE930',
            'Label': '\uE932',
            'FlickDown': '\uE935',
            'FlickUp': '\uE936',
            'FlickLeft': '\uE937',
            'FlickRight': '\uE938',
            'MiniExpand': '\uE93A',
            'MiniContract': '\uE93B',
            'Streaming': '\uE93E',
            'MusicInCollection': '\uE940',
            'OneDriveLogo': '\uE941',
            'CompassNW': '\uE942',
            'Code': '\uE943',
            'LightningBolt': '\uE945',
            'CalculatorMultiply': '\uE947',
            'CalculatorAddition': '\uE948',
            'CalculatorSubtract': '\uE949',
            'CalculatorPercentage': '\uE94C',
            'CalculatorEqualTo': '\uE94E',
            'PrintfaxPrinterFile': '\uE956',
            'StorageOptical': '\uE958',
            'Communications': '\uE95A',
            'Headset': '\uE95B',
            'Health': '\uE95E',
            'Webcam2': '\uE960',
            'FrontCamera': '\uE96B',
            'ChevronUpSmall': '\uE96D'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"4KLh5":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-3\"",
            src: "url('" + baseUrl + "fabric-icons-3-089e217a.woff') format('woff')"
        },
        icons: {
            'ChevronDownSmall': '\uE96E',
            'ChevronLeftSmall': '\uE96F',
            'ChevronRightSmall': '\uE970',
            'ChevronUpMed': '\uE971',
            'ChevronDownMed': '\uE972',
            'ChevronLeftMed': '\uE973',
            'ChevronRightMed': '\uE974',
            'Devices2': '\uE975',
            'PC1': '\uE977',
            'PresenceChickletVideo': '\uE979',
            'Reply': '\uE97A',
            'HalfAlpha': '\uE97E',
            'ConstructionCone': '\uE98F',
            'DoubleChevronLeftMed': '\uE991',
            'Volume0': '\uE992',
            'Volume1': '\uE993',
            'Volume2': '\uE994',
            'Volume3': '\uE995',
            'Chart': '\uE999',
            'Robot': '\uE99A',
            'Manufacturing': '\uE99C',
            'LockSolid': '\uE9A2',
            'FitPage': '\uE9A6',
            'FitWidth': '\uE9A7',
            'BidiLtr': '\uE9AA',
            'BidiRtl': '\uE9AB',
            'RightDoubleQuote': '\uE9B1',
            'Sunny': '\uE9BD',
            'CloudWeather': '\uE9BE',
            'Cloudy': '\uE9BF',
            'PartlyCloudyDay': '\uE9C0',
            'PartlyCloudyNight': '\uE9C1',
            'ClearNight': '\uE9C2',
            'RainShowersDay': '\uE9C3',
            'Rain': '\uE9C4',
            'Thunderstorms': '\uE9C6',
            'RainSnow': '\uE9C7',
            'Snow': '\uE9C8',
            'BlowingSnow': '\uE9C9',
            'Frigid': '\uE9CA',
            'Fog': '\uE9CB',
            'Squalls': '\uE9CC',
            'Duststorm': '\uE9CD',
            'Unknown': '\uE9CE',
            'Precipitation': '\uE9CF',
            'Ribbon': '\uE9D1',
            'AreaChart': '\uE9D2',
            'Assign': '\uE9D3',
            'FlowChart': '\uE9D4',
            'CheckList': '\uE9D5',
            'Diagnostic': '\uE9D9',
            'Generate': '\uE9DA',
            'LineChart': '\uE9E6',
            'Equalizer': '\uE9E9',
            'BarChartHorizontal': '\uE9EB',
            'BarChartVertical': '\uE9EC',
            'Freezing': '\uE9EF',
            'FunnelChart': '\uE9F1',
            'Processing': '\uE9F5',
            'Quantity': '\uE9F8',
            'ReportDocument': '\uE9F9',
            'StackColumnChart': '\uE9FC',
            'SnowShowerDay': '\uE9FD',
            'HailDay': '\uEA00',
            'WorkFlow': '\uEA01',
            'HourGlass': '\uEA03',
            'StoreLogoMed20': '\uEA04',
            'TimeSheet': '\uEA05',
            'TriangleSolid': '\uEA08',
            'UpgradeAnalysis': '\uEA0B',
            'VideoSolid': '\uEA0C',
            'RainShowersNight': '\uEA0F',
            'SnowShowerNight': '\uEA11',
            'Teamwork': '\uEA12',
            'HailNight': '\uEA13',
            'PeopleAdd': '\uEA15',
            'Glasses': '\uEA16',
            'DateTime2': '\uEA17',
            'Shield': '\uEA18',
            'Header1': '\uEA19',
            'PageAdd': '\uEA1A',
            'NumberedList': '\uEA1C',
            'PowerBILogo': '\uEA1E',
            'Info2': '\uEA1F',
            'MusicInCollectionFill': '\uEA36',
            'Asterisk': '\uEA38',
            'ErrorBadge': '\uEA39',
            'CircleFill': '\uEA3B',
            'Record2': '\uEA3F',
            'AllAppsMirrored': '\uEA40',
            'BookmarksMirrored': '\uEA41',
            'BulletedListMirrored': '\uEA42',
            'CaretHollowMirrored': '\uEA45',
            'CaretSolidMirrored': '\uEA46',
            'ChromeBackMirrored': '\uEA47',
            'ClearSelectionMirrored': '\uEA48',
            'ClosePaneMirrored': '\uEA49',
            'DockLeftMirrored': '\uEA4C',
            'DoubleChevronLeftMedMirrored': '\uEA4D',
            'GoMirrored': '\uEA4F'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"3cBpy":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-4\"",
            src: "url('" + baseUrl + "fabric-icons-4-a656cc0a.woff') format('woff')"
        },
        icons: {
            'HelpMirrored': '\uEA51',
            'ImportMirrored': '\uEA52',
            'ImportAllMirrored': '\uEA53',
            'ListMirrored': '\uEA55',
            'MailForwardMirrored': '\uEA56',
            'MailReplyMirrored': '\uEA57',
            'MailReplyAllMirrored': '\uEA58',
            'MiniContractMirrored': '\uEA59',
            'MiniExpandMirrored': '\uEA5A',
            'OpenPaneMirrored': '\uEA5B',
            'ParkingLocationMirrored': '\uEA5E',
            'SendMirrored': '\uEA63',
            'ShowResultsMirrored': '\uEA65',
            'ThumbnailViewMirrored': '\uEA67',
            'Media': '\uEA69',
            'Devices3': '\uEA6C',
            'Focus': '\uEA6F',
            'VideoLightOff': '\uEA74',
            'Lightbulb': '\uEA80',
            'StatusTriangle': '\uEA82',
            'VolumeDisabled': '\uEA85',
            'Puzzle': '\uEA86',
            'EmojiNeutral': '\uEA87',
            'EmojiDisappointed': '\uEA88',
            'HomeSolid': '\uEA8A',
            'Ringer': '\uEA8F',
            'PDF': '\uEA90',
            'HeartBroken': '\uEA92',
            'StoreLogo16': '\uEA96',
            'MultiSelectMirrored': '\uEA98',
            'Broom': '\uEA99',
            'AddToShoppingList': '\uEA9A',
            'Cocktails': '\uEA9D',
            'Wines': '\uEABF',
            'Articles': '\uEAC1',
            'Cycling': '\uEAC7',
            'DietPlanNotebook': '\uEAC8',
            'Pill': '\uEACB',
            'ExerciseTracker': '\uEACC',
            'HandsFree': '\uEAD0',
            'Medical': '\uEAD4',
            'Running': '\uEADA',
            'Weights': '\uEADB',
            'Trackers': '\uEADF',
            'AddNotes': '\uEAE3',
            'AllCurrency': '\uEAE4',
            'BarChart4': '\uEAE7',
            'CirclePlus': '\uEAEE',
            'Coffee': '\uEAEF',
            'Cotton': '\uEAF3',
            'Market': '\uEAFC',
            'Money': '\uEAFD',
            'PieDouble': '\uEB04',
            'PieSingle': '\uEB05',
            'RemoveFilter': '\uEB08',
            'Savings': '\uEB0B',
            'Sell': '\uEB0C',
            'StockDown': '\uEB0F',
            'StockUp': '\uEB11',
            'Lamp': '\uEB19',
            'Source': '\uEB1B',
            'MSNVideos': '\uEB1C',
            'Cricket': '\uEB1E',
            'Golf': '\uEB1F',
            'Baseball': '\uEB20',
            'Soccer': '\uEB21',
            'MoreSports': '\uEB22',
            'AutoRacing': '\uEB24',
            'CollegeHoops': '\uEB25',
            'CollegeFootball': '\uEB26',
            'ProFootball': '\uEB27',
            'ProHockey': '\uEB28',
            'Rugby': '\uEB2D',
            'SubstitutionsIn': '\uEB31',
            'Tennis': '\uEB33',
            'Arrivals': '\uEB34',
            'Design': '\uEB3C',
            'Website': '\uEB41',
            'Drop': '\uEB42',
            'HistoricalWeather': '\uEB43',
            'SkiResorts': '\uEB45',
            'Snowflake': '\uEB46',
            'BusSolid': '\uEB47',
            'FerrySolid': '\uEB48',
            'AirplaneSolid': '\uEB4C',
            'TrainSolid': '\uEB4D',
            'Ticket': '\uEB54',
            'WifiWarning4': '\uEB63',
            'Devices4': '\uEB66',
            'AzureLogo': '\uEB6A',
            'BingLogo': '\uEB6B',
            'MSNLogo': '\uEB6C',
            'OutlookLogoInverse': '\uEB6D',
            'OfficeLogo': '\uEB6E',
            'SkypeLogo': '\uEB6F',
            'Door': '\uEB75',
            'EditMirrored': '\uEB7E',
            'GiftCard': '\uEB8E',
            'DoubleBookmark': '\uEB8F',
            'StatusErrorFull': '\uEB90'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"3zW1J":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-5\"",
            src: "url('" + baseUrl + "fabric-icons-5-f95ba260.woff') format('woff')"
        },
        icons: {
            'Certificate': '\uEB95',
            'FastForward': '\uEB9D',
            'Rewind': '\uEB9E',
            'Photo2': '\uEB9F',
            'OpenSource': '\uEBC2',
            'Movers': '\uEBCD',
            'CloudDownload': '\uEBD3',
            'Family': '\uEBDA',
            'WindDirection': '\uEBE6',
            'Bug': '\uEBE8',
            'SiteScan': '\uEBEC',
            'BrowserScreenShot': '\uEBED',
            'F12DevTools': '\uEBEE',
            'CSS': '\uEBEF',
            'JS': '\uEBF0',
            'DeliveryTruck': '\uEBF4',
            'ReminderPerson': '\uEBF7',
            'ReminderGroup': '\uEBF8',
            'ReminderTime': '\uEBF9',
            'TabletMode': '\uEBFC',
            'Umbrella': '\uEC04',
            'NetworkTower': '\uEC05',
            'CityNext': '\uEC06',
            'CityNext2': '\uEC07',
            'Section': '\uEC0C',
            'OneNoteLogoInverse': '\uEC0D',
            'ToggleFilled': '\uEC11',
            'ToggleBorder': '\uEC12',
            'SliderThumb': '\uEC13',
            'ToggleThumb': '\uEC14',
            'Documentation': '\uEC17',
            'Badge': '\uEC1B',
            'Giftbox': '\uEC1F',
            'VisualStudioLogo': '\uEC22',
            'HomeGroup': '\uEC26',
            'ExcelLogoInverse': '\uEC28',
            'WordLogoInverse': '\uEC29',
            'PowerPointLogoInverse': '\uEC2A',
            'Cafe': '\uEC32',
            'SpeedHigh': '\uEC4A',
            'Commitments': '\uEC4D',
            'ThisPC': '\uEC4E',
            'MusicNote': '\uEC4F',
            'MicOff': '\uEC54',
            'PlaybackRate1x': '\uEC57',
            'EdgeLogo': '\uEC60',
            'CompletedSolid': '\uEC61',
            'AlbumRemove': '\uEC62',
            'MessageFill': '\uEC70',
            'TabletSelected': '\uEC74',
            'MobileSelected': '\uEC75',
            'LaptopSelected': '\uEC76',
            'TVMonitorSelected': '\uEC77',
            'DeveloperTools': '\uEC7A',
            'Shapes': '\uEC7C',
            'InsertTextBox': '\uEC7D',
            'LowerBrightness': '\uEC8A',
            'WebComponents': '\uEC8B',
            'OfflineStorage': '\uEC8C',
            'DOM': '\uEC8D',
            'CloudUpload': '\uEC8E',
            'ScrollUpDown': '\uEC8F',
            'DateTime': '\uEC92',
            'Event': '\uECA3',
            'Cake': '\uECA4',
            'Org': '\uECA6',
            'PartyLeader': '\uECA7',
            'DRM': '\uECA8',
            'CloudAdd': '\uECA9',
            'AppIconDefault': '\uECAA',
            'Photo2Add': '\uECAB',
            'Photo2Remove': '\uECAC',
            'Calories': '\uECAD',
            'POI': '\uECAF',
            'AddTo': '\uECC8',
            'RadioBtnOff': '\uECCA',
            'RadioBtnOn': '\uECCB',
            'ExploreContent': '\uECCD',
            'Product': '\uECDC',
            'ProgressLoopInner': '\uECDE',
            'ProgressLoopOuter': '\uECDF',
            'Blocked2': '\uECE4',
            'FangBody': '\uECEB',
            'Toolbox': '\uECED',
            'PageHeader': '\uECEE',
            'ChatInviteFriend': '\uECFE',
            'Brush': '\uECFF',
            'Shirt': '\uED00',
            'Crown': '\uED01',
            'Diamond': '\uED02',
            'ScaleUp': '\uED09',
            'QRCode': '\uED14',
            'Feedback': '\uED15',
            'SharepointLogoInverse': '\uED18',
            'YammerLogo': '\uED19',
            'Hide': '\uED1A',
            'Uneditable': '\uED1D',
            'ReturnToSession': '\uED24',
            'OpenFolderHorizontal': '\uED25',
            'CalendarMirrored': '\uED28'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"5dxhu":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-6\"",
            src: "url('" + baseUrl + "fabric-icons-6-ef6fd590.woff') format('woff')"
        },
        icons: {
            'SwayLogoInverse': '\uED29',
            'OutOfOffice': '\uED34',
            'Trophy': '\uED3F',
            'ReopenPages': '\uED50',
            'EmojiTabSymbols': '\uED58',
            'AADLogo': '\uED68',
            'AccessLogo': '\uED69',
            'AdminALogoInverse32': '\uED6A',
            'AdminCLogoInverse32': '\uED6B',
            'AdminDLogoInverse32': '\uED6C',
            'AdminELogoInverse32': '\uED6D',
            'AdminLLogoInverse32': '\uED6E',
            'AdminMLogoInverse32': '\uED6F',
            'AdminOLogoInverse32': '\uED70',
            'AdminPLogoInverse32': '\uED71',
            'AdminSLogoInverse32': '\uED72',
            'AdminYLogoInverse32': '\uED73',
            'DelveLogoInverse': '\uED76',
            'ExchangeLogoInverse': '\uED78',
            'LyncLogo': '\uED79',
            'OfficeVideoLogoInverse': '\uED7A',
            'SocialListeningLogo': '\uED7C',
            'VisioLogoInverse': '\uED7D',
            'Balloons': '\uED7E',
            'Cat': '\uED7F',
            'MailAlert': '\uED80',
            'MailCheck': '\uED81',
            'MailLowImportance': '\uED82',
            'MailPause': '\uED83',
            'MailRepeat': '\uED84',
            'SecurityGroup': '\uED85',
            'Table': '\uED86',
            'VoicemailForward': '\uED87',
            'VoicemailReply': '\uED88',
            'Waffle': '\uED89',
            'RemoveEvent': '\uED8A',
            'EventInfo': '\uED8B',
            'ForwardEvent': '\uED8C',
            'WipePhone': '\uED8D',
            'AddOnlineMeeting': '\uED8E',
            'JoinOnlineMeeting': '\uED8F',
            'RemoveLink': '\uED90',
            'PeopleBlock': '\uED91',
            'PeopleRepeat': '\uED92',
            'PeopleAlert': '\uED93',
            'PeoplePause': '\uED94',
            'TransferCall': '\uED95',
            'AddPhone': '\uED96',
            'UnknownCall': '\uED97',
            'NoteReply': '\uED98',
            'NoteForward': '\uED99',
            'NotePinned': '\uED9A',
            'RemoveOccurrence': '\uED9B',
            'Timeline': '\uED9C',
            'EditNote': '\uED9D',
            'CircleHalfFull': '\uED9E',
            'Room': '\uED9F',
            'Unsubscribe': '\uEDA0',
            'Subscribe': '\uEDA1',
            'HardDrive': '\uEDA2',
            'RecurringTask': '\uEDB2',
            'TaskManager': '\uEDB7',
            'TaskManagerMirrored': '\uEDB8',
            'Combine': '\uEDBB',
            'Split': '\uEDBC',
            'DoubleChevronUp': '\uEDBD',
            'DoubleChevronLeft': '\uEDBE',
            'DoubleChevronRight': '\uEDBF',
            'TextBox': '\uEDC2',
            'TextField': '\uEDC3',
            'NumberField': '\uEDC4',
            'Dropdown': '\uEDC5',
            'PenWorkspace': '\uEDC6',
            'BookingsLogo': '\uEDC7',
            'ClassNotebookLogoInverse': '\uEDC8',
            'DelveAnalyticsLogo': '\uEDCA',
            'DocsLogoInverse': '\uEDCB',
            'Dynamics365Logo': '\uEDCC',
            'DynamicSMBLogo': '\uEDCD',
            'OfficeAssistantLogo': '\uEDCE',
            'OfficeStoreLogo': '\uEDCF',
            'OneNoteEduLogoInverse': '\uEDD0',
            'PlannerLogo': '\uEDD1',
            'PowerApps': '\uEDD2',
            'Suitcase': '\uEDD3',
            'ProjectLogoInverse': '\uEDD4',
            'CaretLeft8': '\uEDD5',
            'CaretRight8': '\uEDD6',
            'CaretUp8': '\uEDD7',
            'CaretDown8': '\uEDD8',
            'CaretLeftSolid8': '\uEDD9',
            'CaretRightSolid8': '\uEDDA',
            'CaretUpSolid8': '\uEDDB',
            'CaretDownSolid8': '\uEDDC',
            'ClearFormatting': '\uEDDD',
            'Superscript': '\uEDDE',
            'Subscript': '\uEDDF',
            'Strikethrough': '\uEDE0',
            'Export': '\uEDE1',
            'ExportMirrored': '\uEDE2'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"76Gb1":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-7\"",
            src: "url('" + baseUrl + "fabric-icons-7-2b97bb99.woff') format('woff')"
        },
        icons: {
            'SingleBookmark': '\uEDFF',
            'SingleBookmarkSolid': '\uEE00',
            'DoubleChevronDown': '\uEE04',
            'FollowUser': '\uEE05',
            'ReplyAll': '\uEE0A',
            'WorkforceManagement': '\uEE0F',
            'RecruitmentManagement': '\uEE12',
            'Questionnaire': '\uEE19',
            'ManagerSelfService': '\uEE23',
            'ProductionFloorManagement': '\uEE29',
            'ProductRelease': '\uEE2E',
            'ProductVariant': '\uEE30',
            'ReplyMirrored': '\uEE35',
            'ReplyAllMirrored': '\uEE36',
            'Medal': '\uEE38',
            'AddGroup': '\uEE3D',
            'QuestionnaireMirrored': '\uEE4B',
            'CloudImportExport': '\uEE55',
            'TemporaryUser': '\uEE58',
            'CaretSolid16': '\uEE62',
            'GroupedDescending': '\uEE66',
            'GroupedAscending': '\uEE67',
            'AwayStatus': '\uEE6A',
            'MyMoviesTV': '\uEE6C',
            'GenericScan': '\uEE6F',
            'AustralianRules': '\uEE70',
            'WifiEthernet': '\uEE77',
            'TrackersMirrored': '\uEE92',
            'DateTimeMirrored': '\uEE93',
            'StopSolid': '\uEE95',
            'DoubleChevronUp12': '\uEE96',
            'DoubleChevronDown12': '\uEE97',
            'DoubleChevronLeft12': '\uEE98',
            'DoubleChevronRight12': '\uEE99',
            'CalendarAgenda': '\uEE9A',
            'ConnectVirtualMachine': '\uEE9D',
            'AddEvent': '\uEEB5',
            'AssetLibrary': '\uEEB6',
            'DataConnectionLibrary': '\uEEB7',
            'DocLibrary': '\uEEB8',
            'FormLibrary': '\uEEB9',
            'FormLibraryMirrored': '\uEEBA',
            'ReportLibrary': '\uEEBB',
            'ReportLibraryMirrored': '\uEEBC',
            'ContactCard': '\uEEBD',
            'CustomList': '\uEEBE',
            'CustomListMirrored': '\uEEBF',
            'IssueTracking': '\uEEC0',
            'IssueTrackingMirrored': '\uEEC1',
            'PictureLibrary': '\uEEC2',
            'OfficeAddinsLogo': '\uEEC7',
            'OfflineOneDriveParachute': '\uEEC8',
            'OfflineOneDriveParachuteDisabled': '\uEEC9',
            'TriangleSolidUp12': '\uEECC',
            'TriangleSolidDown12': '\uEECD',
            'TriangleSolidLeft12': '\uEECE',
            'TriangleSolidRight12': '\uEECF',
            'TriangleUp12': '\uEED0',
            'TriangleDown12': '\uEED1',
            'TriangleLeft12': '\uEED2',
            'TriangleRight12': '\uEED3',
            'ArrowUpRight8': '\uEED4',
            'ArrowDownRight8': '\uEED5',
            'DocumentSet': '\uEED6',
            'GoToDashboard': '\uEEED',
            'DelveAnalytics': '\uEEEE',
            'ArrowUpRightMirrored8': '\uEEEF',
            'ArrowDownRightMirrored8': '\uEEF0',
            'CompanyDirectory': '\uEF0D',
            'OpenEnrollment': '\uEF1C',
            'CompanyDirectoryMirrored': '\uEF2B',
            'OneDriveAdd': '\uEF32',
            'ProfileSearch': '\uEF35',
            'Header2': '\uEF36',
            'Header3': '\uEF37',
            'Header4': '\uEF38',
            'RingerSolid': '\uEF3A',
            'Eyedropper': '\uEF3C',
            'MarketDown': '\uEF42',
            'CalendarWorkWeek': '\uEF51',
            'SidePanel': '\uEF52',
            'GlobeFavorite': '\uEF53',
            'CaretTopLeftSolid8': '\uEF54',
            'CaretTopRightSolid8': '\uEF55',
            'ViewAll2': '\uEF56',
            'DocumentReply': '\uEF57',
            'PlayerSettings': '\uEF58',
            'ReceiptForward': '\uEF59',
            'ReceiptReply': '\uEF5A',
            'ReceiptCheck': '\uEF5B',
            'Fax': '\uEF5C',
            'RecurringEvent': '\uEF5D',
            'ReplyAlt': '\uEF5E',
            'ReplyAllAlt': '\uEF5F',
            'EditStyle': '\uEF60',
            'EditMail': '\uEF61',
            'Lifesaver': '\uEF62',
            'LifesaverLock': '\uEF63',
            'InboxCheck': '\uEF64',
            'FolderSearch': '\uEF65'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"31pen":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-8\"",
            src: "url('" + baseUrl + "fabric-icons-8-6fdf1528.woff') format('woff')"
        },
        icons: {
            'CollapseMenu': '\uEF66',
            'ExpandMenu': '\uEF67',
            'Boards': '\uEF68',
            'SunAdd': '\uEF69',
            'SunQuestionMark': '\uEF6A',
            'LandscapeOrientation': '\uEF6B',
            'DocumentSearch': '\uEF6C',
            'PublicCalendar': '\uEF6D',
            'PublicContactCard': '\uEF6E',
            'PublicEmail': '\uEF6F',
            'PublicFolder': '\uEF70',
            'WordDocument': '\uEF71',
            'PowerPointDocument': '\uEF72',
            'ExcelDocument': '\uEF73',
            'GroupedList': '\uEF74',
            'ClassroomLogo': '\uEF75',
            'Sections': '\uEF76',
            'EditPhoto': '\uEF77',
            'Starburst': '\uEF78',
            'ShareiOS': '\uEF79',
            'AirTickets': '\uEF7A',
            'PencilReply': '\uEF7B',
            'Tiles2': '\uEF7C',
            'SkypeCircleCheck': '\uEF7D',
            'SkypeCircleClock': '\uEF7E',
            'SkypeCircleMinus': '\uEF7F',
            'SkypeMessage': '\uEF83',
            'ClosedCaption': '\uEF84',
            'ATPLogo': '\uEF85',
            'OfficeFormsLogoInverse': '\uEF86',
            'RecycleBin': '\uEF87',
            'EmptyRecycleBin': '\uEF88',
            'Hide2': '\uEF89',
            'Breadcrumb': '\uEF8C',
            'BirthdayCake': '\uEF8D',
            'TimeEntry': '\uEF95',
            'CRMProcesses': '\uEFB1',
            'PageEdit': '\uEFB6',
            'PageArrowRight': '\uEFB8',
            'PageRemove': '\uEFBA',
            'Database': '\uEFC7',
            'DataManagementSettings': '\uEFC8',
            'CRMServices': '\uEFD2',
            'EditContact': '\uEFD3',
            'ConnectContacts': '\uEFD4',
            'AppIconDefaultAdd': '\uEFDA',
            'AppIconDefaultList': '\uEFDE',
            'ActivateOrders': '\uEFE0',
            'DeactivateOrders': '\uEFE1',
            'ProductCatalog': '\uEFE8',
            'ScatterChart': '\uEFEB',
            'AccountActivity': '\uEFF4',
            'DocumentManagement': '\uEFFC',
            'CRMReport': '\uEFFE',
            'KnowledgeArticle': '\uF000',
            'Relationship': '\uF003',
            'HomeVerify': '\uF00E',
            'ZipFolder': '\uF012',
            'SurveyQuestions': '\uF01B',
            'TextDocument': '\uF029',
            'TextDocumentShared': '\uF02B',
            'PageCheckedOut': '\uF02C',
            'PageShared': '\uF02D',
            'SaveAndClose': '\uF038',
            'Script': '\uF03A',
            'Archive': '\uF03F',
            'ActivityFeed': '\uF056',
            'Compare': '\uF057',
            'EventDate': '\uF059',
            'ArrowUpRight': '\uF069',
            'CaretRight': '\uF06B',
            'SetAction': '\uF071',
            'ChatBot': '\uF08B',
            'CaretSolidLeft': '\uF08D',
            'CaretSolidDown': '\uF08E',
            'CaretSolidRight': '\uF08F',
            'CaretSolidUp': '\uF090',
            'PowerAppsLogo': '\uF091',
            'PowerApps2Logo': '\uF092',
            'SearchIssue': '\uF09A',
            'SearchIssueMirrored': '\uF09B',
            'FabricAssetLibrary': '\uF09C',
            'FabricDataConnectionLibrary': '\uF09D',
            'FabricDocLibrary': '\uF09E',
            'FabricFormLibrary': '\uF09F',
            'FabricFormLibraryMirrored': '\uF0A0',
            'FabricReportLibrary': '\uF0A1',
            'FabricReportLibraryMirrored': '\uF0A2',
            'FabricPublicFolder': '\uF0A3',
            'FabricFolderSearch': '\uF0A4',
            'FabricMovetoFolder': '\uF0A5',
            'FabricUnsyncFolder': '\uF0A6',
            'FabricSyncFolder': '\uF0A7',
            'FabricOpenFolderHorizontal': '\uF0A8',
            'FabricFolder': '\uF0A9',
            'FabricFolderFill': '\uF0AA',
            'FabricNewFolder': '\uF0AB',
            'FabricPictureLibrary': '\uF0AC',
            'PhotoVideoMedia': '\uF0B1',
            'AddFavorite': '\uF0C8'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"7DIQ1":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-9\"",
            src: "url('" + baseUrl + "fabric-icons-9-c6162b42.woff') format('woff')"
        },
        icons: {
            'AddFavoriteFill': '\uF0C9',
            'BufferTimeBefore': '\uF0CF',
            'BufferTimeAfter': '\uF0D0',
            'BufferTimeBoth': '\uF0D1',
            'PublishContent': '\uF0D4',
            'ClipboardList': '\uF0E3',
            'ClipboardListMirrored': '\uF0E4',
            'CannedChat': '\uF0F2',
            'SkypeForBusinessLogo': '\uF0FC',
            'TabCenter': '\uF100',
            'PageCheckedin': '\uF104',
            'PageList': '\uF106',
            'ReadOutLoud': '\uF112',
            'CaretBottomLeftSolid8': '\uF121',
            'CaretBottomRightSolid8': '\uF122',
            'FolderHorizontal': '\uF12B',
            'MicrosoftStaffhubLogo': '\uF130',
            'GiftboxOpen': '\uF133',
            'StatusCircleOuter': '\uF136',
            'StatusCircleInner': '\uF137',
            'StatusCircleRing': '\uF138',
            'StatusTriangleOuter': '\uF139',
            'StatusTriangleInner': '\uF13A',
            'StatusTriangleExclamation': '\uF13B',
            'StatusCircleExclamation': '\uF13C',
            'StatusCircleErrorX': '\uF13D',
            'StatusCircleInfo': '\uF13F',
            'StatusCircleBlock': '\uF140',
            'StatusCircleBlock2': '\uF141',
            'StatusCircleQuestionMark': '\uF142',
            'StatusCircleSync': '\uF143',
            'Toll': '\uF160',
            'ExploreContentSingle': '\uF164',
            'CollapseContent': '\uF165',
            'CollapseContentSingle': '\uF166',
            'InfoSolid': '\uF167',
            'GroupList': '\uF168',
            'ProgressRingDots': '\uF16A',
            'CaloriesAdd': '\uF172',
            'BranchFork': '\uF173',
            'MuteChat': '\uF17A',
            'AddHome': '\uF17B',
            'AddWork': '\uF17C',
            'MobileReport': '\uF18A',
            'ScaleVolume': '\uF18C',
            'HardDriveGroup': '\uF18F',
            'FastMode': '\uF19A',
            'ToggleLeft': '\uF19E',
            'ToggleRight': '\uF19F',
            'TriangleShape': '\uF1A7',
            'RectangleShape': '\uF1A9',
            'CubeShape': '\uF1AA',
            'Trophy2': '\uF1AE',
            'BucketColor': '\uF1B6',
            'BucketColorFill': '\uF1B7',
            'Taskboard': '\uF1C2',
            'SingleColumn': '\uF1D3',
            'DoubleColumn': '\uF1D4',
            'TripleColumn': '\uF1D5',
            'ColumnLeftTwoThirds': '\uF1D6',
            'ColumnRightTwoThirds': '\uF1D7',
            'AccessLogoFill': '\uF1DB',
            'AnalyticsLogo': '\uF1DE',
            'AnalyticsQuery': '\uF1DF',
            'NewAnalyticsQuery': '\uF1E0',
            'AnalyticsReport': '\uF1E1',
            'WordLogo': '\uF1E3',
            'WordLogoFill': '\uF1E4',
            'ExcelLogo': '\uF1E5',
            'ExcelLogoFill': '\uF1E6',
            'OneNoteLogo': '\uF1E7',
            'OneNoteLogoFill': '\uF1E8',
            'OutlookLogo': '\uF1E9',
            'OutlookLogoFill': '\uF1EA',
            'PowerPointLogo': '\uF1EB',
            'PowerPointLogoFill': '\uF1EC',
            'PublisherLogo': '\uF1ED',
            'PublisherLogoFill': '\uF1EE',
            'ScheduleEventAction': '\uF1EF',
            'FlameSolid': '\uF1F3',
            'ServerProcesses': '\uF1FE',
            'Server': '\uF201',
            'SaveAll': '\uF203',
            'LinkedInLogo': '\uF20A',
            'Decimals': '\uF218',
            'SidePanelMirrored': '\uF221',
            'ProtectRestrict': '\uF22A',
            'Blog': '\uF22B',
            'UnknownMirrored': '\uF22E',
            'PublicContactCardMirrored': '\uF230',
            'GridViewSmall': '\uF232',
            'GridViewMedium': '\uF233',
            'GridViewLarge': '\uF234',
            'Step': '\uF241',
            'StepInsert': '\uF242',
            'StepShared': '\uF243',
            'StepSharedAdd': '\uF244',
            'StepSharedInsert': '\uF245',
            'ViewDashboard': '\uF246',
            'ViewList': '\uF247'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"52ewW":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-10\"",
            src: "url('" + baseUrl + "fabric-icons-10-c4ded8e4.woff') format('woff')"
        },
        icons: {
            'ViewListGroup': '\uF248',
            'ViewListTree': '\uF249',
            'TriggerAuto': '\uF24A',
            'TriggerUser': '\uF24B',
            'PivotChart': '\uF24C',
            'StackedBarChart': '\uF24D',
            'StackedLineChart': '\uF24E',
            'BuildQueue': '\uF24F',
            'BuildQueueNew': '\uF250',
            'UserFollowed': '\uF25C',
            'ContactLink': '\uF25F',
            'Stack': '\uF26F',
            'Bullseye': '\uF272',
            'VennDiagram': '\uF273',
            'FiveTileGrid': '\uF274',
            'FocalPoint': '\uF277',
            'Insert': '\uF278',
            'RingerRemove': '\uF279',
            'TeamsLogoInverse': '\uF27A',
            'TeamsLogo': '\uF27B',
            'TeamsLogoFill': '\uF27C',
            'SkypeForBusinessLogoFill': '\uF27D',
            'SharepointLogo': '\uF27E',
            'SharepointLogoFill': '\uF27F',
            'DelveLogo': '\uF280',
            'DelveLogoFill': '\uF281',
            'OfficeVideoLogo': '\uF282',
            'OfficeVideoLogoFill': '\uF283',
            'ExchangeLogo': '\uF284',
            'ExchangeLogoFill': '\uF285',
            'Signin': '\uF286',
            'DocumentApproval': '\uF28B',
            'CloneToDesktop': '\uF28C',
            'InstallToDrive': '\uF28D',
            'Blur': '\uF28E',
            'Build': '\uF28F',
            'ProcessMetaTask': '\uF290',
            'BranchFork2': '\uF291',
            'BranchLocked': '\uF292',
            'BranchCommit': '\uF293',
            'BranchCompare': '\uF294',
            'BranchMerge': '\uF295',
            'BranchPullRequest': '\uF296',
            'BranchSearch': '\uF297',
            'BranchShelveset': '\uF298',
            'RawSource': '\uF299',
            'MergeDuplicate': '\uF29A',
            'RowsGroup': '\uF29B',
            'RowsChild': '\uF29C',
            'Deploy': '\uF29D',
            'Redeploy': '\uF29E',
            'ServerEnviroment': '\uF29F',
            'VisioDiagram': '\uF2A0',
            'HighlightMappedShapes': '\uF2A1',
            'TextCallout': '\uF2A2',
            'IconSetsFlag': '\uF2A4',
            'VisioLogo': '\uF2A7',
            'VisioLogoFill': '\uF2A8',
            'VisioDocument': '\uF2A9',
            'TimelineProgress': '\uF2AA',
            'TimelineDelivery': '\uF2AB',
            'Backlog': '\uF2AC',
            'TeamFavorite': '\uF2AD',
            'TaskGroup': '\uF2AE',
            'TaskGroupMirrored': '\uF2AF',
            'ScopeTemplate': '\uF2B0',
            'AssessmentGroupTemplate': '\uF2B1',
            'NewTeamProject': '\uF2B2',
            'CommentAdd': '\uF2B3',
            'CommentNext': '\uF2B4',
            'CommentPrevious': '\uF2B5',
            'ShopServer': '\uF2B6',
            'LocaleLanguage': '\uF2B7',
            'QueryList': '\uF2B8',
            'UserSync': '\uF2B9',
            'UserPause': '\uF2BA',
            'StreamingOff': '\uF2BB',
            'ArrowTallUpLeft': '\uF2BD',
            'ArrowTallUpRight': '\uF2BE',
            'ArrowTallDownLeft': '\uF2BF',
            'ArrowTallDownRight': '\uF2C0',
            'FieldEmpty': '\uF2C1',
            'FieldFilled': '\uF2C2',
            'FieldChanged': '\uF2C3',
            'FieldNotChanged': '\uF2C4',
            'RingerOff': '\uF2C5',
            'PlayResume': '\uF2C6',
            'BulletedList2': '\uF2C7',
            'BulletedList2Mirrored': '\uF2C8',
            'ImageCrosshair': '\uF2C9',
            'GitGraph': '\uF2CA',
            'Repo': '\uF2CB',
            'RepoSolid': '\uF2CC',
            'FolderQuery': '\uF2CD',
            'FolderList': '\uF2CE',
            'FolderListMirrored': '\uF2CF',
            'LocationOutline': '\uF2D0',
            'POISolid': '\uF2D1',
            'CalculatorNotEqualTo': '\uF2D2',
            'BoxSubtractSolid': '\uF2D3'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"CFJXE":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-11\"",
            src: "url('" + baseUrl + "fabric-icons-11-2a8393d6.woff') format('woff')"
        },
        icons: {
            'BoxAdditionSolid': '\uF2D4',
            'BoxMultiplySolid': '\uF2D5',
            'BoxPlaySolid': '\uF2D6',
            'BoxCheckmarkSolid': '\uF2D7',
            'CirclePauseSolid': '\uF2D8',
            'CirclePause': '\uF2D9',
            'MSNVideosSolid': '\uF2DA',
            'CircleStopSolid': '\uF2DB',
            'CircleStop': '\uF2DC',
            'NavigateBack': '\uF2DD',
            'NavigateBackMirrored': '\uF2DE',
            'NavigateForward': '\uF2DF',
            'NavigateForwardMirrored': '\uF2E0',
            'UnknownSolid': '\uF2E1',
            'UnknownMirroredSolid': '\uF2E2',
            'CircleAddition': '\uF2E3',
            'CircleAdditionSolid': '\uF2E4',
            'FilePDB': '\uF2E5',
            'FileTemplate': '\uF2E6',
            'FileSQL': '\uF2E7',
            'FileJAVA': '\uF2E8',
            'FileASPX': '\uF2E9',
            'FileCSS': '\uF2EA',
            'FileSass': '\uF2EB',
            'FileLess': '\uF2EC',
            'FileHTML': '\uF2ED',
            'JavaScriptLanguage': '\uF2EE',
            'CSharpLanguage': '\uF2EF',
            'CSharp': '\uF2F0',
            'VisualBasicLanguage': '\uF2F1',
            'VB': '\uF2F2',
            'CPlusPlusLanguage': '\uF2F3',
            'CPlusPlus': '\uF2F4',
            'FSharpLanguage': '\uF2F5',
            'FSharp': '\uF2F6',
            'TypeScriptLanguage': '\uF2F7',
            'PythonLanguage': '\uF2F8',
            'PY': '\uF2F9',
            'CoffeeScript': '\uF2FA',
            'MarkDownLanguage': '\uF2FB',
            'FullWidth': '\uF2FE',
            'FullWidthEdit': '\uF2FF',
            'Plug': '\uF300',
            'PlugSolid': '\uF301',
            'PlugConnected': '\uF302',
            'PlugDisconnected': '\uF303',
            'UnlockSolid': '\uF304',
            'Variable': '\uF305',
            'Parameter': '\uF306',
            'CommentUrgent': '\uF307',
            'Storyboard': '\uF308',
            'DiffInline': '\uF309',
            'DiffSideBySide': '\uF30A',
            'ImageDiff': '\uF30B',
            'ImagePixel': '\uF30C',
            'FileBug': '\uF30D',
            'FileCode': '\uF30E',
            'FileComment': '\uF30F',
            'BusinessHoursSign': '\uF310',
            'FileImage': '\uF311',
            'FileSymlink': '\uF312',
            'AutoFillTemplate': '\uF313',
            'WorkItem': '\uF314',
            'WorkItemBug': '\uF315',
            'LogRemove': '\uF316',
            'ColumnOptions': '\uF317',
            'Packages': '\uF318',
            'BuildIssue': '\uF319',
            'AssessmentGroup': '\uF31A',
            'VariableGroup': '\uF31B',
            'FullHistory': '\uF31C',
            'Wheelchair': '\uF31F',
            'SingleColumnEdit': '\uF321',
            'DoubleColumnEdit': '\uF322',
            'TripleColumnEdit': '\uF323',
            'ColumnLeftTwoThirdsEdit': '\uF324',
            'ColumnRightTwoThirdsEdit': '\uF325',
            'StreamLogo': '\uF329',
            'PassiveAuthentication': '\uF32A',
            'AlertSolid': '\uF331',
            'MegaphoneSolid': '\uF332',
            'TaskSolid': '\uF333',
            'ConfigurationSolid': '\uF334',
            'BugSolid': '\uF335',
            'CrownSolid': '\uF336',
            'Trophy2Solid': '\uF337',
            'QuickNoteSolid': '\uF338',
            'ConstructionConeSolid': '\uF339',
            'PageListSolid': '\uF33A',
            'PageListMirroredSolid': '\uF33B',
            'StarburstSolid': '\uF33C',
            'ReadingModeSolid': '\uF33D',
            'SadSolid': '\uF33E',
            'HealthSolid': '\uF33F',
            'ShieldSolid': '\uF340',
            'GiftBoxSolid': '\uF341',
            'ShoppingCartSolid': '\uF342',
            'MailSolid': '\uF343',
            'ChatSolid': '\uF344',
            'RibbonSolid': '\uF345'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"3M2Pd":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-12\"",
            src: "url('" + baseUrl + "fabric-icons-12-7e945a1e.woff') format('woff')"
        },
        icons: {
            'FinancialSolid': '\uF346',
            'FinancialMirroredSolid': '\uF347',
            'HeadsetSolid': '\uF348',
            'PermissionsSolid': '\uF349',
            'ParkingSolid': '\uF34A',
            'ParkingMirroredSolid': '\uF34B',
            'DiamondSolid': '\uF34C',
            'AsteriskSolid': '\uF34D',
            'OfflineStorageSolid': '\uF34E',
            'BankSolid': '\uF34F',
            'DecisionSolid': '\uF350',
            'Parachute': '\uF351',
            'ParachuteSolid': '\uF352',
            'FiltersSolid': '\uF353',
            'ColorSolid': '\uF354',
            'ReviewSolid': '\uF355',
            'ReviewRequestSolid': '\uF356',
            'ReviewRequestMirroredSolid': '\uF357',
            'ReviewResponseSolid': '\uF358',
            'FeedbackRequestSolid': '\uF359',
            'FeedbackRequestMirroredSolid': '\uF35A',
            'FeedbackResponseSolid': '\uF35B',
            'WorkItemBar': '\uF35C',
            'WorkItemBarSolid': '\uF35D',
            'Separator': '\uF35E',
            'NavigateExternalInline': '\uF35F',
            'PlanView': '\uF360',
            'TimelineMatrixView': '\uF361',
            'EngineeringGroup': '\uF362',
            'ProjectCollection': '\uF363',
            'CaretBottomRightCenter8': '\uF364',
            'CaretBottomLeftCenter8': '\uF365',
            'CaretTopRightCenter8': '\uF366',
            'CaretTopLeftCenter8': '\uF367',
            'DonutChart': '\uF368',
            'ChevronUnfold10': '\uF369',
            'ChevronFold10': '\uF36A',
            'DoubleChevronDown8': '\uF36B',
            'DoubleChevronUp8': '\uF36C',
            'DoubleChevronLeft8': '\uF36D',
            'DoubleChevronRight8': '\uF36E',
            'ChevronDownEnd6': '\uF36F',
            'ChevronUpEnd6': '\uF370',
            'ChevronLeftEnd6': '\uF371',
            'ChevronRightEnd6': '\uF372',
            'ContextMenu': '\uF37C',
            'AzureAPIManagement': '\uF37F',
            'AzureServiceEndpoint': '\uF380',
            'VSTSLogo': '\uF381',
            'VSTSAltLogo1': '\uF382',
            'VSTSAltLogo2': '\uF383',
            'FileTypeSolution': '\uF387',
            'WordLogoInverse16': '\uF390',
            'WordLogo16': '\uF391',
            'WordLogoFill16': '\uF392',
            'PowerPointLogoInverse16': '\uF393',
            'PowerPointLogo16': '\uF394',
            'PowerPointLogoFill16': '\uF395',
            'ExcelLogoInverse16': '\uF396',
            'ExcelLogo16': '\uF397',
            'ExcelLogoFill16': '\uF398',
            'OneNoteLogoInverse16': '\uF399',
            'OneNoteLogo16': '\uF39A',
            'OneNoteLogoFill16': '\uF39B',
            'OutlookLogoInverse16': '\uF39C',
            'OutlookLogo16': '\uF39D',
            'OutlookLogoFill16': '\uF39E',
            'PublisherLogoInverse16': '\uF39F',
            'PublisherLogo16': '\uF3A0',
            'PublisherLogoFill16': '\uF3A1',
            'VisioLogoInverse16': '\uF3A2',
            'VisioLogo16': '\uF3A3',
            'VisioLogoFill16': '\uF3A4',
            'TestBeaker': '\uF3A5',
            'TestBeakerSolid': '\uF3A6',
            'TestExploreSolid': '\uF3A7',
            'TestAutoSolid': '\uF3A8',
            'TestUserSolid': '\uF3A9',
            'TestImpactSolid': '\uF3AA',
            'TestPlan': '\uF3AB',
            'TestStep': '\uF3AC',
            'TestParameter': '\uF3AD',
            'TestSuite': '\uF3AE',
            'TestCase': '\uF3AF',
            'Sprint': '\uF3B0',
            'SignOut': '\uF3B1',
            'TriggerApproval': '\uF3B2',
            'Rocket': '\uF3B3',
            'AzureKeyVault': '\uF3B4',
            'Onboarding': '\uF3BA',
            'Transition': '\uF3BC',
            'LikeSolid': '\uF3BF',
            'DislikeSolid': '\uF3C0',
            'CRMCustomerInsightsApp': '\uF3C8',
            'EditCreate': '\uF3C9',
            'PlayReverseResume': '\uF3E4',
            'PlayReverse': '\uF3E5',
            'SearchData': '\uF3F1',
            'UnSetColor': '\uF3F9',
            'DeclineCall': '\uF405'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"70ssx":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-13\"",
            src: "url('" + baseUrl + "fabric-icons-13-c3989a02.woff') format('woff')"
        },
        icons: {
            'RectangularClipping': '\uF407',
            'TeamsLogo16': '\uF40A',
            'TeamsLogoFill16': '\uF40B',
            'Spacer': '\uF40D',
            'SkypeLogo16': '\uF40E',
            'SkypeForBusinessLogo16': '\uF40F',
            'SkypeForBusinessLogoFill16': '\uF410',
            'FilterSolid': '\uF412',
            'MailUndelivered': '\uF415',
            'MailTentative': '\uF416',
            'MailTentativeMirrored': '\uF417',
            'MailReminder': '\uF418',
            'ReceiptUndelivered': '\uF419',
            'ReceiptTentative': '\uF41A',
            'ReceiptTentativeMirrored': '\uF41B',
            'Inbox': '\uF41C',
            'IRMReply': '\uF41D',
            'IRMReplyMirrored': '\uF41E',
            'IRMForward': '\uF41F',
            'IRMForwardMirrored': '\uF420',
            'VoicemailIRM': '\uF421',
            'EventAccepted': '\uF422',
            'EventTentative': '\uF423',
            'EventTentativeMirrored': '\uF424',
            'EventDeclined': '\uF425',
            'IDBadge': '\uF427',
            'BackgroundColor': '\uF42B',
            'OfficeFormsLogoInverse16': '\uF433',
            'OfficeFormsLogo': '\uF434',
            'OfficeFormsLogoFill': '\uF435',
            'OfficeFormsLogo16': '\uF436',
            'OfficeFormsLogoFill16': '\uF437',
            'OfficeFormsLogoInverse24': '\uF43A',
            'OfficeFormsLogo24': '\uF43B',
            'OfficeFormsLogoFill24': '\uF43C',
            'PageLock': '\uF43F',
            'NotExecuted': '\uF440',
            'NotImpactedSolid': '\uF441',
            'FieldReadOnly': '\uF442',
            'FieldRequired': '\uF443',
            'BacklogBoard': '\uF444',
            'ExternalBuild': '\uF445',
            'ExternalTFVC': '\uF446',
            'ExternalXAML': '\uF447',
            'IssueSolid': '\uF448',
            'DefectSolid': '\uF449',
            'LadybugSolid': '\uF44A',
            'NugetLogo': '\uF44C',
            'TFVCLogo': '\uF44D',
            'ProjectLogo32': '\uF47E',
            'ProjectLogoFill32': '\uF47F',
            'ProjectLogo16': '\uF480',
            'ProjectLogoFill16': '\uF481',
            'SwayLogo32': '\uF482',
            'SwayLogoFill32': '\uF483',
            'SwayLogo16': '\uF484',
            'SwayLogoFill16': '\uF485',
            'ClassNotebookLogo32': '\uF486',
            'ClassNotebookLogoFill32': '\uF487',
            'ClassNotebookLogo16': '\uF488',
            'ClassNotebookLogoFill16': '\uF489',
            'ClassNotebookLogoInverse32': '\uF48A',
            'ClassNotebookLogoInverse16': '\uF48B',
            'StaffNotebookLogo32': '\uF48C',
            'StaffNotebookLogoFill32': '\uF48D',
            'StaffNotebookLogo16': '\uF48E',
            'StaffNotebookLogoFill16': '\uF48F',
            'StaffNotebookLogoInverted32': '\uF490',
            'StaffNotebookLogoInverted16': '\uF491',
            'KaizalaLogo': '\uF492',
            'TaskLogo': '\uF493',
            'ProtectionCenterLogo32': '\uF494',
            'GallatinLogo': '\uF496',
            'Globe2': '\uF49A',
            'Guitar': '\uF49B',
            'Breakfast': '\uF49C',
            'Brunch': '\uF49D',
            'BeerMug': '\uF49E',
            'Vacation': '\uF49F',
            'Teeth': '\uF4A0',
            'Taxi': '\uF4A1',
            'Chopsticks': '\uF4A2',
            'SyncOccurence': '\uF4A3',
            'UnsyncOccurence': '\uF4A4',
            'GIF': '\uF4A9',
            'PrimaryCalendar': '\uF4AE',
            'SearchCalendar': '\uF4AF',
            'VideoOff': '\uF4B0',
            'MicrosoftFlowLogo': '\uF4B1',
            'BusinessCenterLogo': '\uF4B2',
            'ToDoLogoBottom': '\uF4B3',
            'ToDoLogoTop': '\uF4B4',
            'EditSolid12': '\uF4B5',
            'EditSolidMirrored12': '\uF4B6',
            'UneditableSolid12': '\uF4B7',
            'UneditableSolidMirrored12': '\uF4B8',
            'UneditableMirrored': '\uF4B9',
            'AdminALogo32': '\uF4BA',
            'AdminALogoFill32': '\uF4BB',
            'ToDoLogoInverse': '\uF4BC'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"2fulW":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-14\"",
            src: "url('" + baseUrl + "fabric-icons-14-5cf58db8.woff') format('woff')"
        },
        icons: {
            'Snooze': '\uF4BD',
            'WaffleOffice365': '\uF4E0',
            'ImageSearch': '\uF4E8',
            'NewsSearch': '\uF4E9',
            'VideoSearch': '\uF4EA',
            'R': '\uF4EB',
            'FontColorA': '\uF4EC',
            'FontColorSwatch': '\uF4ED',
            'LightWeight': '\uF4EE',
            'NormalWeight': '\uF4EF',
            'SemiboldWeight': '\uF4F0',
            'GroupObject': '\uF4F1',
            'UngroupObject': '\uF4F2',
            'AlignHorizontalLeft': '\uF4F3',
            'AlignHorizontalCenter': '\uF4F4',
            'AlignHorizontalRight': '\uF4F5',
            'AlignVerticalTop': '\uF4F6',
            'AlignVerticalCenter': '\uF4F7',
            'AlignVerticalBottom': '\uF4F8',
            'HorizontalDistributeCenter': '\uF4F9',
            'VerticalDistributeCenter': '\uF4FA',
            'Ellipse': '\uF4FB',
            'Line': '\uF4FC',
            'Octagon': '\uF4FD',
            'Hexagon': '\uF4FE',
            'Pentagon': '\uF4FF',
            'RightTriangle': '\uF500',
            'HalfCircle': '\uF501',
            'QuarterCircle': '\uF502',
            'ThreeQuarterCircle': '\uF503',
            '6PointStar': '\uF504',
            '12PointStar': '\uF505',
            'ArrangeBringToFront': '\uF506',
            'ArrangeSendToBack': '\uF507',
            'ArrangeSendBackward': '\uF508',
            'ArrangeBringForward': '\uF509',
            'BorderDash': '\uF50A',
            'BorderDot': '\uF50B',
            'LineStyle': '\uF50C',
            'LineThickness': '\uF50D',
            'WindowEdit': '\uF50E',
            'HintText': '\uF50F',
            'MediaAdd': '\uF510',
            'AnchorLock': '\uF511',
            'AutoHeight': '\uF512',
            'ChartSeries': '\uF513',
            'ChartXAngle': '\uF514',
            'ChartYAngle': '\uF515',
            'Combobox': '\uF516',
            'LineSpacing': '\uF517',
            'Padding': '\uF518',
            'PaddingTop': '\uF519',
            'PaddingBottom': '\uF51A',
            'PaddingLeft': '\uF51B',
            'PaddingRight': '\uF51C',
            'NavigationFlipper': '\uF51D',
            'AlignJustify': '\uF51E',
            'TextOverflow': '\uF51F',
            'VisualsFolder': '\uF520',
            'VisualsStore': '\uF521',
            'PictureCenter': '\uF522',
            'PictureFill': '\uF523',
            'PicturePosition': '\uF524',
            'PictureStretch': '\uF525',
            'PictureTile': '\uF526',
            'Slider': '\uF527',
            'SliderHandleSize': '\uF528',
            'DefaultRatio': '\uF529',
            'NumberSequence': '\uF52A',
            'GUID': '\uF52B',
            'ReportAdd': '\uF52C',
            'DashboardAdd': '\uF52D',
            'MapPinSolid': '\uF52E',
            'WebPublish': '\uF52F',
            'PieSingleSolid': '\uF530',
            'BlockedSolid': '\uF531',
            'DrillDown': '\uF532',
            'DrillDownSolid': '\uF533',
            'DrillExpand': '\uF534',
            'DrillShow': '\uF535',
            'SpecialEvent': '\uF536',
            'OneDriveFolder16': '\uF53B',
            'FunctionalManagerDashboard': '\uF542',
            'BIDashboard': '\uF543',
            'CodeEdit': '\uF544',
            'RenewalCurrent': '\uF545',
            'RenewalFuture': '\uF546',
            'SplitObject': '\uF547',
            'BulkUpload': '\uF548',
            'DownloadDocument': '\uF549',
            'GreetingCard': '\uF54B',
            'Flower': '\uF54E',
            'WaitlistConfirm': '\uF550',
            'WaitlistConfirmMirrored': '\uF551',
            'LaptopSecure': '\uF552',
            'DragObject': '\uF553',
            'EntryView': '\uF554',
            'EntryDecline': '\uF555',
            'ContactCardSettings': '\uF556',
            'ContactCardSettingsMirrored': '\uF557'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"7w3Zl":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-15\"",
            src: "url('" + baseUrl + "fabric-icons-15-3807251b.woff') format('woff')"
        },
        icons: {
            'CalendarSettings': '\uF558',
            'CalendarSettingsMirrored': '\uF559',
            'HardDriveLock': '\uF55A',
            'HardDriveUnlock': '\uF55B',
            'AccountManagement': '\uF55C',
            'ReportWarning': '\uF569',
            'TransitionPop': '\uF5B2',
            'TransitionPush': '\uF5B3',
            'TransitionEffect': '\uF5B4',
            'LookupEntities': '\uF5B5',
            'ExploreData': '\uF5B6',
            'AddBookmark': '\uF5B7',
            'SearchBookmark': '\uF5B8',
            'DrillThrough': '\uF5B9',
            'MasterDatabase': '\uF5BA',
            'CertifiedDatabase': '\uF5BB',
            'MaximumValue': '\uF5BC',
            'MinimumValue': '\uF5BD',
            'VisualStudioIDELogo32': '\uF5D0',
            'PasteAsText': '\uF5D5',
            'PasteAsCode': '\uF5D6',
            'BrowserTab': '\uF5D7',
            'BrowserTabScreenshot': '\uF5D8',
            'DesktopScreenshot': '\uF5D9',
            'FileYML': '\uF5DA',
            'ClipboardSolid': '\uF5DC',
            'FabricUserFolder': '\uF5E5',
            'FabricNetworkFolder': '\uF5E6',
            'BullseyeTarget': '\uF5F0',
            'AnalyticsView': '\uF5F1',
            'Video360Generic': '\uF609',
            'Untag': '\uF60B',
            'Leave': '\uF627',
            'Trending12': '\uF62D',
            'Blocked12': '\uF62E',
            'Warning12': '\uF62F',
            'CheckedOutByOther12': '\uF630',
            'CheckedOutByYou12': '\uF631',
            'CircleShapeSolid': '\uF63C',
            'SquareShapeSolid': '\uF63D',
            'TriangleShapeSolid': '\uF63E',
            'DropShapeSolid': '\uF63F',
            'RectangleShapeSolid': '\uF640',
            'ZoomToFit': '\uF649',
            'InsertColumnsLeft': '\uF64A',
            'InsertColumnsRight': '\uF64B',
            'InsertRowsAbove': '\uF64C',
            'InsertRowsBelow': '\uF64D',
            'DeleteColumns': '\uF64E',
            'DeleteRows': '\uF64F',
            'DeleteRowsMirrored': '\uF650',
            'DeleteTable': '\uF651',
            'AccountBrowser': '\uF652',
            'VersionControlPush': '\uF664',
            'StackedColumnChart2': '\uF666',
            'TripleColumnWide': '\uF66E',
            'QuadColumn': '\uF66F',
            'WhiteBoardApp16': '\uF673',
            'WhiteBoardApp32': '\uF674',
            'PinnedSolid': '\uF676',
            'InsertSignatureLine': '\uF677',
            'ArrangeByFrom': '\uF678',
            'Phishing': '\uF679',
            'CreateMailRule': '\uF67A',
            'PublishCourse': '\uF699',
            'DictionaryRemove': '\uF69A',
            'UserRemove': '\uF69B',
            'UserEvent': '\uF69C',
            'Encryption': '\uF69D',
            'PasswordField': '\uF6AA',
            'OpenInNewTab': '\uF6AB',
            'Hide3': '\uF6AC',
            'VerifiedBrandSolid': '\uF6AD',
            'MarkAsProtected': '\uF6AE',
            'AuthenticatorApp': '\uF6B1',
            'WebTemplate': '\uF6B2',
            'DefenderTVM': '\uF6B3',
            'MedalSolid': '\uF6B9',
            'D365TalentLearn': '\uF6BB',
            'D365TalentInsight': '\uF6BC',
            'D365TalentHRCore': '\uF6BD',
            'BacklogList': '\uF6BF',
            'ButtonControl': '\uF6C0',
            'TableGroup': '\uF6D9',
            'MountainClimbing': '\uF6DB',
            'TagUnknown': '\uF6DF',
            'TagUnknownMirror': '\uF6E0',
            'TagUnknown12': '\uF6E1',
            'TagUnknown12Mirror': '\uF6E2',
            'Link12': '\uF6E3',
            'Presentation': '\uF6E4',
            'Presentation12': '\uF6E5',
            'Lock12': '\uF6E6',
            'BuildDefinition': '\uF6E9',
            'ReleaseDefinition': '\uF6EA',
            'SaveTemplate': '\uF6EC',
            'UserGauge': '\uF6ED',
            'BlockedSiteSolid12': '\uF70A',
            'TagSolid': '\uF70E',
            'OfficeChat': '\uF70F'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"1h4CH":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-16\"",
            src: "url('" + baseUrl + "fabric-icons-16-9cf93f3b.woff') format('woff')"
        },
        icons: {
            'OfficeChatSolid': '\uF710',
            'MailSchedule': '\uF72E',
            'WarningSolid': '\uF736',
            'Blocked2Solid': '\uF737',
            'SkypeCircleArrow': '\uF747',
            'SkypeArrow': '\uF748',
            'SyncStatus': '\uF751',
            'SyncStatusSolid': '\uF752',
            'ProjectDocument': '\uF759',
            'ToDoLogoOutline': '\uF75B',
            'VisioOnlineLogoFill32': '\uF75F',
            'VisioOnlineLogo32': '\uF760',
            'VisioOnlineLogoCloud32': '\uF761',
            'VisioDiagramSync': '\uF762',
            'Event12': '\uF763',
            'EventDateMissed12': '\uF764',
            'UserOptional': '\uF767',
            'ResponsesMenu': '\uF768',
            'DoubleDownArrow': '\uF769',
            'DistributeDown': '\uF76A',
            'BookmarkReport': '\uF76B',
            'FilterSettings': '\uF76C',
            'GripperDotsVertical': '\uF772',
            'MailAttached': '\uF774',
            'AddIn': '\uF775',
            'LinkedDatabase': '\uF779',
            'TableLink': '\uF77A',
            'PromotedDatabase': '\uF77D',
            'BarChartVerticalFilter': '\uF77E',
            'BarChartVerticalFilterSolid': '\uF77F',
            'MicOff2': '\uF781',
            'MicrosoftTranslatorLogo': '\uF782',
            'ShowTimeAs': '\uF787',
            'FileRequest': '\uF789',
            'WorkItemAlert': '\uF78F',
            'PowerBILogo16': '\uF790',
            'PowerBILogoBackplate16': '\uF791',
            'BulletedListText': '\uF792',
            'BulletedListBullet': '\uF793',
            'BulletedListTextMirrored': '\uF794',
            'BulletedListBulletMirrored': '\uF795',
            'NumberedListText': '\uF796',
            'NumberedListNumber': '\uF797',
            'NumberedListTextMirrored': '\uF798',
            'NumberedListNumberMirrored': '\uF799',
            'RemoveLinkChain': '\uF79A',
            'RemoveLinkX': '\uF79B',
            'FabricTextHighlight': '\uF79C',
            'ClearFormattingA': '\uF79D',
            'ClearFormattingEraser': '\uF79E',
            'Photo2Fill': '\uF79F',
            'IncreaseIndentText': '\uF7A0',
            'IncreaseIndentArrow': '\uF7A1',
            'DecreaseIndentText': '\uF7A2',
            'DecreaseIndentArrow': '\uF7A3',
            'IncreaseIndentTextMirrored': '\uF7A4',
            'IncreaseIndentArrowMirrored': '\uF7A5',
            'DecreaseIndentTextMirrored': '\uF7A6',
            'DecreaseIndentArrowMirrored': '\uF7A7',
            'CheckListText': '\uF7A8',
            'CheckListCheck': '\uF7A9',
            'CheckListTextMirrored': '\uF7AA',
            'CheckListCheckMirrored': '\uF7AB',
            'NumberSymbol': '\uF7AC',
            'Coupon': '\uF7BC',
            'VerifiedBrand': '\uF7BD',
            'ReleaseGate': '\uF7BE',
            'ReleaseGateCheck': '\uF7BF',
            'ReleaseGateError': '\uF7C0',
            'M365InvoicingLogo': '\uF7C1',
            'RemoveFromShoppingList': '\uF7D5',
            'ShieldAlert': '\uF7D7',
            'FabricTextHighlightComposite': '\uF7DA',
            'Dataflows': '\uF7DD',
            'GenericScanFilled': '\uF7DE',
            'DiagnosticDataBarTooltip': '\uF7DF',
            'SaveToMobile': '\uF7E0',
            'Orientation2': '\uF7E1',
            'ScreenCast': '\uF7E2',
            'ShowGrid': '\uF7E3',
            'SnapToGrid': '\uF7E4',
            'ContactList': '\uF7E5',
            'NewMail': '\uF7EA',
            'EyeShadow': '\uF7EB',
            'FabricFolderConfirm': '\uF7FF',
            'InformationBarriers': '\uF803',
            'CommentActive': '\uF804',
            'ColumnVerticalSectionEdit': '\uF806',
            'WavingHand': '\uF807',
            'ShakeDevice': '\uF80A',
            'SmartGlassRemote': '\uF80B',
            'Rotate90Clockwise': '\uF80D',
            'Rotate90CounterClockwise': '\uF80E',
            'CampaignTemplate': '\uF811',
            'ChartTemplate': '\uF812',
            'PageListFilter': '\uF813',
            'SecondaryNav': '\uF814',
            'ColumnVerticalSection': '\uF81E',
            'SkypeCircleSlash': '\uF825',
            'SkypeSlash': '\uF826'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"7MH3A":[function(require,module,exports) {
"use strict";
// Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fluentui-assets-license
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeIcons = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) { baseUrl = ''; }
    var subset = {
        style: {
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontStyle: 'normal',
            fontWeight: 'normal',
            speak: 'none'
        },
        fontFace: {
            fontFamily: "\"FabricMDL2Icons-17\"",
            src: "url('" + baseUrl + "fabric-icons-17-0c4ed701.woff') format('woff')"
        },
        icons: {
            'CustomizeToolbar': '\uF828',
            'DuplicateRow': '\uF82A',
            'RemoveFromTrash': '\uF82B',
            'MailOptions': '\uF82C',
            'Childof': '\uF82D',
            'Footer': '\uF82E',
            'Header': '\uF82F',
            'BarChartVerticalFill': '\uF830',
            'StackedColumnChart2Fill': '\uF831',
            'PlainText': '\uF834',
            'AccessibiltyChecker': '\uF835',
            'DatabaseSync': '\uF842',
            'ReservationOrders': '\uF845',
            'TabOneColumn': '\uF849',
            'TabTwoColumn': '\uF84A',
            'TabThreeColumn': '\uF84B',
            'BulletedTreeList': '\uF84C',
            'MicrosoftTranslatorLogoGreen': '\uF852',
            'MicrosoftTranslatorLogoBlue': '\uF853',
            'InternalInvestigation': '\uF854',
            'AddReaction': '\uF85D',
            'ContactHeart': '\uF862',
            'VisuallyImpaired': '\uF866',
            'EventToDoLogo': '\uF869',
            'Variable2': '\uF86D',
            'ModelingView': '\uF871',
            'DisconnectVirtualMachine': '\uF873',
            'ReportLock': '\uF875',
            'Uneditable2': '\uF876',
            'Uneditable2Mirrored': '\uF877',
            'BarChartVerticalEdit': '\uF89D',
            'GlobalNavButtonActive': '\uF89F',
            'PollResults': '\uF8A0',
            'Rerun': '\uF8A1',
            'QandA': '\uF8A2',
            'QandAMirror': '\uF8A3',
            'BookAnswers': '\uF8A4',
            'AlertSettings': '\uF8B6',
            'TrimStart': '\uF8BB',
            'TrimEnd': '\uF8BC',
            'TableComputed': '\uF8F5',
            'DecreaseIndentLegacy': '\uE290',
            'IncreaseIndentLegacy': '\uE291',
            'SizeLegacy': '\uE2B2'
        }
    };
    style_utilities_1.registerIcons(subset, options);
}
exports.initializeIcons = initializeIcons;

},{"@fluentui/style-utilities":"J5I0J"}],"4XY5S":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerIconAliases = void 0;
var style_utilities_1 = require("@fluentui/style-utilities");
var registerIconAliases = function () {
    style_utilities_1.registerIconAlias('trash', 'delete');
    style_utilities_1.registerIconAlias('onedrive', 'onedrivelogo');
    style_utilities_1.registerIconAlias('alertsolid12', 'eventdatemissed12');
    style_utilities_1.registerIconAlias('sixpointstar', '6pointstar');
    style_utilities_1.registerIconAlias('twelvepointstar', '12pointstar');
    style_utilities_1.registerIconAlias('toggleon', 'toggleleft');
    style_utilities_1.registerIconAlias('toggleoff', 'toggleright');
};
exports.registerIconAliases = registerIconAliases;
exports.default = exports.registerIconAliases;

},{"@fluentui/style-utilities":"J5I0J"}],"1lIpM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Do not modify this file; it is generated as part of publish.
// The checked in version is a placeholder only and will not be updated.
var set_version_1 = require("@fluentui/set-version");
set_version_1.setVersion('@fluentui/font-icons-mdl2', '8.1.1');

},{"@fluentui/set-version":"12cIw"}],"72iBT":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsDetailsListShimmeredDetailsList = require('./components/DetailsList/ShimmeredDetailsList');
_parcelHelpers.exportAll(_componentsDetailsListShimmeredDetailsList, exports);
var _componentsDetailsListShimmeredDetailsListBase = require('./components/DetailsList/ShimmeredDetailsList.base');
_parcelHelpers.exportAll(_componentsDetailsListShimmeredDetailsListBase, exports);
var _componentsDetailsListShimmeredDetailsListTypes = require('./components/DetailsList/ShimmeredDetailsList.types');
_parcelHelpers.exportAll(_componentsDetailsListShimmeredDetailsListTypes, exports);

},{"./components/DetailsList/ShimmeredDetailsList":"2CeBd","./components/DetailsList/ShimmeredDetailsList.base":"mUkhQ","./components/DetailsList/ShimmeredDetailsList.types":"4LNs5","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2CeBd":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmeredDetailsList", function () {
  return ShimmeredDetailsList;
});
var _Utilities = require('../../Utilities');
var _ShimmeredDetailsListBase = require('./ShimmeredDetailsList.base');
var _ShimmeredDetailsListStyles = require('./ShimmeredDetailsList.styles');
var ShimmeredDetailsList = _Utilities.styled(_ShimmeredDetailsListBase.ShimmeredDetailsListBase, _ShimmeredDetailsListStyles.getStyles, undefined, {
  scope: 'ShimmeredDetailsList'
});

},{"../../Utilities":"1439N","./ShimmeredDetailsList.base":"mUkhQ","./ShimmeredDetailsList.styles":"5OWCv","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"mUkhQ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmeredDetailsListBase", function () {
  return ShimmeredDetailsListBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _Selection = require('../../Selection');
var _DetailsList = require('./DetailsList');
var _Shimmer = require('../../Shimmer');
var _DetailsListTypes = require('./DetailsList.types');
var _DetailsRowStyles = require('./DetailsRow.styles');
var getClassNames = _Utilities.classNamesFunction();
var SHIMMER_INITIAL_ITEMS = 10;
var DEFAULT_SHIMMER_HEIGHT = 7;
var SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;
var ShimmeredDetailsListBase = /** @class*/
(function (_super) {
  _tslib.__extends(ShimmeredDetailsListBase, _super);
  function ShimmeredDetailsListBase(props) {
    var _this = _super.call(this, props) || this;
    _this._onRenderShimmerPlaceholder = function (index, rowProps) {
      var onRenderCustomPlaceholder = _this.props.onRenderCustomPlaceholder;
      var placeholderElements = onRenderCustomPlaceholder ? onRenderCustomPlaceholder(rowProps, index, _this._renderDefaultShimmerPlaceholder) : _this._renderDefaultShimmerPlaceholder(rowProps);
      return _react.createElement(_Shimmer.Shimmer, {
        customElementsGroup: placeholderElements
      });
    };
    _this._renderDefaultShimmerPlaceholder = function (rowProps) {
      var columns = rowProps.columns, compact = rowProps.compact, selectionMode = rowProps.selectionMode, checkboxVisibility = rowProps.checkboxVisibility, _a = rowProps.cellStyleProps, cellStyleProps = _a === void 0 ? _DetailsRowStyles.DEFAULT_CELL_STYLE_PROPS : _a;
      var rowHeight = _DetailsRowStyles.DEFAULT_ROW_HEIGHTS.rowHeight, compactRowHeight = _DetailsRowStyles.DEFAULT_ROW_HEIGHTS.compactRowHeight;
      // 1px to take into account the border-bottom of DetailsRow.
      var gapHeight = compact ? compactRowHeight : rowHeight + 1;
      var shimmerElementsRow = [];
      var showCheckbox = selectionMode !== _Selection.SelectionMode.none && checkboxVisibility !== _DetailsListTypes.CheckboxVisibility.hidden;
      if (showCheckbox) {
        shimmerElementsRow.push(_react.createElement(_Shimmer.ShimmerElementsGroup, {
          key: 'checkboxGap',
          shimmerElements: [{
            type: _Shimmer.ShimmerElementType.gap,
            width: '40px',
            height: gapHeight
          }]
        }));
      }
      columns.forEach(function (column, columnIdx) {
        var shimmerElements = [];
        var groupWidth = cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + column.calculatedWidth + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);
        shimmerElements.push({
          type: _Shimmer.ShimmerElementType.gap,
          width: cellStyleProps.cellLeftPadding,
          height: gapHeight
        });
        if (column.isIconOnly) {
          shimmerElements.push({
            type: _Shimmer.ShimmerElementType.line,
            width: column.calculatedWidth,
            height: column.calculatedWidth
          });
          shimmerElements.push({
            type: _Shimmer.ShimmerElementType.gap,
            width: cellStyleProps.cellRightPadding,
            height: gapHeight
          });
        } else {
          shimmerElements.push({
            type: _Shimmer.ShimmerElementType.line,
            width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,
            height: DEFAULT_SHIMMER_HEIGHT
          });
          shimmerElements.push({
            type: _Shimmer.ShimmerElementType.gap,
            width: cellStyleProps.cellRightPadding + (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),
            height: gapHeight
          });
        }
        shimmerElementsRow.push(_react.createElement(_Shimmer.ShimmerElementsGroup, {
          key: columnIdx,
          width: groupWidth + "px",
          shimmerElements: shimmerElements
        }));
      });
      // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave
      // until the column resizing logic is done.
      shimmerElementsRow.push(_react.createElement(_Shimmer.ShimmerElementsGroup, {
        key: 'endGap',
        width: '100%',
        shimmerElements: [{
          type: _Shimmer.ShimmerElementType.gap,
          width: '100%',
          height: gapHeight
        }]
      }));
      return _react.createElement("div", {
        style: {
          display: 'flex'
        }
      }, shimmerElementsRow);
    };
    _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);
    return _this;
  }
  ShimmeredDetailsListBase.prototype.render = function () {
    var _a = this.props, detailsListStyles = _a.detailsListStyles, enableShimmer = _a.enableShimmer, items = _a.items, listProps = _a.listProps, onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder, removeFadingOverlay = _a.removeFadingOverlay, shimmerLines = _a.shimmerLines, styles = _a.styles, theme = _a.theme, ariaLabelForGrid = _a.ariaLabelForGrid, ariaLabelForShimmer = _a.ariaLabelForShimmer, restProps = _tslib.__rest(_a, ["detailsListStyles", "enableShimmer", "items", "listProps", "onRenderCustomPlaceholder", "removeFadingOverlay", "shimmerLines", "styles", "theme", "ariaLabelForGrid", "ariaLabelForShimmer"]);
    var listClassName = listProps && listProps.className;
    this._classNames = getClassNames(styles, {
      theme: theme
    });
    var newListProps = _tslib.__assign(_tslib.__assign({}, listProps), {
      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on
      // and the overlay is not disabled by `removeFadingOverlay` prop.
      className: enableShimmer && !removeFadingOverlay ? _Utilities.css(this._classNames.root, listClassName) : listClassName
    });
    return _react.createElement(_DetailsList.DetailsList, _tslib.__assign({}, restProps, {
      styles: detailsListStyles,
      items: enableShimmer ? this._shimmerItems : items,
      isPlaceholderData: enableShimmer,
      ariaLabelForGrid: enableShimmer && ariaLabelForShimmer || ariaLabelForGrid,
      onRenderMissingItem: this._onRenderShimmerPlaceholder,
      listProps: newListProps
    }));
  };
  return ShimmeredDetailsListBase;
})(_react.Component);

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","../../Selection":"3dSNL","./DetailsList":"1tXCx","../../Shimmer":"4wWJ8","./DetailsList.types":"2BjaS","./DetailsRow.styles":"1FMwI","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4wWJ8":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _componentsShimmerIndex = require('./components/Shimmer/index');
_parcelHelpers.exportAll(_componentsShimmerIndex, exports);

},{"./components/Shimmer/index":"2Adq5","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2Adq5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _Shimmer = require('./Shimmer');
_parcelHelpers.exportAll(_Shimmer, exports);
var _ShimmerBase = require('./Shimmer.base');
_parcelHelpers.exportAll(_ShimmerBase, exports);
var _ShimmerTypes = require('./Shimmer.types');
_parcelHelpers.exportAll(_ShimmerTypes, exports);
var _ShimmerLineShimmerLine = require('./ShimmerLine/ShimmerLine');
_parcelHelpers.exportAll(_ShimmerLineShimmerLine, exports);
var _ShimmerLineShimmerLineBase = require('./ShimmerLine/ShimmerLine.base');
_parcelHelpers.exportAll(_ShimmerLineShimmerLineBase, exports);
var _ShimmerLineShimmerLineTypes = require('./ShimmerLine/ShimmerLine.types');
_parcelHelpers.exportAll(_ShimmerLineShimmerLineTypes, exports);
var _ShimmerCircleShimmerCircle = require('./ShimmerCircle/ShimmerCircle');
_parcelHelpers.exportAll(_ShimmerCircleShimmerCircle, exports);
var _ShimmerCircleShimmerCircleBase = require('./ShimmerCircle/ShimmerCircle.base');
_parcelHelpers.exportAll(_ShimmerCircleShimmerCircleBase, exports);
var _ShimmerCircleShimmerCircleTypes = require('./ShimmerCircle/ShimmerCircle.types');
_parcelHelpers.exportAll(_ShimmerCircleShimmerCircleTypes, exports);
var _ShimmerGapShimmerGap = require('./ShimmerGap/ShimmerGap');
_parcelHelpers.exportAll(_ShimmerGapShimmerGap, exports);
var _ShimmerGapShimmerGapBase = require('./ShimmerGap/ShimmerGap.base');
_parcelHelpers.exportAll(_ShimmerGapShimmerGapBase, exports);
var _ShimmerGapShimmerGapTypes = require('./ShimmerGap/ShimmerGap.types');
_parcelHelpers.exportAll(_ShimmerGapShimmerGapTypes, exports);
var _ShimmerElementsGroupShimmerElementsGroup = require('./ShimmerElementsGroup/ShimmerElementsGroup');
_parcelHelpers.exportAll(_ShimmerElementsGroupShimmerElementsGroup, exports);
var _ShimmerElementsGroupShimmerElementsGroupBase = require('./ShimmerElementsGroup/ShimmerElementsGroup.base');
_parcelHelpers.exportAll(_ShimmerElementsGroupShimmerElementsGroupBase, exports);
var _ShimmerElementsGroupShimmerElementsGroupTypes = require('./ShimmerElementsGroup/ShimmerElementsGroup.types');
_parcelHelpers.exportAll(_ShimmerElementsGroupShimmerElementsGroupTypes, exports);

},{"./Shimmer":"4GqgM","./Shimmer.base":"1mVjK","./Shimmer.types":"2RRKZ","./ShimmerLine/ShimmerLine":"6hkMc","./ShimmerLine/ShimmerLine.base":"3X7Z7","./ShimmerLine/ShimmerLine.types":"4Ud3O","./ShimmerCircle/ShimmerCircle":"5mrpZ","./ShimmerCircle/ShimmerCircle.base":"2xoYR","./ShimmerCircle/ShimmerCircle.types":"6JwYC","./ShimmerGap/ShimmerGap":"tmozY","./ShimmerGap/ShimmerGap.base":"6JWnt","./ShimmerGap/ShimmerGap.types":"3k7EF","./ShimmerElementsGroup/ShimmerElementsGroup":"4hmmx","./ShimmerElementsGroup/ShimmerElementsGroup.base":"4FZgj","./ShimmerElementsGroup/ShimmerElementsGroup.types":"7K2KQ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4GqgM":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Shimmer", function () {
  return Shimmer;
});
var _Utilities = require('../../Utilities');
var _ShimmerStyles = require('./Shimmer.styles');
var _ShimmerBase = require('./Shimmer.base');
var Shimmer = _Utilities.styled(_ShimmerBase.ShimmerBase, _ShimmerStyles.getStyles, undefined, {
  scope: 'Shimmer'
});

},{"../../Utilities":"1439N","./Shimmer.styles":"42QwM","./Shimmer.base":"1mVjK","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"42QwM":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _tslib = require("tslib");
var _Styling = require('../../Styling');
var _Utilities = require('../../Utilities');
var GlobalClassNames = {
  root: 'ms-Shimmer-container',
  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',
  shimmerGradient: 'ms-Shimmer-shimmerGradient',
  dataWrapper: 'ms-Shimmer-dataWrapper'
};
var BACKGROUND_OFF_SCREEN_POSITION = '100%';
var shimmerAnimation = _Utilities.memoizeFunction(function () {
  return _Styling.keyframes({
    '0%': {
      transform: "translateX(-" + BACKGROUND_OFF_SCREEN_POSITION + ")"
    },
    '100%': {
      transform: "translateX(" + BACKGROUND_OFF_SCREEN_POSITION + ")"
    }
  });
});
var shimmerAnimationRTL = _Utilities.memoizeFunction(function () {
  return _Styling.keyframes({
    '100%': {
      transform: "translateX(-" + BACKGROUND_OFF_SCREEN_POSITION + ")"
    },
    '0%': {
      transform: "translateX(" + BACKGROUND_OFF_SCREEN_POSITION + ")"
    }
  });
});
function getStyles(props) {
  var _a;
  var isDataLoaded = props.isDataLoaded, className = props.className, theme = props.theme, transitionAnimationInterval = props.transitionAnimationInterval, shimmerColor = props.shimmerColor, shimmerWaveColor = props.shimmerWaveColor;
  var semanticColors = theme.semanticColors;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var isRTL = _Utilities.getRTL(theme);
  return {
    root: [classNames.root, theme.fonts.medium, {
      position: 'relative',
      height: 'auto'
    }, className],
    shimmerWrapper: [classNames.shimmerWrapper, {
      position: 'relative',
      overflow: 'hidden',
      transform: 'translateZ(0)',
      backgroundColor: shimmerColor || semanticColors.disabledBackground,
      transition: "opacity " + transitionAnimationInterval + "ms",
      selectors: (_a = {
        '> *': {
          transform: 'translateZ(0)'
        }
      }, _a[_Styling.HighContrastSelector] = _tslib.__assign({
        background: "WindowText\n                        linear-gradient(\n                          to right,\n                          transparent 0%,\n                          Window 50%,\n                          transparent 100%)\n                        0 0 / 90% 100%\n                        no-repeat"
      }, _Styling.getHighContrastNoAdjustStyle()), _a)
    }, isDataLoaded && ({
      opacity: '0',
      position: 'absolute',
      top: '0',
      bottom: '0',
      left: '0',
      right: '0'
    })],
    shimmerGradient: [classNames.shimmerGradient, {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      background: (shimmerColor || semanticColors.disabledBackground) + "\n                      linear-gradient(\n                        to right,\n                        " + (shimmerColor || semanticColors.disabledBackground) + " 0%,\n                        " + (shimmerWaveColor || semanticColors.bodyDivider) + " 50%,\n                        " + (shimmerColor || semanticColors.disabledBackground) + " 100%)\n                      0 0 / 90% 100%\n                      no-repeat",
      transform: "translateX(-" + BACKGROUND_OFF_SCREEN_POSITION + ")",
      animationDuration: '2s',
      animationTimingFunction: 'ease-in-out',
      animationDirection: 'normal',
      animationIterationCount: 'infinite',
      animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation()
    }],
    dataWrapper: [classNames.dataWrapper, {
      position: 'absolute',
      top: '0',
      bottom: '0',
      left: '0',
      right: '0',
      opacity: '0',
      background: 'none',
      backgroundColor: 'transparent',
      border: 'none',
      transition: "opacity " + transitionAnimationInterval + "ms"
    }, isDataLoaded && ({
      opacity: '1',
      position: 'static'
    })],
    screenReaderText: _Styling.hiddenContentStyle
  };
}

},{"tslib":"6ZIET","../../Styling":"5q33X","../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1mVjK":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerBase", function () {
  return ShimmerBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../Utilities');
var _ShimmerElementsGroupShimmerElementsGroup = require('./ShimmerElementsGroup/ShimmerElementsGroup');
var _fluentuiReactHooks = require('@fluentui/react-hooks');
var TRANSITION_ANIMATION_INTERVAL = 200;
/*ms*/
var COMPONENT_NAME = 'Shimmer';
var getClassNames = _Utilities.classNamesFunction();
var ShimmerBase = _react.forwardRef(function (props, ref) {
  var styles = props.styles, shimmerElements = props.shimmerElements, children = props.children, width = props.width, className = props.className, customElementsGroup = props.customElementsGroup, theme = props.theme, ariaLabel = props.ariaLabel, shimmerColors = props.shimmerColors, _a = props.isDataLoaded, isDataLoaded = _a === void 0 ? false : _a;
  var divProps = _Utilities.getNativeProps(props, _Utilities.divProperties);
  var classNames = getClassNames(styles, {
    theme: theme,
    isDataLoaded: isDataLoaded,
    className: className,
    transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,
    shimmerColor: shimmerColors && shimmerColors.shimmer,
    shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave
  });
  var internalState = _fluentuiReactHooks.useConst({
    lastTimeoutId: 0
  });
  var _b = _fluentuiReactHooks.useSetTimeout(), setTimeout = _b.setTimeout, clearTimeout = _b.clearTimeout;
  /**
  * Flag for knowing when to remove the shimmerWrapper from the DOM.
  */
  var _c = _react.useState(isDataLoaded), contentLoaded = _c[0], setContentLoaded = _c[1];
  var divStyleProp = {
    width: width ? width : '100%'
  };
  _react.useEffect(function () {
    if (isDataLoaded !== contentLoaded) {
      if (isDataLoaded) {
        internalState.lastTimeoutId = setTimeout(function () {
          setContentLoaded(true);
        }, TRANSITION_ANIMATION_INTERVAL);
        return function () {
          return clearTimeout(internalState.lastTimeoutId);
        };
      } else {
        setContentLoaded(false);
      }
    }
  }, [isDataLoaded]);
  return _react.createElement("div", _tslib.__assign({}, divProps, {
    className: classNames.root,
    ref: ref
  }), !contentLoaded && _react.createElement("div", {
    style: divStyleProp,
    className: classNames.shimmerWrapper
  }, _react.createElement("div", {
    className: classNames.shimmerGradient
  }), customElementsGroup ? customElementsGroup : _react.createElement(_ShimmerElementsGroupShimmerElementsGroup.ShimmerElementsGroup, {
    shimmerElements: shimmerElements,
    backgroundColor: shimmerColors && shimmerColors.background
  })), children && _react.createElement("div", {
    className: classNames.dataWrapper
  }, children), ariaLabel && !isDataLoaded && _react.createElement("div", {
    role: "status",
    "aria-live": "polite"
  }, _react.createElement(_Utilities.DelayedRender, null, _react.createElement("div", {
    className: classNames.screenReaderText
  }, ariaLabel))));
});
ShimmerBase.displayName = COMPONENT_NAME;

},{"tslib":"6ZIET","react":"4g1R3","../../Utilities":"1439N","./ShimmerElementsGroup/ShimmerElementsGroup":"4hmmx","@fluentui/react-hooks":"1pHwU","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4hmmx":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerElementsGroup", function () {
  return ShimmerElementsGroup;
});
var _Utilities = require('../../../Utilities');
var _ShimmerElementsGroupBase = require('./ShimmerElementsGroup.base');
var _ShimmerElementsGroupStyles = require('./ShimmerElementsGroup.styles');
var ShimmerElementsGroup = _Utilities.styled(_ShimmerElementsGroupBase.ShimmerElementsGroupBase, _ShimmerElementsGroupStyles.getStyles, undefined, {
  scope: 'ShimmerElementsGroup'
});

},{"../../../Utilities":"1439N","./ShimmerElementsGroup.base":"4FZgj","./ShimmerElementsGroup.styles":"5jPfW","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4FZgj":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerElementsGroupBase", function () {
  return ShimmerElementsGroupBase;
});
var _tslib = require("tslib");
var _react = require('react');
var _Utilities = require('../../../Utilities');
var _ShimmerTypes = require('../Shimmer.types');
var _ShimmerLineShimmerLine = require('../ShimmerLine/ShimmerLine');
var _ShimmerGapShimmerGap = require('../ShimmerGap/ShimmerGap');
var _ShimmerCircleShimmerCircle = require('../ShimmerCircle/ShimmerCircle');
var getClassNames = _Utilities.classNamesFunction();
var ShimmerElementsGroupBase = function (props) {
  var styles = props.styles, _a = props.width, width = _a === void 0 ? 'auto' : _a, shimmerElements = props.shimmerElements, _b = props.rowHeight, rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b, _c = props.flexWrap, flexWrap = _c === void 0 ? false : _c, theme = props.theme, backgroundColor = props.backgroundColor;
  var classNames = getClassNames(styles, {
    theme: theme,
    flexWrap: flexWrap
  });
  return _react.createElement("div", {
    style: {
      width: width
    },
    className: classNames.root
  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));
};
function getRenderedElements(shimmerElements, backgroundColor, rowHeight) {
  var renderedElements = shimmerElements ? shimmerElements.map(// false positive
  // eslint-disable-next-line array-callback-return
  function (element, index) {
    var type = element.type, filteredElem = _tslib.__rest(element, ["type"]);
    var verticalAlign = filteredElem.verticalAlign, height = filteredElem.height;
    var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);
    switch (element.type) {
      case _ShimmerTypes.ShimmerElementType.circle:
        return _react.createElement(_ShimmerCircleShimmerCircle.ShimmerCircle, _tslib.__assign({
          key: index
        }, filteredElem, {
          styles: styles
        }));
      case _ShimmerTypes.ShimmerElementType.gap:
        return _react.createElement(_ShimmerGapShimmerGap.ShimmerGap, _tslib.__assign({
          key: index
        }, filteredElem, {
          styles: styles
        }));
      case _ShimmerTypes.ShimmerElementType.line:
        return _react.createElement(_ShimmerLineShimmerLine.ShimmerLine, _tslib.__assign({
          key: index
        }, filteredElem, {
          styles: styles
        }));
    }
  }) : _react.createElement(_ShimmerLineShimmerLine.ShimmerLine, {
    height: _ShimmerTypes.ShimmerElementsDefaultHeights.line
  });
  return renderedElements;
}
var getElementStyles = _Utilities.memoizeFunction(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {
  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;
  var borderStyle;
  if (!verticalAlign || verticalAlign === 'center') {
    borderStyle = {
      borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + "px",
      borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + "px"
    };
  } else if (verticalAlign && verticalAlign === 'top') {
    borderStyle = {
      borderBottomWidth: dif + "px",
      borderTopWidth: "0px"
    };
  } else if (verticalAlign && verticalAlign === 'bottom') {
    borderStyle = {
      borderBottomWidth: "0px",
      borderTopWidth: dif + "px"
    };
  }
  if (backgroundColor) {
    switch (elementType) {
      case _ShimmerTypes.ShimmerElementType.circle:
        return {
          root: _tslib.__assign(_tslib.__assign({}, borderStyle), {
            borderColor: backgroundColor
          }),
          svg: {
            fill: backgroundColor
          }
        };
      case _ShimmerTypes.ShimmerElementType.gap:
        return {
          root: _tslib.__assign(_tslib.__assign({}, borderStyle), {
            borderColor: backgroundColor,
            backgroundColor: backgroundColor
          })
        };
      case _ShimmerTypes.ShimmerElementType.line:
        return {
          root: _tslib.__assign(_tslib.__assign({}, borderStyle), {
            borderColor: backgroundColor
          }),
          topLeftCorner: {
            fill: backgroundColor
          },
          topRightCorner: {
            fill: backgroundColor
          },
          bottomLeftCorner: {
            fill: backgroundColor
          },
          bottomRightCorner: {
            fill: backgroundColor
          }
        };
    }
  }
  return {
    root: borderStyle
  };
});
/**
* User should not worry to provide which of the elements is the highest so we do the calculation for him.
* Plus if user forgot to specify the height we assign their defaults.
*/
function findMaxElementHeight(shimmerElements) {
  var shimmerElementsDefaulted = shimmerElements.map(function (element) {
    switch (element.type) {
      case _ShimmerTypes.ShimmerElementType.circle:
        if (!element.height) {
          element.height = _ShimmerTypes.ShimmerElementsDefaultHeights.circle;
        }
        break;
      case _ShimmerTypes.ShimmerElementType.line:
        if (!element.height) {
          element.height = _ShimmerTypes.ShimmerElementsDefaultHeights.line;
        }
        break;
      case _ShimmerTypes.ShimmerElementType.gap:
        if (!element.height) {
          element.height = _ShimmerTypes.ShimmerElementsDefaultHeights.gap;
        }
        break;
    }
    return element;
  });
  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {
    return next.height ? next.height > acc ? next.height : acc : acc;
  }, 0);
  return rowHeight;
}

},{"tslib":"6ZIET","react":"4g1R3","../../../Utilities":"1439N","../Shimmer.types":"2RRKZ","../ShimmerLine/ShimmerLine":"6hkMc","../ShimmerGap/ShimmerGap":"tmozY","../ShimmerCircle/ShimmerCircle":"5mrpZ","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2RRKZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerElementType", function () {
  return ShimmerElementType;
});
_parcelHelpers.export(exports, "ShimmerElementsDefaultHeights", function () {
  return ShimmerElementsDefaultHeights;
});
var ShimmerElementType;
(function (ShimmerElementType) {
  /**
  * Line element type
  */
  ShimmerElementType[ShimmerElementType["line"] = 1] = "line";
  /**
  * Circle element type
  */
  ShimmerElementType[ShimmerElementType["circle"] = 2] = "circle";
  /**
  * Gap element type
  */
  ShimmerElementType[ShimmerElementType["gap"] = 3] = "gap";
})(ShimmerElementType || (ShimmerElementType = {}));
var ShimmerElementsDefaultHeights;
(function (ShimmerElementsDefaultHeights) {
  /**
  * Default height of the line element when not provided by user: 16px
  */
  ShimmerElementsDefaultHeights[ShimmerElementsDefaultHeights["line"] = 16] = "line";
  /**
  * Default height of the gap element when not provided by user: 16px
  */
  ShimmerElementsDefaultHeights[ShimmerElementsDefaultHeights["gap"] = 16] = "gap";
  /**
  * Default height of the circle element when not provided by user: 24px
  */
  ShimmerElementsDefaultHeights[ShimmerElementsDefaultHeights["circle"] = 24] = "circle";
})(ShimmerElementsDefaultHeights || (ShimmerElementsDefaultHeights = {}));

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6hkMc":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerLine", function () {
  return ShimmerLine;
});
var _Utilities = require('../../../Utilities');
var _ShimmerLineBase = require('./ShimmerLine.base');
var _ShimmerLineStyles = require('./ShimmerLine.styles');
var ShimmerLine = _Utilities.styled(_ShimmerLineBase.ShimmerLineBase, _ShimmerLineStyles.getStyles, undefined, {
  scope: 'ShimmerLine'
});

},{"../../../Utilities":"1439N","./ShimmerLine.base":"3X7Z7","./ShimmerLine.styles":"1Tfwo","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3X7Z7":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerLineBase", function () {
  return ShimmerLineBase;
});
var _react = require('react');
var _Utilities = require('../../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var ShimmerLineBase = function (props) {
  // eslint-disable-next-line deprecation/deprecation
  var height = props.height, styles = props.styles, _a = props.width, width = _a === void 0 ? '100%' : _a, borderStyle = props.borderStyle, theme = props.theme;
  var classNames = getClassNames(styles, {
    theme: theme,
    height: height,
    borderStyle: borderStyle
  });
  return _react.createElement("div", {
    style: {
      width: width,
      minWidth: typeof width === 'number' ? width + "px" : 'auto'
    },
    className: classNames.root
  }, _react.createElement("svg", {
    width: "2",
    height: "2",
    className: classNames.topLeftCorner
  }, _react.createElement("path", {
    d: "M0 2 A 2 2, 0, 0, 1, 2 0 L 0 0 Z"
  })), _react.createElement("svg", {
    width: "2",
    height: "2",
    className: classNames.topRightCorner
  }, _react.createElement("path", {
    d: "M0 0 A 2 2, 0, 0, 1, 2 2 L 2 0 Z"
  })), _react.createElement("svg", {
    width: "2",
    height: "2",
    className: classNames.bottomRightCorner
  }, _react.createElement("path", {
    d: "M2 0 A 2 2, 0, 0, 1, 0 2 L 2 2 Z"
  })), _react.createElement("svg", {
    width: "2",
    height: "2",
    className: classNames.bottomLeftCorner
  }, _react.createElement("path", {
    d: "M2 2 A 2 2, 0, 0, 1, 0 0 L 0 2 Z"
  })));
};

},{"react":"4g1R3","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1Tfwo":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var GlobalClassNames = {
  root: 'ms-ShimmerLine-root',
  topLeftCorner: 'ms-ShimmerLine-topLeftCorner',
  topRightCorner: 'ms-ShimmerLine-topRightCorner',
  bottomLeftCorner: 'ms-ShimmerLine-bottomLeftCorner',
  bottomRightCorner: 'ms-ShimmerLine-bottomRightCorner'
};
function getStyles(props) {
  var _a;
  // eslint-disable-next-line deprecation/deprecation
  var height = props.height, borderStyle = props.borderStyle, theme = props.theme;
  var semanticColors = theme.semanticColors;
  var globalClassNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var borderStyles = borderStyle || ({});
  var sharedCornerStyles = {
    position: 'absolute',
    fill: semanticColors.bodyBackground
  };
  return {
    root: [globalClassNames.root, theme.fonts.medium, {
      height: height + "px",
      boxSizing: 'content-box',
      position: 'relative',
      borderTopStyle: 'solid',
      borderBottomStyle: 'solid',
      borderColor: semanticColors.bodyBackground,
      borderWidth: 0,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        borderColor: 'Window',
        selectors: {
          '> *': {
            fill: 'Window'
          }
        }
      }, _a)
    }, borderStyles],
    topLeftCorner: [globalClassNames.topLeftCorner, {
      top: '0',
      left: '0'
    }, sharedCornerStyles],
    topRightCorner: [globalClassNames.topRightCorner, {
      top: '0',
      right: '0'
    }, sharedCornerStyles],
    bottomRightCorner: [globalClassNames.bottomRightCorner, {
      bottom: '0',
      right: '0'
    }, sharedCornerStyles],
    bottomLeftCorner: [globalClassNames.bottomLeftCorner, {
      bottom: '0',
      left: '0'
    }, sharedCornerStyles]
  };
}

},{"../../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"tmozY":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerGap", function () {
  return ShimmerGap;
});
var _Utilities = require('../../../Utilities');
var _ShimmerGapBase = require('./ShimmerGap.base');
var _ShimmerGapStyles = require('./ShimmerGap.styles');
var ShimmerGap = _Utilities.styled(_ShimmerGapBase.ShimmerGapBase, _ShimmerGapStyles.getStyles, undefined, {
  scope: 'ShimmerGap'
});

},{"../../../Utilities":"1439N","./ShimmerGap.base":"6JWnt","./ShimmerGap.styles":"4XOa6","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6JWnt":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerGapBase", function () {
  return ShimmerGapBase;
});
var _react = require('react');
var _Utilities = require('../../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var ShimmerGapBase = function (props) {
  // eslint-disable-next-line deprecation/deprecation
  var height = props.height, styles = props.styles, _a = props.width, width = _a === void 0 ? '10px' : _a, borderStyle = props.borderStyle, theme = props.theme;
  var classNames = getClassNames(styles, {
    theme: theme,
    height: height,
    borderStyle: borderStyle
  });
  return _react.createElement("div", {
    style: {
      width: width,
      minWidth: typeof width === 'number' ? width + "px" : 'auto'
    },
    className: classNames.root
  });
};

},{"react":"4g1R3","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4XOa6":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var GlobalClassNames = {
  root: 'ms-ShimmerGap-root'
};
function getStyles(props) {
  var _a;
  // eslint-disable-next-line deprecation/deprecation
  var height = props.height, borderStyle = props.borderStyle, theme = props.theme;
  var semanticColors = theme.semanticColors;
  var globalClassNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var borderStyles = borderStyle || ({});
  return {
    root: [globalClassNames.root, theme.fonts.medium, {
      backgroundColor: semanticColors.bodyBackground,
      height: height + "px",
      boxSizing: 'content-box',
      borderTopStyle: 'solid',
      borderBottomStyle: 'solid',
      borderColor: semanticColors.bodyBackground,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        backgroundColor: 'Window',
        borderColor: 'Window'
      }, _a)
    }, borderStyles]
  };
}

},{"../../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5mrpZ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerCircle", function () {
  return ShimmerCircle;
});
var _Utilities = require('../../../Utilities');
var _ShimmerCircleStyles = require('./ShimmerCircle.styles');
var _ShimmerCircleBase = require('./ShimmerCircle.base');
var ShimmerCircle = _Utilities.styled(_ShimmerCircleBase.ShimmerCircleBase, _ShimmerCircleStyles.getStyles, undefined, {
  scope: 'ShimmerCircle'
});

},{"../../../Utilities":"1439N","./ShimmerCircle.styles":"1JwBD","./ShimmerCircle.base":"2xoYR","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"1JwBD":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var GlobalClassNames = {
  root: 'ms-ShimmerCircle-root',
  svg: 'ms-ShimmerCircle-svg'
};
function getStyles(props) {
  var _a, _b;
  // eslint-disable-next-line deprecation/deprecation
  var height = props.height, borderStyle = props.borderStyle, theme = props.theme;
  var semanticColors = theme.semanticColors;
  var globalClassNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  var borderStyles = borderStyle || ({});
  return {
    root: [globalClassNames.root, theme.fonts.medium, {
      width: height + "px",
      height: height + "px",
      minWidth: height + "px",
      boxSizing: 'content-box',
      borderTopStyle: 'solid',
      borderBottomStyle: 'solid',
      borderColor: semanticColors.bodyBackground,
      selectors: (_a = {}, _a[_Styling.HighContrastSelector] = {
        borderColor: 'Window'
      }, _a)
    }, borderStyles],
    svg: [globalClassNames.svg, {
      display: 'block',
      fill: semanticColors.bodyBackground,
      selectors: (_b = {}, _b[_Styling.HighContrastSelector] = {
        fill: 'Window'
      }, _b)
    }]
  };
}

},{"../../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"2xoYR":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ShimmerCircleBase", function () {
  return ShimmerCircleBase;
});
var _react = require('react');
var _Utilities = require('../../../Utilities');
var getClassNames = _Utilities.classNamesFunction();
var ShimmerCircleBase = function (props) {
  // eslint-disable-next-line deprecation/deprecation
  var height = props.height, styles = props.styles, borderStyle = props.borderStyle, theme = props.theme;
  var classNames = getClassNames(styles, {
    theme: theme,
    height: height,
    borderStyle: borderStyle
  });
  return _react.createElement("div", {
    className: classNames.root
  }, _react.createElement("svg", {
    viewBox: "0 0 10 10",
    width: height,
    height: height,
    className: classNames.svg
  }, _react.createElement("path", {
    d: "M0,0 L10,0 L10,10 L0,10 L0,0 Z M0,5 C0,7.76142375 2.23857625,10 5,10 C7.76142375,10 10,7.76142375 10,5 C10,2.23857625 7.76142375,2.22044605e-16 5,0 C2.23857625,-2.22044605e-16 0,2.23857625 0,5 L0,5 Z"
  })));
};

},{"react":"4g1R3","../../../Utilities":"1439N","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5jPfW":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var _Styling = require('../../../Styling');
var GlobalClassNames = {
  root: 'ms-ShimmerElementsGroup-root'
};
function getStyles(props) {
  var flexWrap = props.flexWrap, theme = props.theme;
  var classNames = _Styling.getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [classNames.root, theme.fonts.medium, {
      display: 'flex',
      alignItems: 'center',
      flexWrap: flexWrap ? 'wrap' : 'nowrap',
      position: 'relative'
    }]
  };
}

},{"../../../Styling":"5q33X","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4Ud3O":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"6JwYC":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"3k7EF":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"7K2KQ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5OWCv":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getStyles", function () {
  return getStyles;
});
var getStyles = function (props) {
  var theme = props.theme;
  var palette = theme.palette;
  return {
    root: {
      position: 'relative',
      selectors: {
        ':after': {
          content: '""',
          position: 'absolute',
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          // eslint-disable-next-line @fluentui/max-len
          backgroundImage: "linear-gradient(to bottom, transparent 30%, " + palette.whiteTranslucent40 + " 65%," + palette.white + " 100%)"
        }
      }
    }
  };
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"4LNs5":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}],"5XsXs":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "RetrieveAllEntities", function () {
  return RetrieveAllEntities;
});
var _xrmWebapiClient = require("xrm-webapi-client");
var _xrmWebapiClientDefault = _parcelHelpers.interopDefault(_xrmWebapiClient);
let RetrieveAllEntities;
(function (_RetrieveAllEntities) {
  const Invoke = _RetrieveAllEntities.Invoke = params => {
    const req = _xrmWebapiClientDefault.default.Requests.RetrieveAllEntitiesRequest.with({
      urlParams: {
        EntityFilters: `Microsoft.Dynamics.CRM.EntityFilters'${params.EntityFilters}'`,
        RetrieveAsIfPublished: false
      },
      headers: [{
        key: 'Access-Control-Allow-Origin',
        value: '*.crm.dynamics.com'
      }, {
        key: 'Access-Control-Allow-Credentials',
        value: 'true'
      }, {
        key: 'Access-Control-Allow-Methods',
        value: 'GET, POST, PUT, DELETE, OPTIONS'
      }, {
        key: 'Access-Control-Allow-Headers',
        value: 'Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token'
      }]
    });
    return _xrmWebapiClientDefault.default.Execute(req);
  };
})(RetrieveAllEntities || (RetrieveAllEntities = {}));

},{"xrm-webapi-client":"3LRkV","@parcel/transformer-js/lib/esmodule-helpers.js":"wxgmP"}]},["1Ru6g","5LP9v"], "5LP9v", "parcelRequire7130")

